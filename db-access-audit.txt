# Direct Database Access Audit Results
## Timestamp: Mon May 19 23:30:41 PDT 2025

### DbContext Usage
```
./ConduitLLM.WebUI/Data/EntityFrameworkConfigurationProvider.cs:/// Loads configuration values from the ConfigurationDbContext.
./ConduitLLM.WebUI/Data/EntityFrameworkConfigurationProvider.cs:        var builder = new DbContextOptionsBuilder<ConfigurationDbContext>();
./ConduitLLM.WebUI/Data/EntityFrameworkConfigurationProvider.cs:        // Create a single instance of the consolidated ConfigurationDbContext
./ConduitLLM.WebUI/Data/EntityFrameworkConfigurationProvider.cs:        using var dbContext = new ConfigurationDbContext(builder.Options);
./ConduitLLM.WebUI/Services/HttpTimeoutConfigurationService.cs:    private readonly IDbContextFactory<ConduitLLM.Configuration.ConfigurationDbContext> _configContextFactory; 
./ConduitLLM.WebUI/Services/HttpTimeoutConfigurationService.cs:        IDbContextFactory<ConduitLLM.Configuration.ConfigurationDbContext> configContextFactory, 
./ConduitLLM.WebUI/Services/HttpTimeoutConfigurationService.cs:    private async Task UpdateSettingAsync(ConduitLLM.Configuration.ConfigurationDbContext dbContext, string key, string value) 
./ConduitLLM.WebUI/Services/VirtualKeyMaintenanceService.cs:                var dbContext = scope.ServiceProvider.GetRequiredService<ConduitLLM.Configuration.ConfigurationDbContext>(); 
./ConduitLLM.WebUI/Services/VirtualKeyMaintenanceService.cs:    private async Task ResetExpiredBudgets(ConduitLLM.Configuration.ConfigurationDbContext dbContext, IServiceProvider serviceProvider, CancellationToken stoppingToken) 
./ConduitLLM.WebUI/Services/VirtualKeyMaintenanceService.cs:    private async Task HandleExpiredKeys(ConduitLLM.Configuration.ConfigurationDbContext dbContext, IServiceProvider serviceProvider, CancellationToken stoppingToken) 
./ConduitLLM.WebUI/Services/VirtualKeyMaintenanceService.cs:    private async Task CheckKeysApproachingBudgetLimits(ConduitLLM.Configuration.ConfigurationDbContext dbContext, IServiceProvider serviceProvider, CancellationToken stoppingToken) 
./ConduitLLM.WebUI/Services/DbRouterConfigRepository.cs:        private readonly IDbContextFactory<ConfigurationDbContext> _dbContextFactory;
./ConduitLLM.WebUI/Services/DbRouterConfigRepository.cs:            IDbContextFactory<ConfigurationDbContext> dbContextFactory,
./ConduitLLM.WebUI/Services/RouterService.cs:        private readonly IDbContextFactory<ConduitLLM.Configuration.ConfigurationDbContext> _configContextFactory; 
./ConduitLLM.WebUI/Services/RouterService.cs:            IDbContextFactory<ConduitLLM.Configuration.ConfigurationDbContext> configContextFactory, 
./ConduitLLM.WebUI/Services/RouterOptionsService.cs:        private readonly IDbContextFactory<ConfigurationDbContext> _dbContextFactory;
./ConduitLLM.WebUI/Services/RouterOptionsService.cs:            IDbContextFactory<ConfigurationDbContext> dbContextFactory,
./ConduitLLM.WebUI/Services/ProviderHealthMonitorService.cs:                var dbContextFactory = scope.ServiceProvider.GetRequiredService<IDbContextFactory<ConduitLLM.Configuration.ConfigurationDbContext>>();
./ConduitLLM.WebUI/Services/ProviderStatusService.cs:        private readonly IDbContextFactory<ConduitLLM.Configuration.ConfigurationDbContext> _configContextFactory;
./ConduitLLM.WebUI/Services/ProviderStatusService.cs:            IDbContextFactory<ConduitLLM.Configuration.ConfigurationDbContext> configContextFactory, 
./ConduitLLM.WebUI/Services/GlobalSettingService.cs:/// application settings. It uses the ConfigurationDbContext to store settings
./ConduitLLM.WebUI/Services/GlobalSettingService.cs:    private readonly IDbContextFactory<ConduitLLM.Configuration.ConfigurationDbContext> _configContextFactory; 
./ConduitLLM.WebUI/Services/GlobalSettingService.cs:        IDbContextFactory<ConduitLLM.Configuration.ConfigurationDbContext> configContextFactory, 
./ConduitLLM.WebUI/Services/ModelProviderMappingService.cs:        private readonly IDbContextFactory<ConfigurationDbContext> _dbContextFactory;
./ConduitLLM.WebUI/Services/ModelProviderMappingService.cs:            IDbContextFactory<ConfigurationDbContext> dbContextFactory,
./ConduitLLM.WebUI/Services/DatabaseBackupService.cs:        private readonly IDbContextFactory<ConfigurationDbContext> _dbContextFactory;
./ConduitLLM.WebUI/Services/DatabaseBackupService.cs:            IDbContextFactory<ConfigurationDbContext> dbContextFactory,
./ConduitLLM.WebUI/Services/CostDashboardService.cs:        private readonly IDbContextFactory<ConfigurationDbContext> _dbContextFactory;
./ConduitLLM.WebUI/Services/CostDashboardService.cs:            IDbContextFactory<ConfigurationDbContext> dbContextFactory,
./ConduitLLM.WebUI/Services/CostDashboardService.cs:            ConfigurationDbContext dbContext, 
./ConduitLLM.WebUI/Services/HttpTimeoutConfigurationStartupFilter.cs:                var dbContextFactory = scope.ServiceProvider.GetRequiredService<IDbContextFactory<ConduitLLM.Configuration.ConfigurationDbContext>>(); 
./ConduitLLM.WebUI/Services/HttpRetryConfigurationService.cs:    private readonly IDbContextFactory<ConduitLLM.Configuration.ConfigurationDbContext> _configContextFactory; 
./ConduitLLM.WebUI/Services/HttpRetryConfigurationService.cs:        IDbContextFactory<ConduitLLM.Configuration.ConfigurationDbContext> configContextFactory, 
./ConduitLLM.WebUI/Services/HttpRetryConfigurationService.cs:    private async Task UpdateSettingAsync(ConduitLLM.Configuration.ConfigurationDbContext dbContext, string key, string value) 
./ConduitLLM.WebUI/Services/ProviderCredentialService.cs:        private readonly IDbContextFactory<ConfigurationDbContext> _dbContextFactory;
./ConduitLLM.WebUI/Services/ProviderCredentialService.cs:            IDbContextFactory<ConfigurationDbContext> dbContextFactory,
./ConduitLLM.WebUI/Services/DatabaseSettingsStartupFilter.cs:            // (like IGlobalSettingService or ConfigurationDbContext) 
./ConduitLLM.WebUI/Program.cs:        builder.Services.AddDbContextFactory<ConduitLLM.Configuration.ConfigurationDbContext>(options =>
./ConduitLLM.WebUI/Program.cs:        builder.Services.AddDbContext<ConduitLLM.Configuration.ConfigurationDbContext>(options =>
./ConduitLLM.WebUI/Program.cs:        builder.Services.AddDbContextFactory<ConduitLLM.Configuration.ConfigurationDbContext>(options =>
./ConduitLLM.WebUI/Program.cs:        builder.Services.AddDbContext<ConduitLLM.Configuration.ConfigurationDbContext>(options =>
```

### EF Core Namespaces
```
./ConduitLLM.WebUI/Data/EntityFrameworkConfigurationSource.cs:using Microsoft.EntityFrameworkCore;
./ConduitLLM.WebUI/Data/EntityFrameworkConfigurationProvider.cs:using Microsoft.EntityFrameworkCore;
./ConduitLLM.WebUI/Services/HttpTimeoutConfigurationService.cs:using Microsoft.EntityFrameworkCore;
./ConduitLLM.WebUI/Services/VirtualKeyMaintenanceService.cs:using Microsoft.EntityFrameworkCore;
./ConduitLLM.WebUI/Services/DbRouterConfigRepository.cs:using Microsoft.EntityFrameworkCore;
./ConduitLLM.WebUI/Services/RouterService.cs:using Microsoft.EntityFrameworkCore;
./ConduitLLM.WebUI/Services/RouterOptionsService.cs:using Microsoft.EntityFrameworkCore;
./ConduitLLM.WebUI/Services/ProviderHealthMonitorService.cs:using Microsoft.EntityFrameworkCore;
./ConduitLLM.WebUI/Services/ProviderStatusService.cs:using Microsoft.EntityFrameworkCore;
./ConduitLLM.WebUI/Services/GlobalSettingService.cs:using Microsoft.EntityFrameworkCore;
./ConduitLLM.WebUI/Services/GlobalSettingService.cs:using Microsoft.EntityFrameworkCore.Infrastructure;
./ConduitLLM.WebUI/Services/ModelProviderMappingService.cs:using Microsoft.EntityFrameworkCore;
./ConduitLLM.WebUI/Services/DatabaseBackupService.cs:using Microsoft.EntityFrameworkCore;
./ConduitLLM.WebUI/Services/CostDashboardService.cs:using Microsoft.EntityFrameworkCore;
./ConduitLLM.WebUI/Services/HttpTimeoutConfigurationStartupFilter.cs:using Microsoft.EntityFrameworkCore;
./ConduitLLM.WebUI/Services/HttpRetryConfigurationService.cs:using Microsoft.EntityFrameworkCore;
./ConduitLLM.WebUI/Services/ProviderCredentialService.cs:using Microsoft.EntityFrameworkCore;
./ConduitLLM.WebUI/Controllers/VirtualKeysController.cs:using Microsoft.EntityFrameworkCore; 
./ConduitLLM.WebUI/Program.cs:using Microsoft.EntityFrameworkCore;
```

### Repository Interfaces
```
./ConduitLLM.WebUI/Services/RequestLogService.cs:    private readonly IRequestLogRepository _requestLogRepository;
./ConduitLLM.WebUI/Services/RequestLogService.cs:    private readonly IVirtualKeyRepository _virtualKeyRepository;
./ConduitLLM.WebUI/Services/RequestLogService.cs:        IRequestLogRepository requestLogRepository,
./ConduitLLM.WebUI/Services/RequestLogService.cs:        IVirtualKeyRepository virtualKeyRepository,
./ConduitLLM.WebUI/Services/DbRouterConfigRepository.cs:    public class DbRouterConfigRepository : IRouterConfigRepository
./ConduitLLM.WebUI/Services/CacheStatusService.cs:        private readonly IGlobalSettingRepository _globalSettingRepository;
./ConduitLLM.WebUI/Services/CacheStatusService.cs:            IGlobalSettingRepository globalSettingRepository,
./ConduitLLM.WebUI/Services/ModelCostService.cs:        private readonly IModelCostRepository _repository;
./ConduitLLM.WebUI/Services/ModelCostService.cs:        public ModelCostService(IModelCostRepository repository, ILogger<ModelCostService> logger)
./ConduitLLM.WebUI/Services/VirtualKeyService.cs:        private readonly IVirtualKeyRepository _virtualKeyRepository;
./ConduitLLM.WebUI/Services/VirtualKeyService.cs:            IVirtualKeyRepository virtualKeyRepository,
./ConduitLLM.WebUI/Extensions/RouterExtensions.cs:                services.AddScoped<IRouterConfigRepository, DbRouterConfigRepository>();
./ConduitLLM.WebUI/Controllers/ModelProviderMappingController.cs:        private readonly IProviderCredentialRepository _credentialRepository;
./ConduitLLM.WebUI/Controllers/ModelProviderMappingController.cs:            IProviderCredentialRepository credentialRepository,
```

### Repository Registration
```
./ConduitLLM.WebUI/Extensions/RepositoryServiceExtensions.cs:        public static IServiceCollection AddRepositoryServices(this IServiceCollection services)
./ConduitLLM.WebUI/Extensions/RepositoryServiceExtensions.cs:            services.AddRepositories();
./ConduitLLM.WebUI/Program.cs:    builder.Services.AddRepositoryServices();
```

### CONDUIT_USE_ADMIN_API Usage
```
./ConduitLLM.WebUI/Extensions/RouterExtensions.cs:            var useAdminApiStr = configuration["CONDUIT_USE_ADMIN_API"];
./ConduitLLM.WebUI/Extensions/AdminClientExtensions.cs:                var useAdminApi = configuration["CONDUIT_USE_ADMIN_API"];
./ConduitLLM.WebUI/Extensions/AdminClientExtensions.cs:            var useAdminApiStr = configuration["CONDUIT_USE_ADMIN_API"];
./ConduitLLM.WebUI/Program.cs:var useAdminApiStr = Environment.GetEnvironmentVariable("CONDUIT_USE_ADMIN_API");
./ConduitLLM.WebUI/Program.cs:    Console.WriteLine("[Conduit WebUI] Using direct database access mode (CONDUIT_USE_ADMIN_API=false)");
./ConduitLLM.WebUI/Program.cs:    Console.WriteLine("[Conduit WebUI] Using Admin API client mode (default or CONDUIT_USE_ADMIN_API=true)");
```

### Legacy Service Registration
```
./ConduitLLM.WebUI/Extensions/RepositoryServiceExtensions.cs:            services.AddScoped<IVirtualKeyService, VirtualKeyService>();
./ConduitLLM.WebUI/Extensions/AdminClientExtensions.cs:                services.AddScoped<Interfaces.IVirtualKeyService, Services.VirtualKeyService>();
./ConduitLLM.WebUI/Extensions/RepositoryServiceExtensions.cs:            services.AddScoped<IGlobalSettingService, GlobalSettingService>();
./ConduitLLM.WebUI/Extensions/AdminClientExtensions.cs:                services.AddScoped<Interfaces.IGlobalSettingService, Services.GlobalSettingService>();
./ConduitLLM.WebUI/Extensions/RepositoryServiceExtensions.cs:            services.AddScoped<IRequestLogService, RequestLogService>();
./ConduitLLM.WebUI/Extensions/AdminClientExtensions.cs:                services.AddScoped<Interfaces.IRequestLogService, Services.RequestLogService>();
./ConduitLLM.WebUI/Extensions/RepositoryServiceExtensions.cs:            services.AddScoped<IIpFilterService, IpFilterService>();
./ConduitLLM.WebUI/Extensions/AdminClientExtensions.cs:                services.AddScoped<Interfaces.IIpFilterService, Services.IpFilterService>();
```

### DB Initialization Code
```
./ConduitLLM.WebUI/Program.cs:        var success = await scope.ServiceProvider.InitializeDatabaseAsync(maxRetries: 20, retryDelayMs: 3000);
./ConduitLLM.WebUI/Program.cs:            await scope.ServiceProvider.EnsureTablesExistAsync(
```

## Next Steps
Review these findings and create tickets to remove direct database access code.
