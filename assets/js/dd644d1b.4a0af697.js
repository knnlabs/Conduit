"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[880],{1209:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"architecture/repository-pattern","title":"Repository Pattern","description":"How Conduit implements the Repository Pattern for data access","source":"@site/docs/architecture/repository-pattern.md","sourceDirName":"architecture","slug":"/architecture/repository-pattern","permalink":"/Conduit/docs/architecture/repository-pattern","draft":false,"unlisted":false,"editUrl":"https://github.com/knnlabs/Conduit/tree/main/website/docs/architecture/repository-pattern.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Repository Pattern","description":"How Conduit implements the Repository Pattern for data access"}}');var s=t(4848),r=t(8453);const o={sidebar_position:3,title:"Repository Pattern",description:"How Conduit implements the Repository Pattern for data access"},a="Repository Pattern Implementation",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Implementation Structure",id:"implementation-structure",level:2},{value:"Core Interfaces",id:"core-interfaces",level:2},{value:"Generic Repository Interface",id:"generic-repository-interface",level:3},{value:"Entity-Specific Repositories",id:"entity-specific-repositories",level:3},{value:"Repository Implementations",id:"repository-implementations",level:2},{value:"Database Context",id:"database-context",level:2},{value:"Entity Configuration",id:"entity-configuration",level:2},{value:"Dependency Injection",id:"dependency-injection",level:2},{value:"Using Repositories",id:"using-repositories",level:2},{value:"Unit Testing",id:"unit-testing",level:2},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Generic Repository Base",id:"generic-repository-base",level:3},{value:"Specification Pattern",id:"specification-pattern",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"repository-pattern-implementation",children:"Repository Pattern Implementation"})}),"\n",(0,s.jsx)(n.p,{children:"Conduit implements the Repository Pattern to abstract and encapsulate data access logic. This approach provides a clean separation between the data access layer and business logic, making the code more maintainable and testable."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"The Repository Pattern provides several benefits:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Abstraction"}),": Hides data access implementation details"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Decoupling"}),": Reduces dependencies between components"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Testability"}),": Simplifies unit testing with mock repositories"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Consistency"}),": Provides a uniform way to access data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Centralization"}),": Centralizes data access logic and validation"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"implementation-structure",children:"Implementation Structure"}),"\n",(0,s.jsx)(n.mermaid,{value:"classDiagram\n    class IRepository~T~ {\n        <<interface>>\n        +GetAllAsync() Task~IEnumerable~T~~\n        +GetByIdAsync(id) Task~T~\n        +AddAsync(entity) Task~T~\n        +UpdateAsync(entity) Task~bool~\n        +DeleteAsync(id) Task~bool~\n    }\n    \n    class Repository~T~ {\n        -_dbContext : DbContext\n        +Repository(dbContext)\n        +GetAllAsync() Task~IEnumerable~T~~\n        +GetByIdAsync(id) Task~T~\n        +AddAsync(entity) Task~T~\n        +UpdateAsync(entity) Task~bool~\n        +DeleteAsync(id) Task~bool~\n    }\n    \n    class IVirtualKeyRepository {\n        <<interface>>\n        +GetByKeyAsync(key) Task~VirtualKey~\n        +GetActiveKeysAsync() Task~IEnumerable~VirtualKey~~\n        +IncrementUsageAsync(id, cost) Task~bool~\n    }\n    \n    class VirtualKeyRepository {\n        -_dbContext : ConfigurationDbContext\n        +GetByKeyAsync(key) Task~VirtualKey~\n        +GetActiveKeysAsync() Task~IEnumerable~VirtualKey~~\n        +IncrementUsageAsync(id, cost) Task~bool~\n    }\n    \n    IRepository <|.. Repository : implements\n    IRepository <|-- IVirtualKeyRepository : extends\n    IVirtualKeyRepository <|.. VirtualKeyRepository : implements"}),"\n",(0,s.jsx)(n.h2,{id:"core-interfaces",children:"Core Interfaces"}),"\n",(0,s.jsx)(n.h3,{id:"generic-repository-interface",children:"Generic Repository Interface"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"IRepository<T>"})," interface defines standard CRUD operations:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public interface IRepository<T> where T : class\n{\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<T> GetByIdAsync(string id);\n    Task<T> AddAsync(T entity);\n    Task<bool> UpdateAsync(T entity);\n    Task<bool> DeleteAsync(string id);\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"entity-specific-repositories",children:"Entity-Specific Repositories"}),"\n",(0,s.jsx)(n.p,{children:"Entity-specific repositories extend the generic interface with specialized methods:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public interface IVirtualKeyRepository : IRepository<VirtualKey>\n{\n    Task<VirtualKey> GetByKeyAsync(string key);\n    Task<IEnumerable<VirtualKey>> GetActiveKeysAsync();\n    Task<bool> IncrementUsageAsync(string id, decimal cost);\n    // ...other specialized methods\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"repository-implementations",children:"Repository Implementations"}),"\n",(0,s.jsx)(n.p,{children:"Each repository interface has a corresponding implementation that interacts with the database:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class VirtualKeyRepository : IVirtualKeyRepository\n{\n    private readonly ConfigurationDbContext _dbContext;\n\n    public VirtualKeyRepository(ConfigurationDbContext dbContext)\n    {\n        _dbContext = dbContext;\n    }\n\n    public async Task<VirtualKey> GetByKeyAsync(string key)\n    {\n        return await _dbContext.VirtualKeys\n            .Include(vk => vk.AllowedModels)\n            .FirstOrDefaultAsync(vk => vk.Key == key && vk.IsActive);\n    }\n\n    // ...other method implementations\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"database-context",children:"Database Context"}),"\n",(0,s.jsxs)(n.p,{children:["The repositories use Entity Framework Core's ",(0,s.jsx)(n.code,{children:"DbContext"})," for data access:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class ConfigurationDbContext : DbContext, IConfigurationDbContext\n{\n    public ConfigurationDbContext(DbContextOptions<ConfigurationDbContext> options)\n        : base(options)\n    {\n    }\n\n    public DbSet<VirtualKey> VirtualKeys { get; set; }\n    public DbSet<ProviderCredential> ProviderCredentials { get; set; }\n    public DbSet<ModelProviderMapping> ModelProviderMappings { get; set; }\n    public DbSet<RequestLog> RequestLogs { get; set; }\n    // ...other entity sets\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        base.OnModelCreating(modelBuilder);\n        \n        // Configure entity relationships and constraints\n        modelBuilder.ApplyConfigurationsFromAssembly(typeof(ConfigurationDbContext).Assembly);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"entity-configuration",children:"Entity Configuration"}),"\n",(0,s.jsx)(n.p,{children:"Entity configurations are defined using the Fluent API:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class VirtualKeyConfiguration : IEntityTypeConfiguration<VirtualKey>\n{\n    public void Configure(EntityTypeBuilder<VirtualKey> builder)\n    {\n        builder.HasKey(vk => vk.Id);\n        \n        builder.Property(vk => vk.Key)\n            .IsRequired()\n            .HasMaxLength(100);\n            \n        builder.Property(vk => vk.Name)\n            .IsRequired()\n            .HasMaxLength(100);\n            \n        builder.HasIndex(vk => vk.Key)\n            .IsUnique();\n            \n        builder.HasMany(vk => vk.AllowedModels)\n            .WithOne(am => am.VirtualKey)\n            .HasForeignKey(am => am.VirtualKeyId)\n            .OnDelete(DeleteBehavior.Cascade);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"dependency-injection",children:"Dependency Injection"}),"\n",(0,s.jsx)(n.p,{children:"Repositories are registered in the dependency injection container:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public static class ServiceCollectionExtensions\n{\n    public static IServiceCollection AddRepositories(this IServiceCollection services, \n        RepositoryPatternOptions options)\n    {\n        // Register DB context\n        services.AddDbContext<ConfigurationDbContext>(opt => \n            opt.UseSqlite(options.ConnectionString));\n            \n        // Register repositories\n        services.AddScoped<IVirtualKeyRepository, VirtualKeyRepository>();\n        services.AddScoped<IProviderCredentialRepository, ProviderCredentialRepository>();\n        services.AddScoped<IModelProviderMappingRepository, ModelProviderMappingRepository>();\n        services.AddScoped<IRequestLogRepository, RequestLogRepository>();\n        // ...other repositories\n        \n        return services;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"using-repositories",children:"Using Repositories"}),"\n",(0,s.jsx)(n.p,{children:"Services depend on repository interfaces, not implementations:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class VirtualKeyService : IVirtualKeyService\n{\n    private readonly IVirtualKeyRepository _virtualKeyRepository;\n    \n    public VirtualKeyService(IVirtualKeyRepository virtualKeyRepository)\n    {\n        _virtualKeyRepository = virtualKeyRepository;\n    }\n    \n    public async Task<VirtualKeyDto> CreateVirtualKeyAsync(CreateVirtualKeyRequestDto request)\n    {\n        // Business logic...\n        \n        var virtualKey = new VirtualKey\n        {\n            Name = request.Name,\n            Description = request.Description,\n            Key = GenerateKey(),\n            // ...other properties\n        };\n        \n        var result = await _virtualKeyRepository.AddAsync(virtualKey);\n        \n        // Map to DTO and return...\n    }\n    \n    // ...other methods\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,s.jsx)(n.p,{children:"The Repository Pattern simplifies unit testing by allowing repository interfaces to be mocked:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class VirtualKeyServiceTests\n{\n    private readonly Mock<IVirtualKeyRepository> _mockRepository;\n    private readonly IVirtualKeyService _service;\n    \n    public VirtualKeyServiceTests()\n    {\n        _mockRepository = new Mock<IVirtualKeyRepository>();\n        _service = new VirtualKeyService(_mockRepository.Object);\n    }\n    \n    [Fact]\n    public async Task CreateVirtualKey_WithValidRequest_ReturnsVirtualKey()\n    {\n        // Arrange\n        var request = new CreateVirtualKeyRequestDto\n        {\n            Name = "Test Key",\n            Description = "For testing"\n        };\n        \n        _mockRepository\n            .Setup(r => r.AddAsync(It.IsAny<VirtualKey>()))\n            .ReturnsAsync((VirtualKey vk) => vk);\n        \n        // Act\n        var result = await _service.CreateVirtualKeyAsync(request);\n        \n        // Assert\n        Assert.NotNull(result);\n        Assert.Equal(request.Name, result.Name);\n        _mockRepository.Verify(r => r.AddAsync(It.IsAny<VirtualKey>()), Times.Once);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,s.jsx)(n.h3,{id:"generic-repository-base",children:"Generic Repository Base"}),"\n",(0,s.jsx)(n.p,{children:"A generic repository base class reduces code duplication:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public abstract class RepositoryBase<T> : IRepository<T> where T : class\n{\n    protected readonly ConfigurationDbContext DbContext;\n    \n    protected RepositoryBase(ConfigurationDbContext dbContext)\n    {\n        DbContext = dbContext;\n    }\n    \n    public virtual async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await DbContext.Set<T>().ToListAsync();\n    }\n    \n    public virtual async Task<T> GetByIdAsync(string id)\n    {\n        return await DbContext.Set<T>().FindAsync(id);\n    }\n    \n    public virtual async Task<T> AddAsync(T entity)\n    {\n        DbContext.Set<T>().Add(entity);\n        await DbContext.SaveChangesAsync();\n        return entity;\n    }\n    \n    // ...other methods\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"specification-pattern",children:"Specification Pattern"}),"\n",(0,s.jsx)(n.p,{children:"For complex queries, Conduit uses the Specification Pattern:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public interface ISpecification<T>\n{\n    Expression<Func<T, bool>> Criteria { get; }\n    List<Expression<Func<T, object>>> Includes { get; }\n    List<string> IncludeStrings { get; }\n}\n\npublic abstract class BaseSpecification<T> : ISpecification<T>\n{\n    public Expression<Func<T, bool>> Criteria { get; private set; }\n    public List<Expression<Func<T, object>>> Includes { get; } = new List<Expression<Func<T, object>>>();\n    public List<string> IncludeStrings { get; } = new List<string>();\n    \n    protected BaseSpecification(Expression<Func<T, bool>> criteria)\n    {\n        Criteria = criteria;\n    }\n    \n    protected virtual void AddInclude(Expression<Func<T, object>> includeExpression)\n    {\n        Includes.Add(includeExpression);\n    }\n    \n    protected virtual void AddInclude(string includeString)\n    {\n        IncludeStrings.Add(includeString);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Usage example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class ActiveVirtualKeysSpecification : BaseSpecification<VirtualKey>\n{\n    public ActiveVirtualKeysSpecification() \n        : base(vk => vk.IsActive)\n    {\n        AddInclude(vk => vk.AllowedModels);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../features/api-gateway",children:"API Gateway"}),": Learn about the API Gateway"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../features/virtual-keys",children:"Virtual Keys"}),": Learn about virtual key management"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../guides/environment-variables",children:"Database Setup"}),": Configure database settings"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);