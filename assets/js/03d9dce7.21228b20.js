"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2234],{8453:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>s});var o=i(6540);const t={},r=o.createContext(t);function a(n){const e=o.useContext(r);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),o.createElement(r.Provider,{value:e},n.children)}},8824:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"deployment/production-deployment","title":"Production Deployment","description":"Deploy Conduit for production with high availability, scaling, and monitoring","source":"@site/docs/deployment/production-deployment.md","sourceDirName":"deployment","slug":"/deployment/production-deployment","permalink":"/Conduit/docs/deployment/production-deployment","draft":false,"unlisted":false,"editUrl":"https://github.com/knnlabs/Conduit/tree/main/website/docs/deployment/production-deployment.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Production Deployment","description":"Deploy Conduit for production with high availability, scaling, and monitoring"}}');var t=i(4848),r=i(8453);const a={sidebar_position:2,title:"Production Deployment",description:"Deploy Conduit for production with high availability, scaling, and monitoring"},s="Production Deployment",c={},l=[{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"High-Level Deployment",id:"high-level-deployment",level:2},{value:"1. Infrastructure Setup",id:"1-infrastructure-setup",level:3},{value:"2. Core API Deployment",id:"2-core-api-deployment",level:3},{value:"3. Admin API Deployment",id:"3-admin-api-deployment",level:3},{value:"Event-Driven Scaling Configuration",id:"event-driven-scaling-configuration",level:2},{value:"RabbitMQ Production Configuration",id:"rabbitmq-production-configuration",level:3},{value:"Redis Cluster Configuration",id:"redis-cluster-configuration",level:3},{value:"Database Scaling",id:"database-scaling",level:2},{value:"PostgreSQL Production Configuration",id:"postgresql-production-configuration",level:3},{value:"Connection Pooling",id:"connection-pooling",level:3},{value:"Load Balancer Configuration",id:"load-balancer-configuration",level:2},{value:"Nginx Configuration",id:"nginx-configuration",level:3},{value:"Monitoring and Observability",id:"monitoring-and-observability",level:2},{value:"Prometheus Configuration",id:"prometheus-configuration",level:3},{value:"Key Metrics to Monitor",id:"key-metrics-to-monitor",level:3},{value:"Security Configuration",id:"security-configuration",level:2},{value:"Network Policies",id:"network-policies",level:3},{value:"SSL/TLS Configuration",id:"ssltls-configuration",level:3},{value:"Backup and Disaster Recovery",id:"backup-and-disaster-recovery",level:2},{value:"Automated Backup Strategy",id:"automated-backup-strategy",level:3},{value:"Disaster Recovery Plan",id:"disaster-recovery-plan",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Resource Allocation",id:"resource-allocation",level:3},{value:"Scaling Policies",id:"scaling-policies",level:3},{value:"Troubleshooting Production Issues",id:"troubleshooting-production-issues",level:2},{value:"Common Production Issues",id:"common-production-issues",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"production-deployment",children:"Production Deployment"})}),"\n",(0,t.jsx)(e.p,{children:"This guide covers deploying Conduit for production environments with high availability, horizontal scaling, and comprehensive monitoring."}),"\n",(0,t.jsx)(e.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,t.jsx)(e.p,{children:"Production Conduit deployment consists of:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Multiple Core API instances"})," (load balanced)"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Admin API instance(s)"})," (can be load balanced)"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"WebUI instances"})," (optional, can be load balanced)"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"RabbitMQ cluster"})," for event messaging"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Redis cluster"})," for caching and SignalR"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"PostgreSQL cluster"})," with read replicas"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Load balancer"})," (Nginx, HAProxy, or cloud LB)"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Kubernetes cluster or Docker Swarm"}),"\n",(0,t.jsx)(e.li,{children:"PostgreSQL with read replicas"}),"\n",(0,t.jsx)(e.li,{children:"Redis cluster or managed Redis service"}),"\n",(0,t.jsx)(e.li,{children:"RabbitMQ cluster or managed message queue"}),"\n",(0,t.jsx)(e.li,{children:"Load balancer with SSL termination"}),"\n",(0,t.jsx)(e.li,{children:"Monitoring infrastructure (Prometheus, Grafana)"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"high-level-deployment",children:"High-Level Deployment"}),"\n",(0,t.jsx)(e.h3,{id:"1-infrastructure-setup",children:"1. Infrastructure Setup"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:'# kubernetes/namespace.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: conduit-production\n---\n# kubernetes/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: conduit-config\n  namespace: conduit-production\ndata:\n  DATABASE_URL: "postgresql://conduit:password@postgres-cluster:5432/conduit"\n  REDIS_URL: "redis://redis-cluster:6379/0"\n  REDIS_URL_SIGNALR: "redis://redis-cluster:6379/2"\n  RABBITMQ_HOST: "rabbitmq-cluster"\n  RABBITMQ_PORT: "5672"\n  RABBITMQ_USERNAME: "conduit"\n  RABBITMQ_PASSWORD: "secure-password"\n'})}),"\n",(0,t.jsx)(e.h3,{id:"2-core-api-deployment",children:"2. Core API Deployment"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:'# kubernetes/core-api-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: conduit-core-api\n  namespace: conduit-production\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: conduit-core-api\n  template:\n    metadata:\n      labels:\n        app: conduit-core-api\n    spec:\n      containers:\n      - name: conduit-core-api\n        image: conduit/core-api:latest\n        ports:\n        - containerPort: 5000\n        env:\n        - name: ASPNETCORE_ENVIRONMENT\n          value: "Production"\n        - name: DATABASE_URL\n          valueFrom:\n            configMapKeyRef:\n              name: conduit-config\n              key: DATABASE_URL\n        - name: REDIS_URL\n          valueFrom:\n            configMapKeyRef:\n              name: conduit-config\n              key: REDIS_URL\n        - name: CONDUITLLM__RABBITMQ__HOST\n          valueFrom:\n            configMapKeyRef:\n              name: conduit-config\n              key: RABBITMQ_HOST\n        resources:\n          requests:\n            memory: "512Mi"\n            cpu: "500m"\n          limits:\n            memory: "1Gi"\n            cpu: "1000m"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 5000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 5000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: conduit-core-api-service\n  namespace: conduit-production\nspec:\n  selector:\n    app: conduit-core-api\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 5000\n  type: ClusterIP\n'})}),"\n",(0,t.jsx)(e.h3,{id:"3-admin-api-deployment",children:"3. Admin API Deployment"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:'# kubernetes/admin-api-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: conduit-admin-api\n  namespace: conduit-production\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: conduit-admin-api\n  template:\n    metadata:\n      labels:\n        app: conduit-admin-api\n    spec:\n      containers:\n      - name: conduit-admin-api\n        image: conduit/admin-api:latest\n        ports:\n        - containerPort: 5002\n        env:\n        - name: ASPNETCORE_ENVIRONMENT\n          value: "Production"\n        - name: DATABASE_URL\n          valueFrom:\n            configMapKeyRef:\n              name: conduit-config\n              key: DATABASE_URL\n        - name: CONDUITLLM__RABBITMQ__HOST\n          valueFrom:\n            configMapKeyRef:\n              name: conduit-config\n              key: RABBITMQ_HOST\n        resources:\n          requests:\n            memory: "256Mi"\n            cpu: "250m"\n          limits:\n            memory: "512Mi"\n            cpu: "500m"\n'})}),"\n",(0,t.jsx)(e.h2,{id:"event-driven-scaling-configuration",children:"Event-Driven Scaling Configuration"}),"\n",(0,t.jsx)(e.h3,{id:"rabbitmq-production-configuration",children:"RabbitMQ Production Configuration"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# High-throughput RabbitMQ configuration\nCONDUITLLM__RABBITMQ__HOST=rabbitmq-cluster\nCONDUITLLM__RABBITMQ__PORT=5672\nCONDUITLLM__RABBITMQ__USERNAME=conduit\nCONDUITLLM__RABBITMQ__PASSWORD=secure-password\nCONDUITLLM__RABBITMQ__VHOST=/\nCONDUITLLM__RABBITMQ__PREFETCHCOUNT=25\nCONDUITLLM__RABBITMQ__PARTITIONCOUNT=30\nCONDUITLLM__RABBITMQ__CONCURRENTMESSAGELIMIT=50\nCONDUITLLM__RABBITMQ__MAXCONNECTIONS=5\nCONDUITLLM__RABBITMQ__MINCONNECTIONS=2\nCONDUITLLM__RABBITMQ__REQUESTEDHEARTBEAT=30\nCONDUITLLM__RABBITMQ__PUBLISHERCONFIRMATION=true\n"})}),"\n",(0,t.jsx)(e.h3,{id:"redis-cluster-configuration",children:"Redis Cluster Configuration"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Redis for caching and SignalR backplane\nREDIS_URL=redis://redis-cluster:6379/0\nREDIS_URL_SIGNALR=redis://redis-cluster:6379/2\nCONDUITLLM__REDIS__CONNECTIONSTRING=redis-cluster:6379,abortConnect=false,connectTimeout=5000,syncTimeout=5000\n"})}),"\n",(0,t.jsx)(e.h2,{id:"database-scaling",children:"Database Scaling"}),"\n",(0,t.jsx)(e.h3,{id:"postgresql-production-configuration",children:"PostgreSQL Production Configuration"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sql",children:"-- Database performance settings\nALTER SYSTEM SET max_connections = 200;\nALTER SYSTEM SET shared_buffers = '256MB';\nALTER SYSTEM SET effective_cache_size = '1GB';\nALTER SYSTEM SET work_mem = '4MB';\nALTER SYSTEM SET maintenance_work_mem = '64MB';\nSELECT pg_reload_conf();\n"})}),"\n",(0,t.jsx)(e.h3,{id:"connection-pooling",children:"Connection Pooling"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# PostgreSQL connection pool settings\nCONDUITLLM__DATABASE__MAXPOOLSIZE=100\nCONDUITLLM__DATABASE__MINPOOLSIZE=10\nCONDUITLLM__DATABASE__CONNECTIONTIMEOUT=30\nCONDUITLLM__DATABASE__COMMANDTIMEOUT=30\nCONDUITLLM__DATABASE__CONNECTIONLIFETIME=300\n"})}),"\n",(0,t.jsx)(e.h2,{id:"load-balancer-configuration",children:"Load Balancer Configuration"}),"\n",(0,t.jsx)(e.h3,{id:"nginx-configuration",children:"Nginx Configuration"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-nginx",children:'# nginx.conf\nupstream conduit_core_api {\n    least_conn;\n    server conduit-core-api-1:5000 max_fails=3 fail_timeout=30s;\n    server conduit-core-api-2:5000 max_fails=3 fail_timeout=30s;\n    server conduit-core-api-3:5000 max_fails=3 fail_timeout=30s;\n}\n\nupstream conduit_admin_api {\n    least_conn;\n    server conduit-admin-api-1:5002 max_fails=3 fail_timeout=30s;\n    server conduit-admin-api-2:5002 max_fails=3 fail_timeout=30s;\n}\n\nupstream conduit_webui {\n    least_conn;\n    server conduit-webui-1:5001 max_fails=3 fail_timeout=30s;\n    server conduit-webui-2:5001 max_fails=3 fail_timeout=30s;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name api.conduit.yourdomain.com;\n    \n    ssl_certificate /etc/ssl/certs/conduit.crt;\n    ssl_certificate_key /etc/ssl/private/conduit.key;\n    \n    # Core API\n    location /v1/ {\n        proxy_pass http://conduit_core_api;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support for SignalR\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection "upgrade";\n        \n        # Timeouts for long-running requests\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n    \n    # SignalR hubs\n    location /hubs/ {\n        proxy_pass http://conduit_core_api;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection "upgrade";\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n    \n    # Health checks\n    location /health {\n        proxy_pass http://conduit_core_api;\n        access_log off;\n    }\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name admin.conduit.yourdomain.com;\n    \n    ssl_certificate /etc/ssl/certs/conduit.crt;\n    ssl_certificate_key /etc/ssl/private/conduit.key;\n    \n    # Admin API\n    location /api/ {\n        proxy_pass http://conduit_admin_api;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n    \n    # WebUI\n    location / {\n        proxy_pass http://conduit_webui;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"monitoring-and-observability",children:"Monitoring and Observability"}),"\n",(0,t.jsx)(e.h3,{id:"prometheus-configuration",children:"Prometheus Configuration"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:"# prometheus/prometheus.yml\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nscrape_configs:\n  - job_name: 'conduit-core-api'\n    static_configs:\n      - targets: ['conduit-core-api:5000']\n    metrics_path: /metrics\n    scrape_interval: 15s\n    \n  - job_name: 'conduit-admin-api'\n    static_configs:\n      - targets: ['conduit-admin-api:5002']\n    metrics_path: /metrics\n    scrape_interval: 15s\n\n  - job_name: 'rabbitmq'\n    static_configs:\n      - targets: ['rabbitmq-cluster:15692']\n    metrics_path: /metrics\n    \n  - job_name: 'redis'\n    static_configs:\n      - targets: ['redis-cluster:6379']\n"})}),"\n",(0,t.jsx)(e.h3,{id:"key-metrics-to-monitor",children:"Key Metrics to Monitor"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:'# alerts.yml\ngroups:\n  - name: conduit-core\n    rules:\n      - alert: HighErrorRate\n        expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.1\n        for: 2m\n        labels:\n          severity: critical\n        annotations:\n          summary: "High error rate in Conduit Core API"\n          \n      - alert: HighLatency\n        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 1\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: "High latency in Conduit Core API"\n          \n      - alert: RabbitMQQueueDepth\n        expr: rabbitmq_queue_messages > 1000\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: "RabbitMQ queue depth is high"\n          \n      - alert: DatabaseConnections\n        expr: postgres_connections_active / postgres_connections_max > 0.8\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: "PostgreSQL connection pool utilization is high"\n'})}),"\n",(0,t.jsx)(e.h2,{id:"security-configuration",children:"Security Configuration"}),"\n",(0,t.jsx)(e.h3,{id:"network-policies",children:"Network Policies"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:"# kubernetes/network-policy.yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: conduit-network-policy\n  namespace: conduit-production\nspec:\n  podSelector:\n    matchLabels:\n      app: conduit-core-api\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: ingress-nginx\n    ports:\n    - protocol: TCP\n      port: 5000\n  egress:\n  - to:\n    - namespaceSelector:\n        matchLabels:\n          name: database\n    ports:\n    - protocol: TCP\n      port: 5432\n"})}),"\n",(0,t.jsx)(e.h3,{id:"ssltls-configuration",children:"SSL/TLS Configuration"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Environment variables for HTTPS\nCONDUITLLM__KESTREL__ENDPOINTS__HTTPS__URL=https://0.0.0.0:5443\nCONDUITLLM__KESTREL__ENDPOINTS__HTTPS__CERTIFICATE__PATH=/etc/ssl/certs/conduit.pfx\nCONDUITLLM__KESTREL__ENDPOINTS__HTTPS__CERTIFICATE__PASSWORD=certificate-password\n"})}),"\n",(0,t.jsx)(e.h2,{id:"backup-and-disaster-recovery",children:"Backup and Disaster Recovery"}),"\n",(0,t.jsx)(e.h3,{id:"automated-backup-strategy",children:"Automated Backup Strategy"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n# backup-script.sh\n\n# Database backup\npg_dump -h postgres-cluster -U conduit -d conduit_production > conduit-db-$(date +%Y%m%d).sql\n\n# Configuration backup via Admin API\ncurl -H "Authorization: Bearer $ADMIN_API_KEY" \\\n  https://admin.conduit.yourdomain.com/api/admin/export/configuration > config-backup-$(date +%Y%m%d).json\n\n# Upload to S3\naws s3 cp conduit-db-$(date +%Y%m%d).sql s3://conduit-backups/\naws s3 cp config-backup-$(date +%Y%m%d).json s3://conduit-backups/\n'})}),"\n",(0,t.jsx)(e.h3,{id:"disaster-recovery-plan",children:"Disaster Recovery Plan"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Database Recovery"}),": Restore from latest backup"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Configuration Recovery"}),": Import via Admin API"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Service Recovery"}),": Redeploy from container registry"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Validation"}),": Run health checks and integration tests"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,t.jsx)(e.h3,{id:"resource-allocation",children:"Resource Allocation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:'# Recommended resource allocation\nresources:\n  core-api:\n    requests:\n      memory: "512Mi"\n      cpu: "500m"\n    limits:\n      memory: "1Gi"\n      cpu: "1000m"\n      \n  admin-api:\n    requests:\n      memory: "256Mi"\n      cpu: "250m"\n    limits:\n      memory: "512Mi"\n      cpu: "500m"\n      \n  webui:\n    requests:\n      memory: "128Mi"\n      cpu: "100m"\n    limits:\n      memory: "256Mi"\n      cpu: "250m"\n'})}),"\n",(0,t.jsx)(e.h3,{id:"scaling-policies",children:"Scaling Policies"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:"# kubernetes/hpa.yaml\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: conduit-core-api-hpa\n  namespace: conduit-production\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: conduit-core-api\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n"})}),"\n",(0,t.jsx)(e.h2,{id:"troubleshooting-production-issues",children:"Troubleshooting Production Issues"}),"\n",(0,t.jsx)(e.h3,{id:"common-production-issues",children:"Common Production Issues"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"High Memory Usage:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'# Check memory allocation\nkubectl top pods -n conduit-production\n\n# Analyze memory leaks\nkubectl logs -n conduit-production deployment/conduit-core-api | grep -i "memory\\|gc"\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Database Connection Issues:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'# Check connection pool status\nkubectl exec -n conduit-production deployment/conduit-core-api -- curl localhost:5000/health/database\n\n# Monitor connection counts\nkubectl logs -n conduit-production deployment/conduit-core-api | grep -i "connection"\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"RabbitMQ Queue Buildup:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'# Check queue depths\nkubectl exec -n conduit-production deployment/rabbitmq -- rabbitmqctl list_queues name messages\n\n# Monitor consumer performance\nkubectl logs -n conduit-production deployment/conduit-core-api | grep -i "consumer"\n'})}),"\n",(0,t.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Scaling Configuration"}),": Learn about ",(0,t.jsx)(e.a,{href:"scaling-configuration",children:"advanced scaling"})]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"RabbitMQ Setup"}),": Configure ",(0,t.jsx)(e.a,{href:"rabbitmq-setup",children:"RabbitMQ for production"})]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Monitoring"}),": Set up ",(0,t.jsx)(e.a,{href:"monitoring-health",children:"comprehensive monitoring"})]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Performance Tuning"}),": Optimize for your specific workload"]}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}}}]);