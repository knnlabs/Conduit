"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3634],{2272:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"monitoring/production-deployment","title":"Production Deployment","description":"This guide covers deploying ConduitLLM in production environments using Kubernetes, Docker, and cloud platforms with proper monitoring, scaling, and security configurations.","source":"@site/docs/monitoring/production-deployment.md","sourceDirName":"monitoring","slug":"/monitoring/production-deployment","permalink":"/Conduit/docs/monitoring/production-deployment","draft":false,"unlisted":false,"editUrl":"https://github.com/knnlabs/Conduit/tree/main/website/docs/monitoring/production-deployment.md","tags":[],"version":"current","frontMatter":{}}');var a=t(4848),o=t(8453);const s={},r="Production Deployment",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Docker Deployment",id:"docker-deployment",level:2},{value:"Production Docker Image",id:"production-docker-image",level:3},{value:"Docker Compose Production",id:"docker-compose-production",level:3},{value:"Kubernetes Deployment",id:"kubernetes-deployment",level:2},{value:"Namespace and ConfigMap",id:"namespace-and-configmap",level:3},{value:"Secrets",id:"secrets",level:3},{value:"API Deployment",id:"api-deployment",level:3},{value:"Service and Ingress",id:"service-and-ingress",level:3},{value:"Horizontal Pod Autoscaler",id:"horizontal-pod-autoscaler",level:3},{value:"Database Setup",id:"database-setup",level:3},{value:"Monitoring Stack",id:"monitoring-stack",level:2},{value:"Prometheus Configuration",id:"prometheus-configuration",level:3},{value:"Grafana Dashboards",id:"grafana-dashboards",level:3},{value:"Security Hardening",id:"security-hardening",level:2},{value:"Network Policies",id:"network-policies",level:3},{value:"Pod Security Policy",id:"pod-security-policy",level:3},{value:"Disaster Recovery",id:"disaster-recovery",level:2},{value:"Backup Strategy",id:"backup-strategy",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Connection Pooling",id:"connection-pooling",level:3},{value:"Caching Configuration",id:"caching-configuration",level:3},{value:"Observability",id:"observability",level:2},{value:"Distributed Tracing",id:"distributed-tracing",level:3},{value:"Log Aggregation",id:"log-aggregation",level:3},{value:"Deployment Checklist",id:"deployment-checklist",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",input:"input",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"production-deployment",children:"Production Deployment"})}),"\n",(0,a.jsx)(e.p,{children:"This guide covers deploying ConduitLLM in production environments using Kubernetes, Docker, and cloud platforms with proper monitoring, scaling, and security configurations."}),"\n",(0,a.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(e.p,{children:"Production deployment considerations:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"High availability and fault tolerance"}),"\n",(0,a.jsx)(e.li,{children:"Horizontal scaling capabilities"}),"\n",(0,a.jsx)(e.li,{children:"Comprehensive monitoring and alerting"}),"\n",(0,a.jsx)(e.li,{children:"Security hardening"}),"\n",(0,a.jsx)(e.li,{children:"Performance optimization"}),"\n",(0,a.jsx)(e.li,{children:"Disaster recovery"}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"docker-deployment",children:"Docker Deployment"}),"\n",(0,a.jsx)(e.h3,{id:"production-docker-image",children:"Production Docker Image"}),"\n",(0,a.jsx)(e.p,{children:"Multi-stage Dockerfile for optimized production image:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-dockerfile",children:'# Build stage\nFROM mcr.microsoft.com/dotnet/sdk:9.0 AS build\nWORKDIR /src\n\n# Copy and restore dependencies\nCOPY ["ConduitLLM.Http/ConduitLLM.Http.csproj", "ConduitLLM.Http/"]\nCOPY ["ConduitLLM.Core/ConduitLLM.Core.csproj", "ConduitLLM.Core/"]\nCOPY ["ConduitLLM.Providers/ConduitLLM.Providers.csproj", "ConduitLLM.Providers/"]\nRUN dotnet restore "ConduitLLM.Http/ConduitLLM.Http.csproj"\n\n# Copy and build\nCOPY . .\nWORKDIR "/src/ConduitLLM.Http"\nRUN dotnet build "ConduitLLM.Http.csproj" -c Release -o /app/build\n\n# Publish\nFROM build AS publish\nRUN dotnet publish "ConduitLLM.Http.csproj" -c Release -o /app/publish /p:UseAppHost=false\n\n# Runtime stage\nFROM mcr.microsoft.com/dotnet/aspnet:9.0-alpine AS final\nWORKDIR /app\n\n# Install dependencies for health checks\nRUN apk add --no-cache curl\n\n# Create non-root user\nRUN addgroup -g 1000 conduit && \\\n    adduser -u 1000 -G conduit -s /bin/sh -D conduit\n\n# Copy published app\nCOPY --from=publish /app/publish .\nRUN chown -R conduit:conduit /app\n\n# Security hardening\nRUN chmod -R 550 /app\n\nUSER conduit\nEXPOSE 8080\nHEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \\\n  CMD curl -f http://localhost:8080/health/ready || exit 1\n\nENTRYPOINT ["dotnet", "ConduitLLM.Http.dll"]\n'})}),"\n",(0,a.jsx)(e.h3,{id:"docker-compose-production",children:"Docker Compose Production"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-yaml",children:'version: \'3.8\'\n\nservices:\n  api:\n    image: conduit:latest\n    restart: always\n    environment:\n      - ASPNETCORE_ENVIRONMENT=Production\n      - ASPNETCORE_URLS=http://+:8080\n      - ConnectionStrings__DefaultConnection=${DB_CONNECTION}\n      - ConnectionStrings__Redis=${REDIS_CONNECTION}\n      - Monitoring__Prometheus__Enabled=true\n    ports:\n      - "8080:8080"\n    depends_on:\n      postgres:\n        condition: service_healthy\n      redis:\n        condition: service_healthy\n    deploy:\n      resources:\n        limits:\n          cpus: \'2\'\n          memory: 2G\n        reservations:\n          cpus: \'1\'\n          memory: 1G\n    logging:\n      driver: "json-file"\n      options:\n        max-size: "10m"\n        max-file: "3"\n\n  admin:\n    image: conduit-admin:latest\n    restart: always\n    environment:\n      - ASPNETCORE_ENVIRONMENT=Production\n      - MasterKey=${ADMIN_MASTER_KEY}\n    ports:\n      - "8081:8080"\n    depends_on:\n      - api\n\n  postgres:\n    image: postgres:16-alpine\n    restart: always\n    environment:\n      - POSTGRES_DB=conduit\n      - POSTGRES_USER=${DB_USER}\n      - POSTGRES_PASSWORD=${DB_PASSWORD}\n      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./init-scripts:/docker-entrypoint-initdb.d\n    healthcheck:\n      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n    deploy:\n      resources:\n        limits:\n          cpus: \'1\'\n          memory: 1G\n\n  redis:\n    image: redis:7-alpine\n    restart: always\n    command: >\n      redis-server\n      --requirepass ${REDIS_PASSWORD}\n      --maxmemory 512mb\n      --maxmemory-policy allkeys-lru\n      --save 900 1\n      --save 300 10\n      --save 60 10000\n    volumes:\n      - redis_data:/data\n    healthcheck:\n      test: ["CMD", "redis-cli", "--auth", "${REDIS_PASSWORD}", "ping"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  prometheus:\n    image: prom/prometheus:latest\n    restart: always\n    command:\n      - \'--config.file=/etc/prometheus/prometheus.yml\'\n      - \'--storage.tsdb.path=/prometheus\'\n      - \'--storage.tsdb.retention.time=30d\'\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus_data:/prometheus\n    ports:\n      - "9090:9090"\n\n  grafana:\n    image: grafana/grafana:latest\n    restart: always\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}\n      - GF_INSTALL_PLUGINS=redis-datasource\n    volumes:\n      - grafana_data:/var/lib/grafana\n      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards\n      - ./grafana/datasources:/etc/grafana/provisioning/datasources\n    ports:\n      - "3000:3000"\n    depends_on:\n      - prometheus\n\nvolumes:\n  postgres_data:\n  redis_data:\n  prometheus_data:\n  grafana_data:\n\nnetworks:\n  default:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 172.20.0.0/16\n'})}),"\n",(0,a.jsx)(e.h2,{id:"kubernetes-deployment",children:"Kubernetes Deployment"}),"\n",(0,a.jsx)(e.h3,{id:"namespace-and-configmap",children:"Namespace and ConfigMap"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-yaml",children:'apiVersion: v1\nkind: Namespace\nmetadata:\n  name: conduit\n\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: conduit-config\n  namespace: conduit\ndata:\n  appsettings.Production.json: |\n    {\n      "Logging": {\n        "LogLevel": {\n          "Default": "Information",\n          "Microsoft.AspNetCore": "Warning"\n        }\n      },\n      "HealthChecks": {\n        "Enabled": true\n      },\n      "Monitoring": {\n        "Prometheus": {\n          "Enabled": true,\n          "Endpoint": "/metrics"\n        }\n      }\n    }\n'})}),"\n",(0,a.jsx)(e.h3,{id:"secrets",children:"Secrets"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Secret\nmetadata:\n  name: conduit-secrets\n  namespace: conduit\ntype: Opaque\ndata:\n  db-connection: <base64-encoded-connection-string>\n  redis-connection: <base64-encoded-redis-connection>\n  master-key: <base64-encoded-master-key>\n"})}),"\n",(0,a.jsx)(e.h3,{id:"api-deployment",children:"API Deployment"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-yaml",children:'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: conduit-api\n  namespace: conduit\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: conduit-api\n  template:\n    metadata:\n      labels:\n        app: conduit-api\n      annotations:\n        prometheus.io/scrape: "true"\n        prometheus.io/port: "8080"\n        prometheus.io/path: "/metrics"\n    spec:\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchExpressions:\n              - key: app\n                operator: In\n                values:\n                - conduit-api\n            topologyKey: kubernetes.io/hostname\n      \n      containers:\n      - name: api\n        image: your-registry/conduit:latest\n        imagePullPolicy: Always\n        ports:\n        - containerPort: 8080\n          name: http\n        \n        env:\n        - name: ASPNETCORE_ENVIRONMENT\n          value: "Production"\n        - name: ConnectionStrings__DefaultConnection\n          valueFrom:\n            secretKeyRef:\n              name: conduit-secrets\n              key: db-connection\n        - name: ConnectionStrings__Redis\n          valueFrom:\n            secretKeyRef:\n              name: conduit-secrets\n              key: redis-connection\n        \n        resources:\n          requests:\n            memory: "1Gi"\n            cpu: "500m"\n          limits:\n            memory: "2Gi"\n            cpu: "2000m"\n        \n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8080\n          initialDelaySeconds: 10\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        \n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8080\n          initialDelaySeconds: 20\n          periodSeconds: 10\n          timeoutSeconds: 10\n          failureThreshold: 3\n        \n        volumeMounts:\n        - name: config\n          mountPath: /app/appsettings.Production.json\n          subPath: appsettings.Production.json\n      \n      volumes:\n      - name: config\n        configMap:\n          name: conduit-config\n'})}),"\n",(0,a.jsx)(e.h3,{id:"service-and-ingress",children:"Service and Ingress"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-yaml",children:'apiVersion: v1\nkind: Service\nmetadata:\n  name: conduit-api\n  namespace: conduit\nspec:\n  selector:\n    app: conduit-api\n  ports:\n  - port: 80\n    targetPort: 8080\n    name: http\n  type: ClusterIP\n\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: conduit-api\n  namespace: conduit\n  annotations:\n    cert-manager.io/cluster-issuer: letsencrypt-prod\n    nginx.ingress.kubernetes.io/rate-limit: "100"\n    nginx.ingress.kubernetes.io/proxy-body-size: "50m"\n    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"\nspec:\n  ingressClassName: nginx\n  tls:\n  - hosts:\n    - api.conduit.example.com\n    secretName: conduit-tls\n  rules:\n  - host: api.conduit.example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: conduit-api\n            port:\n              number: 80\n'})}),"\n",(0,a.jsx)(e.h3,{id:"horizontal-pod-autoscaler",children:"Horizontal Pod Autoscaler"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-yaml",children:'apiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: conduit-api-hpa\n  namespace: conduit\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: conduit-api\n  minReplicas: 3\n  maxReplicas: 20\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n  - type: Pods\n    pods:\n      metric:\n        name: conduit_active_requests\n      target:\n        type: AverageValue\n        averageValue: "100"\n  behavior:\n    scaleDown:\n      stabilizationWindowSeconds: 300\n      policies:\n      - type: Percent\n        value: 10\n        periodSeconds: 60\n    scaleUp:\n      stabilizationWindowSeconds: 60\n      policies:\n      - type: Percent\n        value: 100\n        periodSeconds: 60\n      - type: Pods\n        value: 4\n        periodSeconds: 60\n'})}),"\n",(0,a.jsx)(e.h3,{id:"database-setup",children:"Database Setup"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-yaml",children:'apiVersion: postgresql.cnpg.io/v1\nkind: Cluster\nmetadata:\n  name: postgres-cluster\n  namespace: conduit\nspec:\n  instances: 3\n  \n  postgresql:\n    parameters:\n      max_connections: "200"\n      shared_buffers: "256MB"\n      effective_cache_size: "1GB"\n      \n  bootstrap:\n    initdb:\n      database: conduit\n      owner: conduit\n      secret:\n        name: postgres-credentials\n  \n  monitoring:\n    enabled: true\n    customQueries:\n      - name: "conduit_queries"\n        query: |\n          SELECT query, calls, mean_exec_time\n          FROM pg_stat_statements\n          WHERE query LIKE \'%conduit%\'\n        \n  storage:\n    size: 100Gi\n    storageClass: fast-ssd\n'})}),"\n",(0,a.jsx)(e.h2,{id:"monitoring-stack",children:"Monitoring Stack"}),"\n",(0,a.jsx)(e.h3,{id:"prometheus-configuration",children:"Prometheus Configuration"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-yaml",children:"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: prometheus-config\n  namespace: conduit\ndata:\n  prometheus.yml: |\n    global:\n      scrape_interval: 15s\n      evaluation_interval: 15s\n    \n    scrape_configs:\n    - job_name: 'conduit-api'\n      kubernetes_sd_configs:\n      - role: pod\n        namespaces:\n          names:\n          - conduit\n      relabel_configs:\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n        action: keep\n        regex: true\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\n        action: replace\n        target_label: __metrics_path__\n        regex: (.+)\n      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]\n        action: replace\n        regex: ([^:]+)(?::\\d+)?;(\\d+)\n        replacement: $1:$2\n        target_label: __address__\n    \n    rule_files:\n    - '/etc/prometheus/rules/*.yml'\n    \n    alerting:\n      alertmanagers:\n      - static_configs:\n        - targets:\n          - alertmanager:9093\n"})}),"\n",(0,a.jsx)(e.h3,{id:"grafana-dashboards",children:"Grafana Dashboards"}),"\n",(0,a.jsx)(e.p,{children:"Deploy pre-configured dashboards:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-yaml",children:'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: grafana-dashboards\n  namespace: conduit\ndata:\n  conduit-overview.json: |\n    {\n      "dashboard": {\n        "title": "ConduitLLM Overview",\n        "panels": [\n          {\n            "title": "Request Rate",\n            "targets": [\n              {\n                "expr": "rate(conduit_llm_requests_total[5m])"\n              }\n            ]\n          },\n          {\n            "title": "Response Time",\n            "targets": [\n              {\n                "expr": "histogram_quantile(0.95, conduit_llm_request_duration_seconds_bucket)"\n              }\n            ]\n          }\n        ]\n      }\n    }\n'})}),"\n",(0,a.jsx)(e.h2,{id:"security-hardening",children:"Security Hardening"}),"\n",(0,a.jsx)(e.h3,{id:"network-policies",children:"Network Policies"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: conduit-api-netpol\n  namespace: conduit\nspec:\n  podSelector:\n    matchLabels:\n      app: conduit-api\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: ingress-nginx\n    - podSelector:\n        matchLabels:\n          app: prometheus\n    ports:\n    - protocol: TCP\n      port: 8080\n  egress:\n  - to:\n    - podSelector:\n        matchLabels:\n          app: postgres\n    ports:\n    - protocol: TCP\n      port: 5432\n  - to:\n    - podSelector:\n        matchLabels:\n          app: redis\n    ports:\n    - protocol: TCP\n      port: 6379\n  - to:\n    - namespaceSelector: {}\n      podSelector:\n        matchLabels:\n          k8s-app: kube-dns\n    ports:\n    - protocol: UDP\n      port: 53\n"})}),"\n",(0,a.jsx)(e.h3,{id:"pod-security-policy",children:"Pod Security Policy"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-yaml",children:"apiVersion: policy/v1\nkind: PodDisruptionBudget\nmetadata:\n  name: conduit-api-pdb\n  namespace: conduit\nspec:\n  minAvailable: 2\n  selector:\n    matchLabels:\n      app: conduit-api\n"})}),"\n",(0,a.jsx)(e.h2,{id:"disaster-recovery",children:"Disaster Recovery"}),"\n",(0,a.jsx)(e.h3,{id:"backup-strategy",children:"Backup Strategy"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-yaml",children:'apiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: postgres-backup\n  namespace: conduit\nspec:\n  schedule: "0 2 * * *"\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          containers:\n          - name: backup\n            image: postgres:16-alpine\n            command:\n            - /bin/bash\n            - -c\n            - |\n              pg_dump $DATABASE_URL | gzip > /backup/conduit-$(date +%Y%m%d-%H%M%S).sql.gz\n              # Upload to S3\n              aws s3 cp /backup/conduit-*.sql.gz s3://conduit-backups/\n              # Keep only last 30 days\n              find /backup -name "*.sql.gz" -mtime +30 -delete\n            env:\n            - name: DATABASE_URL\n              valueFrom:\n                secretKeyRef:\n                  name: conduit-secrets\n                  key: db-connection\n            volumeMounts:\n            - name: backup\n              mountPath: /backup\n          volumes:\n          - name: backup\n            persistentVolumeClaim:\n              claimName: backup-pvc\n          restartPolicy: OnFailure\n'})}),"\n",(0,a.jsx)(e.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,a.jsx)(e.h3,{id:"connection-pooling",children:"Connection Pooling"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'// In appsettings.Production.json\n{\n  "ConnectionStrings": {\n    "DefaultConnection": "Host=postgres;Database=conduit;Username=conduit;Password=xxx;Maximum Pool Size=100;Connection Idle Lifetime=300"\n  },\n  "Redis": {\n    "Configuration": "redis:6379,password=xxx,connectTimeout=5000,syncTimeout=5000,abortConnect=false,connectRetry=3"\n  }\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"caching-configuration",children:"Caching Configuration"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'services.AddStackExchangeRedisCache(options =>\n{\n    options.Configuration = Configuration.GetConnectionString("Redis");\n    options.InstanceName = "conduit";\n});\n\nservices.AddMemoryCache(options =>\n{\n    options.SizeLimit = 1024 * 1024 * 100; // 100MB\n});\n'})}),"\n",(0,a.jsx)(e.h2,{id:"observability",children:"Observability"}),"\n",(0,a.jsx)(e.h3,{id:"distributed-tracing",children:"Distributed Tracing"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Service\nmetadata:\n  name: jaeger\n  namespace: conduit\nspec:\n  ports:\n  - name: collector\n    port: 14268\n    targetPort: 14268\n  - name: query\n    port: 16686\n    targetPort: 16686\n  selector:\n    app: jaeger\n"})}),"\n",(0,a.jsx)(e.h3,{id:"log-aggregation",children:"Log Aggregation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-yaml",children:"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: fluent-bit-config\n  namespace: conduit\ndata:\n  fluent-bit.conf: |\n    [SERVICE]\n        Flush         1\n        Log_Level     info\n        Daemon        off\n\n    [INPUT]\n        Name              tail\n        Path              /var/log/containers/*conduit*.log\n        Parser            docker\n        Tag               conduit.*\n        Refresh_Interval  5\n\n    [OUTPUT]\n        Name              es\n        Match             conduit.*\n        Host              elasticsearch\n        Port              9200\n        Index             conduit\n        Type              _doc\n"})}),"\n",(0,a.jsx)(e.h2,{id:"deployment-checklist",children:"Deployment Checklist"}),"\n",(0,a.jsxs)(e.ul,{className:"contains-task-list",children:["\n",(0,a.jsxs)(e.li,{className:"task-list-item",children:[(0,a.jsx)(e.input,{type:"checkbox",disabled:!0})," ","SSL/TLS certificates configured"]}),"\n",(0,a.jsxs)(e.li,{className:"task-list-item",children:[(0,a.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Database connection pooling optimized"]}),"\n",(0,a.jsxs)(e.li,{className:"task-list-item",children:[(0,a.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Redis memory limits set"]}),"\n",(0,a.jsxs)(e.li,{className:"task-list-item",children:[(0,a.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Horizontal scaling configured"]}),"\n",(0,a.jsxs)(e.li,{className:"task-list-item",children:[(0,a.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Health checks enabled"]}),"\n",(0,a.jsxs)(e.li,{className:"task-list-item",children:[(0,a.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Monitoring endpoints exposed"]}),"\n",(0,a.jsxs)(e.li,{className:"task-list-item",children:[(0,a.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Backup strategy implemented"]}),"\n",(0,a.jsxs)(e.li,{className:"task-list-item",children:[(0,a.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Network policies applied"]}),"\n",(0,a.jsxs)(e.li,{className:"task-list-item",children:[(0,a.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Resource limits defined"]}),"\n",(0,a.jsxs)(e.li,{className:"task-list-item",children:[(0,a.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Logging configured"]}),"\n",(0,a.jsxs)(e.li,{className:"task-list-item",children:[(0,a.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Secrets management in place"]}),"\n",(0,a.jsxs)(e.li,{className:"task-list-item",children:[(0,a.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Disaster recovery tested"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"/Conduit/docs/monitoring/health-checks",children:"Health Checks"})," - Configure health monitoring"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"/Conduit/docs/monitoring/metrics-monitoring",children:"Metrics Monitoring"})," - Set up Prometheus"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"/Conduit/docs/monitoring/runbooks",children:"Runbooks"})," - Operational procedures"]}),"\n"]})]})}function p(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>r});var i=t(6540);const a={},o=i.createContext(a);function s(n){const e=i.useContext(o);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),i.createElement(o.Provider,{value:e},n.children)}}}]);