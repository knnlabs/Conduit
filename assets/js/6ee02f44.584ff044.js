"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6015],{8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(6540);const a={},s=i.createContext(a);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}},8680:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"media/overview","title":"Media Generation Overview","description":"Comprehensive guide to image and video generation with async processing and real-time updates","source":"@site/docs/media/overview.md","sourceDirName":"media","slug":"/media/overview","permalink":"/Conduit/docs/media/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/knnlabs/Conduit/tree/main/website/docs/media/overview.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Media Generation Overview","description":"Comprehensive guide to image and video generation with async processing and real-time updates"}}');var a=t(4848),s=t(8453);const r={sidebar_position:1,title:"Media Generation Overview",description:"Comprehensive guide to image and video generation with async processing and real-time updates"},o="Media Generation Overview",d={},l=[{value:"Media Generation Capabilities",id:"media-generation-capabilities",level:2},{value:"Image Generation",id:"image-generation",level:3},{value:"Video Generation",id:"video-generation",level:3},{value:"Supported Providers",id:"supported-providers",level:2},{value:"Image Generation Providers",id:"image-generation-providers",level:3},{value:"Video Generation Providers",id:"video-generation-providers",level:3},{value:"API Endpoints",id:"api-endpoints",level:2},{value:"Image Generation",id:"image-generation-1",level:3},{value:"Video Generation",id:"video-generation-1",level:3},{value:"Quick Start Examples",id:"quick-start-examples",level:2},{value:"Synchronous Image Generation",id:"synchronous-image-generation",level:3},{value:"Asynchronous Image Generation",id:"asynchronous-image-generation",level:3},{value:"Video Generation",id:"video-generation-2",level:3},{value:"Async Processing Architecture",id:"async-processing-architecture",level:2},{value:"Task Lifecycle",id:"task-lifecycle",level:3},{value:"Task States",id:"task-states",level:3},{value:"Real-Time Updates",id:"real-time-updates",level:3},{value:"Storage Configuration",id:"storage-configuration",level:2},{value:"Development Storage (In-Memory)",id:"development-storage-in-memory",level:3},{value:"Production Storage (S3-Compatible)",id:"production-storage-s3-compatible",level:3},{value:"CDN Integration",id:"cdn-integration",level:3},{value:"Media Lifecycle Management",id:"media-lifecycle-management",level:2},{value:"Automatic Cleanup",id:"automatic-cleanup",level:3},{value:"Manual Media Management",id:"manual-media-management",level:3},{value:"Cost Management",id:"cost-management",level:2},{value:"Usage Tracking",id:"usage-tracking",level:3},{value:"Cost Optimization",id:"cost-optimization",level:3},{value:"Quality and Resolution Options",id:"quality-and-resolution-options",level:2},{value:"Image Quality Settings",id:"image-quality-settings",level:3},{value:"Video Quality Settings",id:"video-quality-settings",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Batch Processing",id:"batch-processing",level:3},{value:"Image Editing and Variations",id:"image-editing-and-variations",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Common Media Generation Errors",id:"common-media-generation-errors",level:3},{value:"Retry Strategies",id:"retry-strategies",level:3},{value:"Integration Patterns",id:"integration-patterns",level:2},{value:"Web Application Integration",id:"web-application-integration",level:3},{value:"Mobile Application Pattern",id:"mobile-application-pattern",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Caching Strategies",id:"caching-strategies",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"media-generation-overview",children:"Media Generation Overview"})}),"\n",(0,a.jsx)(n.p,{children:"Conduit's Media Generation platform provides comprehensive image and video generation capabilities through a unified API, supporting multiple providers with async processing, real-time progress updates, and scalable storage solutions."}),"\n",(0,a.jsx)(n.h2,{id:"media-generation-capabilities",children:"Media Generation Capabilities"}),"\n",(0,a.jsx)(n.h3,{id:"image-generation",children:"Image Generation"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Text-to-Image"}),": Generate images from descriptive text prompts"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Image Editing"}),": Modify existing images with AI-powered tools"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Style Transfer"}),": Apply artistic styles to existing images"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Image Upscaling"}),": Enhance image resolution and quality"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Multiple Formats"}),": Support for PNG, JPEG, WebP output formats"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"video-generation",children:"Video Generation"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Text-to-Video"}),": Create videos from text descriptions"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Image-to-Video"}),": Animate static images into video sequences"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Video Enhancement"}),": Improve video quality and resolution"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Custom Durations"}),": Generate videos from 3 seconds to 6 seconds"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Multiple Resolutions"}),": Support for 720p, 1080p, and custom aspect ratios"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"supported-providers",children:"Supported Providers"}),"\n",(0,a.jsx)(n.h3,{id:"image-generation-providers",children:"Image Generation Providers"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Provider"}),(0,a.jsx)(n.th,{children:"Models"}),(0,a.jsx)(n.th,{children:"Strengths"}),(0,a.jsx)(n.th,{children:"Cost"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"OpenAI"})}),(0,a.jsx)(n.td,{children:"DALL-E 2, DALL-E 3"}),(0,a.jsx)(n.td,{children:"High quality, reliable"}),(0,a.jsx)(n.td,{children:"$0.02-0.08 per image"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"MiniMax"})}),(0,a.jsx)(n.td,{children:"Image-01"}),(0,a.jsx)(n.td,{children:"Fast generation, good value"}),(0,a.jsx)(n.td,{children:"$0.01-0.04 per image"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Replicate"})}),(0,a.jsx)(n.td,{children:"Various models"}),(0,a.jsx)(n.td,{children:"Model variety, customization"}),(0,a.jsx)(n.td,{children:"$0.001-0.10 per image"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Stability AI"})}),(0,a.jsx)(n.td,{children:"Stable Diffusion variants"}),(0,a.jsx)(n.td,{children:"Open source, customizable"}),(0,a.jsx)(n.td,{children:"$0.002-0.05 per image"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Midjourney"})}),(0,a.jsx)(n.td,{children:"v6, v5"}),(0,a.jsx)(n.td,{children:"Artistic quality"}),(0,a.jsx)(n.td,{children:"$0.05-0.15 per image"})]})]})]}),"\n",(0,a.jsx)(n.h3,{id:"video-generation-providers",children:"Video Generation Providers"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Provider"}),(0,a.jsx)(n.th,{children:"Models"}),(0,a.jsx)(n.th,{children:"Capabilities"}),(0,a.jsx)(n.th,{children:"Cost"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"MiniMax"})}),(0,a.jsx)(n.td,{children:"Video-01"}),(0,a.jsx)(n.td,{children:"Text-to-video, 6s max"}),(0,a.jsx)(n.td,{children:"$0.20-0.50 per video"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Replicate"})}),(0,a.jsx)(n.td,{children:"Various models"}),(0,a.jsx)(n.td,{children:"Multiple video models"}),(0,a.jsx)(n.td,{children:"$0.10-1.00 per video"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Runway"})}),(0,a.jsx)(n.td,{children:"Gen-2, Gen-3"}),(0,a.jsx)(n.td,{children:"High quality video"}),(0,a.jsx)(n.td,{children:"$0.50-2.00 per video"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Pika Labs"})}),(0,a.jsx)(n.td,{children:"Pika-1"}),(0,a.jsx)(n.td,{children:"Creative video generation"}),(0,a.jsx)(n.td,{children:"$0.30-1.50 per video"})]})]})]}),"\n",(0,a.jsx)(n.h2,{id:"api-endpoints",children:"API Endpoints"}),"\n",(0,a.jsx)(n.h3,{id:"image-generation-1",children:"Image Generation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Sync Generation:    POST /v1/images/generations\nAsync Generation:   POST /v1/images/generations (with async=true)\nTask Status:        GET /v1/tasks/{task_id}\nGenerated Images:   GET /v1/images/{image_id}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"video-generation-1",children:"Video Generation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Async Generation:   POST /v1/video/generations\nTask Status:        GET /v1/tasks/{task_id}\nGenerated Videos:   GET /v1/videos/{video_id}\nProgress Updates:   WebSocket /hubs/video-generation\n"})}),"\n",(0,a.jsx)(n.h2,{id:"quick-start-examples",children:"Quick Start Examples"}),"\n",(0,a.jsx)(n.h3,{id:"synchronous-image-generation",children:"Synchronous Image Generation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import OpenAI from 'openai';\n\nconst openai = new OpenAI({\n  apiKey: 'condt_your_virtual_key',\n  baseURL: 'https://api.conduit.yourdomain.com/v1'\n});\n\n// Synchronous generation (blocks until complete)\nconst response = await openai.images.generate({\n  model: 'dall-e-3',\n  prompt: 'A futuristic city skyline at sunset with flying cars',\n  size: '1024x1024',\n  quality: 'hd',\n  n: 1\n});\n\nconsole.log('Generated image:', response.data[0].url);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"asynchronous-image-generation",children:"Asynchronous Image Generation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Start async generation\nconst response = await fetch('https://api.conduit.yourdomain.com/v1/images/generations', {\n  method: 'POST',\n  headers: {\n    'Authorization': 'Bearer condt_your_virtual_key',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    model: 'dall-e-3',\n    prompt: 'A magical forest with glowing mushrooms and fairy lights',\n    size: '1024x1024',\n    quality: 'hd',\n    async: true,\n    webhook_url: 'https://yourapp.com/webhooks/conduit'\n  })\n});\n\nconst task = await response.json();\nconsole.log('Task started:', task.task_id);\n\n// Poll for completion or wait for webhook\nconst checkStatus = async () => {\n  const statusResponse = await fetch(`https://api.conduit.yourdomain.com/v1/tasks/${task.task_id}`, {\n    headers: {\n      'Authorization': 'Bearer condt_your_virtual_key'\n    }\n  });\n  \n  const status = await statusResponse.json();\n  \n  if (status.status === 'completed') {\n    console.log('Image generated:', status.result.url);\n  } else if (status.status === 'failed') {\n    console.log('Generation failed:', status.error);\n  } else {\n    setTimeout(checkStatus, 2000); // Check again in 2 seconds\n  }\n};\n\ncheckStatus();\n"})}),"\n",(0,a.jsx)(n.h3,{id:"video-generation-2",children:"Video Generation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Video generation is always async\nconst response = await fetch('https://api.conduit.yourdomain.com/v1/video/generations', {\n  method: 'POST',\n  headers: {\n    'Authorization': 'Bearer condt_your_virtual_key',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    model: 'minimax-video',\n    prompt: 'A cat playing piano in a cozy living room, warm lighting',\n    duration: 5,\n    resolution: '1280x720',\n    webhook_url: 'https://yourapp.com/webhooks/conduit'\n  })\n});\n\nconst task = await response.json();\nconsole.log('Video generation started:', task.task_id);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"async-processing-architecture",children:"Async Processing Architecture"}),"\n",(0,a.jsx)(n.h3,{id:"task-lifecycle",children:"Task Lifecycle"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Request \u2192 Validation \u2192 Queue \u2192 Processing \u2192 Storage \u2192 Notification\n    \u2193         \u2193         \u2193         \u2193          \u2193          \u2193\n Task ID   Parameters  RabbitMQ  Provider    S3      Webhook/SignalR\n"})}),"\n",(0,a.jsx)(n.h3,{id:"task-states",children:"Task States"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"State"}),(0,a.jsx)(n.th,{children:"Description"}),(0,a.jsx)(n.th,{children:"Actions Available"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"queued"})}),(0,a.jsx)(n.td,{children:"Task waiting for processing"}),(0,a.jsx)(n.td,{children:"Cancel"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"processing"})}),(0,a.jsx)(n.td,{children:"Generation in progress"}),(0,a.jsx)(n.td,{children:"Cancel (may not stop immediately)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"completed"})}),(0,a.jsx)(n.td,{children:"Generation successful"}),(0,a.jsx)(n.td,{children:"Download, view"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"failed"})}),(0,a.jsx)(n.td,{children:"Generation failed"}),(0,a.jsx)(n.td,{children:"Retry, view error"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"cancelled"})}),(0,a.jsx)(n.td,{children:"Task cancelled by user"}),(0,a.jsx)(n.td,{children:"None"})]})]})]}),"\n",(0,a.jsx)(n.h3,{id:"real-time-updates",children:"Real-Time Updates"}),"\n",(0,a.jsx)(n.p,{children:"Conduit provides multiple ways to track generation progress:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Webhooks"}),": HTTP callbacks when tasks complete"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"SignalR"}),": Real-time WebSocket updates"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Polling"}),": Regular status checks via REST API"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"storage-configuration",children:"Storage Configuration"}),"\n",(0,a.jsx)(n.h3,{id:"development-storage-in-memory",children:"Development Storage (In-Memory)"}),"\n",(0,a.jsx)(n.p,{children:"Default configuration for development:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "storage": {\n    "provider": "InMemory",\n    "maxSize": "100MB",\n    "retention": "1h"\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"production-storage-s3-compatible",children:"Production Storage (S3-Compatible)"}),"\n",(0,a.jsx)(n.p,{children:"Recommended for production deployments:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# S3 Configuration\nexport CONDUITLLM__STORAGE__PROVIDER=S3\nexport CONDUITLLM__STORAGE__S3__SERVICEURL=https://s3.amazonaws.com\nexport CONDUITLLM__STORAGE__S3__ACCESSKEY=your-access-key\nexport CONDUITLLM__STORAGE__S3__SECRETKEY=your-secret-key\nexport CONDUITLLM__STORAGE__S3__BUCKETNAME=conduit-media\nexport CONDUITLLM__STORAGE__S3__REGION=us-east-1\nexport CONDUITLLM__STORAGE__S3__PUBLICBASEURL=https://cdn.yourdomain.com\n"})}),"\n",(0,a.jsx)(n.h3,{id:"cdn-integration",children:"CDN Integration"}),"\n",(0,a.jsx)(n.p,{children:"For optimal performance, configure a CDN:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Cloudflare R2 with CDN\nexport CONDUITLLM__STORAGE__S3__SERVICEURL=https://account-id.r2.cloudflarestorage.com\nexport CONDUITLLM__STORAGE__S3__PUBLICBASEURL=https://media.yourdomain.com\n"})}),"\n",(0,a.jsx)(n.h2,{id:"media-lifecycle-management",children:"Media Lifecycle Management"}),"\n",(0,a.jsx)(n.h3,{id:"automatic-cleanup",children:"Automatic Cleanup"}),"\n",(0,a.jsx)(n.p,{children:"Configure automatic media cleanup:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "mediaLifecycle": {\n    "autoCleanup": true,\n    "retentionDays": 30,\n    "cleanupSchedule": "0 2 * * *",\n    "orphanedMediaCleanup": true\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"manual-media-management",children:"Manual Media Management"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Delete specific media\nconst deleteResponse = await fetch(`https://api.conduit.yourdomain.com/v1/images/${imageId}`, {\n  method: 'DELETE',\n  headers: {\n    'Authorization': 'Bearer condt_your_virtual_key'\n  }\n});\n\n// List media for virtual key\nconst mediaList = await fetch('https://api.conduit.yourdomain.com/v1/media', {\n  headers: {\n    'Authorization': 'Bearer condt_your_virtual_key'\n  }\n});\n\nconst media = await mediaList.json();\nconsole.log('Your generated media:', media.data);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"cost-management",children:"Cost Management"}),"\n",(0,a.jsx)(n.h3,{id:"usage-tracking",children:"Usage Tracking"}),"\n",(0,a.jsx)(n.p,{children:"Media generation costs are tracked per virtual key:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "mediaUsage": {\n    "imagesGenerated": 145,\n    "videosGenerated": 12,\n    "totalCost": 47.85,\n    "breakdown": {\n      "dalle3": { "count": 75, "cost": 22.50 },\n      "minimax_image": { "count": 70, "cost": 14.20 },\n      "minimax_video": { "count": 12, "cost": 11.15 }\n    }\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"cost-optimization",children:"Cost Optimization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Choose cost-effective models for bulk generation\nconst bulkGeneration = async (prompts) => {\n  const tasks = [];\n  \n  for (const prompt of prompts) {\n    const response = await fetch('/v1/images/generations', {\n      method: 'POST',\n      headers: {\n        'Authorization': 'Bearer condt_your_virtual_key',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        model: 'minimax-image', // Lower cost option\n        prompt,\n        size: '1024x1024',\n        async: true\n      })\n    });\n    \n    const task = await response.json();\n    tasks.push(task.task_id);\n  }\n  \n  return tasks;\n};\n"})}),"\n",(0,a.jsx)(n.h2,{id:"quality-and-resolution-options",children:"Quality and Resolution Options"}),"\n",(0,a.jsx)(n.h3,{id:"image-quality-settings",children:"Image Quality Settings"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// High quality settings\nconst highQualityImage = await openai.images.generate({\n  model: 'dall-e-3',\n  prompt: 'Professional headshot of a businesswoman',\n  size: '1024x1024',\n  quality: 'hd',        // HD quality\n  style: 'natural'      // Natural vs vivid\n});\n\n// Standard quality for faster/cheaper generation\nconst standardImage = await openai.images.generate({\n  model: 'dall-e-2',\n  prompt: 'Cartoon character illustration',\n  size: '512x512',\n  quality: 'standard'\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"video-quality-settings",children:"Video Quality Settings"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const videoGeneration = await fetch('/v1/video/generations', {\n  method: 'POST',\n  headers: {\n    'Authorization': 'Bearer condt_your_virtual_key',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    model: 'minimax-video',\n    prompt: 'A peaceful lake at sunrise with mountains in background',\n    resolution: '1920x1080',  // HD quality\n    duration: 6,              // Maximum duration\n    framerate: 24,            // Smooth motion\n    quality: 'high'           // High quality setting\n  })\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,a.jsx)(n.h3,{id:"batch-processing",children:"Batch Processing"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"class MediaBatchProcessor {\n  constructor(apiKey, concurrency = 5) {\n    this.apiKey = apiKey;\n    this.concurrency = concurrency;\n    this.queue = [];\n    this.processing = new Set();\n  }\n\n  async addImageGeneration(prompt, options = {}) {\n    const task = {\n      type: 'image',\n      prompt,\n      options,\n      id: crypto.randomUUID()\n    };\n    \n    this.queue.push(task);\n    this.processQueue();\n    \n    return task.id;\n  }\n\n  async processQueue() {\n    while (this.queue.length > 0 && this.processing.size < this.concurrency) {\n      const task = this.queue.shift();\n      this.processing.add(task.id);\n      \n      this.processTask(task).finally(() => {\n        this.processing.delete(task.id);\n        this.processQueue(); // Continue processing\n      });\n    }\n  }\n\n  async processTask(task) {\n    try {\n      const response = await fetch('/v1/images/generations', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          model: 'dall-e-3',\n          prompt: task.prompt,\n          async: true,\n          ...task.options\n        })\n      });\n\n      const result = await response.json();\n      this.onTaskStarted(task.id, result.task_id);\n    } catch (error) {\n      this.onTaskFailed(task.id, error);\n    }\n  }\n\n  onTaskStarted(taskId, conduitTaskId) {\n    console.log(`Batch task ${taskId} started as ${conduitTaskId}`);\n  }\n\n  onTaskFailed(taskId, error) {\n    console.log(`Batch task ${taskId} failed:`, error.message);\n  }\n}\n\n// Usage\nconst processor = new MediaBatchProcessor('condt_your_virtual_key', 3);\n\nconst prompts = [\n  'A red car on a mountain road',\n  'A blue ocean with sailing boats',\n  'A green forest with tall trees'\n];\n\nfor (const prompt of prompts) {\n  await processor.addImageGeneration(prompt);\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"image-editing-and-variations",children:"Image Editing and Variations"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Generate variations of an existing image\nconst variations = await openai.images.createVariation({\n  image: fs.createReadStream('original-image.png'),\n  n: 3,\n  size: '1024x1024'\n});\n\n// Edit an image with a mask\nconst edit = await openai.images.edit({\n  image: fs.createReadStream('original.png'),\n  mask: fs.createReadStream('mask.png'),\n  prompt: 'A beautiful garden with flowers',\n  n: 1,\n  size: '1024x1024'\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,a.jsx)(n.h3,{id:"common-media-generation-errors",children:"Common Media Generation Errors"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"try {\n  const response = await openai.images.generate({\n    model: 'dall-e-3',\n    prompt: 'A beautiful landscape',\n    size: '1024x1024'\n  });\n} catch (error) {\n  switch (error.code) {\n    case 'content_policy_violation':\n      console.log('Prompt violates content policy');\n      break;\n    case 'rate_limit_exceeded':\n      console.log('Too many requests, please wait');\n      break;\n    case 'insufficient_quota':\n      console.log('Quota exceeded for this model');\n      break;\n    case 'model_overloaded':\n      console.log('Model temporarily overloaded, try again');\n      break;\n    case 'invalid_image_size':\n      console.log('Requested size not supported by model');\n      break;\n    default:\n      console.log('Generation error:', error.message);\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"retry-strategies",children:"Retry Strategies"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"class MediaGenerationClient {\n  constructor(apiKey, maxRetries = 3) {\n    this.apiKey = apiKey;\n    this.maxRetries = maxRetries;\n  }\n\n  async generateWithRetry(params, attempt = 1) {\n    try {\n      return await this.generate(params);\n    } catch (error) {\n      if (attempt >= this.maxRetries) {\n        throw error;\n      }\n\n      // Retry for certain error types\n      if (this.shouldRetry(error)) {\n        const delay = Math.pow(2, attempt) * 1000; // Exponential backoff\n        console.log(`Retrying in ${delay}ms (attempt ${attempt + 1}/${this.maxRetries})`);\n        \n        await new Promise(resolve => setTimeout(resolve, delay));\n        return this.generateWithRetry(params, attempt + 1);\n      }\n\n      throw error;\n    }\n  }\n\n  shouldRetry(error) {\n    const retryableCodes = [\n      'model_overloaded',\n      'rate_limit_exceeded',\n      'network_error',\n      'timeout'\n    ];\n    \n    return retryableCodes.includes(error.code);\n  }\n\n  async generate(params) {\n    const response = await fetch('/v1/images/generations', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${this.apiKey}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(params)\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error.message);\n    }\n\n    return await response.json();\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"integration-patterns",children:"Integration Patterns"}),"\n",(0,a.jsx)(n.h3,{id:"web-application-integration",children:"Web Application Integration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"class MediaGenerationUI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.activeTasks = new Map();\n    this.setupSignalR();\n  }\n\n  setupSignalR() {\n    this.connection = new signalR.HubConnectionBuilder()\n      .withUrl('/hubs/image-generation', {\n        accessTokenFactory: () => this.apiKey\n      })\n      .build();\n\n    this.connection.on('ImageGenerationStarted', (data) => {\n      this.showProgress(data.taskId);\n    });\n\n    this.connection.on('ImageGenerationCompleted', (data) => {\n      this.hideProgress(data.taskId);\n      this.displayImage(data.imageUrl);\n    });\n\n    this.connection.on('ImageGenerationFailed', (data) => {\n      this.hideProgress(data.taskId);\n      this.showError(data.error);\n    });\n\n    this.connection.start();\n  }\n\n  async generateImage(prompt) {\n    const response = await fetch('/v1/images/generations', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${this.apiKey}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        model: 'dall-e-3',\n        prompt,\n        size: '1024x1024',\n        async: true\n      })\n    });\n\n    const task = await response.json();\n    this.activeTasks.set(task.task_id, prompt);\n    \n    return task.task_id;\n  }\n\n  showProgress(taskId) {\n    const progressDiv = document.createElement('div');\n    progressDiv.id = `progress-${taskId}`;\n    progressDiv.innerHTML = `\n      <div class=\"progress-bar\">\n        <div class=\"progress-fill\"></div>\n      </div>\n      <p>Generating image...</p>\n    `;\n    \n    document.getElementById('results').appendChild(progressDiv);\n  }\n\n  hideProgress(taskId) {\n    const progressDiv = document.getElementById(`progress-${taskId}`);\n    if (progressDiv) {\n      progressDiv.remove();\n    }\n  }\n\n  displayImage(imageUrl) {\n    const img = document.createElement('img');\n    img.src = imageUrl;\n    img.className = 'generated-image';\n    \n    document.getElementById('results').appendChild(img);\n  }\n\n  showError(error) {\n    const errorDiv = document.createElement('div');\n    errorDiv.className = 'error';\n    errorDiv.textContent = `Generation failed: ${error}`;\n    \n    document.getElementById('results').appendChild(errorDiv);\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"mobile-application-pattern",children:"Mobile Application Pattern"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Mobile app integration with push notifications\nclass MobileMediaGenerator {\n  constructor(apiKey, pushToken) {\n    this.apiKey = apiKey;\n    this.pushToken = pushToken;\n  }\n\n  async generateImage(prompt) {\n    const response = await fetch('/v1/images/generations', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${this.apiKey}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        model: 'dall-e-3',\n        prompt,\n        size: '1024x1024',\n        async: true,\n        webhook_url: `https://yourapi.com/webhooks/mobile?token=${this.pushToken}`\n      })\n    });\n\n    const task = await response.json();\n    \n    // Store task locally for reference\n    await this.storeTask(task.task_id, prompt);\n    \n    return task.task_id;\n  }\n\n  async storeTask(taskId, prompt) {\n    // Store in local database/storage\n    const task = {\n      id: taskId,\n      prompt,\n      status: 'processing',\n      createdAt: Date.now()\n    };\n    \n    localStorage.setItem(`task_${taskId}`, JSON.stringify(task));\n  }\n\n  async handlePushNotification(notification) {\n    if (notification.type === 'image_completed') {\n      const taskId = notification.taskId;\n      const imageUrl = notification.imageUrl;\n      \n      // Update local task status\n      const task = JSON.parse(localStorage.getItem(`task_${taskId}`));\n      task.status = 'completed';\n      task.imageUrl = imageUrl;\n      task.completedAt = Date.now();\n      \n      localStorage.setItem(`task_${taskId}`, JSON.stringify(task));\n      \n      // Update UI\n      this.updateTaskInUI(task);\n    }\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,a.jsx)(n.h3,{id:"caching-strategies",children:"Caching Strategies"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"class MediaCache {\n  constructor() {\n    this.cache = new Map();\n    this.maxAge = 24 * 60 * 60 * 1000; // 24 hours\n  }\n\n  getCacheKey(prompt, options) {\n    return crypto.createHash('md5')\n      .update(JSON.stringify({ prompt, ...options }))\n      .digest('hex');\n  }\n\n  async getCachedImage(prompt, options) {\n    const key = this.getCacheKey(prompt, options);\n    const cached = this.cache.get(key);\n    \n    if (cached && Date.now() - cached.timestamp < this.maxAge) {\n      return cached.imageUrl;\n    }\n    \n    return null;\n  }\n\n  setCachedImage(prompt, options, imageUrl) {\n    const key = this.getCacheKey(prompt, options);\n    this.cache.set(key, {\n      imageUrl,\n      timestamp: Date.now()\n    });\n  }\n\n  async generateWithCache(prompt, options = {}) {\n    // Check cache first\n    const cached = await this.getCachedImage(prompt, options);\n    if (cached) {\n      console.log('Using cached image');\n      return { url: cached, cached: true };\n    }\n\n    // Generate new image\n    const response = await this.generate(prompt, options);\n    \n    // Cache the result\n    this.setCachedImage(prompt, options, response.data[0].url);\n    \n    return { ...response.data[0], cached: false };\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Image Generation"}),": Deep dive into ",(0,a.jsx)(n.a,{href:"image-generation",children:"image generation capabilities"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Video Generation"}),": Explore ",(0,a.jsx)(n.a,{href:"video-generation",children:"video generation features"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Async Processing"}),": Learn about ",(0,a.jsx)(n.a,{href:"async-processing",children:"async task management"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Storage Configuration"}),": Set up ",(0,a.jsx)(n.a,{href:"storage-configuration",children:"media storage"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Real-Time Updates"}),": Integrate ",(0,a.jsx)(n.a,{href:"../realtime/overview",children:"real-time notifications"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);