"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4687],{8238:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"deployment/monitoring-health","title":"Monitoring & Health","description":"Comprehensive monitoring, alerting, and health checks for Conduit production deployments","source":"@site/docs/deployment/monitoring-health.md","sourceDirName":"deployment","slug":"/deployment/monitoring-health","permalink":"/Conduit/docs/deployment/monitoring-health","draft":false,"unlisted":false,"editUrl":"https://github.com/knnlabs/Conduit/tree/main/website/docs/deployment/monitoring-health.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"Monitoring & Health","description":"Comprehensive monitoring, alerting, and health checks for Conduit production deployments"}}');var i=t(4848),s=t(8453);const a={sidebar_position:5,title:"Monitoring & Health",description:"Comprehensive monitoring, alerting, and health checks for Conduit production deployments"},l="Monitoring & Health",o={},c=[{value:"Health Check Endpoints",id:"health-check-endpoints",level:2},{value:"Core API Health Checks",id:"core-api-health-checks",level:3},{value:"Admin API Health Checks",id:"admin-api-health-checks",level:3},{value:"Health Check Response Format",id:"health-check-response-format",level:3},{value:"Prometheus Metrics",id:"prometheus-metrics",level:2},{value:"Metrics Configuration",id:"metrics-configuration",level:3},{value:"Core Metrics Categories",id:"core-metrics-categories",level:3},{value:"Grafana Dashboards",id:"grafana-dashboards",level:2},{value:"Core API Dashboard",id:"core-api-dashboard",level:3},{value:"Infrastructure Dashboard",id:"infrastructure-dashboard",level:3},{value:"Alerting Rules",id:"alerting-rules",level:2},{value:"Critical Alerts",id:"critical-alerts",level:3},{value:"Warning Alerts",id:"warning-alerts",level:3},{value:"Log Aggregation",id:"log-aggregation",level:2},{value:"Structured Logging Configuration",id:"structured-logging-configuration",level:3},{value:"Key Log Events",id:"key-log-events",level:3},{value:"ELK Stack Configuration",id:"elk-stack-configuration",level:3},{value:"Application Performance Monitoring (APM)",id:"application-performance-monitoring-apm",level:2},{value:"OpenTelemetry Configuration",id:"opentelemetry-configuration",level:3},{value:"Distributed Tracing",id:"distributed-tracing",level:3},{value:"Operational Runbooks",id:"operational-runbooks",level:2},{value:"High Error Rate Response",id:"high-error-rate-response",level:3},{value:"High Latency Response",id:"high-latency-response",level:3},{value:"Provider Outage Response",id:"provider-outage-response",level:3},{value:"Performance Baselines",id:"performance-baselines",level:2},{value:"Expected Performance Metrics",id:"expected-performance-metrics",level:3},{value:"Capacity Planning",id:"capacity-planning",level:3},{value:"Troubleshooting Tools",id:"troubleshooting-tools",level:2},{value:"Health Check Scripts",id:"health-check-scripts",level:3},{value:"Performance Analysis",id:"performance-analysis",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"monitoring--health",children:"Monitoring & Health"})}),"\n",(0,i.jsx)(n.p,{children:"Comprehensive monitoring is essential for production Conduit deployments. This guide covers health checks, metrics collection, alerting, and observability."}),"\n",(0,i.jsx)(n.h2,{id:"health-check-endpoints",children:"Health Check Endpoints"}),"\n",(0,i.jsx)(n.h3,{id:"core-api-health-checks",children:"Core API Health Checks"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Basic health check\ncurl http://localhost:5000/health\n# Response: Healthy\n\n# Detailed health information\ncurl http://localhost:5000/health/ready\n\n# Component-specific health\ncurl http://localhost:5000/health/database\ncurl http://localhost:5000/health/redis\ncurl http://localhost:5000/health/rabbitmq\n"})}),"\n",(0,i.jsx)(n.h3,{id:"admin-api-health-checks",children:"Admin API Health Checks"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Admin API health\ncurl http://localhost:5002/health\n\n# Admin-specific components\ncurl http://localhost:5002/health/database\ncurl http://localhost:5002/health/providers\n"})}),"\n",(0,i.jsx)(n.h3,{id:"health-check-response-format",children:"Health Check Response Format"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "status": "Healthy",\n  "totalDuration": "00:00:00.0234567",\n  "entries": {\n    "database": {\n      "status": "Healthy",\n      "duration": "00:00:00.0123456",\n      "description": "Database connection successful"\n    },\n    "redis": {\n      "status": "Healthy", \n      "duration": "00:00:00.0098765",\n      "description": "Redis connection successful"\n    },\n    "rabbitmq": {\n      "status": "Healthy",\n      "duration": "00:00:00.0156789",\n      "description": "RabbitMQ connection successful"\n    },\n    "providers": {\n      "status": "Degraded",\n      "duration": "00:00:00.0245678",\n      "description": "2 of 5 providers available",\n      "data": {\n        "openai": "Healthy",\n        "anthropic": "Healthy", \n        "google": "Unhealthy",\n        "azure": "Unhealthy",\n        "cohere": "Healthy"\n      }\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"prometheus-metrics",children:"Prometheus Metrics"}),"\n",(0,i.jsx)(n.h3,{id:"metrics-configuration",children:"Metrics Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# appsettings.Production.json\n{\n  "Metrics": {\n    "Enabled": true,\n    "Endpoint": "/metrics",\n    "IncludeDebugMetrics": false\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"core-metrics-categories",children:"Core Metrics Categories"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"HTTP Request Metrics:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-prometheus",children:'# Request duration\nhttp_request_duration_seconds{method="POST",endpoint="/v1/chat/completions",status="200"}\n\n# Request count\nhttp_requests_total{method="POST",endpoint="/v1/chat/completions",status="200"}\n\n# Active requests\nhttp_requests_active{method="POST",endpoint="/v1/chat/completions"}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Provider Metrics:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-prometheus",children:'# Provider request duration\nprovider_request_duration_seconds{provider="openai",model="gpt-4"}\n\n# Provider request count\nprovider_requests_total{provider="openai",model="gpt-4",status="success"}\n\n# Provider errors\nprovider_errors_total{provider="openai",error_type="rate_limit"}\n\n# Provider health\nprovider_health_status{provider="openai",status="healthy"}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Virtual Key Metrics:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-prometheus",children:'# Virtual key usage\nvirtual_key_requests_total{key_hash="abcd1234",model="gpt-4"}\n\n# Virtual key spending  \nvirtual_key_cost_total{key_hash="abcd1234",provider="openai"}\n\n# Virtual key rate limiting\nvirtual_key_rate_limited_total{key_hash="abcd1234"}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Database Metrics:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-prometheus",children:'# Connection pool\ndatabase_connections_active\ndatabase_connections_available\ndatabase_connections_total\n\n# Query performance\ndatabase_query_duration_seconds{operation="select"}\ndatabase_queries_total{operation="select",status="success"}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"RabbitMQ Metrics:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-prometheus",children:'# Queue depth\nrabbitmq_queue_messages{queue="conduit.webhook-delivery"}\n\n# Message processing\nrabbitmq_messages_processed_total{queue="conduit.webhook-delivery"}\n\n# Consumer performance\nrabbitmq_consumer_duration_seconds{queue="conduit.webhook-delivery"}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Cache Metrics:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-prometheus",children:'# Redis performance\nredis_operations_total{operation="get",status="hit"}\nredis_operation_duration_seconds{operation="get"}\n\n# Cache effectiveness\ncache_hit_ratio{cache_type="virtual_key"}\ncache_evictions_total{cache_type="virtual_key"}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"grafana-dashboards",children:"Grafana Dashboards"}),"\n",(0,i.jsx)(n.h3,{id:"core-api-dashboard",children:"Core API Dashboard"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "dashboard": {\n    "title": "Conduit Core API",\n    "panels": [\n      {\n        "title": "Request Rate",\n        "type": "graph",\n        "targets": [\n          {\n            "expr": "rate(http_requests_total[5m])",\n            "legendFormat": "{{method}} {{endpoint}}"\n          }\n        ]\n      },\n      {\n        "title": "Response Time P95",\n        "type": "graph", \n        "targets": [\n          {\n            "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))",\n            "legendFormat": "95th percentile"\n          }\n        ]\n      },\n      {\n        "title": "Error Rate",\n        "type": "graph",\n        "targets": [\n          {\n            "expr": "rate(http_requests_total{status=~\\"5..\\"}[5m]) / rate(http_requests_total[5m])",\n            "legendFormat": "Error Rate"\n          }\n        ]\n      },\n      {\n        "title": "Provider Health",\n        "type": "stat",\n        "targets": [\n          {\n            "expr": "provider_health_status",\n            "legendFormat": "{{provider}}"\n          }\n        ]\n      }\n    ]\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"infrastructure-dashboard",children:"Infrastructure Dashboard"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "dashboard": {\n    "title": "Conduit Infrastructure",\n    "panels": [\n      {\n        "title": "Database Connections",\n        "type": "graph",\n        "targets": [\n          {\n            "expr": "database_connections_active",\n            "legendFormat": "Active"\n          },\n          {\n            "expr": "database_connections_available", \n            "legendFormat": "Available"\n          }\n        ]\n      },\n      {\n        "title": "RabbitMQ Queue Depth",\n        "type": "graph",\n        "targets": [\n          {\n            "expr": "rabbitmq_queue_messages",\n            "legendFormat": "{{queue}}"\n          }\n        ]\n      },\n      {\n        "title": "Redis Performance",\n        "type": "graph",\n        "targets": [\n          {\n            "expr": "rate(redis_operations_total[5m])",\n            "legendFormat": "{{operation}} - {{status}}"\n          }\n        ]\n      }\n    ]\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"alerting-rules",children:"Alerting Rules"}),"\n",(0,i.jsx)(n.h3,{id:"critical-alerts",children:"Critical Alerts"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# alerts/critical.yml\ngroups:\n  - name: conduit-critical\n    rules:\n      - alert: ConduitDown\n        expr: up{job=~"conduit.*"} == 0\n        for: 1m\n        labels:\n          severity: critical\n        annotations:\n          summary: "Conduit service is down"\n          description: "{{$labels.job}} has been down for more than 1 minute"\n          \n      - alert: HighErrorRate\n        expr: rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m]) > 0.05\n        for: 2m\n        labels:\n          severity: critical\n        annotations:\n          summary: "High error rate detected"\n          description: "Error rate is {{$value | humanizePercentage}} for the last 5 minutes"\n          \n      - alert: DatabaseConnectionPoolExhausted\n        expr: database_connections_available / database_connections_total < 0.1\n        for: 1m\n        labels:\n          severity: critical\n        annotations:\n          summary: "Database connection pool nearly exhausted"\n          description: "Less than 10% of database connections available"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"warning-alerts",children:"Warning Alerts"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# alerts/warning.yml\ngroups:\n  - name: conduit-warning\n    rules:\n      - alert: HighLatency\n        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 2\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: "High latency detected"\n          description: "95th percentile latency is {{$value}}s"\n          \n      - alert: ProviderDegraded\n        expr: provider_health_status{status="healthy"} / ignoring(status) group_left() provider_health_status < 0.8\n        for: 3m\n        labels:\n          severity: warning\n        annotations:\n          summary: "Provider availability degraded"\n          description: "Less than 80% of providers are healthy"\n          \n      - alert: RabbitMQQueueBuildup\n        expr: rabbitmq_queue_messages > 1000\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: "RabbitMQ queue buildup detected"\n          description: "Queue {{$labels.queue}} has {{$value}} messages"\n          \n      - alert: CacheHitRateLow\n        expr: cache_hit_ratio < 0.8\n        for: 10m\n        labels:\n          severity: warning\n        annotations:\n          summary: "Cache hit rate is low"\n          description: "Cache hit rate is {{$value | humanizePercentage}} for {{$labels.cache_type}}"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"log-aggregation",children:"Log Aggregation"}),"\n",(0,i.jsx)(n.h3,{id:"structured-logging-configuration",children:"Structured Logging Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "Serilog": {\n    "Using": ["Serilog.Sinks.Console", "Serilog.Sinks.Elasticsearch"],\n    "MinimumLevel": {\n      "Default": "Information",\n      "Override": {\n        "Microsoft": "Warning",\n        "System": "Warning"\n      }\n    },\n    "WriteTo": [\n      {\n        "Name": "Console",\n        "Args": {\n          "outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}"\n        }\n      },\n      {\n        "Name": "Elasticsearch",\n        "Args": {\n          "nodeUris": "http://elasticsearch:9200",\n          "indexFormat": "conduit-logs-{0:yyyy.MM.dd}",\n          "autoRegisterTemplate": true\n        }\n      }\n    ],\n    "Enrich": ["FromLogContext", "WithMachineName", "WithEnvironmentUserName"],\n    "Properties": {\n      "Application": "Conduit",\n      "Environment": "Production"\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"key-log-events",children:"Key Log Events"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Request Tracing:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "timestamp": "2024-01-15T10:30:00.123Z",\n  "level": "Information",\n  "messageTemplate": "Processed {Method} {Endpoint} in {Duration}ms",\n  "properties": {\n    "Method": "POST",\n    "Endpoint": "/v1/chat/completions", \n    "Duration": 1234,\n    "StatusCode": 200,\n    "VirtualKeyHash": "abcd1234",\n    "Provider": "openai",\n    "Model": "gpt-4",\n    "TokensUsed": 150,\n    "Cost": 0.003,\n    "CorrelationId": "req-xyz789"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Error Tracking:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "timestamp": "2024-01-15T10:35:00.456Z",\n  "level": "Error",\n  "messageTemplate": "Provider request failed: {Error}",\n  "properties": {\n    "Provider": "openai",\n    "Model": "gpt-4",\n    "Error": "Rate limit exceeded",\n    "StatusCode": 429,\n    "RetryAfter": 60,\n    "CorrelationId": "req-abc123"\n  },\n  "exception": "ProviderRateLimitException: Rate limit exceeded..."\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"elk-stack-configuration",children:"ELK Stack Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# docker-compose.yml additions\nservices:\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0\n    environment:\n      - discovery.type=single-node\n      - xpack.security.enabled=false\n    ports:\n      - "9200:9200"\n    volumes:\n      - elasticsearch_data:/usr/share/elasticsearch/data\n      \n  logstash:\n    image: docker.elastic.co/logstash/logstash:8.11.0\n    volumes:\n      - "./logstash.conf:/usr/share/logstash/pipeline/logstash.conf"\n    ports:\n      - "5044:5044"\n    depends_on:\n      - elasticsearch\n      \n  kibana:\n    image: docker.elastic.co/kibana/kibana:8.11.0\n    ports:\n      - "5601:5601"\n    environment:\n      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200\n    depends_on:\n      - elasticsearch\n\nvolumes:\n  elasticsearch_data:\n'})}),"\n",(0,i.jsx)(n.h2,{id:"application-performance-monitoring-apm",children:"Application Performance Monitoring (APM)"}),"\n",(0,i.jsx)(n.h3,{id:"opentelemetry-configuration",children:"OpenTelemetry Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'// Program.cs\nservices.AddOpenTelemetry()\n    .WithTracing(builder =>\n    {\n        builder\n            .AddAspNetCoreInstrumentation()\n            .AddHttpClientInstrumentation()\n            .AddEntityFrameworkCoreInstrumentation()\n            .AddRedisInstrumentation()\n            .AddSource("Conduit.*")\n            .SetSampler(new TraceIdRatioBasedSampler(1.0))\n            .AddJaegerExporter();\n    })\n    .WithMetrics(builder =>\n    {\n        builder\n            .AddAspNetCoreInstrumentation()\n            .AddHttpClientInstrumentation()\n            .AddRuntimeInstrumentation()\n            .AddPrometheusExporter();\n    });\n'})}),"\n",(0,i.jsx)(n.h3,{id:"distributed-tracing",children:"Distributed Tracing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'// Custom tracing for provider requests\nusing var activity = ActivitySource.StartActivity("provider.request");\nactivity?.SetTag("provider", providerName);\nactivity?.SetTag("model", modelName);\nactivity?.SetTag("virtual_key", virtualKeyHash);\n\ntry\n{\n    var response = await providerClient.SendAsync(request);\n    activity?.SetTag("status", "success");\n    activity?.SetTag("tokens", response.TokensUsed);\n    return response;\n}\ncatch (Exception ex)\n{\n    activity?.SetTag("status", "error");\n    activity?.SetTag("error", ex.Message);\n    throw;\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"operational-runbooks",children:"Operational Runbooks"}),"\n",(0,i.jsx)(n.h3,{id:"high-error-rate-response",children:"High Error Rate Response"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Immediate Actions (< 5 minutes)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Check provider health status"}),"\n",(0,i.jsx)(n.li,{children:"Verify database connectivity"}),"\n",(0,i.jsx)(n.li,{children:"Check recent deployments"}),"\n",(0,i.jsx)(n.li,{children:"Scale up if resource constrained"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Investigation (5-15 minutes)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Analyze error logs for patterns"}),"\n",(0,i.jsx)(n.li,{children:"Check external provider status pages"}),"\n",(0,i.jsx)(n.li,{children:"Verify configuration changes"}),"\n",(0,i.jsx)(n.li,{children:"Review recent virtual key changes"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Resolution (15-30 minutes)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Disable problematic providers if needed"}),"\n",(0,i.jsx)(n.li,{children:"Rollback recent deployments"}),"\n",(0,i.jsx)(n.li,{children:"Adjust rate limits or scaling"}),"\n",(0,i.jsx)(n.li,{children:"Communicate with stakeholders"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"high-latency-response",children:"High Latency Response"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Immediate Checks"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Database query performance"}),"\n",(0,i.jsx)(n.li,{children:"Provider response times"}),"\n",(0,i.jsx)(n.li,{children:"RabbitMQ queue buildup"}),"\n",(0,i.jsx)(n.li,{children:"Resource utilization"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Scaling Actions"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Increase Core API replicas"}),"\n",(0,i.jsx)(n.li,{children:"Scale database connections"}),"\n",(0,i.jsx)(n.li,{children:"Add RabbitMQ consumers"}),"\n",(0,i.jsx)(n.li,{children:"Check cache hit rates"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"provider-outage-response",children:"Provider Outage Response"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Detection and Validation"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Confirm provider status"}),"\n",(0,i.jsx)(n.li,{children:"Check multiple models/endpoints"}),"\n",(0,i.jsx)(n.li,{children:"Verify with provider status page"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Immediate Mitigation"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Disable affected provider temporarily"}),"\n",(0,i.jsx)(n.li,{children:"Reroute traffic to healthy providers"}),"\n",(0,i.jsx)(n.li,{children:"Adjust model mappings"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Communication"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Update stakeholders"}),"\n",(0,i.jsx)(n.li,{children:"Document incident timeline"}),"\n",(0,i.jsx)(n.li,{children:"Plan provider re-enablement"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"performance-baselines",children:"Performance Baselines"}),"\n",(0,i.jsx)(n.h3,{id:"expected-performance-metrics",children:"Expected Performance Metrics"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Metric"}),(0,i.jsx)(n.th,{children:"Target"}),(0,i.jsx)(n.th,{children:"Alert Threshold"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Response Time P95"})}),(0,i.jsx)(n.td,{children:"< 2s"}),(0,i.jsx)(n.td,{children:"> 5s"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Error Rate"})}),(0,i.jsx)(n.td,{children:"< 1%"}),(0,i.jsx)(n.td,{children:"> 5%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Provider Availability"})}),(0,i.jsx)(n.td,{children:"> 95%"}),(0,i.jsx)(n.td,{children:"< 80%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Database Connections"})}),(0,i.jsx)(n.td,{children:"< 80%"}),(0,i.jsx)(n.td,{children:"> 90%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Queue Depth"})}),(0,i.jsx)(n.td,{children:"< 100"}),(0,i.jsx)(n.td,{children:"> 1000"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Cache Hit Rate"})}),(0,i.jsx)(n.td,{children:"> 90%"}),(0,i.jsx)(n.td,{children:"< 80%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"CPU Utilization"})}),(0,i.jsx)(n.td,{children:"< 70%"}),(0,i.jsx)(n.td,{children:"> 90%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Memory Usage"})}),(0,i.jsx)(n.td,{children:"< 80%"}),(0,i.jsx)(n.td,{children:"> 95%"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"capacity-planning",children:"Capacity Planning"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Traffic Growth Indicators:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Request rate trending upward"}),"\n",(0,i.jsx)(n.li,{children:"Database connection pool utilization increasing"}),"\n",(0,i.jsx)(n.li,{children:"RabbitMQ queue depths growing"}),"\n",(0,i.jsx)(n.li,{children:"Cache miss rate increasing"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Scaling Triggers:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Sustained CPU > 70% for 15 minutes"}),"\n",(0,i.jsx)(n.li,{children:"Memory usage > 80% for 10 minutes"}),"\n",(0,i.jsx)(n.li,{children:"Database connections > 80% for 5 minutes"}),"\n",(0,i.jsx)(n.li,{children:"Queue depth > 500 for 5 minutes"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting-tools",children:"Troubleshooting Tools"}),"\n",(0,i.jsx)(n.h3,{id:"health-check-scripts",children:"Health Check Scripts"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n# health-check.sh - Comprehensive health validation\n\necho "=== Conduit Health Check ==="\n\n# Core API Health\necho "Checking Core API..."\ncurl -f http://localhost:5000/health || echo "Core API FAILED"\n\n# Admin API Health  \necho "Checking Admin API..."\ncurl -f http://localhost:5002/health || echo "Admin API FAILED"\n\n# Database Health\necho "Checking Database..."\ncurl -f http://localhost:5000/health/database || echo "Database FAILED"\n\n# RabbitMQ Health\necho "Checking RabbitMQ..."\ncurl -f http://localhost:5000/health/rabbitmq || echo "RabbitMQ FAILED"\n\n# Provider Health\necho "Checking Providers..."\ncurl -s http://localhost:5002/api/admin/providers/health | jq \'.[] | select(.isHealthy == false)\'\n\necho "=== Health Check Complete ==="\n'})}),"\n",(0,i.jsx)(n.h3,{id:"performance-analysis",children:"Performance Analysis"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n# performance-check.sh\n\necho "=== Performance Analysis ==="\n\n# Request metrics\necho "Request rate (last 5 minutes):"\ncurl -s \'http://prometheus:9090/api/v1/query?query=rate(http_requests_total[5m])\' | jq -r \'.data.result[] | "\\(.metric.endpoint): \\(.value[1])"\'\n\n# Latency percentiles\necho "Response time P95:"\ncurl -s \'http://prometheus:9090/api/v1/query?query=histogram_quantile(0.95,rate(http_request_duration_seconds_bucket[5m]))\' | jq -r \'.data.result[0].value[1]\'\n\n# Error rate\necho "Error rate:"\ncurl -s \'http://prometheus:9090/api/v1/query?query=rate(http_requests_total{status=~"5.."}[5m])/rate(http_requests_total[5m])\' | jq -r \'.data.result[0].value[1]\'\n\necho "=== Performance Analysis Complete ==="\n'})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scaling Configuration"}),": Learn about ",(0,i.jsx)(n.a,{href:"scaling-configuration",children:"horizontal scaling strategies"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Deployment"}),": Complete your ",(0,i.jsx)(n.a,{href:"production-deployment",children:"production deployment"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Troubleshooting"}),": Review ",(0,i.jsx)(n.a,{href:"../troubleshooting/common-issues",children:"common issues and solutions"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Architecture"}),": Understand ",(0,i.jsx)(n.a,{href:"../architecture/event-driven-design",children:"event-driven design"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var r=t(6540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);