"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1994],{8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(6540);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}},8754:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"media/video-generation","title":"Video Generation","description":"Create videos from text prompts using MiniMax\'s video-01 model","source":"@site/docs/media/video-generation.md","sourceDirName":"media","slug":"/media/video-generation","permalink":"/Conduit/docs/media/video-generation","draft":false,"unlisted":false,"editUrl":"https://github.com/knnlabs/Conduit/tree/main/website/docs/media/video-generation.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Video Generation","description":"Create videos from text prompts using MiniMax\'s video-01 model"},"sidebar":"docsSidebar","previous":{"title":"Image Generation","permalink":"/Conduit/docs/media/image-generation"},"next":{"title":"Async Processing","permalink":"/Conduit/docs/media/async-processing"}}');var s=t(4848),i=t(8453);const r={sidebar_position:3,title:"Video Generation",description:"Create videos from text prompts using MiniMax's video-01 model"},a="Video Generation",d={},l=[{value:"Quick Start",id:"quick-start",level:2},{value:"Basic Text-to-Video Generation",id:"basic-text-to-video-generation",level:3},{value:"Supported Model",id:"supported-model",level:2},{value:"MiniMax Video-01",id:"minimax-video-01",level:3},{value:"Task Management",id:"task-management",level:2},{value:"Checking Task Status",id:"checking-task-status",level:3},{value:"Task States",id:"task-states",level:3},{value:"Cancelling Tasks",id:"cancelling-tasks",level:3},{value:"Retrying Failed Tasks",id:"retrying-failed-tasks",level:3},{value:"Real-Time Progress Updates",id:"real-time-progress-updates",level:2},{value:"Using SignalR for Real-Time Updates",id:"using-signalr-for-real-time-updates",level:3},{value:"Polling Implementation",id:"polling-implementation",level:3},{value:"Batch Video Generation",id:"batch-video-generation",level:2},{value:"Processing Multiple Videos",id:"processing-multiple-videos",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Common Video Generation Errors",id:"common-video-generation-errors",level:3},{value:"Retry Logic",id:"retry-logic",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Prompt Engineering",id:"prompt-engineering",level:3},{value:"Performance Optimization",id:"performance-optimization",level:3},{value:"Cost Management",id:"cost-management",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"video-generation",children:"Video Generation"})}),"\n",(0,s.jsx)(n.p,{children:"Conduit's video generation capabilities enable you to create videos from text descriptions using MiniMax's video-01 model. All video generation is asynchronous with real-time progress updates and comprehensive task management."}),"\n",(0,s.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,s.jsx)(n.h3,{id:"basic-text-to-video-generation",children:"Basic Text-to-Video Generation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Video generation is always async\nconst response = await fetch('https://api.conduit.yourdomain.com/v1/video/generations', {\n  method: 'POST',\n  headers: {\n    'Authorization': 'Bearer condt_your_virtual_key',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    model: 'minimax-video',\n    prompt: 'A cat playing piano in a cozy living room with warm lighting',\n    duration: 5,\n    resolution: '1280x720'\n  })\n});\n\nconst task = await response.json();\nconsole.log('Video generation started:', task.task_id);\n\n// Poll for completion\nconst checkStatus = async () => {\n  const statusResponse = await fetch(`https://api.conduit.yourdomain.com/v1/tasks/${task.task_id}`, {\n    headers: {\n      'Authorization': 'Bearer condt_your_virtual_key'\n    }\n  });\n  \n  const status = await statusResponse.json();\n  \n  if (status.status === 'completed') {\n    console.log('Video generated:', status.result.video_url);\n    console.log('Thumbnail:', status.result.thumbnail_url);\n  } else if (status.status === 'failed') {\n    console.log('Generation failed:', status.error);\n  } else {\n    console.log(`Progress: ${status.progress || 0}%`);\n    setTimeout(checkStatus, 5000); // Check again in 5 seconds\n  }\n};\n\ncheckStatus();\n"})}),"\n",(0,s.jsx)(n.h2,{id:"supported-model",children:"Supported Model"}),"\n",(0,s.jsx)(n.h3,{id:"minimax-video-01",children:"MiniMax Video-01"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Model: ",(0,s.jsx)(n.code,{children:"minimax-video"})," (alias for ",(0,s.jsx)(n.code,{children:"video-01"}),")"]})}),"\n",(0,s.jsx)(n.p,{children:"MiniMax is currently the only provider that supports video generation in Conduit."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Capabilities:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Text-to-video generation"}),"\n",(0,s.jsx)(n.li,{children:"Multiple resolutions and aspect ratios"}),"\n",(0,s.jsx)(n.li,{children:"Configurable duration (1-60 seconds, default 6)"}),"\n",(0,s.jsx)(n.li,{children:"Async processing with progress tracking"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const videoRequest = await fetch('/v1/video/generations', {\n  method: 'POST',\n  headers: {\n    'Authorization': 'Bearer condt_your_virtual_key',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    model: 'minimax-video',\n    prompt: 'A majestic dragon flying over medieval castles at sunset',\n    duration: 6,                    // 1-60 seconds\n    resolution: '1920x1080',        // See supported resolutions below\n    // Optional parameters\n    aspect_ratio: '16:9'\n  })\n});\n\nconst task = await videoRequest.json();\nconsole.log('Task started:', task.task_id);\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Supported Resolutions:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"720x480"})," (SD 4:3)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"1280x720"})," (HD 16:9)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"1920x1080"})," (Full HD 16:9)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"720x1280"})," (Portrait 9:16)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"1080x1920"})," (Portrait 9:16)"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Duration:"})," 1-60 seconds (default 6 seconds)\n",(0,s.jsx)(n.strong,{children:"Generation Time:"})," 2-5 minutes depending on length and complexity\n",(0,s.jsx)(n.strong,{children:"Processing:"})," Fully asynchronous with real-time progress updates"]}),"\n",(0,s.jsx)(n.h2,{id:"task-management",children:"Task Management"}),"\n",(0,s.jsx)(n.h3,{id:"checking-task-status",children:"Checking Task Status"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"async function checkVideoStatus(taskId) {\n  const response = await fetch(`https://api.conduit.yourdomain.com/v1/tasks/${taskId}`, {\n    headers: {\n      'Authorization': 'Bearer condt_your_virtual_key'\n    }\n  });\n\n  const task = await response.json();\n  \n  console.log('Status:', task.status);\n  console.log('Progress:', task.progress || 0);\n  \n  return task;\n}\n\n// Usage\nconst task = await checkVideoStatus('task-12345');\nif (task.status === 'completed') {\n  console.log('Video URL:', task.result.video_url);\n  console.log('Thumbnail URL:', task.result.thumbnail_url);\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"task-states",children:"Task States"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"State"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Next Action"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"queued"})}),(0,s.jsx)(n.td,{children:"Task waiting for processing"}),(0,s.jsx)(n.td,{children:"Wait for processing to start"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"processing"})}),(0,s.jsx)(n.td,{children:"Video generation in progress"}),(0,s.jsx)(n.td,{children:"Poll for updates"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"completed"})}),(0,s.jsx)(n.td,{children:"Video successfully generated"}),(0,s.jsx)(n.td,{children:"Download video"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"failed"})}),(0,s.jsx)(n.td,{children:"Generation failed"}),(0,s.jsx)(n.td,{children:"Check error, retry if needed"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"cancelled"})}),(0,s.jsx)(n.td,{children:"Task cancelled by user"}),(0,s.jsx)(n.td,{children:"No further action"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"cancelling-tasks",children:"Cancelling Tasks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Cancel a running task\nconst response = await fetch(`https://api.conduit.yourdomain.com/v1/video/generations/${taskId}`, {\n  method: 'DELETE',\n  headers: {\n    'Authorization': 'Bearer condt_your_virtual_key'\n  }\n});\n\nif (response.ok) {\n  console.log('Task cancelled successfully');\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"retrying-failed-tasks",children:"Retrying Failed Tasks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Retry a failed task\nconst response = await fetch(`https://api.conduit.yourdomain.com/v1/video/generations/${taskId}/retry`, {\n  method: 'POST',\n  headers: {\n    'Authorization': 'Bearer condt_your_virtual_key'\n  }\n});\n\nconst newTask = await response.json();\nconsole.log('Retry task started:', newTask.task_id);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"real-time-progress-updates",children:"Real-Time Progress Updates"}),"\n",(0,s.jsx)(n.h3,{id:"using-signalr-for-real-time-updates",children:"Using SignalR for Real-Time Updates"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { HubConnectionBuilder } from '@microsoft/signalr';\n\nclass VideoGenerationMonitor {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.connection = new HubConnectionBuilder()\n      .withUrl('https://api.conduit.yourdomain.com/hubs/video-generation', {\n        accessTokenFactory: () => apiKey\n      })\n      .build();\n    \n    this.setupEventHandlers();\n  }\n\n  setupEventHandlers() {\n    this.connection.on('VideoGenerationStarted', (data) => {\n      console.log(`\ud83c\udfac Video generation started: ${data.taskId}`);\n      this.showProgress(data.taskId);\n    });\n\n    this.connection.on('VideoGenerationProgress', (data) => {\n      console.log(`\u23f3 Progress: ${data.progress}% - ${data.taskId}`);\n      this.updateProgress(data.taskId, data.progress);\n    });\n\n    this.connection.on('VideoGenerationCompleted', (data) => {\n      console.log(`\u2705 Video completed: ${data.videoUrl}`);\n      this.showVideo(data.taskId, data.videoUrl, data.thumbnailUrl);\n    });\n\n    this.connection.on('VideoGenerationFailed', (data) => {\n      console.log(`\u274c Video generation failed: ${data.error}`);\n      this.showError(data.taskId, data.error);\n    });\n  }\n\n  async start() {\n    await this.connection.start();\n    console.log('\ud83d\udd04 Connected to video generation updates');\n  }\n\n  showProgress(taskId) {\n    const progressElement = document.getElementById(`progress-${taskId}`);\n    if (progressElement) {\n      progressElement.style.display = 'block';\n    }\n  }\n\n  updateProgress(taskId, progress) {\n    const progressBar = document.getElementById(`progress-bar-${taskId}`);\n    if (progressBar) {\n      progressBar.style.width = `${progress}%`;\n      progressBar.textContent = `${progress}%`;\n    }\n  }\n\n  showVideo(taskId, videoUrl, thumbnailUrl) {\n    const container = document.getElementById(`video-container-${taskId}`);\n    if (container) {\n      container.innerHTML = `\n        <video controls poster=\"${thumbnailUrl}\" style=\"max-width: 100%;\">\n          <source src=\"${videoUrl}\" type=\"video/mp4\">\n          Your browser does not support the video tag.\n        </video>\n        <div class=\"video-actions\">\n          <a href=\"${videoUrl}\" download>Download Video</a>\n        </div>\n      `;\n    }\n  }\n\n  showError(taskId, error) {\n    const container = document.getElementById(`video-container-${taskId}`);\n    if (container) {\n      container.innerHTML = `<div class=\"error\">Generation failed: ${error}</div>`;\n    }\n  }\n}\n\n// Usage\nconst monitor = new VideoGenerationMonitor('condt_your_virtual_key');\nawait monitor.start();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"polling-implementation",children:"Polling Implementation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class VideoTaskPoller {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.activeTasks = new Map();\n  }\n\n  async startVideoGeneration(prompt, options = {}) {\n    const response = await fetch('https://api.conduit.yourdomain.com/v1/video/generations', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${this.apiKey}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        model: 'minimax-video',\n        prompt: prompt,\n        duration: 6,\n        resolution: '1280x720',\n        ...options\n      })\n    });\n\n    const task = await response.json();\n    this.activeTasks.set(task.task_id, {\n      prompt: prompt,\n      startTime: Date.now()\n    });\n\n    this.pollTask(task.task_id);\n    return task.task_id;\n  }\n\n  async pollTask(taskId) {\n    const pollInterval = 5000; // 5 seconds\n    \n    const poll = async () => {\n      try {\n        const response = await fetch(`https://api.conduit.yourdomain.com/v1/tasks/${taskId}`, {\n          headers: {\n            'Authorization': `Bearer ${this.apiKey}`\n          }\n        });\n\n        const task = await response.json();\n        \n        switch (task.status) {\n          case 'completed':\n            this.onTaskCompleted(taskId, task.result);\n            this.activeTasks.delete(taskId);\n            return;\n            \n          case 'failed':\n            this.onTaskFailed(taskId, task.error);\n            this.activeTasks.delete(taskId);\n            return;\n            \n          case 'processing':\n            this.onTaskProgress(taskId, task.progress || 0);\n            setTimeout(poll, pollInterval);\n            break;\n            \n          default:\n            setTimeout(poll, pollInterval);\n        }\n      } catch (error) {\n        console.error('Polling error:', error);\n        setTimeout(poll, pollInterval * 2); // Backoff on error\n      }\n    };\n\n    poll();\n  }\n\n  onTaskCompleted(taskId, result) {\n    const taskData = this.activeTasks.get(taskId);\n    const duration = Date.now() - taskData.startTime;\n    \n    console.log(`Task ${taskId} completed in ${(duration / 1000).toFixed(1)}s`);\n    console.log('Video URL:', result.video_url);\n    console.log('Thumbnail URL:', result.thumbnail_url);\n  }\n\n  onTaskFailed(taskId, error) {\n    console.error(`Task ${taskId} failed:`, error);\n  }\n\n  onTaskProgress(taskId, progress) {\n    console.log(`Task ${taskId}: ${progress}% complete`);\n  }\n}\n\n// Usage\nconst poller = new VideoTaskPoller('condt_your_virtual_key');\nconst taskId = await poller.startVideoGeneration(\n  'A time-lapse of clouds moving over a cityscape at golden hour'\n);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"batch-video-generation",children:"Batch Video Generation"}),"\n",(0,s.jsx)(n.h3,{id:"processing-multiple-videos",children:"Processing Multiple Videos"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class BatchVideoGenerator {\n  constructor(apiKey, concurrency = 2) {\n    this.apiKey = apiKey;\n    this.concurrency = concurrency;\n    this.queue = [];\n    this.activeTasks = new Set();\n  }\n\n  async addToQueue(prompt, options = {}) {\n    this.queue.push({ prompt, options });\n    this.processQueue();\n  }\n\n  async processQueue() {\n    while (this.queue.length > 0 && this.activeTasks.size < this.concurrency) {\n      const { prompt, options } = this.queue.shift();\n      const taskId = await this.startVideoGeneration(prompt, options);\n      this.activeTasks.add(taskId);\n    }\n  }\n\n  async startVideoGeneration(prompt, options) {\n    try {\n      const response = await fetch('https://api.conduit.yourdomain.com/v1/video/generations', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          model: 'minimax-video',\n          prompt: prompt,\n          duration: 6,\n          resolution: '1280x720',\n          ...options\n        })\n      });\n\n      const task = await response.json();\n      console.log(`Started video generation: ${task.task_id}`);\n      \n      // Monitor completion\n      this.monitorTask(task.task_id);\n      \n      return task.task_id;\n    } catch (error) {\n      console.error('Failed to start video generation:', error);\n      throw error;\n    }\n  }\n\n  async monitorTask(taskId) {\n    // Use polling or SignalR to monitor completion\n    // When complete, remove from activeTasks and process queue\n    // Implementation similar to previous examples\n  }\n}\n\n// Usage\nconst batchGen = new BatchVideoGenerator('condt_your_virtual_key', 2);\n\nconst prompts = [\n  'A peaceful lake at sunrise with mountains in the background',\n  'A busy street market with colorful vendors and customers',\n  'A rocket launching into space with flames and smoke'\n];\n\nfor (const prompt of prompts) {\n  await batchGen.addToQueue(prompt);\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.h3,{id:"common-video-generation-errors",children:"Common Video Generation Errors"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"try {\n  const response = await fetch('/v1/video/generations', {\n    method: 'POST',\n    headers: {\n      'Authorization': 'Bearer condt_your_virtual_key',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      model: 'minimax-video',\n      prompt: 'A beautiful landscape',\n      duration: 5\n    })\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error?.message || 'Video generation failed');\n  }\n\n  const task = await response.json();\n  console.log('Task started:', task.task_id);\n} catch (error) {\n  console.error('Error starting video generation:', error.message);\n  \n  // Handle specific error cases\n  if (error.message.includes('rate limit')) {\n    console.log('Rate limited, try again later');\n  } else if (error.message.includes('quota')) {\n    console.log('Quota exceeded');\n  } else if (error.message.includes('content policy')) {\n    console.log('Prompt violates content policy');\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"retry-logic",children:"Retry Logic"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class ResilientVideoGenerator {\n  constructor(apiKey, maxRetries = 3) {\n    this.apiKey = apiKey;\n    this.maxRetries = maxRetries;\n  }\n\n  async generateWithRetry(prompt, options = {}) {\n    for (let attempt = 1; attempt <= this.maxRetries; attempt++) {\n      try {\n        const response = await fetch('https://api.conduit.yourdomain.com/v1/video/generations', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${this.apiKey}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            model: 'minimax-video',\n            prompt: prompt,\n            ...options\n          })\n        });\n\n        if (response.ok) {\n          const task = await response.json();\n          return task.task_id;\n        }\n\n        const error = await response.json();\n        \n        // Don't retry for certain errors\n        if (error.error?.code === 'content_policy_violation' || \n            error.error?.code === 'insufficient_quota') {\n          throw new Error(error.error.message);\n        }\n\n        if (attempt === this.maxRetries) {\n          throw new Error(error.error?.message || 'Video generation failed');\n        }\n\n        // Wait before retry\n        const delay = Math.pow(2, attempt) * 1000;\n        console.log(`Attempt ${attempt} failed, retrying in ${delay}ms...`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n\n      } catch (error) {\n        if (attempt === this.maxRetries) {\n          throw error;\n        }\n      }\n    }\n  }\n}\n\n// Usage\nconst resilientGen = new ResilientVideoGenerator('condt_your_virtual_key');\ntry {\n  const taskId = await resilientGen.generateWithRetry(\n    'A cat playing with a ball of yarn'\n  );\n  console.log('Generation started:', taskId);\n} catch (error) {\n  console.error('Failed after all retries:', error.message);\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"prompt-engineering",children:"Prompt Engineering"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Good prompts for video generation\nconst goodPrompts = [\n  'A cat walking across a wooden table in slow motion',\n  'Waves crashing against rocks at sunset with golden light',\n  'A person reading a book by a fireplace with warm lighting',\n  'Rain drops falling on a window with city lights in the background'\n];\n\n// Tips for better results:\n// 1. Be specific about motion and scene\n// 2. Include lighting conditions\n// 3. Mention camera movement if desired\n// 4. Keep prompts focused and clear\n// 5. Avoid complex scenes with multiple actions\n"})}),"\n",(0,s.jsx)(n.h3,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Use shorter durations for faster generation\nconst fastVideo = {\n  duration: 3,  // Faster than 6 seconds\n  resolution: '1280x720'  // Balance of quality and speed\n};\n\n// For testing, use lower resolution\nconst testVideo = {\n  duration: 3,\n  resolution: '720x480'  // Fastest generation\n};\n\n// For production, use high quality\nconst productionVideo = {\n  duration: 6,\n  resolution: '1920x1080'  // Best quality\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"cost-management",children:"Cost Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Estimate costs before generation\nfunction estimateVideoCost(duration, resolution) {\n  const baseCost = 0.20;  // Base cost per video\n  const durationMultiplier = duration / 6;  // Relative to 6-second default\n  const resolutionMultipliers = {\n    '720x480': 0.8,\n    '1280x720': 1.0,\n    '1920x1080': 1.5,\n    '720x1280': 1.0,\n    '1080x1920': 1.5\n  };\n  \n  const multiplier = resolutionMultipliers[resolution] || 1.0;\n  return baseCost * durationMultiplier * multiplier;\n}\n\n// Usage\nconst cost = estimateVideoCost(6, '1920x1080');\nconsole.log(`Estimated cost: $${cost.toFixed(2)}`);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Image Generation"}),": Combine with ",(0,s.jsx)(n.a,{href:"image-generation",children:"image generation"})," for comprehensive media"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Async Processing"}),": Learn about ",(0,s.jsx)(n.a,{href:"async-processing",children:"async task management"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Real-Time Updates"}),": Integrate ",(0,s.jsx)(n.a,{href:"../realtime/overview",children:"real-time notifications"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Storage Configuration"}),": Set up ",(0,s.jsx)(n.a,{href:"storage-configuration",children:"media storage"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Integration Examples"}),": See complete ",(0,s.jsx)(n.a,{href:"../clients/overview",children:"client patterns"})]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);