name: Build and Release

on:
  push:
    branches: ['master', 'dev']
    paths-ignore:
      - 'website/**'
      - '**/*.md'
      - 'docs/**'
  pull_request:
    branches: ['master', 'dev']
    paths-ignore:
      - 'website/**'
      - '**/*.md'
      - 'docs/**'
  release:
    types: [published]

# Prevent concurrent runs on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  # CodeQL Security Analysis
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.Build.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        queries: security-and-quality

    - name: Build
      run: dotnet build --configuration Release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:csharp"
        # Upload to GitHub for main branches, skip for PRs
        upload: ${{ github.event_name != 'pull_request' }}
        output: codeql-results

    - name: Check for Security Issues
      id: check-security
      run: |
        if [ -d codeql-results ]; then
          # Check for high severity issues in SARIF files
          HIGH_SEVERITY_COUNT=0
          for sarif in codeql-results/*.sarif; do
            if [ -f "$sarif" ]; then
              # Count high severity results
              COUNT=$(jq '[.runs[].results[] | select(.level == "error" or .level == "critical")] | length' "$sarif" 2>/dev/null || echo "0")
              HIGH_SEVERITY_COUNT=$((HIGH_SEVERITY_COUNT + COUNT))
            fi
          done
          
          echo "high_severity_count=$HIGH_SEVERITY_COUNT" >> $GITHUB_OUTPUT
          
          if [ $HIGH_SEVERITY_COUNT -gt 0 ]; then
            echo "❌ Found $HIGH_SEVERITY_COUNT high severity security issues!" >> $GITHUB_STEP_SUMMARY
            echo "Docker images will not be built until these issues are resolved." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ No high severity security issues found!" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "⚠️ No CodeQL results found to analyze" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload CodeQL Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: codeql-results
        path: codeql-results/
        retention-days: 7

  # Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: codeql-analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.Build.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Test with coverage
      run: |
        dotnet test --no-build --configuration Release \
          --logger "trx;LogFileName=test-results.trx" \
          --logger "console;verbosity=detailed" \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults

    - name: Generate Test Report
      if: always()
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Count test results from TRX files
        if ls ./TestResults/**/*.trx 1> /dev/null 2>&1; then
          TOTAL=0
          PASSED=0
          FAILED=0
          SKIPPED=0
          
          for trx in ./TestResults/**/*.trx; do
            if [ -f "$trx" ]; then
              # Parse TRX file for test counts (basic parsing)
              FILE_TOTAL=$(grep -o 'total="[0-9]*"' "$trx" | head -1 | grep -o '[0-9]*' || echo "0")
              FILE_PASSED=$(grep -o 'passed="[0-9]*"' "$trx" | head -1 | grep -o '[0-9]*' || echo "0")
              FILE_FAILED=$(grep -o 'failed="[0-9]*"' "$trx" | head -1 | grep -o '[0-9]*' || echo "0")
              FILE_SKIPPED=$(grep -o 'skipped="[0-9]*"' "$trx" | head -1 | grep -o '[0-9]*' || echo "0")
              
              TOTAL=$((TOTAL + FILE_TOTAL))
              PASSED=$((PASSED + FILE_PASSED))
              FAILED=$((FAILED + FILE_FAILED))
              SKIPPED=$((SKIPPED + FILE_SKIPPED))
            fi
          done
          
          echo "- **Total Tests**: $TOTAL" >> $GITHUB_STEP_SUMMARY
          echo "- **Passed**: ✅ $PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed**: ❌ $FAILED" >> $GITHUB_STEP_SUMMARY
          echo "- **Skipped**: ⏭️ $SKIPPED" >> $GITHUB_STEP_SUMMARY
        else
          echo "No test results found." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: ./TestResults/
        retention-days: 7

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          **/bin/Release/
          !**/bin/Release/**/*.pdb
          !**/bin/Release/**/*.xml
        retention-days: 1

  # Build and Push Docker Images
  docker-build-and-push:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [codeql-analysis, build-and-test]
    # Only run on push events to main branches or releases
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        include:
          - service: webui
            image: ghcr.io/knnlabs/conduit-webui
            dockerfile: ./ConduitLLM.WebUI/Dockerfile
          - service: http
            image: ghcr.io/knnlabs/conduit-http
            dockerfile: ./ConduitLLM.Http/Dockerfile
          - service: admin
            image: ghcr.io/knnlabs/conduit-admin
            dockerfile: ./ConduitLLM.Admin/Dockerfile

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=long
            type=raw,value=latest,enable=${{ github.ref_name == 'master' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Generate Docker Summary
        run: |
          echo "### Docker Image: ${{ matrix.service }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags pushed:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Summary job
  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [docker-build-and-push]
    if: always() && github.event_name != 'pull_request'
    
    steps:
      - name: Generate Final Summary
        run: |
          echo "## 🚀 Build and Release Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All Docker images have been successfully built and pushed to GitHub Container Registry." >> $GITHUB_STEP_SUMMARY