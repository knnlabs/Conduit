name: Build and Release

on:
  push:
    branches: ['master', 'dev']
    paths-ignore:
      - 'website/**'
      - '**/*.md'
      - 'docs/**'
  pull_request:
    branches: ['master', 'dev']
    paths-ignore:
      - 'website/**'
      - '**/*.md'
      - 'docs/**'
  release:
    types: [published]

# Prevent concurrent runs on the same branch
# Cancel old runs for PRs and dev branch, but not for master/production
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' || github.ref == 'refs/heads/dev' }}

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  # CodeQL Security Analysis
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.Build.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        queries: security-and-quality

    - name: Build
      run: dotnet build --configuration Release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:csharp"
        # Upload to GitHub for main branches, skip for PRs
        upload: ${{ github.event_name != 'pull_request' }}
        output: codeql-results

    - name: Check for Security Issues
      id: check-security
      run: |
        if [ -d codeql-results ]; then
          # Check for high severity issues in SARIF files
          HIGH_SEVERITY_COUNT=0
          for sarif in codeql-results/*.sarif; do
            if [ -f "$sarif" ]; then
              # Count high severity results
              COUNT=$(jq '[.runs[].results[] | select(.level == "error" or .level == "critical")] | length' "$sarif" 2>/dev/null || echo "0")
              HIGH_SEVERITY_COUNT=$((HIGH_SEVERITY_COUNT + COUNT))
            fi
          done
          
          echo "high_severity_count=$HIGH_SEVERITY_COUNT" >> $GITHUB_OUTPUT
          
          if [ $HIGH_SEVERITY_COUNT -gt 0 ]; then
            echo "❌ Found $HIGH_SEVERITY_COUNT high severity security issues!" >> $GITHUB_STEP_SUMMARY
            echo "Docker images will not be built until these issues are resolved." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ No high severity security issues found!" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "⚠️ No CodeQL results found to analyze" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload CodeQL Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: codeql-results
        path: codeql-results/
        retention-days: 7

  # Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: codeql-analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.Build.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Restore local tools
      run: dotnet tool restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Test with coverage
      run: |
        # Skip integration tests (require test-config.yaml with API keys) and timing-sensitive tests
        dotnet test --no-build --configuration Release \
          --logger "trx;LogFileName=test-results.trx" \
          --logger "console;verbosity=normal" \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults \
          --settings .runsettings \
          --filter 'FullyQualifiedName!~IntegrationTests&Category!=TimingSensitive'

    - name: Process Coverage Results
      if: always()
      run: |
        # Find all coverage files
        find ./TestResults -name "coverage.cobertura.xml" -type f > coverage_files.txt
        
        if [ -s coverage_files.txt ]; then
          echo "Found coverage files:"
          cat coverage_files.txt
          
          # Generate combined coverage report
          dotnet tool run reportgenerator \
            -reports:"./TestResults/**/coverage.cobertura.xml" \
            -targetdir:"./CoverageReport" \
            -reporttypes:"Html;HtmlSummary;Badges;TextSummary;Cobertura;JsonSummary" \
            -assemblyfilters:"+ConduitLLM.*;-*.Tests*;-*Test*" \
            -classfilters:"-*.Migrations*;-*.Program;-*.Startup" \
            -filefilters:"-**/Migrations/**;-**/Program.cs;-**/Startup.cs" \
            -verbosity:Info \
            -title:"Conduit LLM Coverage Report" \
            -tag:"${{ github.run_number }}"
            
          # Parse coverage percentage from summary
          if [ -f "./CoverageReport/Summary.json" ]; then
            COVERAGE_PERCENT=$(jq -r '.summary.linecoverage' ./CoverageReport/Summary.json 2>/dev/null || echo "0")
            echo "COVERAGE_PERCENT=$COVERAGE_PERCENT" >> $GITHUB_ENV
            echo "Coverage percentage: $COVERAGE_PERCENT%"
          fi
        else
          echo "No coverage files found!"
          echo "COVERAGE_PERCENT=0" >> $GITHUB_ENV
        fi

    - name: Generate Test Report
      if: always()
      run: |
        echo "## 📊 Test Results & Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Count test results from TRX files
        if ls ./TestResults/**/*.trx 1> /dev/null 2>&1; then
          TOTAL=0
          PASSED=0
          FAILED=0
          SKIPPED=0
          
          for trx in ./TestResults/**/*.trx; do
            if [ -f "$trx" ]; then
              # Parse TRX file for test counts (basic parsing)
              FILE_TOTAL=$(grep -o 'total="[0-9]*"' "$trx" | head -1 | grep -o '[0-9]*' || echo "0")
              FILE_PASSED=$(grep -o 'passed="[0-9]*"' "$trx" | head -1 | grep -o '[0-9]*' || echo "0")
              FILE_FAILED=$(grep -o 'failed="[0-9]*"' "$trx" | head -1 | grep -o '[0-9]*' || echo "0")
              FILE_SKIPPED=$(grep -o 'skipped="[0-9]*"' "$trx" | head -1 | grep -o '[0-9]*' || echo "0")
              
              TOTAL=$((TOTAL + FILE_TOTAL))
              PASSED=$((PASSED + FILE_PASSED))
              FAILED=$((FAILED + FILE_FAILED))
              SKIPPED=$((SKIPPED + FILE_SKIPPED))
            fi
          done
          
          echo "### 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Tests**: $TOTAL" >> $GITHUB_STEP_SUMMARY
          echo "- **Passed**: ✅ $PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed**: ❌ $FAILED" >> $GITHUB_STEP_SUMMARY
          echo "- **Skipped**: ⏭️ $SKIPPED" >> $GITHUB_STEP_SUMMARY
        else
          echo "### 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "No test results found." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📈 Code Coverage" >> $GITHUB_STEP_SUMMARY
        
        # Add coverage information
        if [ -f "./CoverageReport/Summary.json" ]; then
          COVERAGE_PERCENT=${COVERAGE_PERCENT:-0}
          
          # Coverage badge emoji based on percentage
          if (( $(echo "$COVERAGE_PERCENT >= 80" | bc -l) )); then
            COVERAGE_EMOJI="🟢"
          elif (( $(echo "$COVERAGE_PERCENT >= 60" | bc -l) )); then
            COVERAGE_EMOJI="🟡"
          else
            COVERAGE_EMOJI="🔴"
          fi
          
          echo "- **Overall Coverage**: $COVERAGE_EMOJI $COVERAGE_PERCENT%" >> $GITHUB_STEP_SUMMARY
          
          # Parse detailed coverage from JSON
          if command -v jq >/dev/null 2>&1 && [ -f "./CoverageReport/Summary.json" ]; then
            LINE_COVERAGE=$(jq -r '.summary.linecoverage' ./CoverageReport/Summary.json 2>/dev/null || echo "N/A")
            BRANCH_COVERAGE=$(jq -r '.summary.branchcoverage' ./CoverageReport/Summary.json 2>/dev/null || echo "N/A")
            METHOD_COVERAGE=$(jq -r '.summary.methodcoverage' ./CoverageReport/Summary.json 2>/dev/null || echo "N/A")
            
            echo "- **Line Coverage**: $LINE_COVERAGE%" >> $GITHUB_STEP_SUMMARY
            echo "- **Branch Coverage**: $BRANCH_COVERAGE%" >> $GITHUB_STEP_SUMMARY
            echo "- **Method Coverage**: $METHOD_COVERAGE%" >> $GITHUB_STEP_SUMMARY
            
            # Coverage by namespace/assembly
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### Coverage by Project" >> $GITHUB_STEP_SUMMARY
            jq -r '.coverage.assemblies[] | select(.name | contains("ConduitLLM")) | "- **\(.name)**: \(.coverage)%"' ./CoverageReport/Summary.json 2>/dev/null >> $GITHUB_STEP_SUMMARY || echo "- Coverage details unavailable" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "- **Coverage**: ❌ No coverage data generated" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Add link to detailed coverage report
        if [ -f "./CoverageReport/index.html" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📋 **Detailed coverage report available in build artifacts**" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Enforce Coverage Thresholds
      if: github.event_name == 'pull_request'
      run: |
        if [ -f "./scripts/check-coverage-thresholds.sh" ]; then
          echo "Running coverage threshold checks..."
          chmod +x ./scripts/check-coverage-thresholds.sh
          ./scripts/check-coverage-thresholds.sh
        else
          echo "⚠️ Coverage threshold script not found at ./scripts/check-coverage-thresholds.sh"
          echo "Skipping coverage threshold enforcement."
        fi

    - name: Upload Coverage Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: ./CoverageReport/
        retention-days: 30

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: ./TestResults/
        retention-days: 7

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          **/bin/Release/
          !**/bin/Release/**/*.pdb
          !**/bin/Release/**/*.xml
        retention-days: 1

  # Build Docker Images - AMD64
  docker-build-amd64:
    name: Build Docker AMD64
    runs-on: ubuntu-latest
    needs: [codeql-analysis, build-and-test]
    # Only run on push events to main branches or releases
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        include:
          - service: webui
            image: ghcr.io/knnlabs/conduit-webui
            dockerfile: ./ConduitLLM.WebUI/Dockerfile
          - service: http
            image: ghcr.io/knnlabs/conduit-http
            dockerfile: ./ConduitLLM.Http/Dockerfile
          - service: admin
            image: ghcr.io/knnlabs/conduit-admin
            dockerfile: ./ConduitLLM.Admin/Dockerfile

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Docker build context
        run: |
          if [ ! -f ".dockerignore" ]; then
            echo "⚠️ WARNING: No .dockerignore file found!"
            echo "This could expose sensitive files to the Docker build context."
            echo "Consider creating a .dockerignore file to exclude:"
            echo "  - .git/"
            echo "  - **/*.db"
            echo "  - **/bin/"
            echo "  - **/obj/"
            echo "  - **/.env"
            echo "  - **/secrets/"
          else
            echo "✅ .dockerignore file found"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image }}
          flavor: |
            suffix=-amd64
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.service }}-amd64
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}-amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # ARM64 builds removed due to lack of native GitHub Actions runners
  # Previously attempted to use ubuntu-24.04-arm which doesn't exist
  # GitHub Actions doesn't provide ARM64 runners by default

  # Create and push multi-arch manifest
  docker-manifest:
    name: Create Multi-arch Manifest
    runs-on: ubuntu-latest
    needs: [docker-build-amd64]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        include:
          - service: webui
            image: ghcr.io/knnlabs/conduit-webui
          - service: http
            image: ghcr.io/knnlabs/conduit-http
          - service: admin
            image: ghcr.io/knnlabs/conduit-admin

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=long
            type=raw,value=latest,enable=${{ github.ref_name == 'master' }}

      - name: Create and push manifest
        run: |
          # Get all tags from metadata
          TAGS="${{ steps.meta.outputs.tags }}"
          SERVICE="${{ matrix.service }}"
          IMAGE="${{ matrix.image }}"
          
          # Get the base source tag (branch name or sha)
          if [ "${{ github.ref_name }}" = "master" ]; then
            SOURCE_TAG="${IMAGE}:master"
          else
            SOURCE_TAG="${IMAGE}:${{ github.ref_name }}"
          fi
          
          # For each tag, create a manifest that includes appropriate architectures
          echo "$TAGS" | while read -r TAG; do
            if [ -n "$TAG" ]; then
              echo "Creating manifest for $TAG"
              
              # Create manifest for AMD64 only (ARM64 builds disabled)
              docker buildx imagetools create \
                --tag "$TAG" \
                "${SOURCE_TAG}-amd64"
            fi
          done

      - name: Generate Docker Summary
        run: |
          echo "### Docker Image: ${{ matrix.service }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags pushed (AMD64 only):**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Architecture**: linux/amd64" >> $GITHUB_STEP_SUMMARY

  # Summary job
  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [docker-manifest]
    if: always() && github.event_name != 'pull_request'
    
    steps:
      - name: Generate Final Summary
        run: |
          echo "## 🚀 Build and Release Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Images" >> $GITHUB_STEP_SUMMARY
          echo "Docker images have been successfully built:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Images are available at:" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 `ghcr.io/knnlabs/conduit-webui` (linux/amd64)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔌 `ghcr.io/knnlabs/conduit-http` (linux/amd64)" >> $GITHUB_STEP_SUMMARY
          echo "- 🛠️ `ghcr.io/knnlabs/conduit-admin` (linux/amd64)" >> $GITHUB_STEP_SUMMARY