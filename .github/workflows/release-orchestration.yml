name: Release Orchestration

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
      release_components:
        description: 'Components to release (comma-separated: docker,npm-admin,npm-core)'
        required: true
        default: 'docker,npm-admin,npm-core'
      dry_run:
        description: 'Dry run mode'
        required: false
        default: false
        type: boolean

# Ensure only one release runs at a time
# IMPORTANT: Never set cancel-in-progress to true for this workflow!
# Interrupting releases could lead to:
# - Partially published packages
# - Inconsistent version numbers across components
# - Broken release tags
concurrency:
  group: release-orchestration
  cancel-in-progress: false

env:
  RELEASE_BRANCH: master

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    outputs:
      version: ${{ steps.version.outputs.new_version }}
      components: ${{ steps.parse.outputs.components }}
      release_docker: ${{ steps.parse.outputs.release_docker }}
      release_npm_admin: ${{ steps.parse.outputs.release_npm_admin }}
      release_npm_core: ${{ steps.parse.outputs.release_npm_core }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Parse components
        id: parse
        run: |
          COMPONENTS="${{ github.event.inputs.release_components }}"
          echo "components=$COMPONENTS" >> $GITHUB_OUTPUT
          
          # Check which components to release
          if [[ "$COMPONENTS" == *"docker"* ]]; then
            echo "release_docker=true" >> $GITHUB_OUTPUT
          else
            echo "release_docker=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "$COMPONENTS" == *"npm-admin"* ]]; then
            echo "release_npm_admin=true" >> $GITHUB_OUTPUT
          else
            echo "release_npm_admin=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "$COMPONENTS" == *"npm-core"* ]]; then
            echo "release_npm_core=true" >> $GITHUB_OUTPUT
          else
            echo "release_npm_core=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Determine next version
        id: version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          CURRENT_VERSION=${LATEST_TAG#v}
          
          # Calculate next version based on release type
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          case "${{ github.event.inputs.release_type }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          echo "Version: $CURRENT_VERSION → $NEW_VERSION"
          
      - name: Generate Release Notes
        id: notes
        run: |
          VERSION="${{ steps.version.outputs.new_version }}"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          # Generate changelog
          if [ -n "$PREVIOUS_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%an)" $PREVIOUS_TAG..HEAD | grep -v "skip ci" | grep -v "Merge pull request")
          else
            COMMITS=$(git log --pretty=format:"- %s (%an)" --max-count=50 | grep -v "skip ci" | grep -v "Merge pull request")
          fi
          
          # Create release notes file
          cat > release-notes.md << EOF
          # Release v$VERSION
          
          ## 🚀 Components Released
          
          EOF
          
          if [[ "${{ steps.parse.outputs.release_docker }}" == "true" ]]; then
            echo "- ✅ Docker Images (WebUI, HTTP API, Admin API)" >> release-notes.md
          fi
          
          if [[ "${{ steps.parse.outputs.release_npm_admin }}" == "true" ]]; then
            echo "- ✅ NPM: @conduit/admin-client" >> release-notes.md
          fi
          
          if [[ "${{ steps.parse.outputs.release_npm_core }}" == "true" ]]; then
            echo "- ✅ NPM: @conduit/core-client" >> release-notes.md
          fi
          
          cat >> release-notes.md << EOF
          
          ## 📝 Changes
          
          $COMMITS
          
          ## 📦 Installation
          
          ### Docker
          \`\`\`bash
          docker pull ghcr.io/knnlabs/conduit-webui:v$VERSION
          docker pull ghcr.io/knnlabs/conduit-http:v$VERSION
          docker pull ghcr.io/knnlabs/conduit-admin:v$VERSION
          \`\`\`
          
          ### NPM Packages
          \`\`\`bash
          npm install @conduit/admin-client@$VERSION
          npm install @conduit/core-client@$VERSION
          \`\`\`
          
          ---
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...v$VERSION
          EOF
          
      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md
          retention-days: 1

  # NPM Admin Client Release
  release-npm-admin:
    name: Release NPM Admin Client
    needs: prepare-release
    if: needs.prepare-release.outputs.release_npm_admin == 'true'
    uses: ./.github/workflows/npm-publish-admin-client.yml
    with:
      version_type: ${{ github.event.inputs.release_type }}
      dry_run: ${{ github.event.inputs.dry_run == 'true' }}
    secrets: inherit

  # NPM Core Client Release
  release-npm-core:
    name: Release NPM Core Client
    needs: prepare-release
    if: needs.prepare-release.outputs.release_npm_core == 'true'
    uses: ./.github/workflows/npm-publish-core-client.yml
    with:
      version_type: ${{ github.event.inputs.release_type }}
      dry_run: ${{ github.event.inputs.dry_run == 'true' }}
    secrets: inherit

  # Wait for NPM releases before Docker
  wait-for-npm:
    name: Wait for NPM Releases
    runs-on: ubuntu-latest
    needs: [prepare-release, release-npm-admin, release-npm-core]
    if: always()
    
    steps:
      - name: Check NPM release status
        run: |
          echo "## NPM Release Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.release-npm-admin.result }}" == "success" ]]; then
            echo "✅ Admin Client: Released successfully" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.release-npm-admin.result }}" == "skipped" ]]; then
            echo "⏭️ Admin Client: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Admin Client: Failed or cancelled" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.release-npm-core.result }}" == "success" ]]; then
            echo "✅ Core Client: Released successfully" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.release-npm-core.result }}" == "skipped" ]]; then
            echo "⏭️ Core Client: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Core Client: Failed or cancelled" >> $GITHUB_STEP_SUMMARY
          fi

  # Create Git Tag and GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, wait-for-npm]
    if: ${{ !github.event.inputs.dry_run }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Download release notes
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          
      - name: Configure git
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "actions@github.com"
          
      - name: Create and push tag
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
          
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          
          gh release create "v$VERSION" \
            --title "Release v$VERSION" \
            --notes-file release-notes.md \
            --target ${{ github.sha }}

  # Trigger Docker builds
  trigger-docker-release:
    name: Trigger Docker Release
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    if: needs.prepare-release.outputs.release_docker == 'true' && !github.event.inputs.dry_run
    
    steps:
      - name: Trigger Docker builds
        uses: actions/github-script@v7
        with:
          script: |
            // Validate version format
            const version = '${{ needs.prepare-release.outputs.version }}';
            const versionRegex = /^\d+\.\d+\.\d+$/;
            
            if (!versionRegex.test(version)) {
              throw new Error(`Invalid version format: ${version}. Expected format: X.Y.Z`);
            }
            
            // Validate ref (SHA)
            const ref = context.sha;
            const shaRegex = /^[a-f0-9]{40}$/;
            
            if (!shaRegex.test(ref)) {
              throw new Error(`Invalid commit SHA: ${ref}`);
            }
            
            // Trigger a repository dispatch event to build Docker images
            await github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: 'docker-release',
              client_payload: {
                version: version,
                ref: ref,
                triggered_by: context.actor,
                workflow_run_id: context.runId
              }
            });
            
            console.log(`Docker release triggered for version ${version} at commit ${ref}`);

  # Final summary
  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [prepare-release, release-npm-admin, release-npm-core, create-release, trigger-docker-release]
    if: always()
    
    steps:
      - name: Generate final summary
        run: |
          echo "# 🎉 Release Orchestration Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "## 🧪 DRY RUN MODE" >> $GITHUB_STEP_SUMMARY
            echo "No actual releases were created." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "**Version**: ${{ needs.prepare-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release Type**: ${{ github.event.inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Components**: ${{ needs.prepare-release.outputs.components }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Component Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # NPM Admin
          if [[ "${{ needs.prepare-release.outputs.release_npm_admin }}" == "true" ]]; then
            if [[ "${{ needs.release-npm-admin.result }}" == "success" ]]; then
              echo "✅ **NPM Admin Client**: Released" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **NPM Admin Client**: Failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⏭️ **NPM Admin Client**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          # NPM Core
          if [[ "${{ needs.prepare-release.outputs.release_npm_core }}" == "true" ]]; then
            if [[ "${{ needs.release-npm-core.result }}" == "success" ]]; then
              echo "✅ **NPM Core Client**: Released" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **NPM Core Client**: Failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⏭️ **NPM Core Client**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Docker
          if [[ "${{ needs.prepare-release.outputs.release_docker }}" == "true" ]]; then
            if [[ "${{ needs.trigger-docker-release.result }}" == "success" ]]; then
              echo "✅ **Docker Images**: Release triggered" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Docker Images**: Failed to trigger" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⏭️ **Docker Images**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          # GitHub Release
          if [[ "${{ needs.create-release.result }}" == "success" ]]; then
            echo "✅ **GitHub Release**: Created" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "⏭️ **GitHub Release**: Skipped (dry run)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **GitHub Release**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event.inputs.dry_run }}" != "true" ]]; then
            echo "1. Monitor the Docker build workflow if triggered" >> $GITHUB_STEP_SUMMARY
            echo "2. Verify all packages are accessible:" >> $GITHUB_STEP_SUMMARY
            echo "   - [NPM Registry](https://www.npmjs.com/~conduit)" >> $GITHUB_STEP_SUMMARY
            echo "   - [GitHub Container Registry](https://github.com/orgs/knnlabs/packages)" >> $GITHUB_STEP_SUMMARY
            echo "3. Update documentation if needed" >> $GITHUB_STEP_SUMMARY
            echo "4. Announce the release" >> $GITHUB_STEP_SUMMARY
          else
            echo "This was a dry run. To perform an actual release, run the workflow again without the dry run option." >> $GITHUB_STEP_SUMMARY
          fi