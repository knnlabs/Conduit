name: Publish Admin Client to NPM

on:
  push:
    branches:
      - dev
      - master
    paths:
      - 'Clients/Node/Admin/**'
      - '.github/workflows/npm-publish-admin-client.yml'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type (patch, minor, major, prerelease)'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      dry_run:
        description: 'Dry run (skip actual publishing)'
        required: false
        default: false
        type: boolean

# Prevent concurrent version bumps
concurrency:
  group: npm-publish-admin-${{ github.ref }}
  cancel-in-progress: false

env:
  NODE_VERSION: 20
  PACKAGE_PATH: ./Clients/Node/Admin

jobs:
  publish:
    name: Publish Admin Client
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.PACKAGE_PATH }}
    
    permissions:
      contents: write
      packages: write
      id-token: write  # Required for NPM provenance
      
    outputs:
      version: ${{ steps.version.outputs.new_version }}
      npm_tag: ${{ steps.version.outputs.npm_tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          cache-dependency-path: 'Clients/Node/Admin/package-lock.json'

      - name: Build Common Package First
        run: |
          echo "🔨 Building Common package (dependency for Admin client)..."
          cd ../Common
          npm ci
          npm run build
          echo "✅ Common package built successfully"
          cd ../Admin

      - name: Install dependencies
        run: npm ci

      - name: Run quality checks
        run: |
          echo "Running linter..."
          npm run lint
          
          echo "Running tests..."
          npm run test
          
          echo "Building package..."
          npm run build

      - name: Check package quality
        run: |
          # Verify package.json has required fields
          node -e "
            const pkg = require('./package.json');
            const required = ['name', 'version', 'description', 'main', 'repository', 'license'];
            const missing = required.filter(field => !pkg[field]);
            if (missing.length > 0) {
              console.error('Missing required fields in package.json:', missing.join(', '));
              process.exit(1);
            }
          "
          
          # Check package size
          npm pack --dry-run
          
          # Display what will be published
          echo "Files to be published:"
          npm pack --dry-run --json | jq -r '.[0].files[].path'

      - name: Configure git
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "actions@github.com"

      - name: Determine version strategy
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              VERSION_TYPE="${{ github.event.inputs.version_type }}"
            else
              VERSION_TYPE="patch"
            fi
            NPM_TAG="latest"
          else
            VERSION_TYPE="prerelease"
            NPM_TAG="dev"
          fi
          
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "npm_tag=$NPM_TAG" >> $GITHUB_OUTPUT
          
          # Calculate new version
          if [[ "$VERSION_TYPE" == "prerelease" ]]; then
            # For dev builds, create a prerelease version with timestamp
            BASE_VERSION=$(echo $CURRENT_VERSION | sed 's/-dev.*//')
            NEW_VERSION="${BASE_VERSION}-dev.$(date +%Y%m%d%H%M%S)"
          else
            # Use npm version to calculate new version (dry-run)
            NEW_VERSION=$(npm version $VERSION_TYPE --no-git-tag-version --preid=dev | sed 's/^v//')
            # Reset the change
            git checkout package.json package-lock.json
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          echo "Version bump: $CURRENT_VERSION → $NEW_VERSION (type: $VERSION_TYPE, tag: $NPM_TAG)"

      - name: Update version
        if: ${{ !inputs.dry_run }}
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          
          # Update version in package.json
          npm version $NEW_VERSION --no-git-tag-version
          
          # Commit version bump
          git add package.json package-lock.json
          git commit -m "chore: bump @knn_labs/conduit-admin-client to v$NEW_VERSION [skip ci]"
          
          # Create git tag
          git tag "admin-client-v$NEW_VERSION"

      - name: Push changes
        if: ${{ !inputs.dry_run }}
        run: |
          # Push commit and tag
          git push origin ${{ github.ref_name }}
          git push origin "admin-client-v${{ steps.version.outputs.new_version }}"

      - name: Build final package
        run: npm run build

      - name: Validate NPM Token
        if: ${{ !inputs.dry_run }}
        run: |
          if [[ -z "${{ secrets.NPM_TOKEN }}" ]]; then
            echo "❌ NPM_TOKEN secret not found. Cannot publish to NPM."
            echo "Please add NPM_TOKEN as a repository secret."
            exit 1
          fi
          echo "✅ NPM_TOKEN is configured"

      - name: Publish to NPM
        if: ${{ !inputs.dry_run }}
        run: |
          npm publish --tag ${{ steps.version.outputs.npm_tag }} --access public --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: ${{ !inputs.dry_run && github.ref == 'refs/heads/master' }}
        run: |
          VERSION="${{ steps.version.outputs.new_version }}"
          TAG="admin-client-v$VERSION"
          
          # Generate changelog from commits
          CHANGELOG=$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>/dev/null || echo "")..HEAD -- ${{ env.PACKAGE_PATH }} | grep -v "skip ci" | head -20)
          
          # Create release using GitHub CLI
          gh release create "$TAG" \
            --title "Admin Client v$VERSION" \
            --notes "## Admin Client v$VERSION
          
          Published to NPM: https://www.npmjs.com/package/@knn_labs/conduit-admin-client/v/$VERSION
          
          ### Installation
          \`\`\`bash
          npm install @knn_labs/conduit-admin-client@$VERSION
          \`\`\`
          
          ### What's Changed
          $CHANGELOG
          
          ### Full Changelog
          https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 2>/dev/null || echo "")...$TAG"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate summary
        if: always()
        run: |
          echo "## 📦 Admin Client NPM Publish Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "### 🧪 DRY RUN MODE" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "**Package**: @knn_labs/conduit-admin-client" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ steps.version.outputs.current_version }} → ${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**NPM Tag**: ${{ steps.version.outputs.npm_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ inputs.dry_run }}" != "true" ]]; then
            echo "### Installation" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            if [[ "${{ steps.version.outputs.npm_tag }}" == "dev" ]]; then
              echo "npm install @knn_labs/conduit-admin-client@dev" >> $GITHUB_STEP_SUMMARY
            else
              echo "npm install @knn_labs/conduit-admin-client@latest" >> $GITHUB_STEP_SUMMARY
              echo "# or" >> $GITHUB_STEP_SUMMARY
              echo "npm install @knn_labs/conduit-admin-client@${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
            fi
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Links" >> $GITHUB_STEP_SUMMARY
            echo "- 📦 [NPM Package](https://www.npmjs.com/package/@knn_labs/conduit-admin-client)" >> $GITHUB_STEP_SUMMARY
            echo "- 🏷️ [Git Tag](https://github.com/${{ github.repository }}/releases/tag/admin-client-v${{ steps.version.outputs.new_version }})" >> $GITHUB_STEP_SUMMARY
          fi

  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: publish
    if: failure()
    
    permissions:
      issues: write
    
    steps:
      - name: Create failure issue
        uses: actions/github-script@v7
        with:
          script: |
            const title = `Admin Client NPM Publish Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `## NPM Publish Failure
            
            The Admin Client NPM publish workflow failed.
            
            **Workflow Run**: [${context.runId}](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            **Branch**: ${context.ref}
            **Commit**: ${context.sha}
            
            Please investigate and resolve the issue.`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'ci/cd', 'npm-publish']
            });