// <auto-generated />
using System;
using ConduitLLM.WebUI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConduitLLM.WebUI.Migrations
{
    [DbContext(typeof(ConfigurationDbContext))]
    partial class ConfigurationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.ModelProviderMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaxContextTokens")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModelAlias")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProviderCredentialId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProviderModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProviderCredentialId");

                    b.HasIndex("ModelAlias", "ProviderCredentialId")
                        .IsUnique();

                    b.ToTable("ModelProviderMapping");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.ProviderCredential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApiVersion")
                        .HasColumnType("TEXT");

                    b.Property<string>("BaseUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProviderName")
                        .IsUnique();

                    b.ToTable("ProviderCredential");
                });

            modelBuilder.Entity("ConduitLLM.WebUI.Data.DbModelProviderMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModelAlias")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderModelId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ModelAlias")
                        .IsUnique();

                    b.ToTable("ModelMappings");
                });

            modelBuilder.Entity("ConduitLLM.WebUI.Data.Entities.FallbackConfigurationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PrimaryModelDeploymentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("RouterConfigId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryModelDeploymentId");

                    b.HasIndex("RouterConfigId");

                    b.ToTable("FallbackConfigurations");
                });

            modelBuilder.Entity("ConduitLLM.WebUI.Data.Entities.FallbackModelMappingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("FallbackConfigurationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ModelDeploymentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FallbackConfigurationId", "ModelDeploymentId")
                        .IsUnique();

                    b.HasIndex("FallbackConfigurationId", "Order")
                        .IsUnique();

                    b.ToTable("FallbackModelMappings");
                });

            modelBuilder.Entity("ConduitLLM.WebUI.Data.Entities.ModelDeploymentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("HealthCheckEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("InputTokenCostPer1K")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHealthy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("OutputTokenCostPer1K")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("RPM")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RouterConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TPM")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IsEnabled");

                    b.HasIndex("IsHealthy");

                    b.HasIndex("ModelName");

                    b.HasIndex("ProviderName");

                    b.HasIndex("RouterConfigId");

                    b.ToTable("ModelDeployments");
                });

            modelBuilder.Entity("ConduitLLM.WebUI.Data.Entities.RouterConfigEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DefaultRoutingStrategy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("FallbacksEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxRetries")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RetryBaseDelayMs")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RetryMaxDelayMs")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LastUpdated");

                    b.ToTable("RouterConfigurations");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.ModelProviderMapping", b =>
                {
                    b.HasOne("ConduitLLM.Configuration.Entities.ProviderCredential", "ProviderCredential")
                        .WithMany()
                        .HasForeignKey("ProviderCredentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProviderCredential");
                });

            modelBuilder.Entity("ConduitLLM.WebUI.Data.Entities.FallbackConfigurationEntity", b =>
                {
                    b.HasOne("ConduitLLM.WebUI.Data.Entities.RouterConfigEntity", "RouterConfig")
                        .WithMany("FallbackConfigurations")
                        .HasForeignKey("RouterConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RouterConfig");
                });

            modelBuilder.Entity("ConduitLLM.WebUI.Data.Entities.FallbackModelMappingEntity", b =>
                {
                    b.HasOne("ConduitLLM.WebUI.Data.Entities.FallbackConfigurationEntity", "FallbackConfiguration")
                        .WithMany("FallbackMappings")
                        .HasForeignKey("FallbackConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FallbackConfiguration");
                });

            modelBuilder.Entity("ConduitLLM.WebUI.Data.Entities.ModelDeploymentEntity", b =>
                {
                    b.HasOne("ConduitLLM.WebUI.Data.Entities.RouterConfigEntity", "RouterConfig")
                        .WithMany("ModelDeployments")
                        .HasForeignKey("RouterConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RouterConfig");
                });

            modelBuilder.Entity("ConduitLLM.WebUI.Data.Entities.FallbackConfigurationEntity", b =>
                {
                    b.Navigation("FallbackMappings");
                });

            modelBuilder.Entity("ConduitLLM.WebUI.Data.Entities.RouterConfigEntity", b =>
                {
                    b.Navigation("FallbackConfigurations");

                    b.Navigation("ModelDeployments");
                });
#pragma warning restore 612, 618
        }
    }
}
