@if (IsVisible)
{
    <div class="modal fade @(IsVisible ? "show" : "")" tabindex="-1" style="display: @(IsVisible ? "block" : "none"); background-color: rgba(0,0,0,0.5);" @onclick="HandleBackdropClick">
        <div class="modal-dialog @GetModalSizeClass() @(IsCentered ? "modal-dialog-centered" : "") @(IsScrollable ? "modal-dialog-scrollable" : "")" @onclick:stopPropagation="true">
            <div class="modal-content">
                @if (!string.IsNullOrEmpty(Title) || ShowCloseButton)
                {
                    <div class="modal-header">
                        @if (!string.IsNullOrEmpty(Title))
                        {
                            <h5 class="modal-title">@Title</h5>
                        }
                        @if (ShowCloseButton)
                        {
                            <button type="button" class="btn-close" @onclick="Close" aria-label="Close"></button>
                        }
                    </div>
                }
                
                <div class="modal-body">
                    @BodyContent
                </div>
                
                @if (FooterContent != null)
                {
                    <div class="modal-footer">
                        @FooterContent
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    /// <summary>
    /// Gets or sets whether the modal is visible.
    /// </summary>
    [Parameter] public bool IsVisible { get; set; }
    
    /// <summary>
    /// Gets or sets the callback invoked when the modal visibility changes.
    /// </summary>
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    
    /// <summary>
    /// Gets or sets the modal title.
    /// </summary>
    [Parameter] public string? Title { get; set; }
    
    /// <summary>
    /// Gets or sets the modal size. Options: Small, Default, Large, ExtraLarge.
    /// </summary>
    [Parameter] public ModalSize Size { get; set; } = ModalSize.Default;
    
    /// <summary>
    /// Gets or sets whether to show the close button in the header.
    /// </summary>
    [Parameter] public bool ShowCloseButton { get; set; } = true;
    
    /// <summary>
    /// Gets or sets whether the modal should be centered vertically.
    /// </summary>
    [Parameter] public bool IsCentered { get; set; } = true;
    
    /// <summary>
    /// Gets or sets whether the modal body should be scrollable.
    /// </summary>
    [Parameter] public bool IsScrollable { get; set; } = false;
    
    /// <summary>
    /// Gets or sets whether clicking the backdrop closes the modal.
    /// </summary>
    [Parameter] public bool CloseOnBackdropClick { get; set; } = true;
    
    /// <summary>
    /// Gets or sets the body content of the modal.
    /// </summary>
    [Parameter] public RenderFragment? BodyContent { get; set; }
    
    /// <summary>
    /// Gets or sets the footer content of the modal.
    /// </summary>
    [Parameter] public RenderFragment? FooterContent { get; set; }
    
    /// <summary>
    /// Gets or sets the callback invoked when the modal is closed.
    /// </summary>
    [Parameter] public EventCallback OnClose { get; set; }

    private string GetModalSizeClass()
    {
        return Size switch
        {
            ModalSize.Small => "modal-sm",
            ModalSize.Large => "modal-lg",
            ModalSize.ExtraLarge => "modal-xl",
            _ => ""
        };
    }

    private async Task HandleBackdropClick()
    {
        if (CloseOnBackdropClick)
        {
            await Close();
        }
    }

    private async Task Close()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(false);
        await OnClose.InvokeAsync();
    }

    public enum ModalSize
    {
        Small,
        Default,
        Large,
        ExtraLarge
    }
}