@using ConduitLLM.WebUI.Interfaces
@using System.Threading

@inject IAdminApiCacheService CacheService
@implements IDisposable

<div class="card shadow-sm mb-4">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Admin API Cache Metrics</h5>
        <div>
            <button class="btn btn-sm btn-outline-primary me-2" @onclick="RefreshMetrics">
                <i class="bi bi-arrow-repeat"></i> Refresh
            </button>
            <button class="btn btn-sm btn-outline-secondary" @onclick="ClearCache">
                <i class="bi bi-trash"></i> Clear Cache
            </button>
        </div>
    </div>
    <div class="card-body">
        @if (!CacheService.IsCachingEnabled())
        {
            <div class="alert alert-warning">
                Admin API caching is not enabled. Enable it in Program.cs to improve performance.
            </div>
        }
        else
        {
            <div class="row">
                <div class="col-md-3">
                    <div class="card bg-light mb-3">
                        <div class="card-body text-center">
                            <h6 class="card-title">Cache Hits</h6>
                            <p class="display-6 text-success">@_stats.CacheHits</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-light mb-3">
                        <div class="card-body text-center">
                            <h6 class="card-title">Cache Misses</h6>
                            <p class="display-6 text-danger">@_stats.CacheMisses</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-light mb-3">
                        <div class="card-body text-center">
                            <h6 class="card-title">Hit Rate</h6>
                            <p class="display-6">@(_stats.HitRate.ToString("P1"))</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-light mb-3">
                        <div class="card-body text-center">
                            <h6 class="card-title">Active Entries</h6>
                            <p class="display-6">@_stats.ActiveCacheEntries</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="text-muted small text-center mt-3">
                Last updated: @(_lastUpdated.ToString("yyyy-MM-dd HH:mm:ss"))
            </div>
        }
    </div>
</div>

@code {
    private Services.CacheStatistics _stats = new();
    private DateTime _lastUpdated = DateTime.Now;
    private Timer? _refreshTimer;

    protected override void OnInitialized()
    {
        // Initialize metrics
        RefreshMetrics();
        
        // Start a timer to periodically refresh metrics
        _refreshTimer = new Timer(async _ =>
        {
            await InvokeAsync(() =>
            {
                RefreshMetrics();
                StateHasChanged();
            });
        }, null, TimeSpan.FromSeconds(10), TimeSpan.FromSeconds(30));
    }

    public void Dispose()
    {
        _refreshTimer?.Dispose();
    }

    private void RefreshMetrics()
    {
        _stats = CacheService.GetCacheStatistics();
        _lastUpdated = DateTime.Now;
    }

    private void ClearCache()
    {
        CacheService.ClearAllCaches();
        RefreshMetrics();
    }
}