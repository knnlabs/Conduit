@using ConduitLLM.WebUI.Models
@using ConduitLLM.Core.Validation
@using System.Text.Json
@using System.Text.Json.Nodes

<div class="function-registry">
    @if (ShowHeader)
    {
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h6 class="mb-0">
                <i class="fa fa-function me-2"></i>Available Functions
            </h6>
            <button class="btn btn-sm btn-primary" @onclick="ShowAddFunction">
                <i class="fa fa-plus me-1"></i>Add Function
            </button>
        </div>
    }

    @if (Functions.Any())
    {
        <div class="function-list">
            @foreach (var function in Functions)
            {
                <div class="function-item @(function.IsEnabled ? "" : "disabled")">
                    <div class="function-header">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox"
                                   id="@($"func-enable-{function.Id}")"
                                   @bind="function.IsEnabled"
                                   @bind:after="(() => OnFunctionToggled(function))">
                            <label class="form-check-label fw-semibold" for="@($"func-enable-{function.Id}")">
                                @function.Name
                                @if (function.Category == "demo")
                                {
                                    <span class="badge bg-info ms-2">Demo</span>
                                }
                            </label>
                        </div>
                        <div class="function-actions">
                            @if (function.Category != "demo")
                            {
                                <button class="btn btn-sm btn-link text-primary" @onclick="() => EditFunction(function)">
                                    <i class="fa fa-edit"></i>
                                </button>
                            }
                            <button class="btn btn-sm btn-link text-danger" @onclick="() => RemoveFunction(function)">
                                <i class="fa fa-trash"></i>
                            </button>
                        </div>
                    </div>
                    <div class="function-description">
                        @function.Description
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center text-muted py-3">
            <i class="fa fa-function fa-2x mb-2"></i>
            <p class="mb-0">No functions defined</p>
        </div>
    }
</div>

<!-- Add/Edit Function Modal -->
@if (showFunctionEditor)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fa fa-function me-2"></i>
                        @(editingFunction?.Id == currentFunction.Id ? "Edit" : "Add") Function
                    </h5>
                    <button type="button" class="btn-close" @onclick="CancelEdit"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label class="form-label">Function Name</label>
                            <input type="text" class="form-control @(GetValidationClass("name"))"
                                   @bind="currentFunction.Name" @bind:event="oninput"
                                   placeholder="e.g., get_weather">
                            @if (validationErrors.ContainsKey("name"))
                            {
                                <div class="invalid-feedback d-block">@validationErrors["name"]</div>
                            }
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" rows="2"
                                      @bind="currentFunction.Description"
                                      placeholder="e.g., Get the current weather for a location"></textarea>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Parameters (JSON Schema)</label>
                            <textarea class="form-control font-monospace @(GetValidationClass("parameters"))"
                                      rows="10" @bind="currentFunction.ParametersJson" @bind:event="oninput"
                                      placeholder='{"type": "object", "properties": {...}}'></textarea>
                            @if (validationErrors.ContainsKey("parameters"))
                            {
                                <div class="invalid-feedback d-block">@validationErrors["parameters"]</div>
                            }
                            <small class="form-text text-muted">
                                Define the function parameters using JSON Schema format.
                                <a href="#" @onclick="ShowSchemaHelp" @onclick:preventDefault="true">Need help?</a>
                            </small>
                        </div>

                        @if (showSchemaHelp)
                        {
                            <div class="alert alert-info">
                                <h6>JSON Schema Example:</h6>
                                <pre class="mb-0">@schemaExample</pre>
                            </div>
                        }
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveFunction"
                            disabled="@(!IsValid())">
                        <i class="fa fa-save me-2"></i>Save Function
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .function-registry {
        max-height: 400px;
        overflow-y: auto;
    }

    .function-item {
        border: 1px solid #dee2e6;
        border-radius: 0.5rem;
        padding: 1rem;
        margin-bottom: 0.5rem;
        transition: all 0.2s;
    }

    .function-item:hover {
        border-color: #667eea;
        box-shadow: 0 2px 4px rgba(102, 126, 234, 0.1);
    }

    .function-item.disabled {
        opacity: 0.6;
    }

    .function-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.5rem;
    }

    .function-actions {
        display: flex;
        gap: 0.25rem;
    }

    .function-description {
        font-size: 0.875rem;
        color: #6c757d;
    }

    .modal.show {
        display: block;
    }
</style>

@code {
    [Parameter] public List<FunctionDefinitionViewModel> Functions { get; set; } = new();
    [Parameter] public EventCallback<List<FunctionDefinitionViewModel>> FunctionsChanged { get; set; }
    [Parameter] public bool ShowHeader { get; set; } = true;

    private bool showFunctionEditor = false;
    private bool showSchemaHelp = false;
    private FunctionDefinitionViewModel currentFunction = new();
    private FunctionDefinitionViewModel? editingFunction = null;
    private Dictionary<string, string> validationErrors = new();

    private const string schemaExample = @"{
  ""type"": ""object"",
  ""properties"": {
    ""location"": {
      ""type"": ""string"",
      ""description"": ""The city and state, e.g. San Francisco, CA""
    },
    ""unit"": {
      ""type"": ""string"",
      ""enum"": [""celsius"", ""fahrenheit""],
      ""description"": ""Temperature unit""
    }
  },
  ""required"": [""location""]
}";

    protected override void OnInitialized()
    {
        // Add demo functions if none exist
        if (!Functions.Any(f => f.Category == "demo"))
        {
            AddDemoFunctions();
        }
    }

    private void AddDemoFunctions()
    {
        Functions.AddRange(new[]
        {
            new FunctionDefinitionViewModel
            {
                Name = "get_weather",
                Description = "Get the current weather for a location",
                Category = "demo",
                IsEnabled = false,
                ParametersJson = JsonSerializer.Serialize(new
                {
                    type = "object",
                    properties = new
                    {
                        location = new
                        {
                            type = "string",
                            description = "The city and state, e.g. San Francisco, CA"
                        },
                        unit = new
                        {
                            type = "string",
                            @enum = new[] { "celsius", "fahrenheit" },
                            description = "Temperature unit"
                        }
                    },
                    required = new[] { "location" }
                }, new JsonSerializerOptions { WriteIndented = true })
            },
            new FunctionDefinitionViewModel
            {
                Name = "calculate",
                Description = "Perform basic mathematical calculations",
                Category = "demo",
                IsEnabled = false,
                ParametersJson = JsonSerializer.Serialize(new
                {
                    type = "object",
                    properties = new
                    {
                        expression = new
                        {
                            type = "string",
                            description = "Mathematical expression to evaluate"
                        }
                    },
                    required = new[] { "expression" }
                }, new JsonSerializerOptions { WriteIndented = true })
            }
        });

        FunctionsChanged.InvokeAsync(Functions);
    }

    private void ShowAddFunction()
    {
        currentFunction = new FunctionDefinitionViewModel();
        editingFunction = null;
        validationErrors.Clear();
        showFunctionEditor = true;
    }

    private void EditFunction(FunctionDefinitionViewModel function)
    {
        currentFunction = new FunctionDefinitionViewModel
        {
            Id = function.Id,
            Name = function.Name,
            Description = function.Description,
            ParametersJson = function.ParametersJson,
            IsEnabled = function.IsEnabled,
            Category = function.Category
        };
        editingFunction = function;
        validationErrors.Clear();
        showFunctionEditor = true;
    }

    private void RemoveFunction(FunctionDefinitionViewModel function)
    {
        Functions.Remove(function);
        FunctionsChanged.InvokeAsync(Functions);
    }

    private async Task SaveFunction()
    {
        if (!IsValid()) return;

        if (editingFunction != null)
        {
            // Update existing
            var index = Functions.IndexOf(editingFunction);
            if (index >= 0)
            {
                Functions[index] = currentFunction;
            }
        }
        else
        {
            // Add new
            Functions.Add(currentFunction);
        }

        await FunctionsChanged.InvokeAsync(Functions);
        CancelEdit();
    }

    private void CancelEdit()
    {
        showFunctionEditor = false;
        currentFunction = new();
        editingFunction = null;
        validationErrors.Clear();
    }

    private bool IsValid()
    {
        validationErrors.Clear();

        // Validate name
        if (string.IsNullOrWhiteSpace(currentFunction.Name))
        {
            validationErrors["name"] = "Function name is required";
        }
        else if (!System.Text.RegularExpressions.Regex.IsMatch(currentFunction.Name, @"^[a-zA-Z0-9_-]{1,64}$"))
        {
            validationErrors["name"] = "Invalid function name. Use only letters, numbers, underscore, and dash (max 64 chars)";
        }

        // Validate parameters JSON
        try
        {
            var parametersJson = currentFunction.GetParametersAsJson();
            if (parametersJson == null)
            {
                validationErrors["parameters"] = "Invalid JSON format";
            }
            else
            {
                // Basic JSON Schema validation
                if (!parametersJson.ContainsKey("type"))
                {
                    validationErrors["parameters"] = "Parameters must include a 'type' property (usually 'object')";
                }
            }
        }
        catch (Exception ex)
        {
            validationErrors["parameters"] = $"Invalid JSON: {ex.Message}";
        }

        StateHasChanged();
        return !validationErrors.Any();
    }

    private string GetValidationClass(string field)
    {
        return validationErrors.ContainsKey(field) ? "is-invalid" : "";
    }

    private void ShowSchemaHelp()
    {
        showSchemaHelp = !showSchemaHelp;
    }

    private async Task OnFunctionToggled(FunctionDefinitionViewModel function)
    {
        await FunctionsChanged.InvokeAsync(Functions);
    }
}