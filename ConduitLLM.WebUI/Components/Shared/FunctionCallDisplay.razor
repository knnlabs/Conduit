@using ConduitLLM.Core.Models
@using System.Text.Json

<div class="function-call-display">
    <div class="function-call-header">
        <i class="fa fa-cogs me-2"></i>
        <strong>Function Call Requested</strong>
    </div>
    
    @foreach (var toolCall in ToolCalls)
    {
        <div class="function-call-item">
            <div class="function-info">
                <div class="function-name">
                    <i class="fa fa-function me-2"></i>@toolCall.Function?.Name
                </div>
                <div class="function-id">
                    ID: @toolCall.Id
                </div>
            </div>
            
            <div class="function-arguments">
                <label class="form-label">Arguments:</label>
                <pre class="arguments-display">@FormatJson(toolCall.Function?.Arguments)</pre>
            </div>
            
            <div class="function-actions">
                <button class="btn btn-sm btn-primary" @onclick="() => CopyToClipboard(toolCall)">
                    <i class="fa fa-copy me-1"></i>Copy JSON
                </button>
                
                @if (!HasResult(toolCall.Id))
                {
                    <button class="btn btn-sm btn-success" @onclick="() => ShowResultInput(toolCall)">
                        <i class="fa fa-reply me-1"></i>Input Result
                    </button>
                }
                else
                {
                    <span class="badge bg-success">
                        <i class="fa fa-check me-1"></i>Result Provided
                    </span>
                }
            </div>
            
            @if (showingResultInput == toolCall.Id)
            {
                <div class="result-input-section">
                    <label class="form-label">Function Result:</label>
                    <textarea class="form-control font-monospace" rows="4"
                              @bind="currentResultInput"
                              placeholder='{"result": "..."}'>
                    </textarea>
                    <div class="mt-2">
                        <button class="btn btn-sm btn-success" @onclick="() => SubmitResult(toolCall)">
                            <i class="fa fa-check me-1"></i>Submit Result
                        </button>
                        <button class="btn btn-sm btn-secondary ms-2" @onclick="CancelResultInput">
                            Cancel
                        </button>
                    </div>
                </div>
            }
        </div>
    }
</div>

<style>
    .function-call-display {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 0.5rem;
        padding: 1rem;
        margin: 0.5rem 0;
    }

    .function-call-header {
        color: #667eea;
        margin-bottom: 1rem;
        font-size: 0.95rem;
    }

    .function-call-item {
        background-color: white;
        border: 1px solid #e9ecef;
        border-radius: 0.375rem;
        padding: 0.75rem;
        margin-bottom: 0.75rem;
    }

    .function-call-item:last-child {
        margin-bottom: 0;
    }

    .function-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.5rem;
    }

    .function-name {
        font-weight: 600;
        color: #495057;
    }

    .function-id {
        font-size: 0.75rem;
        color: #6c757d;
        font-family: monospace;
    }

    .function-arguments {
        margin-bottom: 0.75rem;
    }

    .arguments-display {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
        padding: 0.5rem;
        margin: 0;
        font-size: 0.875rem;
        max-height: 200px;
        overflow-y: auto;
    }

    .function-actions {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .result-input-section {
        margin-top: 1rem;
        padding-top: 1rem;
        border-top: 1px solid #dee2e6;
    }
</style>

@code {
    [Parameter] public List<ToolCall> ToolCalls { get; set; } = new();
    [Parameter] public EventCallback<(string toolCallId, string result)> OnResultSubmitted { get; set; }
    [Parameter] public Dictionary<string, string> ProvidedResults { get; set; } = new();
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    private string? showingResultInput = null;
    private string currentResultInput = "";

    private string FormatJson(string? json)
    {
        if (string.IsNullOrWhiteSpace(json)) return "{}";
        
        try
        {
            var parsed = JsonDocument.Parse(json);
            return JsonSerializer.Serialize(parsed, new JsonSerializerOptions { WriteIndented = true });
        }
        catch
        {
            return json;
        }
    }

    private async Task CopyToClipboard(ToolCall toolCall)
    {
        var json = JsonSerializer.Serialize(new
        {
            function = toolCall.Function?.Name,
            arguments = toolCall.Function?.Arguments != null ? 
                JsonSerializer.Deserialize<object>(toolCall.Function.Arguments) : null
        }, new JsonSerializerOptions { WriteIndented = true });

        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", json);
    }

    private void ShowResultInput(ToolCall toolCall)
    {
        showingResultInput = toolCall.Id;
        currentResultInput = "";
    }

    private void CancelResultInput()
    {
        showingResultInput = null;
        currentResultInput = "";
    }

    private async Task SubmitResult(ToolCall toolCall)
    {
        if (!string.IsNullOrWhiteSpace(currentResultInput))
        {
            // Validate JSON
            try
            {
                JsonDocument.Parse(currentResultInput);
                await OnResultSubmitted.InvokeAsync((toolCall.Id, currentResultInput));
                showingResultInput = null;
                currentResultInput = "";
            }
            catch (JsonException ex)
            {
                // In a real app, show error message
                Console.WriteLine($"Invalid JSON: {ex.Message}");
            }
        }
    }

    private bool HasResult(string toolCallId)
    {
        return ProvidedResults.ContainsKey(toolCallId);
    }
}