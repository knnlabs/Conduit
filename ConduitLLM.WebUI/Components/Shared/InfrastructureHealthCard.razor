@using ConduitLLM.WebUI.DTOs

<Card>
    <HeaderContent>
        <div class="d-flex align-items-center justify-content-between">
            <div class="d-flex align-items-center gap-2">
                <i class="@Icon" style="font-size: 1.5rem; color: var(--bs-primary);"></i>
                <h3 class="mb-0 h5">@Title</h3>
            </div>
            <StatusBadge Status="@GetStatus()" />
        </div>
    </HeaderContent>
    <BodyContent>
        @if (Metrics != null)
        {
            <div class="metrics-list">
                @if (Title == "Database" && Metrics is DatabaseMetrics dbMetrics)
                {
                    <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                        <span class="text-muted">Active Connections</span>
                        <span class="fw-semibold">@dbMetrics.ActiveConnections</span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                        <span class="text-muted">Pool Utilization</span>
                        <span class="fw-semibold @(dbMetrics.PoolUtilization > 90 ? "text-danger" : "")">@($"{dbMetrics.PoolUtilization:F1}%")</span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                        <span class="text-muted">Avg Query Duration</span>
                        <span class="fw-semibold">@($"{dbMetrics.AverageQueryDuration:F1} ms")</span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                        <span class="text-muted">Errors/min</span>
                        <span class="fw-semibold @(dbMetrics.ErrorsPerMinute > 0 ? "text-warning" : "")">@dbMetrics.ErrorsPerMinute</span>
                    </div>
                }
                else if (Title == "Redis Cache" && Metrics is RedisMetrics redisMetrics)
                {
                    <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                        <span class="text-muted">Memory Usage</span>
                        <span class="fw-semibold">@($"{redisMetrics.MemoryUsageMB:F1} MB")</span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                        <span class="text-muted">Hit Rate</span>
                        <span class="fw-semibold @(redisMetrics.HitRate < 80 ? "text-warning" : "")">@($"{redisMetrics.HitRate:F1}%")</span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                        <span class="text-muted">Keys</span>
                        <span class="fw-semibold">@redisMetrics.KeyCount.ToString("N0")</span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                        <span class="text-muted">Avg Latency</span>
                        <span class="fw-semibold">@($"{redisMetrics.AverageLatency:F1} ms")</span>
                    </div>
                }
                else if (Title == "RabbitMQ" && Metrics is RabbitMQMetrics rabbitMetrics)
                {
                    <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                        <span class="text-muted">Messages Published/min</span>
                        <span class="fw-semibold">@rabbitMetrics.MessagesPublishedPerMinute</span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                        <span class="text-muted">Messages Consumed/min</span>
                        <span class="fw-semibold">@rabbitMetrics.MessagesConsumedPerMinute</span>
                    </div>
                    @if (rabbitMetrics.QueueDepths?.Any() == true)
                    {
                        <div class="queue-depths mt-2">
                            <small class="text-muted">Queue Depths:</small>
                            @foreach (var queue in rabbitMetrics.QueueDepths)
                            {
                                <div class="d-flex justify-content-between small">
                                    <span>@queue.Key</span>
                                    <span class="@(queue.Value > 100 ? "text-warning" : "")">@queue.Value</span>
                                </div>
                            }
                        </div>
                    }
                }
                else if (Title == "SignalR" && Metrics is SignalRMetrics signalrMetrics)
                {
                    <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                        <span class="text-muted">Active Connections</span>
                        <span class="fw-semibold">@signalrMetrics.ActiveConnections</span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                        <span class="text-muted">Messages Sent/min</span>
                        <span class="fw-semibold">@signalrMetrics.MessagesSentPerMinute</span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                        <span class="text-muted">Messages Received/min</span>
                        <span class="fw-semibold">@signalrMetrics.MessagesReceivedPerMinute</span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                        <span class="text-muted">Avg Processing Time</span>
                        <span class="fw-semibold">@($"{signalrMetrics.AverageMessageProcessingTime:F1} ms")</span>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center text-muted py-3">
                <i class="fas fa-question-circle"></i>
                <p class="mb-0 mt-2">No data available</p>
            </div>
        }
    </BodyContent>
</Card>

@code {
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public object? Metrics { get; set; }
    [Parameter] public string Icon { get; set; } = "fas fa-server";

    private string GetStatus()
    {
        if (Metrics == null) return "unknown";

        return Title switch
        {
            "Database" when Metrics is DatabaseMetrics db => 
                db.HealthStatus ?? (db.ErrorsPerMinute > 0 ? "degraded" : "healthy"),
            
            "Redis Cache" when Metrics is RedisMetrics redis => 
                !redis.IsConnected ? "disconnected" : (redis.HitRate < 50 ? "degraded" : "healthy"),
            
            "RabbitMQ" when Metrics is RabbitMQMetrics rabbit => 
                !rabbit.IsConnected ? "disconnected" : "healthy",
            
            "SignalR" when Metrics is SignalRMetrics signalr => 
                signalr.ActiveConnections == 0 ? "disconnected" : "healthy",
            
            _ => "unknown"
        };
    }
}


<style>
    .metrics-list {
        font-size: 0.9rem;
    }

    .queue-depths {
        background-color: var(--bs-gray-100);
        padding: 8px;
        border-radius: 4px;
    }
</style>