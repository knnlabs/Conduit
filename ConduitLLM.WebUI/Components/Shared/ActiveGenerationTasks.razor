@using System.Text.Json
@implements IDisposable

<div class="card shadow-sm border-0 mb-4">
    <div class="card-header bg-light border-0">
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">
                <i class="fa fa-tasks me-2"></i>Active Generation Tasks
            </h5>
            <span class="badge bg-primary">@ActiveTasks.Count tasks</span>
        </div>
    </div>
    <div class="card-body">
        @if (!ActiveTasks.Any())
        {
            <div class="text-center text-muted py-3">
                <i class="fa fa-info-circle me-2"></i>No active tasks
            </div>
        }
        else
        {
            @foreach (var task in ActiveTasks)
            {
                <div class="task-item border rounded p-3 mb-3">
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <div class="flex-grow-1">
                            <h6 class="mb-1 text-truncate" title="@task.Prompt">
                                @if (TaskType == GenerationTaskType.Image)
                                {
                                    <i class="fa fa-image me-2 text-primary"></i>
                                }
                                else
                                {
                                    <i class="fa fa-video me-2 text-primary"></i>
                                }
                                @task.Prompt
                            </h6>
                            <small class="text-muted">
                                <i class="fa fa-clock me-1"></i>Started: @task.CreatedAt.ToString("h:mm:ss tt")
                            </small>
                        </div>
                        <span class="badge bg-@GetStatusBadgeClass(task.Status)">@task.Status</span>
                    </div>
                    
                    @if (task.Progress.HasValue)
                    {
                        <div class="progress mb-2" style="height: 12px;">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                 role="progressbar" 
                                 style="width: @(task.Progress)%"
                                 aria-valuenow="@task.Progress" 
                                 aria-valuemin="0" 
                                 aria-valuemax="100">
                                @if (task.Progress >= 10)
                                {
                                    <span class="small">@task.Progress%</span>
                                }
                            </div>
                        </div>
                    }
                    
                    @if (!string.IsNullOrEmpty(task.StatusMessage))
                    {
                        <small class="text-muted d-block mb-2">
                            <i class="fa fa-info-circle me-1"></i>@task.StatusMessage
                        </small>
                    }
                    
                    @if (!string.IsNullOrEmpty(task.Error))
                    {
                        <div class="alert alert-danger small mb-0 mt-2">
                            <i class="fa fa-exclamation-circle me-1"></i>@task.Error
                        </div>
                    }
                    
                    <div class="d-flex justify-content-between align-items-center mt-2">
                        <small class="text-muted">
                            Task ID: <code>@task.TaskId</code>
                        </small>
                        @if (task.Status == "pending" || task.Status == "running" || task.Status == "processing")
                        {
                            <button class="btn btn-sm btn-outline-danger" 
                                    @onclick="() => OnCancelTask.InvokeAsync(task.TaskId)"
                                    disabled="@task.IsCancelling">
                                @if (task.IsCancelling)
                                {
                                    <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                                    <span>Cancelling...</span>
                                }
                                else
                                {
                                    <i class="fa fa-times me-1"></i><span>Cancel</span>
                                }
                            </button>
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter] public List<GenerationTask> ActiveTasks { get; set; } = new();
    [Parameter] public GenerationTaskType TaskType { get; set; } = GenerationTaskType.Image;
    [Parameter] public EventCallback<string> OnCancelTask { get; set; }

    public enum GenerationTaskType
    {
        Image,
        Video
    }

    public class GenerationTask
    {
        public string TaskId { get; set; } = "";
        public string Status { get; set; } = "";
        public string Prompt { get; set; } = "";
        public int? Progress { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime UpdatedAt { get; set; }
        public DateTime? CompletedAt { get; set; }
        public DateTime? EstimatedCompletionTime { get; set; }
        public string? Error { get; set; }
        public bool IsCancelling { get; set; }
        public string? StatusMessage { get; set; }
    }

    private string GetStatusBadgeClass(string status)
    {
        return status?.ToLower() switch
        {
            "pending" => "secondary",
            "running" or "processing" => "primary",
            "completed" => "success",
            "failed" => "danger",
            "cancelled" => "warning",
            _ => "secondary"
        };
    }

    public void Dispose()
    {
        // Cleanup if needed
    }
}

<style>
    .task-item {
        background-color: #f8f9fa;
        transition: all 0.3s ease;
    }

    .task-item:hover {
        background-color: #e9ecef;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .progress {
        background-color: #e9ecef;
    }

    .progress-bar {
        transition: width 0.6s ease;
    }

    code {
        font-size: 0.85em;
        color: #495057;
        background-color: #e9ecef;
        padding: 2px 4px;
        border-radius: 3px;
    }
</style>