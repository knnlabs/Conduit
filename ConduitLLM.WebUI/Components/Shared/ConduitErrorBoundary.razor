@inherits Microsoft.AspNetCore.Components.ErrorBoundaryBase
@inject ILogger<ConduitErrorBoundary> Logger

@if (CurrentException is null)
{
    @ChildContent
}
else
{
    <div class="error-boundary-container">
        @if (ErrorContent is not null)
        {
            @ErrorContent(CurrentException)
        }
        else
        {
            <div class="alert alert-danger m-3" role="alert">
                <h5 class="alert-heading">
                    <i class="fa fa-exclamation-triangle me-2"></i>Something went wrong
                </h5>
                <p class="mb-2">An error occurred while rendering this component.</p>
                @if (ShowDetails && CurrentException is not null)
                {
                    <details class="mt-3">
                        <summary class="cursor-pointer">Error details</summary>
                        <pre class="mt-2 p-2 bg-light rounded small">@CurrentException.ToString()</pre>
                    </details>
                }
                @if (ShowResetButton)
                {
                    <hr />
                    <button class="btn btn-sm btn-outline-danger" @onclick="Recover">
                        <i class="fa fa-sync me-1"></i>Try Again
                    </button>
                }
            </div>
        }
    </div>
}

@code {
    /// <summary>
    /// Whether to show error details (stack trace) in Development mode.
    /// </summary>
    [Parameter] 
    public bool ShowDetails { get; set; } = true;
    
    /// <summary>
    /// Whether to show a reset button.
    /// </summary>
    [Parameter] 
    public bool ShowResetButton { get; set; } = true;
    
    /// <summary>
    /// Event raised when an error is caught.
    /// </summary>
    [Parameter] 
    public EventCallback<Exception> OnError { get; set; }
    
    protected override async Task OnErrorAsync(Exception exception)
    {
        Logger.LogError(exception, "Error caught by ConduitErrorBoundary");
        
        if (OnError.HasDelegate)
        {
            try
            {
                await OnError.InvokeAsync(exception);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error in OnError callback");
            }
        }
    }
}

<style>
    .error-boundary-container {
        min-height: 100px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .cursor-pointer {
        cursor: pointer;
    }
    
    details summary::-webkit-details-marker {
        color: #dc3545;
    }
</style>