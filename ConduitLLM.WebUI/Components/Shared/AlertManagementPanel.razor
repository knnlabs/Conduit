@using Microsoft.AspNetCore.SignalR.Client
@using ConduitLLM.WebUI.Models
@inject ILogger<AlertManagementPanel> Logger

<div class="alert-management-panel">
    <ul class="nav nav-tabs mb-3" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="alert-rules-tab" data-bs-toggle="tab" data-bs-target="#alert-rules" type="button" role="tab">
                <i class="fas fa-cog"></i> Alert Rules
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="suppressions-tab" data-bs-toggle="tab" data-bs-target="#suppressions" type="button" role="tab">
                <i class="fas fa-volume-mute"></i> Suppressions
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="history-tab" data-bs-toggle="tab" data-bs-target="#history" type="button" role="tab">
                <i class="fas fa-history"></i> Alert History
            </button>
        </li>
    </ul>

    <div class="tab-content">
        <!-- Alert Rules Tab -->
        <div class="tab-pane fade show active" id="alert-rules" role="tabpanel">
            @if (_alertRules.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Rule Name</th>
                                <th>Component</th>
                                <th>Type</th>
                                <th>Condition</th>
                                <th>Severity</th>
                                <th>Enabled</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var rule in _alertRules)
                            {
                                <tr>
                                    <td>@rule.Name</td>
                                    <td>@rule.Component</td>
                                    <td>@rule.AlertType</td>
                                    <td>@rule.Condition</td>
                                    <td>
                                        <span class="badge @GetSeverityBadgeClass(rule.Severity)">@rule.Severity</span>
                                    </td>
                                    <td>
                                        <div class="form-check form-switch">
                                            <input class="form-check-input" type="checkbox" @bind="rule.IsEnabled" @onclick="() => ToggleRule(rule)">
                                        </div>
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => EditRule(rule)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteRule(rule.Id)">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <EmptyState Icon="fas fa-cog"
                            Title="No Alert Rules"
                            Message="Create alert rules to automatically trigger alerts based on conditions">
                    <button class="btn btn-primary" @onclick="CreateNewRule">
                        <i class="fas fa-plus"></i> Create Alert Rule
                    </button>
                </EmptyState>
            }
        </div>

        <!-- Suppressions Tab -->
        <div class="tab-pane fade" id="suppressions" role="tabpanel">
            @if (_activeSuppressions.Any())
            {
                <div class="suppression-list">
                    @foreach (var suppression in _activeSuppressions)
                    {
                        <div class="suppression-item">
                            <div class="d-flex justify-content-between align-items-start">
                                <div>
                                    <h6 class="mb-1">@suppression.AlertPattern</h6>
                                    <p class="mb-1 text-muted">@suppression.Reason</p>
                                    <small>
                                        <i class="fas fa-clock"></i> @suppression.StartTime.ToString("yyyy-MM-dd HH:mm") - @suppression.EndTime.ToString("yyyy-MM-dd HH:mm") UTC
                                        <br>
                                        <i class="fas fa-user"></i> Created by @suppression.CreatedBy
                                    </small>
                                </div>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => CancelSuppression(suppression.Id)">
                                    <i class="fas fa-times"></i> Cancel
                                </button>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <EmptyState Icon="fas fa-volume-mute"
                            Title="No Active Suppressions"
                            Message="Create suppressions to temporarily silence specific alerts">
                    <button class="btn btn-primary" @onclick="CreateNewSuppression">
                        <i class="fas fa-plus"></i> Create Suppression
                    </button>
                </EmptyState>
            }
        </div>

        <!-- History Tab -->
        <div class="tab-pane fade" id="history" role="tabpanel">
            <div class="mb-3">
                <input type="text" class="form-control" placeholder="Search alert history..." @bind="_historySearch" @bind:event="oninput" @onkeyup="SearchHistory">
            </div>
            @if (_alertHistory.Any())
            {
                <div class="history-timeline">
                    @foreach (var entry in _filteredHistory.Take(50))
                    {
                        <div class="history-item">
                            <div class="history-icon">
                                <i class="@GetHistoryIcon(entry.Action)"></i>
                            </div>
                            <div class="history-content">
                                <h6 class="mb-1">@entry.Action</h6>
                                <p class="mb-1">
                                    Alert ID: @entry.AlertId
                                    @if (!string.IsNullOrEmpty(entry.User))
                                    {
                                        <span class="ms-2">by @entry.User</span>
                                    }
                                </p>
                                @if (!string.IsNullOrEmpty(entry.Notes))
                                {
                                    <p class="text-muted mb-1">@entry.Notes</p>
                                }
                                <small class="text-muted">@entry.Timestamp.ToString("yyyy-MM-dd HH:mm:ss") UTC</small>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <EmptyState Icon="fas fa-history"
                            Title="No Alert History"
                            Message="Alert history will appear here as alerts are triggered and managed" />
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public HubConnection? HubConnection { get; set; }
    [Parameter] public EventCallback OnRuleChanged { get; set; }

    private List<AlertRuleViewModel> _alertRules = new();
    private List<AlertSuppressionViewModel> _activeSuppressions = new();
    private List<AlertHistoryEntryViewModel> _alertHistory = new();
    private List<AlertHistoryEntryViewModel> _filteredHistory = new();
    private string _historySearch = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        if (HubConnection?.State != HubConnectionState.Connected)
            return;

        try
        {
            _alertRules = await HubConnection.InvokeAsync<List<AlertRuleViewModel>>("GetAlertRules");
            _activeSuppressions = await HubConnection.InvokeAsync<List<AlertSuppressionViewModel>>("GetActiveSuppressions");
            // Alert history would be loaded per alert, not globally
            _filteredHistory = _alertHistory;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load alert management data");
        }
    }

    private async Task ToggleRule(AlertRuleViewModel rule)
    {
        if (HubConnection?.State != HubConnectionState.Connected)
            return;

        try
        {
            await HubConnection.InvokeAsync<AlertRuleViewModel>("SaveAlertRule", rule);
            await OnRuleChanged.InvokeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to toggle alert rule");
            rule.IsEnabled = !rule.IsEnabled; // Revert on error
        }
    }

    private void EditRule(AlertRuleViewModel rule)
    {
        // TODO: Open edit modal
        Logger.LogInformation("Edit rule: {RuleId}", rule.Id);
    }

    private async Task DeleteRule(string ruleId)
    {
        if (HubConnection?.State != HubConnectionState.Connected)
            return;

        try
        {
            var success = await HubConnection.InvokeAsync<bool>("DeleteAlertRule", ruleId);
            if (success)
            {
                _alertRules.RemoveAll(r => r.Id == ruleId);
                await OnRuleChanged.InvokeAsync();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to delete alert rule");
        }
    }

    private void CreateNewRule()
    {
        // TODO: Open create rule modal
        Logger.LogInformation("Create new rule");
    }

    private async Task CancelSuppression(string suppressionId)
    {
        if (HubConnection?.State != HubConnectionState.Connected)
            return;

        try
        {
            var success = await HubConnection.InvokeAsync<bool>("CancelAlertSuppression", suppressionId);
            if (success)
            {
                _activeSuppressions.RemoveAll(s => s.Id == suppressionId);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to cancel suppression");
        }
    }

    private void CreateNewSuppression()
    {
        // TODO: Open create suppression modal
        Logger.LogInformation("Create new suppression");
    }

    private void SearchHistory()
    {
        if (string.IsNullOrWhiteSpace(_historySearch))
        {
            _filteredHistory = _alertHistory;
        }
        else
        {
            _filteredHistory = _alertHistory
                .Where(h => h.AlertId.Contains(_historySearch, StringComparison.OrdinalIgnoreCase) ||
                           h.Action.Contains(_historySearch, StringComparison.OrdinalIgnoreCase) ||
                           (h.User?.Contains(_historySearch, StringComparison.OrdinalIgnoreCase) ?? false) ||
                           (h.Notes?.Contains(_historySearch, StringComparison.OrdinalIgnoreCase) ?? false))
                .ToList();
        }
    }

    private string GetSeverityBadgeClass(string severity) => severity switch
    {
        "Critical" => "bg-danger",
        "Error" => "bg-danger",
        "Warning" => "bg-warning",
        "Info" => "bg-info",
        _ => "bg-secondary"
    };

    private string GetHistoryIcon(string action) => action switch
    {
        "Triggered" => "fas fa-bell text-warning",
        "Acknowledged" => "fas fa-check text-info",
        "Resolved" => "fas fa-check-circle text-success",
        "Suppressed" => "fas fa-volume-mute text-muted",
        _ => "fas fa-circle text-secondary"
    };
}

<style>
    .alert-management-panel {
        padding: 20px;
    }

    .suppression-item {
        padding: 15px;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        margin-bottom: 10px;
        background: #f8f9fa;
    }

    .history-timeline {
        max-height: 500px;
        overflow-y: auto;
    }

    .history-item {
        display: flex;
        padding: 10px;
        border-left: 2px solid #dee2e6;
        margin-bottom: 10px;
    }

    .history-icon {
        width: 40px;
        text-align: center;
        font-size: 1.25rem;
    }

    .history-content {
        flex: 1;
        padding-left: 15px;
    }
</style>