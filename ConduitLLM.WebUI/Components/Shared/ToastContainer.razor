@using ConduitLLM.WebUI.Services
@implements IDisposable
@inject IToastNotificationService ToastService
@* Explicit namespace to avoid ambiguity *@
@using ToastNotification = ConduitLLM.WebUI.Services.ToastNotification

<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 9999;">
    @foreach (var toast in ToastService.ActiveToasts)
    {
        <div class="toast show @GetToastClass(toast.Type)" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <div class="d-flex align-items-center">
                    <i class="@GetToastIcon(toast.Type) me-2"></i>
                    <strong class="me-auto">@toast.Title</strong>
                    <small class="text-muted">@GetTimeAgo(toast.CreatedAt)</small>
                    @if (toast.Dismissible)
                    {
                        <button type="button" class="btn-close" @onclick="() => DismissToast(toast.Id)" aria-label="Close"></button>
                    }
                </div>
            </div>
            <div class="toast-body">
                @((MarkupString)FormatMessage(toast.Message))
                
                @if (IsRateLimitToast(toast))
                {
                    <div class="mt-2">
                        <small class="text-muted">
                            <i class="fas fa-info-circle me-1"></i>
                            @if (GetRetryAfter(toast) > 0)
                            {
                                <span>Retry in @GetRetryAfter(toast) seconds</span>
                            }
                            else
                            {
                                <span>Please reduce request frequency</span>
                            }
                        </small>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    protected override void OnInitialized()
    {
        ToastService.ToastAdded += OnToastAdded;
        ToastService.ToastRemoved += OnToastRemoved;
    }

    private void OnToastAdded(object? sender, ToastEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnToastRemoved(object? sender, ToastEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void DismissToast(string toastId)
    {
        ToastService.RemoveToast(toastId);
    }

    private string GetToastClass(ToastType type)
    {
        return type switch
        {
            ToastType.Success => "bg-success text-white",
            ToastType.Info => "bg-info text-white", 
            ToastType.Warning => "bg-warning text-dark",
            ToastType.Error => "bg-danger text-white",
            _ => "bg-light"
        };
    }

    private string GetToastIcon(ToastType type)
    {
        return type switch
        {
            ToastType.Success => "fas fa-check-circle text-white",
            ToastType.Info => "fas fa-info-circle text-white",
            ToastType.Warning => "fas fa-exclamation-triangle text-dark",
            ToastType.Error => "fas fa-exclamation-circle text-white",
            _ => "fas fa-bell"
        };
    }

    private string GetTimeAgo(DateTime createdAt)
    {
        var elapsed = DateTime.UtcNow - createdAt;
        
        if (elapsed.TotalSeconds < 60)
            return "just now";
        if (elapsed.TotalMinutes < 60)
            return $"{(int)elapsed.TotalMinutes}m ago";
        if (elapsed.TotalHours < 24)
            return $"{(int)elapsed.TotalHours}h ago";
        
        return createdAt.ToString("MM/dd HH:mm");
    }

    private string FormatMessage(string message)
    {
        // Add line breaks and simple formatting
        var formatted = message.Replace("\n", "<br />");
        
        // Handle bold formatting (simple approach)
        var firstBoldIndex = formatted.IndexOf("**");
        if (firstBoldIndex >= 0)
        {
            formatted = formatted.Remove(firstBoldIndex, 2).Insert(firstBoldIndex, "<strong>");
            var secondBoldIndex = formatted.IndexOf("**", firstBoldIndex);
            if (secondBoldIndex >= 0)
            {
                formatted = formatted.Remove(secondBoldIndex, 2).Insert(secondBoldIndex, "</strong>");
            }
        }
        
        return formatted;
    }

    private bool IsRateLimitToast(ToastNotification toast)
    {
        return toast.Data.ContainsKey("isRateLimit") && 
               toast.Data["isRateLimit"] is bool isRateLimit && 
               isRateLimit;
    }

    private int GetRetryAfter(ToastNotification toast)
    {
        if (toast.Data.ContainsKey("retryAfter") && toast.Data["retryAfter"] is int retryAfter)
        {
            return retryAfter;
        }
        return 0;
    }

    public void Dispose()
    {
        ToastService.ToastAdded -= OnToastAdded;
        ToastService.ToastRemoved -= OnToastRemoved;
    }
}

<style>
    .toast-container {
        max-width: 400px;
        z-index: 9999;
    }

    .toast {
        margin-bottom: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        border: none;
        min-width: 350px;
    }

    .toast-header {
        border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    }

    .toast.bg-success .toast-header,
    .toast.bg-info .toast-header,
    .toast.bg-danger .toast-header {
        border-bottom-color: rgba(255, 255, 255, 0.2);
    }

    .toast.bg-warning .toast-header {
        border-bottom-color: rgba(0, 0, 0, 0.1);
    }

    .toast-body {
        font-size: 0.9rem;
        line-height: 1.4;
    }

    .btn-close {
        opacity: 0.8;
    }

    .btn-close:hover {
        opacity: 1;
    }

    .toast.bg-success .btn-close,
    .toast.bg-info .btn-close,
    .toast.bg-danger .btn-close {
        filter: brightness(0) invert(1);
    }

    .toast.bg-warning .btn-close {
        filter: brightness(0);
    }

    /* Animation for smooth entry */
    .toast {
        animation: slideInRight 0.3s ease-out;
    }

    @@keyframes slideInRight {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
</style>