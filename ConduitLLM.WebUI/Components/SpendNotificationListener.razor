@using ConduitLLM.Configuration.DTOs.SignalR
@using System.Text.Json
@using ConduitLLM.WebUI.Services
@inject ServerSideSignalRService SignalRService
@inject ILogger<SpendNotificationListener> Logger
@implements IServerSideSignalRListener
@implements IDisposable

@code {
    /// <summary>
    /// Event fired when a spend update is received
    /// </summary>
    [Parameter] public EventCallback<SpendUpdateNotification> OnSpendUpdateEvent { get; set; }
    
    /// <summary>
    /// Event fired when a budget alert is received
    /// </summary>
    [Parameter] public EventCallback<BudgetAlertNotification> OnBudgetAlertEvent { get; set; }
    
    /// <summary>
    /// Event fired when a spend summary is received
    /// </summary>
    [Parameter] public EventCallback<SpendSummaryNotification> OnSpendSummaryEvent { get; set; }
    
    /// <summary>
    /// Event fired when unusual spending is detected
    /// </summary>
    [Parameter] public EventCallback<UnusualSpendingNotification> OnUnusualSpendingEvent { get; set; }
    
    /// <summary>
    /// Event fired when connection state changes
    /// </summary>
    [Parameter] public EventCallback<ConnectionState> OnConnectionStateChangedEvent { get; set; }
    
    /// <summary>
    /// Virtual key for authentication (no longer used - server-side connection uses WebUI key)
    /// </summary>
    [Obsolete("Virtual key is no longer needed as server-side SignalR uses the WebUI virtual key")]
    [Parameter] public string VirtualKey { get; set; } = string.Empty;
    
    /// <summary>
    /// Auto-connect on initialization
    /// </summary>
    [Parameter] public bool AutoConnect { get; set; } = true;
    
    /// <summary>
    /// Enable debug mode for detailed logging
    /// </summary>
    [Parameter] public bool DebugMode { get; set; } = false;
    
    private bool _isInitialized = false;
    
    protected override void OnInitialized()
    {
        if (DebugMode)
        {
            Logger.LogDebug("SpendNotificationListener initializing");
        }
        
        // Register as a SignalR listener
        SignalRService.RegisterListener(this);
        _isInitialized = true;
        
        base.OnInitialized();
    }
    
    // IServerSideSignalRListener implementation
    public async Task OnConnectionStateChanged(string hubName, ConnectionState state)
    {
        if (hubName == "notifications")
        {
            if (DebugMode)
            {
                Logger.LogDebug("Notifications hub connection state changed to {State}", state);
            }
            
            if (OnConnectionStateChangedEvent.HasDelegate)
            {
                await OnConnectionStateChangedEvent.InvokeAsync(state);
            }
        }
    }
    
    public async Task OnSpendUpdate(JsonElement notification)
    {
        try
        {
            if (DebugMode)
            {
                Logger.LogDebug("Received spend update notification: {Json}", notification.GetRawText());
            }
            
            var spendUpdate = JsonSerializer.Deserialize<SpendUpdateNotification>(notification.GetRawText());
            if (spendUpdate != null && OnSpendUpdateEvent.HasDelegate)
            {
                await InvokeAsync(async () => await OnSpendUpdateEvent.InvokeAsync(spendUpdate));
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing spend update notification");
        }
    }
    
    public async Task OnBudgetAlert(JsonElement notification)
    {
        try
        {
            if (DebugMode)
            {
                Logger.LogDebug("Received budget alert notification: {Json}", notification.GetRawText());
            }
            
            var budgetAlert = JsonSerializer.Deserialize<BudgetAlertNotification>(notification.GetRawText());
            if (budgetAlert != null && OnBudgetAlertEvent.HasDelegate)
            {
                await InvokeAsync(async () => await OnBudgetAlertEvent.InvokeAsync(budgetAlert));
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing budget alert notification");
        }
    }
    
    public async Task OnSpendSummary(JsonElement notification)
    {
        try
        {
            if (DebugMode)
            {
                Logger.LogDebug("Received spend summary notification: {Json}", notification.GetRawText());
            }
            
            var spendSummary = JsonSerializer.Deserialize<SpendSummaryNotification>(notification.GetRawText());
            if (spendSummary != null && OnSpendSummaryEvent.HasDelegate)
            {
                await InvokeAsync(async () => await OnSpendSummaryEvent.InvokeAsync(spendSummary));
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing spend summary notification");
        }
    }
    
    public async Task OnUnusualSpending(JsonElement notification)
    {
        try
        {
            if (DebugMode)
            {
                Logger.LogDebug("Received unusual spending notification: {Json}", notification.GetRawText());
            }
            
            var unusualSpending = JsonSerializer.Deserialize<UnusualSpendingNotification>(notification.GetRawText());
            if (unusualSpending != null && OnUnusualSpendingEvent.HasDelegate)
            {
                await InvokeAsync(async () => await OnUnusualSpendingEvent.InvokeAsync(unusualSpending));
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing unusual spending notification");
        }
    }
    
    // Default implementations for other SignalR events
    public Task OnSystemNotificationReceived(JsonElement notification) => Task.CompletedTask;
    public Task OnModelMappingChanged(JsonElement data) => Task.CompletedTask;
    public Task OnProviderHealthChanged(JsonElement data) => Task.CompletedTask;
    public Task OnNavigationStateChanged(JsonElement data) => Task.CompletedTask;
    public Task OnVideoGenerationProgress(string taskId, JsonElement progress) => Task.CompletedTask;
    public Task OnVideoGenerationCompleted(string taskId, JsonElement result) => Task.CompletedTask;
    public Task OnVideoGenerationFailed(string taskId, string error) => Task.CompletedTask;
    public Task OnImageGenerationProgress(string taskId, JsonElement progress) => Task.CompletedTask;
    public Task OnImageGenerationCompleted(string taskId, JsonElement result) => Task.CompletedTask;
    public Task OnImageGenerationFailed(string taskId, string error) => Task.CompletedTask;
    public Task OnNewModelsDiscovered(JsonElement notification) => Task.CompletedTask;
    public Task OnModelCapabilitiesChanged(JsonElement notification) => Task.CompletedTask;
    public Task OnModelPricingUpdated(JsonElement notification) => Task.CompletedTask;
    public Task OnModelDeprecated(JsonElement notification) => Task.CompletedTask;
    public Task OnBatchOperationProgress(string operationId, JsonElement progress) => Task.CompletedTask;
    public Task OnBatchOperationCompleted(string operationId, JsonElement result) => Task.CompletedTask;
    public Task OnBatchOperationFailed(string operationId, string error) => Task.CompletedTask;
    public Task OnAdminNotificationReceived(JsonElement notification) => Task.CompletedTask;
    
    public void Dispose()
    {
        if (_isInitialized)
        {
            SignalRService.UnregisterListener(this);
        }
        
        if (DebugMode)
        {
            Logger.LogDebug("SpendNotificationListener disposed");
        }
    }
}