@using ConduitLLM.Configuration.DTOs

<div class="dropdown">
    <button class="btn btn-sm btn-outline-info dropdown-toggle" type="button" data-bs-toggle="dropdown">
        <i class="fa fa-headphones me-1"></i>Audio
    </button>
    <ul class="dropdown-menu">
        @if (Cost.AudioCostPerMinute.HasValue)
        {
            <li class="dropdown-item-text">
                <small class="text-muted">Transcription:</small><br/>
                <strong>@FormatAudioCost(Cost.AudioCostPerMinute.Value)/min</strong>
            </li>
        }
        @if (Cost.AudioCostPerKCharacters.HasValue)
        {
            <li class="dropdown-item-text">
                <small class="text-muted">TTS:</small><br/>
                <strong>@FormatAudioCost(Cost.AudioCostPerKCharacters.Value)/1K chars</strong>
            </li>
        }
        @if (Cost.AudioInputCostPerMinute.HasValue || Cost.AudioOutputCostPerMinute.HasValue)
        {
            <li class="dropdown-item-text">
                <small class="text-muted">Real-time:</small><br/>
                @if (Cost.AudioInputCostPerMinute.HasValue)
                {
                    <strong>In: @FormatAudioCost(Cost.AudioInputCostPerMinute.Value)/min</strong><br/>
                }
                @if (Cost.AudioOutputCostPerMinute.HasValue)
                {
                    <strong>Out: @FormatAudioCost(Cost.AudioOutputCostPerMinute.Value)/min</strong>
                }
            </li>
        }
    </ul>
</div>

@code {
    /// <summary>
    /// Gets or sets the model cost containing audio pricing.
    /// </summary>
    [Parameter] public ModelCostDto Cost { get; set; } = new();

    private string FormatAudioCost(decimal cost) => cost.ToString("F3");
}