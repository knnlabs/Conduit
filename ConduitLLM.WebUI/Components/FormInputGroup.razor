<div class="mb-3">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@inputId" class="form-label">
            @Label
            @if (IsRequired)
            {
                <span class="text-danger">*</span>
            }
        </label>
    }
    
    <div class="input-group">
        @if (!string.IsNullOrEmpty(Prefix))
        {
            <span class="input-group-text">@Prefix</span>
        }
        
        <input type="@InputType" 
               class="form-control @CssClass" 
               id="@inputId"
               value="@Value"
               @onchange="HandleValueChanged"
               placeholder="@Placeholder"
               disabled="@IsDisabled"
               readonly="@IsReadOnly"
               required="@IsRequired"
               min="@Min"
               max="@Max"
               step="@Step" />
        
        @if (!string.IsNullOrEmpty(Suffix))
        {
            <span class="input-group-text">@Suffix</span>
        }
        
        @if (ButtonContent != null)
        {
            @ButtonContent
        }
    </div>
    
    @if (!string.IsNullOrEmpty(HelpText))
    {
        <div class="form-text">@HelpText</div>
    }
    
    @if (!string.IsNullOrEmpty(ValidationMessage))
    {
        <div class="invalid-feedback d-block">
            @ValidationMessage
        </div>
    }
</div>

@typeparam TValue

@code {
    /// <summary>
    /// Gets or sets the input value.
    /// </summary>
    [Parameter] public TValue? Value { get; set; }
    
    /// <summary>
    /// Gets or sets the callback when value changes.
    /// </summary>
    [Parameter] public EventCallback<TValue> ValueChanged { get; set; }
    
    /// <summary>
    /// Gets or sets the label text.
    /// </summary>
    [Parameter] public string? Label { get; set; }
    
    /// <summary>
    /// Gets or sets the prefix text or symbol.
    /// </summary>
    [Parameter] public string? Prefix { get; set; }
    
    /// <summary>
    /// Gets or sets the suffix text or symbol.
    /// </summary>
    [Parameter] public string? Suffix { get; set; }
    
    /// <summary>
    /// Gets or sets the placeholder text.
    /// </summary>
    [Parameter] public string? Placeholder { get; set; }
    
    /// <summary>
    /// Gets or sets the help text displayed below the input.
    /// </summary>
    [Parameter] public string? HelpText { get; set; }
    
    /// <summary>
    /// Gets or sets the validation error message.
    /// </summary>
    [Parameter] public string? ValidationMessage { get; set; }
    
    /// <summary>
    /// Gets or sets the input type.
    /// </summary>
    [Parameter] public string InputType { get; set; } = "text";
    
    /// <summary>
    /// Gets or sets whether the input is required.
    /// </summary>
    [Parameter] public bool IsRequired { get; set; }
    
    /// <summary>
    /// Gets or sets whether the input is disabled.
    /// </summary>
    [Parameter] public bool IsDisabled { get; set; }
    
    /// <summary>
    /// Gets or sets whether the input is readonly.
    /// </summary>
    [Parameter] public bool IsReadOnly { get; set; }
    
    /// <summary>
    /// Gets or sets the minimum value (for number inputs).
    /// </summary>
    [Parameter] public string? Min { get; set; }
    
    /// <summary>
    /// Gets or sets the maximum value (for number inputs).
    /// </summary>
    [Parameter] public string? Max { get; set; }
    
    /// <summary>
    /// Gets or sets the step value (for number inputs).
    /// </summary>
    [Parameter] public string? Step { get; set; }
    
    /// <summary>
    /// Gets or sets additional CSS classes.
    /// </summary>
    [Parameter] public string? CssClass { get; set; }
    
    /// <summary>
    /// Gets or sets button content to display at the end of the input group.
    /// </summary>
    [Parameter] public RenderFragment? ButtonContent { get; set; }

    private string inputId = $"input-{Guid.NewGuid():N}";

    private async Task HandleValueChanged(ChangeEventArgs e)
    {
        var stringValue = e.Value?.ToString();
        
        if (string.IsNullOrEmpty(stringValue))
        {
            Value = default(TValue);
            await ValueChanged.InvokeAsync(Value);
            return;
        }
        
        try
        {
            // Try to convert the string value to the target type
            var targetType = typeof(TValue);
            var underlyingType = Nullable.GetUnderlyingType(targetType) ?? targetType;
            
            object? convertedValue;
            if (underlyingType == typeof(string))
            {
                convertedValue = stringValue;
            }
            else if (underlyingType == typeof(int))
            {
                convertedValue = int.Parse(stringValue);
            }
            else if (underlyingType == typeof(decimal))
            {
                convertedValue = decimal.Parse(stringValue);
            }
            else if (underlyingType == typeof(double))
            {
                convertedValue = double.Parse(stringValue);
            }
            else if (underlyingType == typeof(float))
            {
                convertedValue = float.Parse(stringValue);
            }
            else
            {
                convertedValue = Convert.ChangeType(stringValue, underlyingType);
            }
            
            Value = (TValue?)convertedValue;
            await ValueChanged.InvokeAsync(Value);
        }
        catch
        {
            // If conversion fails, keep the current value
        }
    }
}