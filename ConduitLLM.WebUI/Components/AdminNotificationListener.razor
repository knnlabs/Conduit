@using ConduitLLM.WebUI.DTOs
@using ConduitLLM.WebUI.Models
@using ConduitLLM.WebUI.Services
@using System.Text.Json
@inject ServerSideSignalRService SignalRService
@inject ILogger<AdminNotificationListener> Logger
@inject NotificationService NotificationService
@implements IServerSideSignalRListener
@implements IDisposable

@code {
    /// <summary>
    /// Virtual key for authentication (legacy - for backward compatibility)
    /// </summary>
    [Obsolete("Virtual key is no longer needed as server-side SignalR uses the WebUI virtual key")]
    [Parameter] public string? VirtualKey { get; set; }
    
    /// <summary>
    /// Master key for authentication (legacy - for backward compatibility)
    /// </summary>
    [Obsolete("Master key is no longer needed as server-side SignalR uses the WebUI virtual key")]
    [Parameter] public string? MasterKey { get; set; }
    
    /// <summary>
    /// Auto-connect on initialization
    /// </summary>
    [Parameter] public bool AutoConnect { get; set; } = true;
    
    /// <summary>
    /// Enable debug mode for detailed logging
    /// </summary>
    [Parameter] public bool DebugMode { get; set; } = false;

    private bool _isInitialized = false;
    
    protected override void OnInitialized()
    {
        if (DebugMode)
        {
            Logger.LogDebug("AdminNotificationListener initializing");
        }
        
        // Register as a SignalR listener
        SignalRService.RegisterListener(this);
        _isInitialized = true;
        
        base.OnInitialized();
    }
    
    // IServerSideSignalRListener implementation
    public Task OnConnectionStateChanged(string hubName, ConnectionState state)
    {
        if (hubName == "notifications")
        {
            if (DebugMode)
            {
                Logger.LogDebug("Admin notifications hub connection state changed to {State}", state);
            }
        }
        return Task.CompletedTask;
    }
    
    public async Task OnSystemNotificationReceived(JsonElement notification)
    {
        try
        {
            if (DebugMode)
            {
                Logger.LogDebug("Received system notification: {Json}", notification.GetRawText());
            }
            
            await ProcessNotification(notification);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing system notification");
        }
    }
    
    public async Task OnAdminNotificationReceived(JsonElement notification)
    {
        try
        {
            if (DebugMode)
            {
                Logger.LogDebug("Received admin notification: {Json}", notification.GetRawText());
            }
            
            await ProcessNotification(notification);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing admin notification");
        }
    }
    
    private Task ProcessNotification(JsonElement notification)
    {
        try
        {
            // Extract notification details from JSON
            string type = notification.TryGetProperty("type", out var typeElement) 
                ? typeElement.GetString() ?? "System" 
                : "System";
            
            string message = notification.TryGetProperty("message", out var messageElement) 
                ? messageElement.GetString() ?? "Unknown notification" 
                : "Unknown notification";
            
            string? source = notification.TryGetProperty("source", out var sourceElement) 
                ? sourceElement.GetString() 
                : null;
            
            string? details = notification.TryGetProperty("details", out var detailsElement) 
                ? detailsElement.GetString() 
                : null;
            
            // Map string type to NotificationType enum
            var notificationType = type.ToLower() switch
            {
                "error" => NotificationType.Error,
                "warning" => NotificationType.BudgetWarning,
                "success" => NotificationType.Success,
                "security" => NotificationType.Security,
                "providerhealth" => NotificationType.ProviderHealth,
                "modeldiscovery" => NotificationType.ModelDiscovery,
                "configuration" => NotificationType.ConfigurationChange,
                "maintenance" => NotificationType.SystemMaintenance,
                _ => NotificationType.System
            };
            
            // Add to notification service
            NotificationService.AddNotification(notificationType, message, source, details);
            
            if (DebugMode)
            {
                Logger.LogDebug("Added notification: {Type} - {Message}", type, message);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing notification");
        }
        return Task.CompletedTask;
    }
    
    // Event handlers for specific notification types
    public Task OnModelMappingChanged(JsonElement data)
    {
        try
        {
            if (DebugMode)
            {
                Logger.LogDebug("Model mapping changed: {Json}", data.GetRawText());
            }
            
            // Create a notification for model mapping changes
            NotificationService.AddNotification(
                NotificationType.ConfigurationChange,
                "A model mapping configuration has been changed",
                "Model Mapping",
                null);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing model mapping change");
        }
        return Task.CompletedTask;
    }
    
    public Task OnProviderHealthChanged(JsonElement data)
    {
        try
        {
            if (DebugMode)
            {
                Logger.LogDebug("Provider health changed: {Json}", data.GetRawText());
            }
            
            // Extract provider information if available
            string providerName = "Unknown";
            string healthStatus = "Unknown";
            
            if (data.TryGetProperty("providerName", out var nameElement))
            {
                providerName = nameElement.GetString() ?? "Unknown";
            }
            
            if (data.TryGetProperty("healthStatus", out var statusElement))
            {
                healthStatus = statusElement.GetString() ?? "Unknown";
            }
            
            var notificationType = healthStatus.ToLower() == "healthy" 
                ? NotificationType.Success 
                : NotificationType.ProviderHealth;
            
            NotificationService.AddNotification(
                notificationType,
                $"Provider {providerName} is now {healthStatus}",
                $"Provider: {providerName}",
                null);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing provider health change");
        }
        return Task.CompletedTask;
    }
    
    // Default implementations for other SignalR events
    public Task OnNavigationStateChanged(JsonElement data) => Task.CompletedTask;
    public Task OnVideoGenerationProgress(string taskId, JsonElement progress) => Task.CompletedTask;
    public Task OnVideoGenerationCompleted(string taskId, JsonElement result) => Task.CompletedTask;
    public Task OnVideoGenerationFailed(string taskId, string error) => Task.CompletedTask;
    public Task OnImageGenerationProgress(string taskId, JsonElement progress) => Task.CompletedTask;
    public Task OnImageGenerationCompleted(string taskId, JsonElement result) => Task.CompletedTask;
    public Task OnImageGenerationFailed(string taskId, string error) => Task.CompletedTask;
    public Task OnSpendUpdate(JsonElement notification) => Task.CompletedTask;
    public Task OnBudgetAlert(JsonElement notification) => Task.CompletedTask;
    public Task OnSpendSummary(JsonElement notification) => Task.CompletedTask;
    public Task OnUnusualSpending(JsonElement notification) => Task.CompletedTask;
    public Task OnNewModelsDiscovered(JsonElement notification) => Task.CompletedTask;
    public Task OnModelCapabilitiesChanged(JsonElement notification) => Task.CompletedTask;
    public Task OnModelPricingUpdated(JsonElement notification) => Task.CompletedTask;
    public Task OnModelDeprecated(JsonElement notification) => Task.CompletedTask;
    public Task OnBatchOperationProgress(string operationId, JsonElement progress) => Task.CompletedTask;
    public Task OnBatchOperationCompleted(string operationId, JsonElement result) => Task.CompletedTask;
    public Task OnBatchOperationFailed(string operationId, string error) => Task.CompletedTask;
    
    public void Dispose()
    {
        if (_isInitialized)
        {
            SignalRService.UnregisterListener(this);
        }
        
        if (DebugMode)
        {
            Logger.LogDebug("AdminNotificationListener disposed");
        }
    }
}