@using ConduitLLM.Configuration.DTOs
@using Microsoft.AspNetCore.Components.Forms
@using ConduitLLM.WebUI.Components.Shared
@using static ConduitLLM.WebUI.Components.Shared.ModelDropdownLogic
@inherits InputBase<string>

<InputSearchableDropdown TValue="string"
                         TItem="ModelDropdownLogic.ModelInfo"
                         @bind-Value="@CurrentValue"
                         Items="@ModelInfos"
                         ValueSelector="@(model => model.ModelId)"
                         DisplaySelector="@(model => model.ModelId)"
                         DescriptionSelector="@(model => ModelDropdownLogic.GetModelDescription(model))"
                         Placeholder="@Placeholder"
                         EmptyOptionText="@EmptyOptionText"
                         ShowSearch="true"
                         SearchPlaceholder="Search by model name, provider, or cost..."
                         NoResultsMessage="No models found matching your search"
                         Disabled="@Disabled"
                         CustomSearchFilter="@((model, term) => ModelDropdownLogic.SearchModels(model, term))"
                         ValidationFor="@ValueExpression" />

@code {
    [Parameter] public List<string> Models { get; set; } = new();
    [Parameter] public string ProviderName { get; set; } = "";
    [Parameter] public List<ModelCostDto>? ModelCosts { get; set; }
    [Parameter] public string Placeholder { get; set; } = "-- Select Model --";
    [Parameter] public string EmptyOptionText { get; set; } = "-- Select Model --";
    [Parameter] public bool Disabled { get; set; }
    
    private List<ModelDropdownLogic.ModelInfo> ModelInfos = new();
    
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        
        // Convert string models to ModelInfo objects using shared logic
        ModelInfos = ModelDropdownLogic.ConvertToModelInfos(Models, ProviderName, ModelCosts);
    }
    
    protected override bool TryParseValueFromString(string? value, 
        out string result, 
        out string validationErrorMessage)
    {
        result = value ?? string.Empty;
        validationErrorMessage = null!;
        return true;
    }
}