@using ConduitLLM.Configuration.DTOs
@using Microsoft.AspNetCore.Components.Forms
@inherits InputBase<string?>

<InputSearchableDropdown TValue="string?"
                         TItem="ModelInfo"
                         @bind-Value="@CurrentValue"
                         Items="@ModelInfos"
                         ValueSelector="@(model => model.ModelId)"
                         DisplaySelector="@(model => model.ModelId)"
                         DescriptionSelector="@GetModelDescription"
                         Placeholder="@Placeholder"
                         EmptyOptionText="@EmptyOptionText"
                         ShowSearch="true"
                         SearchPlaceholder="Search by model name, provider, or cost..."
                         NoResultsMessage="No models found matching your search"
                         Disabled="@Disabled"
                         CustomSearchFilter="@SearchModels"
                         ValidationFor="@ValueExpression" />

@code {
    [Parameter] public List<string> Models { get; set; } = new();
    [Parameter] public string ProviderName { get; set; } = "";
    [Parameter] public List<ModelCostDto>? ModelCosts { get; set; }
    [Parameter] public string Placeholder { get; set; } = "-- Select Model --";
    [Parameter] public string EmptyOptionText { get; set; } = "-- Select Model --";
    [Parameter] public bool Disabled { get; set; }
    
    private List<ModelInfo> ModelInfos = new();
    
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        
        // Convert string models to ModelInfo objects
        ModelInfos = Models.Select(modelId => new ModelInfo
        {
            ModelId = modelId,
            Provider = ProviderName,
            Cost = GetModelCost(modelId)
        }).ToList();
    }
    
    private ModelCostDto? GetModelCost(string modelId)
    {
        return ModelCosts?.FirstOrDefault(c => 
            c.ModelIdPattern.Equals(modelId, StringComparison.OrdinalIgnoreCase));
    }
    
    private string GetModelDescription(ModelInfo model)
    {
        var parts = new List<string>();
        
        // Add provider name if available
        if (!string.IsNullOrEmpty(model.Provider))
        {
            parts.Add($"Provider: {model.Provider}");
        }
        
        // Add cost information if available
        if (model.Cost != null)
        {
            var costParts = new List<string>();
            
            // Convert from per-token to per-million tokens for display
            var inputCostPerMillion = model.Cost.InputTokenCost * 1_000_000;
            var outputCostPerMillion = model.Cost.OutputTokenCost * 1_000_000;
            
            if (inputCostPerMillion > 0)
            {
                costParts.Add($"Input: ${inputCostPerMillion:F2}/M");
            }
            
            if (outputCostPerMillion > 0)
            {
                costParts.Add($"Output: ${outputCostPerMillion:F2}/M");
            }
            
            if (costParts.Any())
            {
                parts.Add(string.Join(", ", costParts));
            }
            
            // Check if it's a free model
            if (model.Cost.InputTokenCost == 0 && model.Cost.OutputTokenCost == 0)
            {
                parts.Add("FREE");
            }
        }
        
        return string.Join(" | ", parts);
    }
    
    private bool SearchModels(ModelInfo model, string searchTerm)
    {
        var searchTermLower = searchTerm.ToLowerInvariant();
        
        // Search in model ID
        if (model.ModelId.ToLowerInvariant().Contains(searchTermLower))
            return true;
            
        // Search in provider name
        if (!string.IsNullOrEmpty(model.Provider) && 
            model.Provider.ToLowerInvariant().Contains(searchTermLower))
            return true;
            
        // Search for "free" models
        if (searchTermLower == "free" && model.Cost != null && 
            model.Cost.InputTokenCost == 0 && model.Cost.OutputTokenCost == 0)
            return true;
            
        // Search in cost ranges
        if (model.Cost != null)
        {
            var costString = $"{model.Cost.InputTokenCost} {model.Cost.OutputTokenCost}";
            if (costString.ToLowerInvariant().Contains(searchTermLower))
                return true;
        }
        
        return false;
    }
    
    protected override bool TryParseValueFromString(string? value, 
        out string? result, 
        out string? validationErrorMessage)
    {
        result = value;
        validationErrorMessage = null!;
        return true;
    }
    
    private class ModelInfo
    {
        public string ModelId { get; set; } = "";
        public string Provider { get; set; } = "";
        public ModelCostDto? Cost { get; set; }
    }
}