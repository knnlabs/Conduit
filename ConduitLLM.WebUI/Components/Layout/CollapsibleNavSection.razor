@using Microsoft.AspNetCore.Components.Routing
@inject ILogger<CollapsibleNavSection> Logger

<div class="nav-group">
    <div class="nav-group-header @(IsExpanded ? "expanded" : "")" @onclick="Toggle">
        <div class="nav-group-header-content">
            <i class="@IconClass"></i>
            <span>@Title</span>
        </div>
        <i class="fa fa-chevron-right nav-chevron"></i>
    </div>
    
    <div class="nav-group-content @(IsExpanded ? "show" : "")">
        @ChildContent
    </div>
</div>

@code {
    /// <summary>
    /// The title displayed in the section header.
    /// </summary>
    [Parameter] public string Title { get; set; } = string.Empty;
    
    /// <summary>
    /// The CSS class for the icon displayed in the header.
    /// </summary>
    [Parameter] public string IconClass { get; set; } = "fa fa-folder";
    
    /// <summary>
    /// Whether the section is initially expanded.
    /// </summary>
    [Parameter] public bool InitiallyExpanded { get; set; } = true;
    
    /// <summary>
    /// The content to display when the section is expanded.
    /// </summary>
    [Parameter] public RenderFragment? ChildContent { get; set; }
    
    /// <summary>
    /// Event callback when the expanded state changes.
    /// </summary>
    [Parameter] public EventCallback<bool> IsExpandedChanged { get; set; }
    
    /// <summary>
    /// Gets or sets whether the section is currently expanded.
    /// </summary>
    [Parameter] public bool IsExpanded { get; set; }
    
    /// <summary>
    /// A unique key to persist the expanded state in local storage.
    /// </summary>
    [Parameter] public string? PersistenceKey { get; set; }
    
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
    
    private bool _initialized = false;
    
    protected override void OnInitialized()
    {
        if (!_initialized)
        {
            _initialized = true;
            // Set initial state - actual persistence loading happens in OnAfterRenderAsync
            IsExpanded = InitiallyExpanded;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !string.IsNullOrEmpty(PersistenceKey))
        {
            // Load persisted state after the component is rendered
            try
            {
                var savedState = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", $"nav-section-{PersistenceKey}");
                if (!string.IsNullOrEmpty(savedState) && bool.TryParse(savedState, out var expanded))
                {
                    if (IsExpanded != expanded)
                    {
                        IsExpanded = expanded;
                        StateHasChanged();
                    }
                }
            }
            catch (Exception ex)
            {
                // If local storage fails, keep the initial value
                Logger.LogWarning(ex, "Failed to load persisted state for '{Title}', keeping initial value", Title);
            }
        }
    }
    
    private async Task Toggle()
    {
        var previousState = IsExpanded;
        IsExpanded = !IsExpanded;
        // Logger.LogDebug("Toggled '{Title}' from {PreviousState} to {NewState}", Title, previousState, IsExpanded);
        
        // Force UI update
        StateHasChanged();
        
        // Save state to local storage if persistence key is provided
        if (!string.IsNullOrEmpty(PersistenceKey))
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", $"nav-section-{PersistenceKey}", IsExpanded.ToString());
                // Logger.LogDebug("Persisted state for '{Title}': {IsExpanded}", Title, IsExpanded);
            }
            catch (Exception ex)
            {
                // Log error but don't fail
                Logger.LogWarning(ex, "Failed to persist state for '{Title}'", Title);
            }
        }
        
        if (IsExpandedChanged.HasDelegate)
        {
            await IsExpandedChanged.InvokeAsync(IsExpanded);
        }
    }
}