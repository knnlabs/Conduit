@* ComponentTemplate.razor - Template for new Blazor components *@
@* 
    Usage: Copy this file and rename to create a new component
    Replace "ComponentName" with your actual component name
*@
@* @rendermode InteractiveServer - Uncomment if component needs interactivity *@
@* @implements IDisposable - Uncomment if needed *@
@* @inject ILogger<ComponentName> Logger - Replace ComponentName with actual type *@

<div class="component-name">
    @if (IsLoading)
    {
        <div class="d-flex justify-content-center p-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (HasError)
    {
        <div class="alert alert-danger" role="alert">
            <i class="fa fa-exclamation-triangle me-2"></i>
            @ErrorMessage
        </div>
    }
    else
    {
        <!-- Main component content goes here -->
        <div class="component-content">
            @ChildContent
        </div>
    }
</div>

@code {
    #region Parameters
    
    /// <summary>
    /// Child content to render inside the component.
    /// </summary>
    [Parameter] 
    public RenderFragment? ChildContent { get; set; }
    
    /// <summary>
    /// CSS class to apply to the component wrapper.
    /// </summary>
    [Parameter] 
    public string? CssClass { get; set; }
    
    /// <summary>
    /// Event raised when something important happens.
    /// </summary>
    [Parameter] 
    public EventCallback<string> OnSomethingChanged { get; set; }
    
    #endregion
    
    #region Private Fields
    
    private bool IsLoading = true;
    private bool HasError = false;
    private string? ErrorMessage;
    private CancellationTokenSource? _cancellationTokenSource;
    
    #endregion
    
    #region Lifecycle Methods
    
    protected override async Task OnInitializedAsync()
    {
        // Logger.LogDebug("Initializing ComponentName");
        _cancellationTokenSource = new CancellationTokenSource();
        
        try
        {
            await LoadDataAsync(_cancellationTokenSource.Token);
        }
        catch (OperationCanceledException)
        {
            // Logger.LogDebug("ComponentName initialization cancelled");
        }
        catch (Exception)
        {
            // Logger.LogError(ex, "Error initializing ComponentName");
            HasError = true;
            ErrorMessage = "Failed to initialize component";
        }
        finally
        {
            IsLoading = false;
        }
    }
    
    protected override void OnParametersSet()
    {
        // Logger.LogDebug("Parameters updated for ComponentName");
        // Validate or react to parameter changes
    }
    
    public void Dispose()
    {
        // Logger.LogDebug("Disposing ComponentName");
        _cancellationTokenSource?.Cancel();
        _cancellationTokenSource?.Dispose();
    }
    
    #endregion
    
    #region Public Methods
    
    /// <summary>
    /// Refreshes the component data.
    /// </summary>
    public async Task RefreshAsync()
    {
        // Logger.LogDebug("Refreshing ComponentName");
        IsLoading = true;
        HasError = false;
        ErrorMessage = null;
        StateHasChanged();
        
        try
        {
            await LoadDataAsync(CancellationToken.None);
        }
        catch (Exception)
        {
            // Logger.LogError(ex, "Error refreshing ComponentName");
            HasError = true;
            ErrorMessage = "Failed to refresh data";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }
    
    #endregion
    
    #region Private Methods
    
    private async Task LoadDataAsync(CancellationToken cancellationToken)
    {
        // Simulate async operation
        await Task.Delay(100, cancellationToken);
        
        // Load your data here
        // Logger.LogDebug("Data loaded successfully");
        
        // Notify parent if needed
        if (OnSomethingChanged.HasDelegate)
        {
            await OnSomethingChanged.InvokeAsync("Data loaded");
        }
    }
    
    private string GetCssClasses()
    {
        var classes = new List<string> { "component-name" };
        
        if (!string.IsNullOrWhiteSpace(CssClass))
        {
            classes.Add(CssClass);
        }
        
        if (HasError)
        {
            classes.Add("has-error");
        }
        
        return string.Join(" ", classes);
    }
    
    #endregion
}

<style>
    /* Component-specific styles */
    .component-name {
        /* Base styles */
    }
    
    .component-name.has-error {
        /* Error state styles */
    }
    
    .component-content {
        /* Content area styles */
    }
</style>