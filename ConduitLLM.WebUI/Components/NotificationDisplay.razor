@using ConduitLLM.WebUI.Models
@using ConduitLLM.WebUI.Services
@inject NotificationService NotificationService
@implements IDisposable

<div>
    <MudIconButton 
        Icon="@Icons.Material.Filled.Notifications" 
        Color="Color.Inherit"
        OnClick="ToggleNotificationPanel"
        Class="px-2">
        @if (UnreadCount > 0)
        {
            <MudBadge Color="Color.Error" Content="@UnreadCount" Overlap="true" Bordered="true" />
        }
    </MudIconButton>

    @if (IsOpen)
    {
        <div style="position: absolute; top: 100%; right: 0; z-index: 1000;">
            <MudPaper Elevation="4" Class="notification-panel d-flex flex-column">
                <MudToolBar Dense="true" DisableGutters="true" Class="px-3 py-2 gap-2">
                    <MudText Typo="Typo.h6" Class="flex-grow-1">Notifications</MudText>
                    <MudTooltip Text="Mark All Read">
                        <MudIconButton 
                            Size="Size.Small" 
                            OnClick="MarkAllAsRead" 
                            Icon="@Icons.Material.Filled.DoneAll" 
                            Variant="Variant.Outlined" 
                            Color="Color.Default" />
                    </MudTooltip>
                    <MudTooltip Text="Clear Read Notifications">
                        <MudIconButton 
                            Size="Size.Small" 
                            OnClick="ClearReadNotifications" 
                            Icon="@Icons.Material.Filled.DeleteOutline" 
                            Variant="Variant.Outlined" 
                            Color="Color.Error" />
                    </MudTooltip>
                </MudToolBar>
                
                <MudDivider />
                
                <MudContainer Class="pa-0 overflow-y-auto notification-list">
                    @if (!Notifications.Any())
                    {
                        <MudStack Spacing="2" Class="pa-8" AlignItems="AlignItems.Center">
                            <MudIcon Icon="@Icons.Material.Filled.Inbox" Size="Size.Large" Color="Color.Default" />
                            <MudText Typo="Typo.body2" Color="Color.Default" Align="Align.Center">No notifications</MudText>
                        </MudStack>
                    }
                    else
                    {
                        <MudList T="Notification" Clickable="true" DisablePadding="true" Dense="true">
                            @foreach (var notification in Notifications)
                            {
                                <MudListItem T="Notification" Class="@($"notification-item {GetNotificationClass(notification)}")">
                                    <div class="d-flex align-center" style="width: 100%">
                                        <MudAvatar Size="Size.Small" Class="mr-3" Color="@GetNotificationColor(notification)">
                                            <MudIcon Icon="@GetNotificationIcon(notification)" Size="Size.Small" />
                                        </MudAvatar>
                                        
                                        <div style="flex-grow: 1">
                                            <MudText Typo="Typo.body1" Style="@(notification.IsRead ? "" : "font-weight: 500")">
                                                @notification.Message
                                            </MudText>
                                            
                                            @if (!string.IsNullOrEmpty(notification.Source))
                                            {
                                                <MudText Typo="Typo.caption" Color="Color.Default">
                                                    @notification.Source
                                                </MudText>
                                            }
                                            
                                            @if (!string.IsNullOrEmpty(notification.Details))
                                            {
                                                <MudText Typo="Typo.caption" Style="white-space: pre-wrap;" Color="Color.Dark">
                                                    @notification.Details
                                                </MudText>
                                            }
                                            
                                            <MudText Typo="Typo.caption" Color="Color.Default" Class="mt-1">
                                                @FormatTimeAgo(notification.Timestamp)
                                            </MudText>
                                        </div>
                                        
                                        @if (!notification.IsRead)
                                        {
                                            <MudIconButton 
                                                Size="Size.Small" 
                                                OnClick="() => MarkAsRead(notification.Id)" 
                                                Icon="@Icons.Material.Filled.Check" 
                                                Color="Color.Primary" />
                                        }
                                    </div>
                                </MudListItem>
                                <MudDivider />
                            }
                        </MudList>
                    }
                </MudContainer>
            </MudPaper>
        </div>
    }
</div>

<style>
    .notification-panel {
        width: 350px;
        max-height: 500px;
        z-index: 1000;
        overflow: hidden;
    }
    
    .notification-list {
        max-height: 400px;
    }
    
    .notification-item {
        opacity: 1;
        transition: background-color 0.2s ease;
        padding: 8px 16px;
    }
    
    .notification-item.read {
        opacity: 0.7;
    }
    
    .notification-item:hover {
        background-color: var(--mud-palette-background-grey);
    }
    
    .notification-item.info {
        border-left: 3px solid var(--mud-palette-info);
    }
    
    .notification-item.warning {
        border-left: 3px solid var(--mud-palette-warning);
    }
    
    .notification-item.error {
        border-left: 3px solid var(--mud-palette-error);
    }
    
    .notification-item.success {
        border-left: 3px solid var(--mud-palette-success);
    }
</style>

@code {
    private List<Notification> Notifications = new();
    private bool IsOpen = false;
    private int UnreadCount = 0;

    protected override void OnInitialized()
    {
        // Subscribe to notification event
        NotificationService.OnNotification += OnNotificationReceived;
        LoadNotifications();
    }

    private void OnNotificationReceived()
    {
        LoadNotifications();
        StateHasChanged();
    }

    private void LoadNotifications()
    {
        Notifications = NotificationService.GetNotifications(true).OrderByDescending(n => n.Timestamp).ToList();
        UnreadCount = Notifications.Count(n => !n.IsRead);
    }

    private void ToggleNotificationPanel()
    {
        IsOpen = !IsOpen;
    }

    private void MarkAsRead(Guid id)
    {
        NotificationService.MarkAsRead(id);
        LoadNotifications();
    }

    private void MarkAllAsRead()
    {
        NotificationService.MarkAllAsRead();
        LoadNotifications();
    }

    private void ClearReadNotifications()
    {
        NotificationService.ClearReadNotifications();
        LoadNotifications();
    }

    private string FormatTimeAgo(DateTime time)
    {
        var span = DateTime.UtcNow - time;

        if (span.TotalDays > 30)
        {
            return $"{time:MMM d, yyyy}";
        }
        if (span.TotalDays > 1)
        {
            return $"{(int)span.TotalDays} days ago";
        }
        if (span.TotalHours > 1)
        {
            return $"{(int)span.TotalHours} hours ago";
        }
        if (span.TotalMinutes > 1)
        {
            return $"{(int)span.TotalMinutes} minutes ago";
        }
        return "Just now";
    }
    
    private string GetNotificationClass(Notification notification)
    {
        string baseClass = notification.IsRead ? "read" : "unread";
        
        return notification.Type switch
        {
            NotificationType.System => $"{baseClass} info",
            NotificationType.BudgetWarning => $"{baseClass} warning",
            NotificationType.KeyExpiration => $"{baseClass} warning",
            NotificationType.VirtualKeyValidation => $"{baseClass} warning",
            NotificationType.Security => $"{baseClass} error",
            NotificationType.Error => $"{baseClass} error",
            _ => baseClass
        };
    }
    
    private Color GetNotificationColor(Notification notification)
    {
        return notification.Type switch
        {
            NotificationType.System => Color.Info,
            NotificationType.BudgetWarning => Color.Warning,
            NotificationType.KeyExpiration => Color.Warning,
            NotificationType.VirtualKeyValidation => Color.Warning,
            NotificationType.Security => Color.Error,
            NotificationType.Error => Color.Error,
            _ => Color.Default
        };
    }
    
    private string GetNotificationIcon(Notification notification)
    {
        return notification.Type switch
        {
            NotificationType.System => Icons.Material.Filled.Info,
            NotificationType.BudgetWarning => Icons.Material.Filled.Warning,
            NotificationType.KeyExpiration => Icons.Material.Filled.Warning,
            NotificationType.VirtualKeyValidation => Icons.Material.Filled.Warning,
            NotificationType.Security => Icons.Material.Filled.Error,
            NotificationType.Error => Icons.Material.Filled.Error,
            _ => Icons.Material.Filled.Notifications
        };
    }

    public void Dispose()
    {
        // Unsubscribe from notification event
        NotificationService.OnNotification -= OnNotificationReceived;
    }
}