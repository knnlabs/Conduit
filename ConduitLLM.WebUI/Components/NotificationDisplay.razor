@using ConduitLLM.WebUI.Models
@using ConduitLLM.WebUI.Services
@using ConduitLLM.WebUI.Components.Shared
@inject NotificationService NotificationService
@implements IDisposable
@rendermode InteractiveServer

<div class="notification-container">
    <button class="btn btn-icon notification-button" @onclick="ToggleNotificationPanel">
        <i class="fa fa-bell"></i>
        @if (UnreadCount > 0)
        {
            <span class="notification-badge">@UnreadCount</span>
        }
    </button>

    @if (IsOpen)
    {
        <div class="notification-dropdown">
            <div class="paper notification-panel">
                <div class="notification-header">
                    <h6 class="text-h6 mb-0 flex-grow-1">Notifications</h6>
                    <div class="notification-actions">
                        <Tooltip Text="Mark All Read">
                            <button class="btn btn-sm btn-outlined" @onclick="MarkAllAsRead">
                                <i class="fa fa-check-double"></i>
                            </button>
                        </Tooltip>
                        <Tooltip Text="Clear Read Notifications">
                            <button class="btn btn-sm btn-outlined text-error" @onclick="ClearReadNotifications">
                                <i class="fa fa-trash"></i>
                            </button>
                        </Tooltip>
                    </div>
                </div>
                
                <hr class="divider my-0" />
                
                <div class="notification-list">
                    @if (!Notifications.Any())
                    {
                        <div class="d-flex flex-column align-items-center p-4">
                            <i class="fa fa-inbox fa-2x text-secondary mb-2"></i>
                            <p class="text-body2 text-secondary text-center">No notifications</p>
                        </div>
                    }
                    else
                    {
                        <ul class="notification-items">
                            @foreach (var notification in Notifications)
                            {
                                <li class="@($"notification-item {GetNotificationClass(notification)}")">
                                    <div class="d-flex align-items-center w-100">
                                        <div class="notification-avatar @GetNotificationColorClass(notification)">
                                            <i class="@GetNotificationIconClass(notification)"></i>
                                        </div>
                                        
                                        <div class="notification-content">
                                            <p class="@(notification.IsRead ? "text-body1" : "text-body1 fw-medium")">
                                                @notification.Message
                                            </p>
                                            
                                            @if (!string.IsNullOrEmpty(notification.Source))
                                            {
                                                <small class="text-secondary d-block">
                                                    @notification.Source
                                                </small>
                                            }
                                            
                                            @if (!string.IsNullOrEmpty(notification.Details))
                                            {
                                                <small class="notification-details text-dark">
                                                    @notification.Details
                                                </small>
                                            }
                                            
                                            <small class="text-secondary d-block mt-1">
                                                @FormatTimeAgo(notification.Timestamp)
                                            </small>
                                        </div>
                                        
                                        @if (!notification.IsRead)
                                        {
                                            <button class="btn btn-icon btn-sm text-primary" @onclick="() => MarkAsRead(notification.Id)">
                                                <i class="fa fa-check"></i>
                                            </button>
                                        }
                                    </div>
                                </li>
                                <hr class="divider my-0" />
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>
    }
</div>

<style>
    .notification-container {
        position: relative;
    }
    
    .notification-button {
        position: relative;
        background: transparent;
        color: white;
    }
    
    .notification-badge {
        position: absolute;
        top: -5px;
        right: -5px;
        background-color: #f44336;
        color: white;
        border-radius: 50%;
        padding: 2px 6px;
        font-size: 0.7rem;
        min-width: 18px;
        height: 18px;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 1px solid white;
    }
    
    .notification-dropdown {
        position: absolute;
        top: 100%;
        right: 0;
        z-index: 1000;
    }
    
    .notification-panel {
        width: 350px;
        max-height: 500px;
        z-index: 1000;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        background-color: white;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        border-radius: 4px;
    }
    
    .notification-header {
        padding: 0.5rem 1rem;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }
    
    .notification-actions {
        display: flex;
        gap: 0.5rem;
    }
    
    .notification-list {
        max-height: 400px;
        overflow-y: auto;
    }
    
    .notification-items {
        list-style: none;
        padding: 0;
        margin: 0;
    }
    
    .notification-item {
        opacity: 1;
        transition: background-color 0.2s ease;
        padding: 8px 16px;
    }
    
    .notification-item.read {
        opacity: 0.7;
    }
    
    .notification-item:hover {
        background-color: #f5f5f5;
    }
    
    .notification-item.info {
        border-left: 3px solid #2196f3;
    }
    
    .notification-item.warning {
        border-left: 3px solid #ff9800;
    }
    
    .notification-item.error {
        border-left: 3px solid #f44336;
    }
    
    .notification-item.success {
        border-left: 3px solid #4caf50;
    }
    
    .notification-avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 12px;
        color: white;
        font-size: 14px;
    }
    
    .notification-avatar.bg-info {
        background-color: #2196f3;
    }
    
    .notification-avatar.bg-warning {
        background-color: #ff9800;
    }
    
    .notification-avatar.bg-error {
        background-color: #f44336;
    }
    
    .notification-avatar.bg-success {
        background-color: #4caf50;
    }
    
    .notification-avatar.bg-default {
        background-color: #9e9e9e;
    }
    
    .notification-content {
        flex-grow: 1;
        font-size: 0.9rem;
    }
    
    .notification-details {
        white-space: pre-wrap;
        display: block;
    }
</style>

@code {
    private List<Notification> Notifications = new();
    private bool IsOpen = false;
    private int UnreadCount = 0;

    protected override void OnInitialized()
    {
        // Subscribe to notification event
        NotificationService.OnNotification += OnNotificationReceived;
        LoadNotifications();
    }

    private void OnNotificationReceived()
    {
        LoadNotifications();
        StateHasChanged();
    }

    private void LoadNotifications()
    {
        Notifications = NotificationService.GetNotifications(true).OrderByDescending(n => n.Timestamp).ToList();
        UnreadCount = Notifications.Count(n => !n.IsRead);
    }

    private void ToggleNotificationPanel()
    {
        IsOpen = !IsOpen;
    }

    private void MarkAsRead(Guid id)
    {
        NotificationService.MarkAsRead(id);
        LoadNotifications();
    }

    private void MarkAllAsRead()
    {
        NotificationService.MarkAllAsRead();
        LoadNotifications();
    }

    private void ClearReadNotifications()
    {
        NotificationService.ClearReadNotifications();
        LoadNotifications();
    }

    private string FormatTimeAgo(DateTime time)
    {
        var span = DateTime.UtcNow - time;

        if (span.TotalDays > 30)
        {
            return $"{time:MMM d, yyyy}";
        }
        if (span.TotalDays > 1)
        {
            return $"{(int)span.TotalDays} days ago";
        }
        if (span.TotalHours > 1)
        {
            return $"{(int)span.TotalHours} hours ago";
        }
        if (span.TotalMinutes > 1)
        {
            return $"{(int)span.TotalMinutes} minutes ago";
        }
        return "Just now";
    }
    
    private string GetNotificationClass(Notification notification)
    {
        string baseClass = notification.IsRead ? "read" : "unread";
        
        return notification.Type switch
        {
            NotificationType.System => $"{baseClass} info",
            NotificationType.BudgetWarning => $"{baseClass} warning",
            NotificationType.KeyExpiration => $"{baseClass} warning",
            NotificationType.VirtualKeyValidation => $"{baseClass} warning",
            NotificationType.Security => $"{baseClass} error",
            NotificationType.Error => $"{baseClass} error",
            _ => baseClass
        };
    }
    
    private string GetNotificationColorClass(Notification notification)
    {
        return notification.Type switch
        {
            NotificationType.System => "bg-info",
            NotificationType.BudgetWarning => "bg-warning",
            NotificationType.KeyExpiration => "bg-warning",
            NotificationType.VirtualKeyValidation => "bg-warning",
            NotificationType.Security => "bg-error",
            NotificationType.Error => "bg-error",
            _ => "bg-default"
        };
    }
    
    private string GetNotificationIconClass(Notification notification)
    {
        return notification.Type switch
        {
            NotificationType.System => "fa fa-info",
            NotificationType.BudgetWarning => "fa fa-exclamation-triangle",
            NotificationType.KeyExpiration => "fa fa-exclamation-triangle",
            NotificationType.VirtualKeyValidation => "fa fa-exclamation-triangle",
            NotificationType.Security => "fa fa-exclamation-circle",
            NotificationType.Error => "fa fa-exclamation-circle",
            _ => "fa fa-bell"
        };
    }

    public void Dispose()
    {
        // Unsubscribe from notification event
        NotificationService.OnNotification -= OnNotificationReceived;
    }
}