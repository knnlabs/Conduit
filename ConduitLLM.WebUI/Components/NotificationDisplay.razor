@using ConduitLLM.WebUI.Models
@using ConduitLLM.WebUI.Services
@using Microsoft.JSInterop
@inject NotificationService NotificationService
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="notification-container">
    <div class="notification-toggle" @onclick="ToggleNotificationPanel">
        <div class="icon-container">
            <i class="fas fa-bell"></i>
            @if (UnreadCount > 0)
            {
                <span class="badge badge-pill badge-danger">@UnreadCount</span>
            }
        </div>
    </div>

    @if (IsOpen)
    {
        <div class="notification-panel">
            <div class="notification-header">
                <h5>Notifications</h5>
                <div class="notification-actions">
                    <button class="btn btn-sm btn-outline-secondary" @onclick="MarkAllAsRead">
                        <i class="fas fa-check-double"></i> Mark All Read
                    </button>
                    <button class="btn btn-sm btn-outline-danger" @onclick="ClearReadNotifications">
                        <i class="fas fa-trash"></i> Clear Read
                    </button>
                </div>
            </div>
            <div class="notification-list">
                @if (!Notifications.Any())
                {
                    <div class="no-notifications">
                        <i class="fas fa-inbox"></i>
                        <p>No notifications</p>
                    </div>
                }
                else
                {
                    @foreach (var notification in Notifications)
                    {
                        <div class="notification-item @(notification.IsRead ? "read" : "unread") @notification.GetColorClass()">
                            <div class="notification-icon">
                                <i class="@notification.GetIconClass()"></i>
                            </div>
                            <div class="notification-content">
                                <div class="notification-message">@notification.Message</div>
                                @if (!string.IsNullOrEmpty(notification.Source))
                                {
                                    <div class="notification-source">@notification.Source</div>
                                }
                                @if (!string.IsNullOrEmpty(notification.Details))
                                {
                                    <div class="notification-details">@notification.Details</div>
                                }
                                <div class="notification-time">
                                    @FormatTimeAgo(notification.Timestamp)
                                </div>
                            </div>
                            <div class="notification-actions">
                                @if (!notification.IsRead)
                                {
                                    <button class="btn btn-sm btn-link" @onclick="() => MarkAsRead(notification.Id)">
                                        <i class="fas fa-check"></i>
                                    </button>
                                }
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    }
</div>

<style>
    .notification-container {
        position: relative;
    }

    .notification-toggle {
        cursor: pointer;
        padding: 10px;
    }

    .icon-container {
        position: relative;
        display: inline-block;
    }

    .icon-container .badge {
        position: absolute;
        top: -8px;
        right: -8px;
        font-size: 0.7em;
    }

    .notification-panel {
        position: absolute;
        top: 100%;
        right: 0;
        width: 350px;
        max-height: 500px;
        background-color: white;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        overflow: hidden;
        display: flex;
        flex-direction: column;
    }

    .notification-header {
        padding: 10px 15px;
        border-bottom: 1px solid #eee;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .notification-list {
        overflow-y: auto;
        padding: 0;
        flex: 1;
        max-height: 400px;
    }

    .notification-item {
        padding: 10px 15px;
        border-bottom: 1px solid #eee;
        display: flex;
        transition: background-color 0.2s ease;
    }

    .notification-item:hover {
        background-color: #f9f9f9;
    }

    .notification-item.read {
        opacity: 0.7;
    }

    .notification-item.unread {
        font-weight: 500;
    }

    .notification-icon {
        margin-right: 10px;
        font-size: 1.2em;
        display: flex;
        align-items: center;
    }

    .notification-content {
        flex: 1;
    }

    .notification-message {
        margin-bottom: 3px;
    }

    .notification-source {
        font-size: 0.85em;
        color: #666;
    }

    .notification-details {
        font-size: 0.8em;
        color: #777;
        margin-top: 3px;
    }

    .notification-time {
        font-size: 0.75em;
        color: #999;
        margin-top: 5px;
    }

    .notification-actions button {
        padding: 2px 5px;
    }

    .no-notifications {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 30px 0;
        color: #999;
    }

    .no-notifications i {
        font-size: 2em;
        margin-bottom: 10px;
    }

    /* Notification color classes */
    .notification-item.bg-info-light {
        border-left: 3px solid #0d6efd;
        background-color: rgba(13, 110, 253, 0.05);
    }

    .notification-item.bg-warning-light {
        border-left: 3px solid #ffc107;
        background-color: rgba(255, 193, 7, 0.05);
    }

    .notification-item.bg-danger-light {
        border-left: 3px solid #dc3545;
        background-color: rgba(220, 53, 69, 0.05);
    }

    .notification-item.bg-success-light {
        border-left: 3px solid #198754;
        background-color: rgba(25, 135, 84, 0.05);
    }
</style>

@code {
    private List<Notification> Notifications = new();
    private bool IsOpen = false;
    private int UnreadCount = 0;
    private DotNetObjectReference<NotificationDisplay>? objRef;

    protected override void OnInitialized()
    {
        // Subscribe to notification event
        NotificationService.OnNotification += OnNotificationReceived;
        LoadNotifications();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("setupClickOutsideListener", objRef);
        }
    }

    [JSInvokable]
    public void ClosePanel()
    {
        if (IsOpen)
        {
            IsOpen = false;
            StateHasChanged();
        }
    }

    private void OnNotificationReceived()
    {
        LoadNotifications();
        StateHasChanged();
    }

    private void LoadNotifications()
    {
        Notifications = NotificationService.GetNotifications(true).OrderByDescending(n => n.Timestamp).ToList();
        UnreadCount = Notifications.Count(n => !n.IsRead);
    }

    private void ToggleNotificationPanel()
    {
        IsOpen = !IsOpen;
    }

    private void MarkAsRead(Guid id)
    {
        NotificationService.MarkAsRead(id);
        LoadNotifications();
    }

    private void MarkAllAsRead()
    {
        NotificationService.MarkAllAsRead();
        LoadNotifications();
    }

    private void ClearReadNotifications()
    {
        NotificationService.ClearReadNotifications();
        LoadNotifications();
    }

    private string FormatTimeAgo(DateTime time)
    {
        var span = DateTime.UtcNow - time;

        if (span.TotalDays > 30)
        {
            return $"{time:MMM d, yyyy}";
        }
        if (span.TotalDays > 1)
        {
            return $"{(int)span.TotalDays} days ago";
        }
        if (span.TotalHours > 1)
        {
            return $"{(int)span.TotalHours} hours ago";
        }
        if (span.TotalMinutes > 1)
        {
            return $"{(int)span.TotalMinutes} minutes ago";
        }
        return "Just now";
    }

    public void Dispose()
    {
        // Unsubscribe from notification event
        NotificationService.OnNotification -= OnNotificationReceived;
        
        // Dispose JS object reference
        if (objRef != null)
        {
            JSRuntime.InvokeVoidAsync("removeClickOutsideListener");
            objRef.Dispose();
        }
    }
}
