@using ConduitLLM.Configuration.DTOs.VirtualKey
@using ConduitLLM.Core.Interfaces
@using Microsoft.Extensions.Logging
@using System.Globalization
@inject IVirtualKeyService VirtualKeyService
@inject ILogger<VirtualKeyUsageSummary> Logger

<MudPaper Elevation="2" Class="mb-4">
    <div class="d-flex justify-space-between align-center pa-4">
        <MudText Typo="Typo.h6">Virtual Key Usage</MudText>
        <MudButton 
            Variant="Variant.Outlined" 
            Size="Size.Small" 
            Color="Color.Secondary" 
            StartIcon="@Icons.Material.Filled.Refresh" 
            OnClick="RefreshData">
            Refresh
        </MudButton>
    </div>
    
    <MudDivider />
    
    <div class="pa-4">
        @if (isLoading)
        {
            <div class="d-flex flex-column align-center pa-4">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Medium" />
                <MudText Class="mt-3">Loading key usage data...</MudText>
            </div>
        }
        else if (errorMessage != null)
        {
            <MudAlert Severity="Severity.Error" Class="mb-4">@errorMessage</MudAlert>
        }
        else if (keyStats == null || keyStats.TotalKeys == 0)
        {
            <div class="d-flex flex-column align-center pa-4">
                <MudIcon Icon="@Icons.Material.Filled.VpnKey" Color="Color.Default" Size="Size.Large" />
                <MudText Class="mt-3 mb-3">No virtual keys created yet.</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/virtualkeys">Manage Virtual Keys</MudButton>
            </div>
        }
        else
        {
            <MudGrid>
                <MudItem xs="12" sm="4">
                    <MudPaper Elevation="0" Class="pa-4 mud-background-gray d-flex flex-column align-center">
                        <MudText Typo="Typo.h4">@keyStats.TotalKeys</MudText>
                        <MudText Typo="Typo.subtitle1" Color="Color.Secondary">Total Keys</MudText>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudPaper Elevation="0" Class="pa-4 mud-background-gray d-flex flex-column align-center">
                        <MudText Typo="Typo.h4">@keyStats.ActiveKeys</MudText>
                        <MudText Typo="Typo.subtitle1" Color="Color.Secondary">Active Keys</MudText>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudPaper Elevation="0" Class="pa-4 mud-background-gray d-flex flex-column align-center">
                        <MudText Typo="Typo.h4">@FormatCurrency(keyStats.TotalSpending)</MudText>
                        <MudText Typo="Typo.subtitle1" Color="Color.Secondary">Total Spend</MudText>
                    </MudPaper>
                </MudItem>
            </MudGrid>

            @if (keyStats.HighUsageKeys.Any())
            {
                <div class="mt-6">
                    <MudText Typo="Typo.h6" Class="mb-3">High-Usage Keys</MudText>
                    <MudTable Items="@keyStats.HighUsageKeys" Hover="true" Dense="true">
                        <HeaderContent>
                            <MudTh>Key Name</MudTh>
                            <MudTh>Usage</MudTh>
                            <MudTh>Status</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Key Name">
                                <MudLink Href="@($"/virtualkeys/edit/{context.Id}")">@context.KeyName</MudLink>
                            </MudTd>
                            <MudTd DataLabel="Usage">
                                @{
                                    var budgetPercentage = context.MaxBudget.HasValue ? (context.CurrentSpend / context.MaxBudget.Value) * 100 : 0;
                                    var statusColor = GetBudgetStatusColor(budgetPercentage);
                                }
                                
                                @if (context.MaxBudget.HasValue)
                                {
                                    <div>
                                        <div class="d-flex justify-space-between">
                                            <MudText Typo="Typo.caption">@FormatCurrency(context.CurrentSpend)</MudText>
                                            <MudText Typo="Typo.caption">@FormatCurrency(context.MaxBudget.Value)</MudText>
                                        </div>
                                        <MudProgressLinear 
                                            Color="@statusColor" 
                                            Value="@(Convert.ToDouble(Math.Min(budgetPercentage, 100m)))" 
                                            Class="my-1" 
                                            Style="height: 4px;" />
                                    </div>
                                }
                                else
                                {
                                    <MudText>@FormatCurrency(context.CurrentSpend) (No limit)</MudText>
                                }
                            </MudTd>
                            <MudTd DataLabel="Status">
                                @{
                                    var budgetPercentage = context.MaxBudget.HasValue ? (context.CurrentSpend / context.MaxBudget.Value) * 100 : 0;
                                    var statusColor = GetBudgetStatusColor(budgetPercentage);
                                    var statusText = GetStatusText(context, budgetPercentage);
                                }
                                <MudChip T="string" Size="Size.Small" Color="@statusColor" Label="true">@statusText</MudChip>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </div>
            }

            <div class="d-flex justify-end mt-6">
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" Href="/virtualkeys">View All Keys</MudButton>
            </div>
        }
    </div>
</MudPaper>

@code {
    private bool isLoading = true;
    private string? errorMessage;
    private VirtualKeyStats? keyStats;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task RefreshData()
    {
        isLoading = true;
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            errorMessage = null;
            var keys = await VirtualKeyService.ListVirtualKeysAsync();
            
            keyStats = new VirtualKeyStats
            {
                TotalKeys = keys.Count,
                ActiveKeys = keys.Count(k => k.IsEnabled && (!k.ExpiresAt.HasValue || k.ExpiresAt > DateTime.UtcNow)),
                TotalSpending = keys.Sum(k => k.CurrentSpend),
                HighUsageKeys = keys
                    .Where(k => k.MaxBudget.HasValue && k.CurrentSpend > 0 && (k.CurrentSpend / k.MaxBudget.Value) >= 0.5m || 
                           !k.MaxBudget.HasValue && k.CurrentSpend > 10)
                    .OrderByDescending(k => k.MaxBudget.HasValue ? k.CurrentSpend / k.MaxBudget.Value : 0)
                    .ThenByDescending(k => k.CurrentSpend)
                    .Take(5)
                    .ToList()
            };
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading key usage data: {ex.Message}";
            Logger.LogError(ex, "Error loading virtual key statistics");
        }
        finally
        {
            isLoading = false;
        }
    }

    private string FormatCurrency(decimal value)
    {
        return value.ToString("C", CultureInfo.GetCultureInfo("en-US"));
    }

    private string GetProgressBarColorClass(decimal percentage)
    {
        return percentage switch
        {
            >= 90 => "bg-danger",
            >= 75 => "bg-warning",
            _ => "bg-success"
        };
    }
    
    private Color GetBudgetStatusColor(decimal percentage)
    {
        return percentage switch
        {
            >= 90 => Color.Error,
            >= 75 => Color.Warning,
            _ => Color.Success
        };
    }
    
    private string GetStatusText(VirtualKeyDto key, decimal budgetPercentage)
    {
        if (!key.IsEnabled)
            return "Disabled";
        else if (key.ExpiresAt.HasValue && key.ExpiresAt < DateTime.UtcNow)
            return "Expired";
        else if (key.MaxBudget.HasValue && key.CurrentSpend >= key.MaxBudget.Value)
            return "Budget Depleted";
        else if (budgetPercentage >= 90)
            return $"{Math.Round(budgetPercentage)}% Used";
        else if (budgetPercentage >= 75)
            return $"{Math.Round(budgetPercentage)}% Used";
        else
            return "Active";
    }

    private class VirtualKeyStats
    {
        public int TotalKeys { get; set; }
        public int ActiveKeys { get; set; }
        public decimal TotalSpending { get; set; }
        public List<VirtualKeyDto> HighUsageKeys { get; set; } = new();
    }
}
