@using ConduitLLM.Configuration.DTOs.VirtualKey
@using Microsoft.Extensions.Logging
@using System.Globalization
@using ConduitLLM.WebUI.Interfaces
@inject IAdminApiClient AdminApiClient
@inject ILogger<VirtualKeyUsageSummary> Logger

<div class="card mb-4 shadow-sm">
    <div class="card-header d-flex justify-content-between align-items-center p-3">
        <h5 class="mb-0">Virtual Key Usage</h5>
        <button class="btn btn-outline-secondary btn-sm" @onclick="RefreshData">
            <i class="fa fa-refresh me-1"></i> Refresh
        </button>
    </div>
    
    <hr class="m-0" />
    
    <div class="card-body p-3">
        @if (isLoading)
        {
            <div class="d-flex flex-column align-items-center p-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3">Loading key usage data...</p>
            </div>
        }
        else if (errorMessage != null)
        {
            <div class="alert alert-danger mb-4">@errorMessage</div>
        }
        else if (keyStats == null || keyStats.TotalKeys == 0)
        {
            <div class="d-flex flex-column align-items-center p-4">
                <i class="fa fa-key fa-2x text-muted"></i>
                <p class="mt-3 mb-3">No virtual keys created yet.</p>
                <a href="/virtualkeys" class="btn btn-primary">Manage Virtual Keys</a>
            </div>
        }
        else
        {
            <div class="row">
                <div class="col-12 col-sm-4">
                    <div class="bg-light p-4 d-flex flex-column align-items-center rounded">
                        <h4>@keyStats.TotalKeys</h4>
                        <p class="text-secondary mb-0">Total Keys</p>
                    </div>
                </div>
                <div class="col-12 col-sm-4">
                    <div class="bg-light p-4 d-flex flex-column align-items-center rounded">
                        <h4>@keyStats.ActiveKeys</h4>
                        <p class="text-secondary mb-0">Active Keys</p>
                    </div>
                </div>
                <div class="col-12 col-sm-4">
                    <div class="bg-light p-4 d-flex flex-column align-items-center rounded">
                        <h4>@FormatCurrency(keyStats.TotalSpending)</h4>
                        <p class="text-secondary mb-0">Total Spend</p>
                    </div>
                </div>
            </div>

            @if (keyStats.HighUsageKeys.Any())
            {
                <div class="mt-5">
                    <h6 class="mb-3">High-Usage Keys</h6>
                    <div class="table-responsive">
                        <table class="table table-hover table-sm">
                            <thead>
                                <tr>
                                    <th>Key Name</th>
                                    <th>Usage</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var context in keyStats.HighUsageKeys)
                                {
                                    <tr>
                                        <td>
                                            <a href="@($"/virtualkeys/edit/{context.Id}")">@context.KeyName</a>
                                        </td>
                                        <td>
                                            @{
                                                var usageBudgetPercentage = context.MaxBudget.HasValue ? (context.CurrentSpend / context.MaxBudget.Value) * 100 : 0;
                                                var statusColorClass = GetProgressBarColorClass(usageBudgetPercentage);
                                            }
                                            
                                            @if (context.MaxBudget.HasValue)
                                            {
                                                <div>
                                                    <div class="d-flex justify-content-between">
                                                        <small>@FormatCurrency(context.CurrentSpend)</small>
                                                        <small>@FormatCurrency(context.MaxBudget.Value)</small>
                                                    </div>
                                                    <div class="progress my-1" style="height: 4px;">
                                                        <div class="progress-bar @statusColorClass" 
                                                            role="progressbar" 
                                                            style="width: @(Math.Min(usageBudgetPercentage, 100))%"
                                                            aria-valuenow="@Math.Min(usageBudgetPercentage, 100)" 
                                                            aria-valuemin="0" 
                                                            aria-valuemax="100"></div>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {
                                                <span>@FormatCurrency(context.CurrentSpend) (No limit)</span>
                                            }
                                        </td>
                                        <td>
                                            @{
                                                var statusBudgetPercentage = context.MaxBudget.HasValue ? (context.CurrentSpend / context.MaxBudget.Value) * 100 : 0;
                                                var statusBadgeClass = GetStatusBadgeClass(statusBudgetPercentage, context);
                                                var statusText = GetStatusText(context, statusBudgetPercentage);
                                            }
                                            <span class="badge @statusBadgeClass">@statusText</span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }

            <div class="d-flex justify-content-end mt-5">
                <a href="/virtualkeys" class="btn btn-outline-primary">View All Keys</a>
            </div>
        }
    </div>
</div>

@code {
    private bool isLoading = true;
    private string? errorMessage;
    private VirtualKeyStats? keyStats;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task RefreshData()
    {
        isLoading = true;
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            errorMessage = null;
            var keys = await AdminApiClient.GetAllVirtualKeysAsync();
            
            keyStats = new VirtualKeyStats
            {
                TotalKeys = keys.Count(),
                ActiveKeys = keys.Count(k => k.IsEnabled && (!k.ExpiresAt.HasValue || k.ExpiresAt > DateTime.UtcNow)),
                TotalSpending = keys.Sum(k => k.CurrentSpend),
                HighUsageKeys = keys
                    .Where(k => k.MaxBudget.HasValue && k.CurrentSpend > 0 && (k.CurrentSpend / k.MaxBudget.Value) >= 0.5m || 
                           !k.MaxBudget.HasValue && k.CurrentSpend > 10)
                    .OrderByDescending(k => k.MaxBudget.HasValue ? k.CurrentSpend / k.MaxBudget.Value : 0)
                    .ThenByDescending(k => k.CurrentSpend)
                    .Take(5)
                    .ToList()
            };
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading key usage data: {ex.Message}";
            Logger.LogError(ex, "Error loading virtual key statistics");
        }
        finally
        {
            isLoading = false;
        }
    }

    private string FormatCurrency(decimal value)
    {
        return value.ToString("C", CultureInfo.GetCultureInfo("en-US"));
    }

    private string GetProgressBarColorClass(decimal percentage)
    {
        return percentage switch
        {
            >= 90 => "bg-danger",
            >= 75 => "bg-warning",
            _ => "bg-success"
        };
    }
    
    private string GetStatusBadgeClass(decimal percentage, VirtualKeyDto key)
    {
        if (!key.IsEnabled)
            return "bg-secondary";
        else if (key.ExpiresAt.HasValue && key.ExpiresAt < DateTime.UtcNow)
            return "bg-secondary";
        else if (key.MaxBudget.HasValue && key.CurrentSpend >= key.MaxBudget.Value)
            return "bg-danger";
        else
            return percentage switch
            {
                >= 90 => "bg-danger",
                >= 75 => "bg-warning",
                _ => "bg-success"
            };
    }
    
    private string GetStatusText(VirtualKeyDto key, decimal budgetPercentage)
    {
        if (!key.IsEnabled)
            return "Disabled";
        else if (key.ExpiresAt.HasValue && key.ExpiresAt < DateTime.UtcNow)
            return "Expired";
        else if (key.MaxBudget.HasValue && key.CurrentSpend >= key.MaxBudget.Value)
            return "Budget Depleted";
        else if (budgetPercentage >= 90)
            return $"{Math.Round(budgetPercentage)}% Used";
        else if (budgetPercentage >= 75)
            return $"{Math.Round(budgetPercentage)}% Used";
        else
            return "Active";
    }

    private class VirtualKeyStats
    {
        public int TotalKeys { get; set; }
        public int ActiveKeys { get; set; }
        public decimal TotalSpending { get; set; }
        public List<VirtualKeyDto> HighUsageKeys { get; set; } = new();
    }
}
