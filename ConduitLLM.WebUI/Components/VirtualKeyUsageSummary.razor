@using ConduitLLM.Configuration.DTOs.VirtualKey
@using ConduitLLM.Core.Interfaces
@using Microsoft.Extensions.Logging
@using System.Globalization
@inject IVirtualKeyService VirtualKeyService
@inject ILogger<VirtualKeyUsageSummary> Logger

<div class="card shadow-sm mb-4">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Virtual Key Usage</h5>
        <button class="btn btn-sm btn-outline-secondary" @onclick="RefreshData">
            <i class="bi bi-arrow-clockwise"></i> Refresh
        </button>
    </div>
    <div class="card-body">
        @if (isLoading)
        {
            <div class="text-center p-3">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading key usage data...</p>
            </div>
        }
        else if (errorMessage != null)
        {
            <div class="alert alert-danger">@errorMessage</div>
        }
        else if (keyStats == null || keyStats.TotalKeys == 0)
        {
            <div class="text-center p-3">
                <i class="bi bi-key text-muted" style="font-size: 2rem;"></i>
                <p class="mt-2">No virtual keys created yet.</p>
                <a href="/virtualkeys" class="btn btn-primary">Manage Virtual Keys</a>
            </div>
        }
        else
        {
            <div class="row g-3">
                <div class="col-md-4">
                    <div class="card border-0 bg-light h-100">
                        <div class="card-body text-center">
                            <h3 class="mb-0">@keyStats.TotalKeys</h3>
                            <p class="text-muted">Total Keys</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card border-0 bg-light h-100">
                        <div class="card-body text-center">
                            <h3 class="mb-0">@keyStats.ActiveKeys</h3>
                            <p class="text-muted">Active Keys</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card border-0 bg-light h-100">
                        <div class="card-body text-center">
                            <h3 class="mb-0">@FormatCurrency(keyStats.TotalSpending)</h3>
                            <p class="text-muted">Total Spend</p>
                        </div>
                    </div>
                </div>
            </div>

            @if (keyStats.HighUsageKeys.Any())
            {
                <div class="mt-4">
                    <h6>High-Usage Keys</h6>
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Key Name</th>
                                    <th>Usage</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var key in keyStats.HighUsageKeys)
                                {
                                    var budgetPercentage = key.MaxBudget.HasValue ? (key.CurrentSpend / key.MaxBudget.Value) * 100 : 0;
                                    var statusClass = budgetPercentage switch {
                                        >= 90 => "text-danger",
                                        >= 75 => "text-warning",
                                        _ => "text-success"
                                    };

                                    <tr>
                                        <td><a href="/virtualkeys/edit/@key.Id">@key.KeyName</a></td>
                                        <td>
                                            @if (key.MaxBudget.HasValue)
                                            {
                                                <div>
                                                    @FormatCurrency(key.CurrentSpend) / @FormatCurrency(key.MaxBudget.Value)
                                                    <div class="progress mt-1" style="height: 4px;">
                                                        <div class="progress-bar @GetProgressBarColorClass(budgetPercentage)" 
                                                             role="progressbar" 
                                                             style="width: @Math.Min(budgetPercentage, 100)%;" 
                                                             aria-valuenow="@budgetPercentage" 
                                                             aria-valuemin="0" 
                                                             aria-valuemax="100">
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {
                                                <span>@FormatCurrency(key.CurrentSpend) (No limit)</span>
                                            }
                                        </td>
                                        <td>
                                            @if (!key.IsEnabled)
                                            {
                                                <span class="badge bg-danger">Disabled</span>
                                            }
                                            else if (key.ExpiresAt.HasValue && key.ExpiresAt < DateTime.UtcNow)
                                            {
                                                <span class="badge bg-secondary">Expired</span>
                                            }
                                            else if (key.MaxBudget.HasValue && key.CurrentSpend >= key.MaxBudget.Value)
                                            {
                                                <span class="badge bg-danger">Budget Depleted</span>
                                            }
                                            else if (budgetPercentage >= 90)
                                            {
                                                <span class="badge bg-danger">@Math.Round(budgetPercentage)% Used</span>
                                            }
                                            else if (budgetPercentage >= 75)
                                            {
                                                <span class="badge bg-warning">@Math.Round(budgetPercentage)% Used</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-success">Active</span>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }

            <div class="d-flex justify-content-end mt-3">
                <a href="/virtualkeys" class="btn btn-outline-primary">View All Keys</a>
            </div>
        }
    </div>
</div>

@code {
    private bool isLoading = true;
    private string? errorMessage;
    private VirtualKeyStats? keyStats;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task RefreshData()
    {
        isLoading = true;
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            errorMessage = null;
            var keys = await VirtualKeyService.ListVirtualKeysAsync();
            
            keyStats = new VirtualKeyStats
            {
                TotalKeys = keys.Count,
                ActiveKeys = keys.Count(k => k.IsEnabled && (!k.ExpiresAt.HasValue || k.ExpiresAt > DateTime.UtcNow)),
                TotalSpending = keys.Sum(k => k.CurrentSpend),
                HighUsageKeys = keys
                    .Where(k => k.MaxBudget.HasValue && k.CurrentSpend > 0 && (k.CurrentSpend / k.MaxBudget.Value) >= 0.5m || 
                           !k.MaxBudget.HasValue && k.CurrentSpend > 10)
                    .OrderByDescending(k => k.MaxBudget.HasValue ? k.CurrentSpend / k.MaxBudget.Value : 0)
                    .ThenByDescending(k => k.CurrentSpend)
                    .Take(5)
                    .ToList()
            };
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading key usage data: {ex.Message}";
            Logger.LogError(ex, "Error loading virtual key statistics");
        }
        finally
        {
            isLoading = false;
        }
    }

    private string FormatCurrency(decimal value)
    {
        return value.ToString("C", CultureInfo.GetCultureInfo("en-US"));
    }

    private string GetProgressBarColorClass(decimal percentage)
    {
        return percentage switch
        {
            >= 90 => "bg-danger",
            >= 75 => "bg-warning",
            _ => "bg-success"
        };
    }

    private class VirtualKeyStats
    {
        public int TotalKeys { get; set; }
        public int ActiveKeys { get; set; }
        public decimal TotalSpending { get; set; }
        public List<VirtualKeyDto> HighUsageKeys { get; set; } = new();
    }
}
