@using Microsoft.AspNetCore.Components.Forms
@using System.Diagnostics.CodeAnalysis
@using System.Linq.Expressions
@typeparam TValue
@typeparam TItem
@inherits InputBase<TValue>

<div class="input-searchable-dropdown">
    @* Pass through all the validation CSS classes to the SearchableDropdown *@
    <SearchableDropdown TItem="TItem"
                        Items="@Items"
                        SelectedValue="@InternalValue"
                        SelectedValueChanged="@OnSelectedValueChanged"
                        ValueSelector="@ValueSelector"
                        DisplaySelector="@DisplaySelector"
                        DescriptionSelector="@DescriptionSelector"
                        Placeholder="@Placeholder"
                        EmptyOptionText="@EmptyOptionText"
                        ShowSearch="@ShowSearch"
                        SearchPlaceholder="@SearchPlaceholder"
                        NoResultsMessage="@NoResultsMessage"
                        Disabled="@Disabled"
                        CustomSearchFilter="@CustomSearchFilter"
                        CssClass="@CombinedCssClass"
                        AriaDescribedBy="@AriaDescribedBy" />
    
    @* Validation message support *@
    @if (EditContext != null)
    {
        <ValidationMessage For="@ValidationFor" />
    }
</div>

@code {
    [Parameter] public List<TItem> Items { get; set; } = new();
    [Parameter] public Func<TItem, TValue> ValueSelector { get; set; } = default!;
    [Parameter] public Func<TItem, string> DisplaySelector { get; set; } = default!;
    [Parameter] public Func<TItem, string>? DescriptionSelector { get; set; }
    [Parameter] public string Placeholder { get; set; } = "-- Select --";
    [Parameter] public string EmptyOptionText { get; set; } = "-- Select --";
    [Parameter] public bool ShowSearch { get; set; } = true;
    [Parameter] public string SearchPlaceholder { get; set; } = "Search...";
    [Parameter] public string NoResultsMessage { get; set; } = "No results found";
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public Func<TItem, string, bool>? CustomSearchFilter { get; set; }
    [Parameter] public Expression<Func<TValue>>? ValidationFor { get; set; }
    
    private string? InternalValue => CurrentValue?.ToString();
    private string? AriaDescribedBy => EditContext?.FieldCssClass(FieldIdentifier).Contains("invalid") == true 
        ? $"{FieldIdentifier.FieldName}-validation" 
        : null;
    
    private string CombinedCssClass
    {
        get
        {
            var cssClass = "form-select";
            if (EditContext != null)
            {
                var fieldClass = EditContext.FieldCssClass(FieldIdentifier);
                if (!string.IsNullOrEmpty(fieldClass))
                {
                    cssClass = $"{cssClass} {fieldClass}";
                }
            }
            return cssClass;
        }
    }
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        // Ensure we have a ValidationFor expression if not provided
        if (ValidationFor == null && ValueExpression != null)
        {
            ValidationFor = ValueExpression;
        }
    }
    
    private async Task OnSelectedValueChanged(string? value)
    {
        // Find the item that matches this value
        TItem? selectedItem = default;
        if (value != null && Items != null)
        {
            selectedItem = Items.FirstOrDefault(item => 
                ValueSelector(item)?.ToString() == value);
        }
        
        if (selectedItem != null)
        {
            CurrentValue = ValueSelector(selectedItem);
        }
        else
        {
            CurrentValue = default(TValue);
        }
        
        // The base class will handle notifying the EditContext
        await Task.CompletedTask;
    }
    
    protected override bool TryParseValueFromString(string? value, 
        [MaybeNullWhen(false)] out TValue result, 
        [NotNullWhen(false)] out string? validationErrorMessage)
    {
        // For most cases, we're dealing with string values
        if (typeof(TValue) == typeof(string))
        {
            result = (TValue)(object?)value!;
            validationErrorMessage = null;
            return true;
        }
        
        // For other types, try to convert
        if (value == null)
        {
            result = default(TValue);
            validationErrorMessage = null;
            return true;
        }
        
        try
        {
            if (typeof(TValue) == typeof(int) || typeof(TValue) == typeof(int?))
            {
                if (int.TryParse(value, out var intValue))
                {
                    result = (TValue)(object)intValue;
                    validationErrorMessage = null;
                    return true;
                }
            }
            else if (typeof(TValue) == typeof(Guid) || typeof(TValue) == typeof(Guid?))
            {
                if (Guid.TryParse(value, out var guidValue))
                {
                    result = (TValue)(object)guidValue;
                    validationErrorMessage = null;
                    return true;
                }
            }
            
            // Add more type conversions as needed
            
            result = default(TValue);
            validationErrorMessage = $"Cannot convert '{value}' to {typeof(TValue).Name}";
            return false;
        }
        catch
        {
            result = default(TValue);
            validationErrorMessage = $"Cannot convert '{value}' to {typeof(TValue).Name}";
            return false;
        }
    }
}