@using ConduitLLM.Configuration.DTOs
@using ConduitLLM.WebUI.Components.Shared
@using static ConduitLLM.WebUI.Components.Shared.ModelDropdownLogic
@inherits ComponentBase

<div class="model-searchable-dropdown">
    <SearchableDropdown TItem="ModelDropdownLogic.ModelInfo"
                        Items="@ModelInfos"
                        SelectedValue="@SelectedModelId"
                        SelectedValueChanged="@OnSelectedValueChanged"
                        ValueSelector="@(model => model.ModelId)"
                        DisplaySelector="@(model => model.ModelId)"
                        DescriptionSelector="@(model => ModelDropdownLogic.GetModelDescription(model))"
                        Placeholder="@Placeholder"
                        EmptyOptionText="@EmptyOptionText"
                        ShowSearch="true"
                        SearchPlaceholder="Search by model name, provider, or cost..."
                        NoResultsMessage="No models found matching your search"
                        Disabled="@Disabled"
                        CustomSearchFilter="@((model, term) => ModelDropdownLogic.SearchModels(model, term))" />
</div>

@code {
    [Parameter] public List<string> Models { get; set; } = new();
    [Parameter] public string? SelectedModelId { get; set; }
    [Parameter] public EventCallback<string?> SelectedModelIdChanged { get; set; }
    [Parameter] public string ProviderName { get; set; } = "";
    [Parameter] public List<ModelCostDto>? ModelCosts { get; set; }
    [Parameter] public string Placeholder { get; set; } = "-- Select Model --";
    [Parameter] public string EmptyOptionText { get; set; } = "-- Select Model --";
    [Parameter] public bool Disabled { get; set; }
    
    private List<ModelDropdownLogic.ModelInfo> ModelInfos = new();
    
    protected override void OnParametersSet()
    {
        // Convert string models to ModelInfo objects using shared logic
        ModelInfos = ModelDropdownLogic.ConvertToModelInfos(Models, ProviderName, ModelCosts);
    }
    
    private async Task OnSelectedValueChanged(string? value)
    {
        SelectedModelId = value;
        await SelectedModelIdChanged.InvokeAsync(value);
    }
}