<Card CssClass="stat-card" FillHeight="true" BodyCssClass="p-4 text-center">
    <BodyContent>
        @if (!string.IsNullOrEmpty(IconClass))
        {
            <div class="stat-icon mb-3">
                <i class="@IconClass @GetIconColorClass() @IconSize"></i>
            </div>
        }
        
        <h3 class="stat-number @GetValueColorClass()">
            @if (IsCurrency && !string.IsNullOrEmpty(Value))
            {
                <span>$@FormatValue()</span>
            }
            else
            {
                <span>@Value</span>
            }
        </h3>
        
        <p class="stat-label text-muted mb-0">@Label</p>
        
        @if (!string.IsNullOrEmpty(SubText))
        {
            <small class="text-muted">@SubText</small>
        }
        
        @if (ShowTrend && TrendValue != null)
        {
            <div class="mt-2">
                <span class="badge @GetTrendBadgeClass()">
                    <i class="fa @GetTrendIconClass() me-1"></i>
                    @TrendValue%
                </span>
            </div>
        }
    </BodyContent>
</Card>

<style>
    .stat-card {
        transition: transform 0.2s ease-in-out;
    }
    
    .stat-card:hover {
        transform: translateY(-2px);
    }
    
    .stat-icon {
        opacity: 0.8;
    }
    
    .stat-number {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
    }
    
    .stat-label {
        font-size: 0.875rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
</style>

@code {
    /// <summary>
    /// Gets or sets the statistic value to display.
    /// </summary>
    [Parameter] public string Value { get; set; } = "0";
    
    /// <summary>
    /// Gets or sets the label for the statistic.
    /// </summary>
    [Parameter] public string Label { get; set; } = "";
    
    /// <summary>
    /// Gets or sets optional subtext below the label.
    /// </summary>
    [Parameter] public string? SubText { get; set; }
    
    /// <summary>
    /// Gets or sets the icon CSS class (e.g., "fa fa-dollar-sign").
    /// </summary>
    [Parameter] public string? IconClass { get; set; }
    
    /// <summary>
    /// Gets or sets the icon size class.
    /// </summary>
    [Parameter] public string IconSize { get; set; } = "fa-2x";
    
    /// <summary>
    /// Gets or sets the color theme for the card.
    /// </summary>
    [Parameter] public StatCardColor Color { get; set; } = StatCardColor.Primary;
    
    /// <summary>
    /// Gets or sets whether the value represents currency.
    /// </summary>
    [Parameter] public bool IsCurrency { get; set; }
    
    /// <summary>
    /// Gets or sets whether to show a trend indicator.
    /// </summary>
    [Parameter] public bool ShowTrend { get; set; }
    
    /// <summary>
    /// Gets or sets the trend value (positive or negative percentage).
    /// </summary>
    [Parameter] public decimal? TrendValue { get; set; }
    
    /// <summary>
    /// Gets or sets the number of decimal places for currency formatting.
    /// </summary>
    [Parameter] public int DecimalPlaces { get; set; } = 2;

    private string GetIconColorClass()
    {
        return Color switch
        {
            StatCardColor.Primary => "text-primary",
            StatCardColor.Success => "text-success",
            StatCardColor.Danger => "text-danger",
            StatCardColor.Warning => "text-warning",
            StatCardColor.Info => "text-info",
            StatCardColor.Secondary => "text-secondary",
            _ => "text-primary"
        };
    }

    private string GetValueColorClass()
    {
        return Color switch
        {
            StatCardColor.Primary => "text-primary",
            StatCardColor.Success => "text-success",
            StatCardColor.Danger => "text-danger",
            StatCardColor.Warning => "text-warning",
            StatCardColor.Info => "text-info",
            StatCardColor.Secondary => "text-secondary",
            _ => "text-dark"
        };
    }

    private string GetTrendBadgeClass()
    {
        if (TrendValue == null) return "bg-secondary";
        return TrendValue >= 0 ? "bg-success" : "bg-danger";
    }

    private string GetTrendIconClass()
    {
        if (TrendValue == null) return "fa-minus";
        return TrendValue >= 0 ? "fa-arrow-up" : "fa-arrow-down";
    }

    private string FormatValue()
    {
        if (decimal.TryParse(Value, out var decimalValue))
        {
            return decimalValue.ToString($"F{DecimalPlaces}");
        }
        return Value;
    }

    public enum StatCardColor
    {
        Primary,
        Success,
        Danger,
        Warning,
        Info,
        Secondary
    }
}