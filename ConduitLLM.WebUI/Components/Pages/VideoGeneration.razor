@page "/video-generation"
@attribute [Authorize(Policy = "MasterKeyPolicy")]
@using Microsoft.Extensions.Options
@using ConduitLLM.Core.Models
@using ConduitLLM.Configuration
@using ConduitLLM.Configuration.DTOs
@using ConduitLLM.WebUI.Models
@using System.Text.Json
@inject ConduitLLM.WebUI.Interfaces.IAdminApiClient AdminApiClient
@inject ConduitLLM.WebUI.Interfaces.IConduitApiClient ConduitApiClient
@inject IOptions<ConduitSettings> ConduitSettingsOptions
@inject IJSRuntime JSRuntime
@inject IToastService ToastService
@inject ILogger<VideoGeneration> _logger
@using ConduitLLM.WebUI.Services

<PageTitle>Video Generation - ConduitLLM</PageTitle>

<div class="container container-xxl">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="video-gen-header bg-gradient-primary text-white rounded-4 p-4 mb-4">
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <h1 class="h3 mb-2">
                            <i class="fa fa-video me-3"></i>Video Generation
                        </h1>
                        <p class="mb-0 opacity-90">
                            Create videos from text descriptions using AI models
                        </p>
                    </div>
                    <div class="col-md-4 text-md-end">
                        <div class="video-stats">
                            <div class="stat-item">
                                <i class="fa fa-film me-2"></i>
                                <span class="small">@availableModels.Count Models Available</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @* Display persistent error alert if there's a recent error *@
    @if (!string.IsNullOrEmpty(lastError) && lastErrorTime.HasValue && (DateTime.Now - lastErrorTime.Value).TotalMinutes < 5)
    {
        <div class="alert alert-danger shadow-sm border-0 mb-4" role="alert">
            <div class="d-flex justify-content-between align-items-start">
                <div class="d-flex align-items-start flex-grow-1">
                    <i class="fa fa-exclamation-circle fa-2x me-3"></i>
                    <div class="flex-grow-1">
                        <h6 class="alert-heading mb-1">API Error</h6>
                        <p class="mb-2">@lastError</p>
                        <small class="text-muted">
                            <i class="fa fa-clock me-1"></i>
                            @lastErrorTime.Value.ToString("h:mm:ss tt")
                        </small>
                    </div>
                </div>
                <button type="button" class="btn-close" @onclick="() => { lastError = null; lastErrorTime = null; }" aria-label="Close"></button>
            </div>
        </div>
    }

    @if (!availableModels.Any())
    {
        <div class="alert alert-info mb-4" role="alert">
            <h4 class="alert-heading">
                <i class="fa fa-info-circle me-2"></i>No Video Generation Models Available
            </h4>
            <p class="mb-0">
                To use video generation, you need to configure models with video generation support in the Admin panel. 
                Make sure to:
            </p>
            <ul class="mb-0 mt-2">
                <li>Add provider credentials (e.g., MiniMax)</li>
                <li>Create model mappings for video generation models</li>
                <li>Enable "Supports Video Generation" for those models</li>
            </ul>
        </div>
    }

    <div class="row">
        <div class="col-12 col-lg-8">
            <!-- Generation Interface Card -->
            <div class="card shadow-sm border-0 mb-4">
                <div class="card-header bg-light border-0">
                    <h5 class="mb-0">
                        <i class="fa fa-magic me-2"></i>Create Video
                    </h5>
                </div>
                <div class="card-body">
                    <!-- Prompt Input -->
                    <div class="form-group mb-4">
                        <label for="videoPrompt" class="form-label fw-semibold">
                            <i class="fa fa-edit me-2"></i>Video Description
                        </label>
                        <textarea id="videoPrompt" 
                                  class="form-control" 
                                  rows="4" 
                                  placeholder="Describe the video you want to create... e.g., 'A majestic eagle soaring through mountain peaks at sunset, dramatic lighting'"
                                  @bind="videoPrompt"></textarea>
                        <div class="form-text">
                            Be specific about motion, camera angles, lighting, and the sequence of events you want in the video
                        </div>
                    </div>
                    
                    <!-- Generation Parameters -->
                    <div class="row mb-4">
                        <!-- Resolution Selection -->
                        <div class="col-md-6">
                            <label class="form-label fw-semibold">
                                <i class="fa fa-expand me-2"></i>Resolution
                            </label>
                            <select class="form-select" @bind="selectedSize">
                                <option value="1280x720">HD (1280×720) - 16:9</option>
                                <option value="1920x1080">Full HD (1920×1080) - 16:9</option>
                                <option value="720x480">SD (720×480) - 3:2</option>
                                <option value="720x1280">Mobile Portrait (720×1280) - 9:16</option>
                                <option value="1080x1920">HD Portrait (1080×1920) - 9:16</option>
                            </select>
                            <div class="form-text">Choose video resolution and aspect ratio</div>
                        </div>
                        
                        <!-- Duration Selection -->
                        <div class="col-md-6">
                            <label class="form-label fw-semibold">
                                <i class="fa fa-clock me-2"></i>Duration
                            </label>
                            <div class="input-group">
                                <input type="number" 
                                       class="form-control" 
                                       min="1" 
                                       max="@maxDuration" 
                                       step="1"
                                       @bind="duration" />
                                <span class="input-group-text">seconds</span>
                            </div>
                            <div class="form-text">Max @maxDuration seconds (model dependent)</div>
                        </div>
                    </div>
                    
                    <!-- Advanced Options -->
                    <div class="accordion mb-4" id="advancedOptions">
                        <div class="accordion-item">
                            <h2 class="accordion-header">
                                <button class="accordion-button collapsed" 
                                        type="button" 
                                        data-bs-toggle="collapse" 
                                        data-bs-target="#advancedOptionsContent"
                                        aria-expanded="false">
                                    <i class="fa fa-cog me-2"></i>Advanced Options
                                </button>
                            </h2>
                            <div id="advancedOptionsContent" 
                                 class="accordion-collapse collapse" 
                                 data-bs-parent="#advancedOptions">
                                <div class="accordion-body">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <label class="form-label fw-semibold">
                                                <i class="fa fa-tachometer-alt me-2"></i>FPS (Frames Per Second)
                                            </label>
                                            <select class="form-select" @bind="fps">
                                                <option value="24">24 FPS (Cinematic)</option>
                                                <option value="30">30 FPS (Standard)</option>
                                                <option value="60">60 FPS (Smooth)</option>
                                            </select>
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label fw-semibold">
                                                <i class="fa fa-paint-brush me-2"></i>Style
                                            </label>
                                            <input type="text" 
                                                   class="form-control" 
                                                   placeholder="e.g., cinematic, anime, realistic"
                                                   @bind="style" />
                                        </div>
                                    </div>
                                    <div class="row mt-3">
                                        <div class="col-md-6">
                                            <label class="form-label fw-semibold">
                                                <i class="fa fa-seedling me-2"></i>Seed (for reproducibility)
                                            </label>
                                            <input type="number" 
                                                   class="form-control" 
                                                   placeholder="Leave empty for random"
                                                   @bind="seed" />
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label fw-semibold">
                                                <i class="fa fa-layer-group me-2"></i>Number of Videos
                                            </label>
                                            <select class="form-select" @bind="numberOfVideos">
                                                <option value="1">1 Video</option>
                                                <option value="2">2 Videos</option>
                                                <option value="3">3 Videos</option>
                                                <option value="4">4 Videos</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Cost Estimation -->
                    @if (selectedModel != null && availableModels.Any(m => m.ModelName == selectedModel))
                    {
                        <div class="alert alert-info mb-4">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <i class="fa fa-dollar-sign me-2"></i>
                                    <strong>Estimated Cost:</strong> @GetEstimatedCost()
                                </div>
                                <small class="text-muted">Based on @duration seconds × @numberOfVideos video(s)</small>
                            </div>
                        </div>
                    }
                    
                    <!-- Action Buttons -->
                    <div class="d-flex gap-2">
                        <button type="button" 
                                class="btn btn-primary btn-lg" 
                                @onclick="GenerateVideo" 
                                disabled="@(isGenerating || string.IsNullOrWhiteSpace(videoPrompt) || !availableModels.Any())"
                                @onclick:preventDefault="false"
                                @onclick:stopPropagation="false">
                            @if (isGenerating)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Generating...</span>
                            }
                            else
                            {
                                <i class="fa fa-magic me-2"></i>
                                <span>Generate Video</span>
                            }
                        </button>
                        
                        <button type="button" 
                                class="btn btn-outline-secondary" 
                                @onclick="ClearAll" 
                                disabled="@isGenerating">
                            <i class="fa fa-eraser me-2"></i>
                            Clear All
                        </button>
                    </div>
                </div>
            </div>

            <!-- Active Generation Tasks -->
            @if (activeTasks.Any())
            {
                <div class="card shadow-sm border-0 mb-4">
                    <div class="card-header bg-light border-0">
                        <h5 class="mb-0">
                            <i class="fa fa-tasks me-2"></i>Active Generation Tasks
                        </h5>
                    </div>
                    <div class="card-body">
                        @foreach (var task in activeTasks)
                        {
                            <div class="task-item mb-3 p-3 border rounded">
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <div class="flex-grow-1">
                                        <h6 class="mb-1">Task: @task.TaskId</h6>
                                        <p class="text-muted small mb-1">@task.Prompt</p>
                                        <span class="badge @GetStatusBadgeClass(task.Status)">@task.Status</span>
                                    </div>
                                    <div class="task-actions">
                                        @if (task.Status == "pending" || task.Status == "running")
                                        {
                                            <button class="btn btn-sm btn-outline-danger" 
                                                    @onclick="() => CancelTask(task.TaskId)"
                                                    disabled="@task.IsCancelling">
                                                @if (task.IsCancelling)
                                                {
                                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                                }
                                                else
                                                {
                                                    <i class="fa fa-times"></i>
                                                }
                                            </button>
                                        }
                                    </div>
                                </div>
                                @if (task.Progress.HasValue)
                                {
                                    <div class="progress mb-2" style="height: 20px;">
                                        <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                             role="progressbar" 
                                             style="width: @(task.Progress)%"
                                             aria-valuenow="@task.Progress" 
                                             aria-valuemin="0" 
                                             aria-valuemax="100">
                                            @task.Progress%
                                        </div>
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(task.Error))
                                {
                                    <div class="alert alert-danger mb-0 mt-2">
                                        <small>@task.Error</small>
                                    </div>
                                }
                                <small class="text-muted">
                                    Started: @task.CreatedAt.ToString("h:mm:ss tt")
                                    @if (task.CompletedAt.HasValue)
                                    {
                                        <span> | Completed: @task.CompletedAt.Value.ToString("h:mm:ss tt")</span>
                                    }
                                </small>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Generated Videos Display -->
            @if (generatedVideos.Any())
            {
                <div class="card shadow-sm border-0">
                    <div class="card-header bg-light border-0">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">
                                <i class="fa fa-film me-2"></i>Generated Videos
                            </h5>
                            <span class="badge bg-secondary">@generatedVideos.Count videos</span>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            @foreach (var (video, index) in generatedVideos.Select((vid, idx) => (vid, idx)))
                            {
                                <div class="col-12">
                                    <div class="generated-video-container position-relative">
                                        @if (!string.IsNullOrEmpty(video.Url))
                                        {
                                            <video controls 
                                                   class="w-100 rounded shadow-sm"
                                                   style="max-height: 500px;">
                                                <source src="@video.Url" type="video/mp4">
                                                Your browser does not support the video tag.
                                            </video>
                                        }
                                        else if (!string.IsNullOrEmpty(video.B64Json))
                                        {
                                            <video controls 
                                                   class="w-100 rounded shadow-sm"
                                                   style="max-height: 500px;">
                                                <source src="@GetVideoSource(video)" type="video/mp4">
                                                Your browser does not support the video tag.
                                            </video>
                                        }
                                        
                                        <div class="video-info mt-2 p-2 bg-light rounded">
                                            @if (video.Metadata != null)
                                            {
                                                <div class="row small">
                                                    <div class="col-md-3">
                                                        <strong>Resolution:</strong> @video.Metadata.Width×@video.Metadata.Height
                                                    </div>
                                                    <div class="col-md-3">
                                                        <strong>Duration:</strong> @video.Metadata.Duration.ToString("F1")s
                                                    </div>
                                                    <div class="col-md-3">
                                                        <strong>FPS:</strong> @video.Metadata.Fps
                                                    </div>
                                                    <div class="col-md-3">
                                                        <strong>Size:</strong> @FormatFileSize(video.Metadata.FileSizeBytes)
                                                    </div>
                                                </div>
                                            }
                                            @if (!string.IsNullOrEmpty(video.RevisedPrompt))
                                            {
                                                <div class="mt-2">
                                                    <small class="text-muted">
                                                        <strong>Revised Prompt:</strong> @video.RevisedPrompt
                                                    </small>
                                                </div>
                                            }
                                        </div>
                                        
                                        <div class="video-actions mt-2 d-flex gap-2">
                                            <button class="btn btn-sm btn-primary" 
                                                    title="Download"
                                                    @onclick="() => DownloadVideo(video)">
                                                <i class="fa fa-download me-1"></i>Download
                                            </button>
                                            <button class="btn btn-sm btn-outline-secondary" 
                                                    title="Delete"
                                                    @onclick="() => RemoveVideo(video)">
                                                <i class="fa fa-trash me-1"></i>Delete
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
        
        <div class="col-12 col-lg-4">
            <!-- Model Settings Card -->
            <div class="card shadow-sm border-0 mb-4">
                <div class="card-header bg-light border-0">
                    <h6 class="mb-0">
                        <i class="fa fa-sliders-h me-2"></i>Model Settings
                    </h6>
                </div>
                <div class="card-body">
                    <div class="form-group mb-3">
                        <label for="modelSelect" class="form-label fw-semibold">
                            <i class="fa fa-robot me-2"></i>Video Model
                        </label>
                        @if (availableModels.Any())
                        {
                            <select id="modelSelect" 
                                    class="form-select" 
                                    @bind="selectedModel"
                                    @bind:after="OnModelChanged">
                                @foreach (var model in availableModels)
                                {
                                    <option value="@model.ModelName">@model.DisplayName</option>
                                }
                            </select>
                        }
                        else
                        {
                            <div class="alert alert-warning mb-0">
                                <i class="fa fa-exclamation-triangle me-2"></i>
                                No video generation models configured. Please add models with video generation support in the Admin panel.
                            </div>
                        }
                        <div class="form-text">@(!string.IsNullOrEmpty(selectedModel) ? GetModelDescription(selectedModel) : "")</div>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="apiKey" class="form-label fw-semibold">
                            <i class="fa fa-key me-2"></i>API Key (Optional)
                        </label>
                        <input type="password" 
                               id="apiKey" 
                               class="form-control" 
                               placeholder="Override default key"
                               @bind="apiKey" />
                        <div class="form-text">Override the default API key for testing</div>
                    </div>
                    
                    @if (selectedModel != null)
                    {
                        <div class="model-capabilities mt-3 p-3 bg-light rounded">
                            <h6 class="fw-semibold mb-2">Model Capabilities</h6>
                            <ul class="list-unstyled mb-0 small">
                                <li><i class="fa fa-check text-success me-1"></i>Max Duration: @maxDuration seconds</li>
                                <li><i class="fa fa-check text-success me-1"></i>Supported Resolutions: HD, Full HD, Mobile</li>
                                <li><i class="fa fa-check text-success me-1"></i>FPS Options: 24, 30, 60</li>
                            </ul>
                        </div>
                    }
                </div>
            </div>

            <!-- Generation History Card -->
            <div class="card shadow-sm border-0">
                <div class="card-header bg-light border-0">
                    <h6 class="mb-0">
                        <i class="fa fa-history me-2"></i>Recent Prompts
                    </h6>
                </div>
                <div class="card-body">
                    @if (recentPrompts.Any())
                    {
                        <div class="list-group list-group-flush">
                            @foreach (var promptItem in recentPrompts.Take(5))
                            {
                                <a href="#" 
                                   class="list-group-item list-group-item-action small py-2 @(promptItem.IsSample ? "sample-prompt" : "")"
                                   @onclick="() => UsePrompt(promptItem.Prompt)"
                                   @onclick:preventDefault="true">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div class="text-truncate flex-grow-1">
                                            @promptItem.Prompt
                                            @if (promptItem.IsSample)
                                            {
                                                <small class="text-primary ms-1">[Sample]</small>
                                            }
                                        </div>
                                        @if (!promptItem.IsSample)
                                        {
                                            <small class="text-muted ms-2 flex-shrink-0">@GetRelativeTime(promptItem.Timestamp)</small>
                                        }
                                    </div>
                                </a>
                            }
                        </div>
                        @if (recentPrompts.Any(p => !p.IsSample))
                        {
                            <div class="mt-2">
                                <button type="button" 
                                        class="btn btn-sm btn-outline-secondary w-100"
                                        @onclick="ClearPromptHistory">
                                    <i class="fa fa-trash me-1"></i>Clear History
                                </button>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted small mb-0">No recent prompts</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<VideoModel> availableModels = new();
    private List<VideoData> generatedVideos = new();
    private List<PromptHistoryItem> recentPrompts = new();
    private List<VideoGenerationTask> activeTasks = new();
    private System.Threading.Timer? statusCheckTimer;
    
    private string videoPrompt = "";
    private string selectedModel = "";
    private string selectedSize = "1280x720";
    private int duration = 5;
    private int maxDuration = 6;
    private int fps = 30;
    private string? style;
    private int? seed;
    private int numberOfVideos = 1;
    private string? apiKey;
    private bool isGenerating = false;
    
    // Error tracking
    private string? lastError = null;
    private DateTime? lastErrorTime = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableModels();
        // Start periodic status check for active tasks
        statusCheckTimer = new System.Threading.Timer(async _ => await CheckTaskStatuses(), null, TimeSpan.Zero, TimeSpan.FromSeconds(2));
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadRecentPrompts();
            StateHasChanged();
        }
    }

    private async Task LoadAvailableModels()
    {
        try
        {
            // Get all model mappings from Admin API
            var mappingDtos = await AdminApiClient.GetAllModelProviderMappingsAsync();
            _logger.LogInformation("Retrieved {Count} model mappings from Admin API", mappingDtos?.Count() ?? 0);
            
            var videoGenModels = new List<VideoModel>();
            
            // Check for models with video generation capability
            foreach (var dto in mappingDtos ?? Enumerable.Empty<ModelProviderMappingDto>())
            {
                _logger.LogInformation("Model {Model}: IsEnabled={Enabled}, SupportsVideoGeneration={SupportsVideo}", 
                    dto.ModelId, dto.IsEnabled, dto.SupportsVideoGeneration);
                    
                if (dto.IsEnabled && dto.SupportsVideoGeneration)
                {
                    _logger.LogInformation("Found video generation model: {Model}", dto.ModelId);
                    
                    // Get provider name from provider ID if needed
                    var providerName = dto.ProviderId;
                    if (int.TryParse(dto.ProviderId, out var providerId))
                    {
                        // Provider ID is numeric, try to resolve the name
                        var providers = await AdminApiClient.GetAllProviderCredentialsAsync();
                        var provider = providers?.FirstOrDefault(p => p.Id == providerId);
                        if (provider != null)
                        {
                            providerName = provider.ProviderName;
                        }
                    }
                    
                    videoGenModels.Add(new VideoModel
                    {
                        ModelName = dto.ModelId,
                        DisplayName = $"{dto.ModelId} ({providerName})",
                        Provider = providerName
                    });
                }
            }
            
            // If no models found in mappings, keep the list empty
            if (!videoGenModels.Any())
            {
                _logger.LogWarning("No video generation models found in mappings. Please configure models with SupportsVideoGeneration=true in the Admin API.");
            }
            
            availableModels = videoGenModels;
            
            // Set default model if current selection is not available or empty
            if ((string.IsNullOrEmpty(selectedModel) || !availableModels.Any(m => m.ModelName == selectedModel)) && availableModels.Any())
            {
                selectedModel = availableModels.First().ModelName;
                _logger.LogInformation("Set default selected model to: {Model}", selectedModel);
            }
        }
        catch (Exception ex)
        {
            // Set the last error for persistent display
            lastError = ex.Message;
            lastErrorTime = DateTime.Now;
            
            _logger.LogError(ex, "Error loading available models");
            ToastService.ShowError("Failed to load available models");
            
            // Keep the list empty if loading fails
            availableModels = new List<VideoModel>();
            ToastService.ShowWarning("No video generation models available. Please configure models in the Admin panel.");
        }
    }

    private async Task LoadRecentPrompts()
    {
        try
        {
            var promptsJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "conduit-video-prompts");
            
            if (!string.IsNullOrEmpty(promptsJson))
            {
                var storedPrompts = JsonSerializer.Deserialize<List<PromptHistoryItem>>(promptsJson);
                if (storedPrompts != null)
                {
                    // Filter out old prompts (older than 30 days) and limit to 20 items
                    var cutoffDate = DateTime.UtcNow.AddDays(-30);
                    recentPrompts = storedPrompts
                        .Where(p => p.IsSample || p.Timestamp > cutoffDate)
                        .OrderByDescending(p => p.IsSample ? DateTime.MaxValue : p.Timestamp)
                        .Take(20)
                        .ToList();
                }
            }
            
            // Add sample prompts if no real prompts exist
            if (!recentPrompts.Any(p => !p.IsSample))
            {
                AddSamplePrompts();
            }
        }
        catch (Exception ex)
        {
            // Don't set lastError for localStorage issues - not critical
            _logger.LogError(ex, "Error loading prompt history from localStorage");
            AddSamplePrompts();
        }
    }

    private void AddSamplePrompts()
    {
        var samplePrompts = new List<string>
        {
            "A majestic eagle soaring through mountain peaks at sunset, dramatic lighting",
            "Timelapse of a flower blooming in a garden with soft morning light",
            "Futuristic city with flying cars, neon lights reflecting on wet streets at night",
            "Ocean waves crashing against rocky cliffs during a storm, dramatic slow motion",
            "Astronaut floating in space with Earth in the background, cinematic quality"
        };

        var samples = samplePrompts.Select(prompt => new PromptHistoryItem
        {
            Prompt = prompt,
            IsSample = true,
            Timestamp = DateTime.UtcNow
        }).ToList();

        recentPrompts.AddRange(samples);
    }

    private async Task GenerateVideo()
    {
        _logger.LogInformation("GenerateVideo called. videoPrompt='{Prompt}', selectedModel='{Model}', availableModels.Count={Count}", 
            videoPrompt, selectedModel, availableModels.Count);
            
        if (string.IsNullOrWhiteSpace(videoPrompt))
        {
            ToastService.ShowWarning("Please enter a video description");
            return;
        }

        if (string.IsNullOrWhiteSpace(selectedModel))
        {
            ToastService.ShowWarning("Please select a video generation model");
            return;
        }

        isGenerating = true;
        StateHasChanged(); // Ensure UI updates immediately
        try
        {
            var request = new VideoGenerationRequest
            {
                Prompt = videoPrompt,
                Model = selectedModel,
                Duration = duration,
                Size = selectedSize,
                Fps = fps,
                Style = style,
                Seed = seed,
                N = numberOfVideos,
                ResponseFormat = "url"
            };

            // Always use async for video generation
            // Video generation with providers like MiniMax takes 3-5+ minutes even for short videos
            await StartAsyncVideoGeneration(request);
            
            // For async generation, we reset the generating flag after the task is created
            isGenerating = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Set the last error for persistent display
            lastError = ex.Message;
            lastErrorTime = DateTime.Now;
            
            _logger.LogError(ex, "Error generating video");
            ToastService.ShowError($"Error: {ex.Message}");
            
            // Only reset on error
            isGenerating = false;
            StateHasChanged();
        }
    }

    private async Task StartAsyncVideoGeneration(VideoGenerationRequest request)
    {
        try
        {
            var taskResponse = await ConduitApiClient.CreateVideoAsyncTask(request, string.IsNullOrWhiteSpace(apiKey) ? null : apiKey);
            
            if (taskResponse != null && !string.IsNullOrEmpty(taskResponse.TaskId))
            {
                var task = new VideoGenerationTask
                {
                    TaskId = taskResponse.TaskId,
                    Status = taskResponse.Status,
                    CreatedAt = taskResponse.CreatedAt,
                    Prompt = videoPrompt,
                    EstimatedCompletionTime = taskResponse.EstimatedCompletionTime
                };
                
                activeTasks.Add(task);
                
                // Add to recent prompts
                await AddToPromptHistory(videoPrompt);
                
                ToastService.ShowInfo($"Video generation started. Task ID: {taskResponse.TaskId}");
            }
            else
            {
                ToastService.ShowError("Failed to start video generation task");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error starting async video generation");
            throw;
        }
    }

    private async Task CheckTaskStatuses()
    {
        if (!activeTasks.Any(t => t.Status == "pending" || t.Status == "running"))
            return;

        try
        {
            foreach (var task in activeTasks.Where(t => t.Status == "pending" || t.Status == "running").ToList())
            {
                var status = await ConduitApiClient.GetVideoGenerationStatusAsync(task.TaskId, apiKey);
                
                if (status != null)
                {
                    task.Status = status.Status;
                    task.Progress = status.Progress;
                    task.UpdatedAt = status.UpdatedAt;
                    task.CompletedAt = status.CompletedAt;
                    task.Error = status.Error;
                    
                    if (status.Status == "completed" && status.VideoResponse?.Data != null)
                    {
                        generatedVideos.AddRange(status.VideoResponse.Data);
                        ToastService.ShowSuccess($"Video generation completed for task {task.TaskId}");
                    }
                    else if (status.Status == "failed")
                    {
                        ToastService.ShowError($"Video generation failed: {status.Error ?? "Unknown error"}");
                    }
                }
            }
            
            // Remove completed/failed tasks after 30 seconds
            var cutoffTime = DateTimeOffset.UtcNow.AddSeconds(-30);
            activeTasks.RemoveAll(t => 
                (t.Status == "completed" || t.Status == "failed" || t.Status == "cancelled") 
                && t.CompletedAt.HasValue 
                && t.CompletedAt.Value < cutoffTime);
            
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error checking task statuses");
        }
    }

    private async Task CancelTask(string taskId)
    {
        var task = activeTasks.FirstOrDefault(t => t.TaskId == taskId);
        if (task == null) return;
        
        task.IsCancelling = true;
        try
        {
            var success = await ConduitApiClient.CancelVideoGenerationAsync(taskId, apiKey);
            
            if (success)
            {
                task.Status = "cancelled";
                task.CompletedAt = DateTimeOffset.UtcNow;
                ToastService.ShowInfo($"Video generation task {taskId} cancelled");
            }
            else
            {
                ToastService.ShowError($"Failed to cancel task {taskId}");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error cancelling task {TaskId}", taskId);
            ToastService.ShowError($"Error cancelling task: {ex.Message}");
        }
        finally
        {
            task.IsCancelling = false;
        }
    }

    private void OnModelChanged()
    {
        // Update model-specific constraints
        if (selectedModel.Contains("minimax"))
        {
            maxDuration = 6; // MiniMax supports up to 6 seconds
        }
        else
        {
            maxDuration = 10; // Default max duration
        }
        
        // Adjust duration if it exceeds new max
        if (duration > maxDuration)
        {
            duration = maxDuration;
        }
    }

    private string GetModelDescription(string model)
    {
        if (string.IsNullOrEmpty(model)) return "";
        
        if (model.Contains("minimax"))
        {
            return "MiniMax Video Generation - High quality, up to 6 seconds";
        }
        
        return "Video generation model";
    }

    private string GetEstimatedCost()
    {
        // This is a placeholder - actual cost calculation would depend on the provider's pricing
        var costPerSecond = 0.10m; // Example: $0.10 per second
        var totalCost = costPerSecond * duration * numberOfVideos;
        return $"${totalCost:F2}";
    }

    private async Task AddToPromptHistory(string prompt)
    {
        try
        {
            // Remove sample prompts when first real prompt is added
            if (recentPrompts.All(p => p.IsSample))
            {
                recentPrompts.Clear();
            }

            // Remove existing prompt if it exists
            recentPrompts.RemoveAll(p => p.Prompt.Equals(prompt, StringComparison.OrdinalIgnoreCase));

            // Add new prompt at the beginning
            recentPrompts.Insert(0, new PromptHistoryItem
            {
                Prompt = prompt,
                IsSample = false,
                Timestamp = DateTime.UtcNow
            });

            // Keep only the last 20 prompts
            if (recentPrompts.Count > 20)
            {
                recentPrompts = recentPrompts.Take(20).ToList();
            }

            // Save to localStorage
            var promptsJson = JsonSerializer.Serialize(recentPrompts);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "conduit-video-prompts", promptsJson);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error saving prompt to history");
        }
    }

    private async Task ClearPromptHistory()
    {
        try
        {
            recentPrompts.RemoveAll(p => !p.IsSample);
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "conduit-video-prompts");
            
            // Add sample prompts back if no real prompts exist
            if (!recentPrompts.Any())
            {
                AddSamplePrompts();
            }
            
            ToastService.ShowInfo("Prompt history cleared");
        }
        catch (Exception ex)
        {
            // Don't set lastError for localStorage issues - not critical
            _logger.LogError(ex, "Error clearing prompt history");
            ToastService.ShowError("Failed to clear prompt history");
        }
    }

    private string GetRelativeTime(DateTime timestamp)
    {
        var timeSpan = DateTime.UtcNow - timestamp;
        
        if (timeSpan.TotalMinutes < 1) return "Just now";
        if (timeSpan.TotalMinutes < 60) return $"{(int)timeSpan.TotalMinutes}m ago";
        if (timeSpan.TotalHours < 24) return $"{(int)timeSpan.TotalHours}h ago";
        if (timeSpan.TotalDays < 7) return $"{(int)timeSpan.TotalDays}d ago";
        return timestamp.ToString("MMM dd");
    }

    private void UsePrompt(string prompt)
    {
        videoPrompt = prompt;
    }

    private void ClearAll()
    {
        videoPrompt = "";
        generatedVideos.Clear();
    }

    private void RemoveVideo(VideoData video)
    {
        generatedVideos.Remove(video);
    }

    private string GetVideoSource(VideoData video)
    {
        if (!string.IsNullOrEmpty(video.B64Json))
        {
            return $"data:video/mp4;base64,{video.B64Json}";
        }
        else if (!string.IsNullOrEmpty(video.Url))
        {
            return video.Url;
        }
        return "";
    }

    private async Task DownloadVideo(VideoData video)
    {
        var videoSource = GetVideoSource(video);
        if (!string.IsNullOrEmpty(videoSource))
        {
            await JSRuntime.InvokeVoidAsync("downloadVideo", videoSource, $"generated-video-{DateTime.Now:yyyyMMdd-HHmmss}.mp4");
        }
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "pending" => "bg-warning",
            "running" => "bg-info",
            "completed" => "bg-success",
            "failed" => "bg-danger",
            "cancelled" => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:F2} {sizes[order]}";
    }

    public void Dispose()
    {
        statusCheckTimer?.Dispose();
    }

    private class VideoModel
    {
        public string ModelName { get; set; } = "";
        public string DisplayName { get; set; } = "";
        public string Provider { get; set; } = "";
    }

    private class PromptHistoryItem
    {
        public string Prompt { get; set; } = "";
        public bool IsSample { get; set; }
        public DateTime Timestamp { get; set; }
    }

    private class VideoGenerationTask
    {
        public string TaskId { get; set; } = "";
        public string Status { get; set; } = "";
        public string Prompt { get; set; } = "";
        public int? Progress { get; set; }
        public DateTimeOffset CreatedAt { get; set; }
        public DateTimeOffset UpdatedAt { get; set; }
        public DateTimeOffset? CompletedAt { get; set; }
        public DateTimeOffset? EstimatedCompletionTime { get; set; }
        public string? Error { get; set; }
        public bool IsCancelling { get; set; }
    }
}

<style>
    .video-gen-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    
    .generated-video-container {
        position: relative;
        overflow: hidden;
        border-radius: 0.5rem;
    }
    
    .task-item {
        background: #f8f9fa;
        transition: all 0.3s ease;
    }
    
    .task-item:hover {
        background: #e9ecef;
    }
    
    .sample-prompt {
        background-color: rgba(13, 110, 253, 0.05);
        border-left: 3px solid #0d6efd;
    }
    
    .sample-prompt:hover {
        background-color: rgba(13, 110, 253, 0.1);
    }
    
    .video-stats .stat-item {
        display: inline-block;
        background: rgba(255, 255, 255, 0.2);
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
    }
    
    .model-capabilities {
        border: 1px solid #dee2e6;
    }
    
    video {
        background: #000;
    }
    
    .video-info {
        font-size: 0.875rem;
    }
    
    .progress {
        background-color: #e9ecef;
    }
    
    .progress-bar-striped {
        background-image: linear-gradient(45deg, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
        background-size: 1rem 1rem;
    }
</style>