@page "/"
@using ConduitLLM.WebUI.Data
@using ConduitLLM.WebUI.Services
@using Microsoft.Extensions.Configuration
@using ConduitLLM.WebUI.Interfaces
@using ConduitLLM.Core.Caching
@using ConduitLLM.Core.Models.Routing
@using ConduitLLM.Configuration
@using ConduitLLM.Configuration.DTOs
@using ConduitLLM.Configuration.Repositories
@using ConduitLLM.Configuration.Entities
@inject NavigationManager NavigationManager
@inject ProviderStatusService ProviderStatusService
@inject IProviderHealthRepository ProviderHealthRepository
@inject IConfiguration Configuration
@inject IRouterService RouterService
@inject ConduitLLM.WebUI.Interfaces.ICacheStatusService CacheStatusService
@inject ConduitLLM.WebUI.Interfaces.IVirtualKeyService VirtualKeyService
@inject Interfaces.IProviderCredentialService ProviderCredentialService
@implements IDisposable
@rendermode InteractiveServer

<div class="container container-xxl mt-4">
    <h3 class="text-h3 mb-2">Welcome to ConduitLLM</h3>
    <p class="text-subtitle1 mb-4">The central configuration hub for your LLM integrations</p>

    @if (!IsMasterKeySet)
    {
        <div class="alert alert-warning my-4">
            <p class="text-body1">
                <strong>Master Key Not Set:</strong> For enhanced security, especially for managing virtual keys, 
                it's highly recommended to set a Master Key using the <code>CONDUIT_MASTER_KEY</code> environment variable. 
                This key protects sensitive operations.
                <a href="https://learn.microsoft.com/en-us/aspnet/core/fundamentals/environments#set-the-environment" 
                   target="_blank" class="underline">Learn how to set environment variables</a>
            </p>
        </div>
    }

    <div class="row">
        <!-- Provider Status Card -->
        <div class="col-12 col-md-4">
            <div class="card mb-4" style="display: flex; flex-direction: column;">
                <div class="card-header px-4 d-flex justify-content-between align-items-center">
                    <h6 class="text-h6 m-0">Provider Status</h6>
                    <div>
                        <a href="/provider-health" class="btn btn-sm btn-outline-primary me-1">
                            <i class="fa fa-chart-line"></i>
                        </a>
                        <button class="btn btn-icon" @onclick="CheckAllProvidersStatus" disabled="@isCheckingStatus">
                            @if (isCheckingStatus)
                            {
                                <div class="spinner-border spinner-border-sm" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            }
                            else
                            {
                                <i class="fa fa-sync-alt"></i>
                            }
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (providerCount == 0)
                    {
                        <div class="alert alert-warning mb-3">
                            <h6 class="text-h6">No Providers Configured</h6>
                            <p class="text-body2">
                                You haven't configured any LLM providers yet. To get started with ConduitLLM, 
                                you'll need to add at least one provider.
                            </p>
                            <div class="mt-3">
                                <a href="/configuration" class="btn btn-primary px-3">
                                    <i class="fa fa-plus me-2"></i>
                                    <span>Add Your First Provider</span>
                                </a>
                            </div>
                        </div>
                    }
                    else
                    {
                        @if (providerStatuses.Count > 0)
                        {
                            <table class="table table-sm table-hover">
                                <thead>
                                    <tr>
                                        <th>Provider</th>
                                        <th>Status</th>
                                        <th>Response Time</th>
                                        <th>Monitoring</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var provider in providers)
                                    {
                                        <tr>
                                            <td>
                                                <span class="fw-medium">@provider.ProviderName</span>
                                            </td>
                                            <td>
                                                @if (providerStatuses.TryGetValue(provider.ProviderName, out var status))
                                                {
                                                    @if (status.Status == ConduitLLM.WebUI.Services.ProviderStatus.StatusType.Online)
                                                    {
                                                        <span class="text-success">
                                                            <i class="fa fa-check-circle me-1"></i>
                                                            Online
                                                        </span>
                                                    }
                                                    else if (status.Status == ConduitLLM.WebUI.Services.ProviderStatus.StatusType.Offline)
                                                    {
                                                        <span class="text-danger">
                                                            <i class="fa fa-exclamation-circle me-1"></i>
                                                            Offline
                                                        </span>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-secondary">
                                                            <i class="fa fa-question-circle me-1"></i>
                                                            Unknown
                                                        </span>
                                                    }
                                                }
                                                else
                                                {
                                                    <span class="text-secondary">
                                                        <i class="fa fa-question-circle me-1"></i>
                                                        Unknown
                                                    </span>
                                                }
                                            </td>
                                            <td>
                                                @if (providerStatuses.TryGetValue(provider.ProviderName, out var responseStatus) && responseStatus.ResponseTimeMs > 0)
                                                {
                                                    <small>@responseStatus.ResponseTimeMs.ToString("F2") ms</small>
                                                }
                                                else
                                                {
                                                    <small>-</small>
                                                }
                                            </td>
                                            <td>
                                                @if (providerConfigurations.TryGetValue(provider.ProviderName, out var config))
                                                {
                                                    @if (config.MonitoringEnabled)
                                                    {
                                                        <span class="badge bg-success">Auto</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-secondary">Manual</span>
                                                    }
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">Manual</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            
                            <div class="d-flex justify-content-between mt-3">
                                <a href="/configuration" class="btn btn-text text-primary px-3">
                                    <span class="me-2">Manage Providers</span>
                                    <i class="fa fa-arrow-right"></i>
                                </a>
                                <a href="/provider-health" class="btn btn-text text-primary px-3">
                                    <span class="me-2">Health Dashboard</span>
                                    <i class="fa fa-arrow-right"></i>
                                </a>
                            </div>
                        }
                        else
                        {
                            <p class="text-secondary">Click refresh to check providers status</p>
                        }
                    }
                </div>
            </div>
        </div>

        <!-- Routing Rules Card -->
        <div class="col-12 col-md-4">
            <div class="card mb-4" style="display: flex; flex-direction: column;">
                <div class="card-header px-4 d-flex justify-content-between align-items-center">
                    <h6 class="text-h6 m-0">Routing Configuration</h6>
                    <button class="btn btn-icon" @onclick="CheckRoutingStatus" disabled="@isCheckingRoutingStatus">
                        @if (isCheckingRoutingStatus)
                        {
                            <div class="spinner-border spinner-border-sm" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                        else
                        {
                            <i class="fa fa-sync-alt"></i>
                        }
                    </button>
                </div>
                <div class="card-body">
                    @if (isLoadingRouting)
                    {
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="d-flex flex-column">
                            <div class="paper p-3 bg-light">
                                <div class="d-flex flex-row">
                                    <p class="text-body1 mb-0">Routing Engine:</p>
                                    @if (isRouterEnabled)
                                    {
                                        <span class="text-success ms-2">
                                            <i class="fa fa-check-circle me-1"></i>
                                            Enabled
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="text-error ms-2">
                                            <i class="fa fa-times-circle me-1"></i>
                                            Disabled
                                        </span>
                                    }
                                </div>
                            </div>

                            @if (routerConfig != null)
                            {
                                <div class="paper p-3 mt-3 bg-light">
                                    <div class="d-flex flex-column">
                                        <p class="text-subtitle2 m-0">Current Strategy:</p>
                                        <h6 class="text-h6 text-primary">@GetStrategyDisplayName(routerConfig.DefaultRoutingStrategy)</h6>
                                        
                                        <hr class="divider" />
                                        
                                        <p class="text-subtitle2 mt-2 mb-0">Active Routes: @(routerConfig.ModelDeployments?.Count ?? 0)</p>
                                        
                                        @if (routerConfig.ModelDeployments?.Count > 0)
                                        {
                                            <div class="mt-2">
                                                @foreach (var route in routerConfig.ModelDeployments.Take(3))
                                                {
                                                    <div class="d-flex align-items-center my-1">
                                                        <i class="fa fa-arrow-right me-2"></i>
                                                        @route.ModelName → @route.ProviderName
                                                    </div>
                                                }
                                                @if (routerConfig.ModelDeployments.Count > 3)
                                                {
                                                    <small class="text-secondary mt-1">
                                                        And @(routerConfig.ModelDeployments.Count - 3) more...
                                                    </small>
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>

                                <a href="/routing-settings" class="btn btn-text text-primary mt-3 px-3">
                                    <span class="me-2">Manage Routing</span>
                                    <i class="fa fa-arrow-right"></i>
                                </a>
                            }
                            else
                            {
                                <div class="alert alert-info mt-3">
                                    <p class="text-body2">
                                        Routing is not configured yet. Set up routing to automatically direct requests to the right LLM provider.
                                    </p>
                                    <div class="mt-3">
                                        <a href="/routing-settings" class="btn btn-primary px-3">
                                            <i class="fa fa-cog me-2"></i>
                                            <span>Configure Routing</span>
                                        </a>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Caching System Card -->
        <div class="col-12 col-md-4">
            <div class="card mb-4" style="display: flex; flex-direction: column;">
                <div class="card-header px-4 d-flex justify-content-between align-items-center">
                    <h6 class="text-h6 m-0">Caching System</h6>
                    <button class="btn btn-icon" @onclick="CheckCachingStatus" disabled="@isCheckingCachingStatus">
                        @if (isCheckingCachingStatus)
                        {
                            <div class="spinner-border spinner-border-sm" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                        else
                        {
                            <i class="fa fa-sync-alt"></i>
                        }
                    </button>
                </div>
                <div class="card-body">
                    @if (isLoadingCaching)
                    {
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="paper p-3 bg-light">
                            <div class="d-flex flex-row">
                                <p class="text-body1 mb-0">Cache Status:</p>
                                @if (isCacheEnabled)
                                {
                                    <span class="text-success ms-2">
                                        <i class="fa fa-check-circle me-1"></i>
                                        Enabled
                                    </span>
                                }
                                else
                                {
                                    <span class="text-error ms-2">
                                        <i class="fa fa-times-circle me-1"></i>
                                        Disabled
                                    </span>
                                }
                            </div>
                        </div>

                        @if (cacheType != null)
                        {
                            <p class="text-subtitle2 mt-3 mb-0">Cache Type:</p>
                            <p class="text-primary mt-1">@cacheType</p>
                        }

                        @if (cacheStats != null)
                        {
                            <div class="row mt-4">
                                <div class="col-6">
                                    <div class="paper p-3 d-flex flex-column align-items-center bg-light">
                                        <small class="text-secondary">Cached Items</small>
                                        <h6 class="text-h6 text-primary">@cacheStats.TotalItems</h6>
                                    </div>
                                </div>
                                
                                <div class="col-6">
                                    <div class="paper p-3 d-flex flex-column align-items-center bg-light">
                                        <small class="text-secondary">Hit Rate</small>
                                        <h6 class="text-h6 text-primary">@cacheStats.HitRate.ToString("P1")</h6>
                                    </div>
                                </div>
                                
                                <div class="col-6 mt-2">
                                    <div class="paper p-3 d-flex flex-column align-items-center bg-light">
                                        <small class="text-secondary">Memory Usage</small>
                                        <h6 class="text-h6 text-primary">@FormatBytes(cacheStats.MemoryUsageBytes)</h6>
                                    </div>
                                </div>
                                
                                <div class="col-6 mt-2">
                                    <div class="paper p-3 d-flex flex-column align-items-center bg-light">
                                        <small class="text-secondary">Avg Response</small>
                                        <h6 class="text-h6 text-primary">@cacheStats.AvgResponseTime.ToString("0.##") ms</h6>
                                    </div>
                                </div>
                            </div>

                            <a href="/caching-settings" class="btn btn-text text-primary mt-3 px-3">
                                <span class="me-2">Manage Caching</span>
                                <i class="fa fa-arrow-right"></i>
                            </a>
                        }
                        else
                        {
                            <div class="alert alert-info mt-3">
                                <p class="text-body2">
                                    Caching is not configured yet. Set up caching to improve response times and reduce API costs.
                                </p>
                                <div class="mt-3">
                                    <a href="/caching-settings" class="btn btn-primary px-3">
                                        <i class="fa fa-cog me-2"></i>
                                        <span>Configure Caching</span>
                                    </a>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>

    <hr class="divider my-4" />

    <!-- Quick Actions Section -->
    <h5 class="text-h5 mb-3">Quick Actions</h5>
    <div class="row">
        <div class="col-12 col-sm-6 col-md-3">
            <div class="paper p-4 paper-2">
                <div class="d-flex flex-column align-items-center" style="gap: 0.5rem;">
                    <i class="fa fa-comment text-primary fa-2x"></i>
                    <h6 class="text-h6">Try Chat</h6>
                    <p class="text-body2 text-center">Test your configuration with the built-in chat interface</p>
                    <a href="/chat" class="btn btn-primary w-100 px-3">
                        <span>Open Chat</span>
                    </a>
                </div>
            </div>
        </div>
        
        <div class="col-12 col-sm-6 col-md-3">
            <div class="paper p-4 paper-2">
                <div class="d-flex flex-column align-items-center" style="gap: 0.5rem;">
                    <i class="fa fa-plus text-secondary fa-2x"></i>
                    <h6 class="text-h6">Add Provider</h6>
                    <p class="text-body2 text-center">Configure a new LLM provider to use with Conduit</p>
                    <a href="/configuration" class="btn btn-secondary w-100 px-3">
                        <span>Configure</span>
                    </a>
                </div>
            </div>
        </div>
        
        <div class="col-12 col-sm-6 col-md-3">
            <div class="paper p-4 paper-2">
                <div class="d-flex flex-column align-items-center" style="gap: 0.5rem;">
                    <i class="fa fa-route text-warning fa-2x"></i>
                    <h6 class="text-h6">Setup Routing</h6>
                    <p class="text-body2 text-center">Configure rules to route requests to the right provider</p>
                    <a href="/routing-settings" class="btn btn-warning w-100 px-3">
                        <span>Routing</span>
                    </a>
                </div>
            </div>
        </div>
        
        <div class="col-12 col-sm-6 col-md-3">
            <div class="paper p-4 paper-2">
                <div class="d-flex flex-column align-items-center" style="gap: 0.5rem;">
                    <i class="fa fa-key text-info fa-2x"></i>
                    <h6 class="text-h6">Virtual Keys</h6>
                    <p class="text-body2 text-center">Manage virtual API keys for application access</p>
                    <a href="/virtualkeys" class="btn btn-info w-100 px-3">
                        <span>Keys</span>
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool IsMasterKeySet => !string.IsNullOrEmpty(Configuration["CONDUIT_MASTER_KEY"]);
    
    private List<ProviderCredentialDto> providers = new();
    private Dictionary<string, ProviderStatus> providerStatuses = new();
    private Dictionary<string, ProviderHealthConfigurationDto> providerConfigurations = new();
    private bool isLoading = true;
    private bool isCheckingStatus = false;
    private int providerCount = 0;
    
    // Routing data
    private RouterConfig? routerConfig = null;
    private bool isRouterEnabled = false;
    private bool isLoadingRouting = true;
    private bool isCheckingRoutingStatus = false;
    
    // Caching data
    private CacheStats? cacheStats = null;
    private bool isCacheEnabled = false;
    private string? cacheType = null;
    private bool isLoadingCaching = true;
    private bool isCheckingCachingStatus = false;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }
    
    private async Task LoadDataAsync()
    {
        try
        {
            isLoading = true;
            isLoadingRouting = true;
            isLoadingCaching = true;
            StateHasChanged();
            
            // Load providers
            var allProviders = await ProviderCredentialService.GetAllAsync();
            providers = allProviders.ToList();
            providerCount = providers.Count;
            
            // Load provider configurations
            var configs = await ProviderHealthRepository.GetAllConfigurationsAsync();
            var providerConfigDtos = new List<ProviderHealthConfigurationDto>();
            
            foreach (var config in configs)
            {
                providerConfigDtos.Add(new ProviderHealthConfigurationDto 
                { 
                    Id = config.Id,
                    ProviderName = config.ProviderName,
                    MonitoringEnabled = config.MonitoringEnabled,
                    CheckIntervalMinutes = config.CheckIntervalMinutes,
                    ConsecutiveFailuresThreshold = config.ConsecutiveFailuresThreshold,
                    NotificationsEnabled = config.NotificationsEnabled,
                    LastCheckedUtc = config.LastCheckedUtc,
                    CustomEndpointUrl = config.CustomEndpointUrl,
                    TimeoutSeconds = config.TimeoutSeconds
                });
            }
            
            providerConfigurations = providerConfigDtos.ToDictionary(c => c.ProviderName, c => c);
            
            // Initial checks
            await CheckAllProvidersStatus();
            await CheckRoutingStatus();
            await CheckCachingStatus();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task CheckAllProvidersStatus()
    {
        if (isCheckingStatus)
            return;
            
        try
        {
            isCheckingStatus = true;
            StateHasChanged();
            
            // Clear old statuses before getting new ones
            providerStatuses.Clear();
            providerStatuses = await ProviderStatusService.CheckAllProvidersStatusAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error checking provider status: {ex.Message}");
        }
        finally
        {
            isCheckingStatus = false;
            StateHasChanged();
        }
    }
    
    private async Task CheckRoutingStatus()
    {
        if (isCheckingRoutingStatus)
            return;
            
        try
        {
            isCheckingRoutingStatus = true;
            StateHasChanged();
            
            var routerStatus = await RouterService.GetRouterStatusAsync();
            routerConfig = routerStatus.Config;
            isRouterEnabled = routerStatus.IsEnabled;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error checking routing status: {ex.Message}");
            routerConfig = null;
        }
        finally
        {
            isCheckingRoutingStatus = false;
            isLoadingRouting = false;
            StateHasChanged();
        }
    }
    
    private async Task CheckCachingStatus()
    {
        if (isCheckingCachingStatus)
            return;
            
        try
        {
            isCheckingCachingStatus = true;
            StateHasChanged();
            
            // Real implementation - fetch from the cache service
            var cacheStatus = await CacheStatusService.GetCacheStatusAsync();
            Console.WriteLine($"Cache status retrieved: Enabled={cacheStatus.IsEnabled}, Type={cacheStatus.CacheType}, Items={cacheStatus.TotalItems}");
            
            cacheStats = new CacheStats
            {
                TotalItems = cacheStatus.TotalItems,
                HitRate = cacheStatus.HitRate,
                MemoryUsageBytes = cacheStatus.MemoryUsageBytes,
                AvgResponseTime = cacheStatus.AvgResponseTime
            };
            isCacheEnabled = cacheStatus.IsEnabled;
            cacheType = cacheStatus.CacheType;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error checking cache status: {ex.Message}");
            Console.Error.WriteLine($"Stack trace: {ex.StackTrace}");
            cacheStats = null;
        }
        finally
        {
            isCheckingCachingStatus = false;
            isLoadingCaching = false;
            StateHasChanged();
        }
    }

    // Navigation methods removed in favor of simple anchor tags
    
    private string GetStrategyDisplayName(string strategy)
    {
        return strategy?.ToLower() switch
        {
            "simple" => "Simple",
            "random" => "Random",
            "round-robin" => "Round Robin",
            _ => strategy ?? "Unknown"
        };
    }
    
    private string FormatBytes(long bytes)
    {
        string[] suffix = { "B", "KB", "MB", "GB", "TB" };
        int i;
        double dblBytes = bytes;
        
        for (i = 0; i < suffix.Length && bytes >= 1024; i++, bytes /= 1024)
        {
            dblBytes = bytes / 1024.0;
        }
        
        return $"{dblBytes:0.#} {suffix[i]}";
    }
    
    private class CacheStats
    {
        public int TotalItems { get; set; }
        public double HitRate { get; set; }
        public long MemoryUsageBytes { get; set; }
        public double AvgResponseTime { get; set; }
    }
    
    public void Dispose()
    {
        // No event handlers to dispose
    }
}
