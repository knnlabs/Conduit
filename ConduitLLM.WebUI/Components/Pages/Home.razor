@page "/"
@using ConduitLLM.WebUI.Data
@using ConduitLLM.WebUI.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Configuration
@using ConduitLLM.WebUI.Interfaces
@using ConduitLLM.Core.Caching
@using ConduitLLM.Core.Models.Routing
@using ConduitLLM.Configuration
@using ConduitLLM.Configuration.Entities
@inject NavigationManager NavigationManager
@inject ProviderStatusService ProviderStatusService
@inject IConfiguration Configuration
@inject IRouterService RouterService
@inject ICacheStatusService CacheStatusService
@inject IDbContextFactory<ConfigurationDbContext> DbContextFactory 
@implements IDisposable
@rendermode InteractiveServer

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h3" Class="mb-2">Welcome to ConduitLLM</MudText>
    <MudText Typo="Typo.subtitle1" Class="mb-4">The central configuration hub for your LLM integrations</MudText>

    @if (!IsMasterKeySet)
    {
        <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined" Class="my-4" Icon="@Icons.Material.Filled.Warning">
            <MudText Typo="Typo.body1">
                <strong>Master Key Not Set:</strong> For enhanced security, especially for managing virtual keys, 
                it's highly recommended to set a Master Key using the <code>CONDUIT_MASTER_KEY</code> environment variable. 
                This key protects sensitive operations.
                <MudLink Href="https://learn.microsoft.com/en-us/aspnet/core/fundamentals/environments#set-the-environment" 
                      Target="_blank" Underline="Underline.Always">Learn how to set environment variables</MudLink>
            </MudText>
        </MudAlert>
    }

    <MudGrid Spacing="3">
        <!-- Provider Status Card -->
        <MudItem xs="12" md="4">
            <MudCard Elevation="3" Class="mb-4" Style="display: flex; flex-direction: column;">
                <MudCardHeader Class="px-4">
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Provider Status</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Default" 
                                    Size="Size.Small" OnClick="CheckAllProvidersStatus" 
                                    Disabled="@isCheckingStatus">
                            @if (isCheckingStatus)
                            {
                                <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                            }
                        </MudIconButton>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    @if (isLoading)
                    {
                        <div class="d-flex justify-center">
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                        </div>
                    }
                    else if (providerCount == 0)
                    {
                        <MudAlert Severity="Severity.Warning" Class="mb-3">
                            <MudText Typo="Typo.h6">No Providers Configured</MudText>
                            <MudText Typo="Typo.body2">
                                You haven't configured any LLM providers yet. To get started with ConduitLLM, 
                                you'll need to add at least one provider.
                            </MudText>
                            <div class="mt-3">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                                         StartIcon="@Icons.Material.Filled.Add" 
                                         IconColor="Color.Inherit"
                                         Class="px-3"
                                         OnClick="NavigateToConfiguration">
                                    <span class="ms-2">Add Your First Provider</span>
                                </MudButton>
                            </div>
                        </MudAlert>
                    }
                    else
                    {
                        @if (providerStatuses.Count > 0)
                        {
                            <MudTable Items="@providers" Hover="true" Dense="true" Elevation="0">
                                <HeaderContent>
                                    <MudTh>Provider</MudTh>
                                    <MudTh>Status</MudTh>
                                    <MudTh>Last Checked</MudTh>
                                </HeaderContent>
                                <RowTemplate Context="provider">
                                    <MudTd>
                                        <MudText Typo="Typo.body1" Style="font-weight:500">@provider.ProviderName</MudText>
                                    </MudTd>
                                    <MudTd>
                                        @if (providerStatuses.TryGetValue(provider.ProviderName, out var status))
                                        {
                                            @if (status.IsOnline)
                                            {
                                                <MudText Color="Color.Success">
                                                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Small" Class="mr-1" />
                                                    Online
                                                </MudText>
                                            }
                                            else
                                            {
                                                <MudText Color="Color.Error">
                                                    <MudIcon Icon="@Icons.Material.Filled.Error" Size="Size.Small" Class="mr-1" />
                                                    Offline
                                                </MudText>
                                            }
                                        }
                                        else
                                        {
                                            <MudText Color="Color.Default">
                                                <MudIcon Icon="@Icons.Material.Filled.QuestionMark" Size="Size.Small" Class="mr-1" />
                                                Unknown
                                            </MudText>
                                        }
                                    </MudTd>
                                    <MudTd>
                                        @if (providerStatuses.TryGetValue(provider.ProviderName, out var lastStatus) && lastStatus.LastCheckedUtc != default)
                                        {
                                            <MudText Typo="Typo.caption">@lastStatus.LastCheckedUtc.ToLocalTime().ToString("g")</MudText>
                                        }
                                        else
                                        {
                                            <MudText Typo="Typo.caption">-</MudText>
                                        }
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                            
                            <MudButton Variant="Variant.Text" Color="Color.Primary" 
                                     OnClick="NavigateToConfiguration" 
                                     Class="mt-3 px-3" 
                                     EndIcon="@Icons.Material.Filled.ArrowForward">
                                <span class="me-2">Manage Providers</span>
                            </MudButton>
                        }
                        else
                        {
                            <MudText Color="Color.Secondary">Click refresh to check providers status</MudText>
                        }
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Routing Rules Card -->
        <MudItem xs="12" md="4">
            <MudCard Elevation="3" Class="mb-4" Style="display: flex; flex-direction: column;">
                <MudCardHeader Class="px-4">
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Routing Configuration</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Default" 
                                    Size="Size.Small" OnClick="CheckRoutingStatus" 
                                    Disabled="@isCheckingRoutingStatus">
                            @if (isCheckingRoutingStatus)
                            {
                                <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                            }
                        </MudIconButton>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    @if (isLoadingRouting)
                    {
                        <div class="d-flex justify-center">
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                        </div>
                    }
                    else
                    {
                        <MudStack>
                            <MudPaper Elevation="0" Class="pa-3" Style="background-color: var(--mud-palette-background-grey)">
                                <MudStack Row="true">
                                    <MudText Typo="Typo.body1">Routing Engine:</MudText>
                                    @if (isRouterEnabled)
                                    {
                                        <MudText Color="Color.Success">
                                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Small" Class="mr-1" />
                                            Enabled
                                        </MudText>
                                    }
                                    else
                                    {
                                        <MudText Color="Color.Error">
                                            <MudIcon Icon="@Icons.Material.Filled.Cancel" Size="Size.Small" Class="mr-1" />
                                            Disabled
                                        </MudText>
                                    }
                                </MudStack>
                            </MudPaper>

                            @if (routerConfig != null)
                            {
                                <MudPaper Elevation="0" Class="pa-3 mt-3" Style="background-color: var(--mud-palette-background-grey)">
                                    <MudStack>
                                        <MudText Typo="Typo.subtitle2">Current Strategy:</MudText>
                                        <MudText Typo="Typo.h6" Color="Color.Primary">@GetStrategyDisplayName(routerConfig.DefaultRoutingStrategy)</MudText>
                                        
                                        <MudDivider />
                                        
                                        <MudText Typo="Typo.subtitle2" Class="mt-2">Active Routes: @(routerConfig.ModelDeployments?.Count ?? 0)</MudText>
                                        
                                        @if (routerConfig.ModelDeployments?.Count > 0)
                                        {
                                            <div class="mt-2">
                                                @foreach (var route in routerConfig.ModelDeployments.Take(3))
                                                {
                                                    <MudText Typo="Typo.body2" Class="d-flex align-center my-1">
                                                        <MudIcon Icon="@Icons.Material.Filled.ArrowForward" Size="Size.Small" Class="mr-2" />
                                                        @route.ModelName → @route.ProviderName
                                                    </MudText>
                                                }
                                                @if (routerConfig.ModelDeployments.Count > 3)
                                                {
                                                    <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-1">
                                                        And @(routerConfig.ModelDeployments.Count - 3) more...
                                                    </MudText>
                                                }
                                            </div>
                                        }
                                    </MudStack>
                                </MudPaper>

                                <MudButton Variant="Variant.Text" Color="Color.Primary" 
                                         OnClick="NavigateToRoutingSettings" 
                                         Class="mt-3 px-3" 
                                         EndIcon="@Icons.Material.Filled.ArrowForward">
                                    <span class="me-2">Manage Routing</span>
                                </MudButton>
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Info" Class="mt-3">
                                    <MudText Typo="Typo.body2">
                                        Routing is not configured yet. Set up routing to automatically direct requests to the right LLM provider.
                                    </MudText>
                                    <div class="mt-3">
                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                                                 StartIcon="@Icons.Material.Filled.Settings" 
                                                 IconColor="Color.Inherit"
                                                 Class="px-3"
                                                 OnClick="NavigateToRoutingSettings">
                                            <span class="ms-2">Configure Routing</span>
                                        </MudButton>
                                    </div>
                                </MudAlert>
                            }
                        </MudStack>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Caching System Card -->
        <MudItem xs="12" md="4">
            <MudCard Elevation="3" Class="mb-4" Style="display: flex; flex-direction: column;">
                <MudCardHeader Class="px-4">
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Caching System</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Default" 
                                    Size="Size.Small" OnClick="CheckCachingStatus" 
                                    Disabled="@isCheckingCachingStatus">
                            @if (isCheckingCachingStatus)
                            {
                                <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                            }
                        </MudIconButton>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    @if (isLoadingCaching)
                    {
                        <div class="d-flex justify-center">
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                        </div>
                    }
                    else
                    {
                        <MudPaper Elevation="0" Class="pa-3" Style="background-color: var(--mud-palette-background-grey)">
                            <MudStack Row="true">
                                <MudText Typo="Typo.body1">Cache Status:</MudText>
                                @if (isCacheEnabled)
                                {
                                    <MudText Color="Color.Success">
                                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Small" Class="mr-1" />
                                        Enabled
                                    </MudText>
                                }
                                else
                                {
                                    <MudText Color="Color.Error">
                                        <MudIcon Icon="@Icons.Material.Filled.Cancel" Size="Size.Small" Class="mr-1" />
                                        Disabled
                                    </MudText>
                                }
                            </MudStack>
                        </MudPaper>

                        @if (cacheType != null)
                        {
                            <MudText Typo="Typo.subtitle2" Class="mt-3">Cache Type:</MudText>
                            <MudText Color="Color.Primary" Class="mt-1">@cacheType</MudText>
                        }

                        @if (cacheStats != null)
                        {
                            <MudGrid Class="mt-4" Spacing="2">
                                <MudItem xs="6">
                                    <MudPaper Elevation="0" Class="pa-3 d-flex flex-column align-center" Style="background-color: var(--mud-palette-background-grey)">
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">Cached Items</MudText>
                                        <MudText Typo="Typo.h6" Color="Color.Primary">@cacheStats.TotalItems</MudText>
                                    </MudPaper>
                                </MudItem>
                                
                                <MudItem xs="6">
                                    <MudPaper Elevation="0" Class="pa-3 d-flex flex-column align-center" Style="background-color: var(--mud-palette-background-grey)">
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">Hit Rate</MudText>
                                        <MudText Typo="Typo.h6" Color="Color.Primary">@cacheStats.HitRate.ToString("P1")</MudText>
                                    </MudPaper>
                                </MudItem>
                                
                                <MudItem xs="6">
                                    <MudPaper Elevation="0" Class="pa-3 d-flex flex-column align-center" Style="background-color: var(--mud-palette-background-grey)">
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">Memory Usage</MudText>
                                        <MudText Typo="Typo.h6" Color="Color.Primary">@FormatBytes(cacheStats.MemoryUsageBytes)</MudText>
                                    </MudPaper>
                                </MudItem>
                                
                                <MudItem xs="6">
                                    <MudPaper Elevation="0" Class="pa-3 d-flex flex-column align-center" Style="background-color: var(--mud-palette-background-grey)">
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">Avg Response</MudText>
                                        <MudText Typo="Typo.h6" Color="Color.Primary">@cacheStats.AvgResponseTime.ToString("0.##") ms</MudText>
                                    </MudPaper>
                                </MudItem>
                            </MudGrid>

                            <MudButton Variant="Variant.Text" Color="Color.Primary" 
                                     OnClick="NavigateToCachingSettings" 
                                     Class="mt-3 px-3" 
                                     EndIcon="@Icons.Material.Filled.ArrowForward">
                                <span class="me-2">Manage Caching</span>
                            </MudButton>
                        }
                        else
                        {
                            <MudAlert Severity="Severity.Info" Class="mt-3">
                                <MudText Typo="Typo.body2">
                                    Caching is not configured yet. Set up caching to improve response times and reduce API costs.
                                </MudText>
                                <div class="mt-3">
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                                             StartIcon="@Icons.Material.Filled.Settings" 
                                             IconColor="Color.Inherit"
                                             Class="px-3"
                                             OnClick="NavigateToCachingSettings">
                                        <span class="ms-2">Configure Caching</span>
                                    </MudButton>
                                </div>
                            </MudAlert>
                        }
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <MudDivider Class="my-4" />

    <!-- Quick Actions Section -->
    <MudText Typo="Typo.h5" Class="mb-3">Quick Actions</MudText>
    <MudGrid>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4" Elevation="2">
                <MudStack AlignItems="AlignItems.Center" Spacing="2">
                    <MudIcon Icon="@Icons.Material.Filled.ChatBubble" Color="Color.Primary" Size="Size.Large" />
                    <MudText Typo="Typo.h6">Try Chat</MudText>
                    <MudText Typo="Typo.body2" Align="Align.Center">Test your configuration with the built-in chat interface</MudText>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Class="px-3" OnClick="NavigateToChat">
                        <span>Open Chat</span>
                    </MudButton>
                </MudStack>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4" Elevation="2">
                <MudStack AlignItems="AlignItems.Center" Spacing="2">
                    <MudIcon Icon="@Icons.Material.Filled.Add" Color="Color.Secondary" Size="Size.Large" />
                    <MudText Typo="Typo.h6">Add Provider</MudText>
                    <MudText Typo="Typo.body2" Align="Align.Center">Configure a new LLM provider to use with Conduit</MudText>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" FullWidth="true" Class="px-3" OnClick="NavigateToConfiguration">
                        <span>Configure</span>
                    </MudButton>
                </MudStack>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4" Elevation="2">
                <MudStack AlignItems="AlignItems.Center" Spacing="2">
                    <MudIcon Icon="@Icons.Material.Filled.Router" Color="Color.Tertiary" Size="Size.Large" />
                    <MudText Typo="Typo.h6">Setup Routing</MudText>
                    <MudText Typo="Typo.body2" Align="Align.Center">Configure rules to route requests to the right provider</MudText>
                    <MudButton Variant="Variant.Filled" Color="Color.Tertiary" FullWidth="true" Class="px-3" OnClick="NavigateToRoutingSettings">
                        <span>Routing</span>
                    </MudButton>
                </MudStack>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4" Elevation="2">
                <MudStack AlignItems="AlignItems.Center" Spacing="2">
                    <MudIcon Icon="@Icons.Material.Filled.Key" Color="Color.Info" Size="Size.Large" />
                    <MudText Typo="Typo.h6">Virtual Keys</MudText>
                    <MudText Typo="Typo.body2" Align="Align.Center">Manage virtual API keys for application access</MudText>
                    <MudButton Variant="Variant.Filled" Color="Color.Info" FullWidth="true" Class="px-3" OnClick="@(() => NavigationManager.NavigateTo("/virtualkeys"))">
                        <span>Keys</span>
                    </MudButton>
                </MudStack>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private bool IsMasterKeySet => !string.IsNullOrEmpty(Configuration["CONDUIT_MASTER_KEY"]);
    
    private List<ProviderCredential> providers = new();
    private Dictionary<string, ProviderStatus> providerStatuses = new();
    private bool isLoading = true;
    private bool isCheckingStatus = false;
    private int providerCount = 0;
    
    // Routing data
    private RouterConfig? routerConfig = null;
    private bool isRouterEnabled = false;
    private bool isLoadingRouting = true;
    private bool isCheckingRoutingStatus = false;
    
    // Caching data
    private CacheStats? cacheStats = null;
    private bool isCacheEnabled = false;
    private string? cacheType = null;
    private bool isLoadingCaching = true;
    private bool isCheckingCachingStatus = false;
    
    // This will store our event handler for unregistering it later
    private EventHandler<LocationChangedEventArgs>? locationChangedHandler;
    
    protected override async Task OnInitializedAsync()
    {
        // Register the event handler
        locationChangedHandler = async (sender, e) => await OnLocationChanged(sender, e);
        NavigationManager.LocationChanged += locationChangedHandler;
        
        await LoadDataAsync();
    }
    
    private async Task OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (NavigationManager.Uri.EndsWith("/")) // Only reload on home page
        {
            await LoadDataAsync();
        }
    }
    
    private async Task LoadDataAsync()
    {
        try
        {
            isLoading = true;
            isLoadingRouting = true;
            isLoadingCaching = true;
            StateHasChanged();
            
            // Load providers
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            providers = await dbContext.ProviderCredentials.ToListAsync();
            providerCount = providers.Count;
            
            // Initial checks
            await CheckAllProvidersStatus();
            await CheckRoutingStatus();
            await CheckCachingStatus();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task CheckAllProvidersStatus()
    {
        if (isCheckingStatus)
            return;
            
        try
        {
            isCheckingStatus = true;
            StateHasChanged();
            
            // Clear old statuses before getting new ones
            providerStatuses.Clear();
            providerStatuses = await ProviderStatusService.CheckAllProvidersStatusAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error checking provider status: {ex.Message}");
        }
        finally
        {
            isCheckingStatus = false;
            StateHasChanged();
        }
    }
    
    private async Task CheckRoutingStatus()
    {
        if (isCheckingRoutingStatus)
            return;
            
        try
        {
            isCheckingRoutingStatus = true;
            StateHasChanged();
            
            var routerStatus = await RouterService.GetRouterStatusAsync();
            routerConfig = routerStatus.Config;
            isRouterEnabled = routerStatus.IsEnabled;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error checking routing status: {ex.Message}");
            routerConfig = null;
        }
        finally
        {
            isCheckingRoutingStatus = false;
            isLoadingRouting = false;
            StateHasChanged();
        }
    }
    
    private async Task CheckCachingStatus()
    {
        if (isCheckingCachingStatus)
            return;
            
        try
        {
            isCheckingCachingStatus = true;
            StateHasChanged();
            
            // In a real implementation, this would fetch from the cache service
            // For now we simulate cache status
            await Task.Delay(200); // Simulate network delay
            
            var cacheStatus = await CacheStatusService.GetCacheStatusAsync();
            cacheStats = new CacheStats
            {
                TotalItems = cacheStatus.TotalItems,
                HitRate = cacheStatus.HitRate,
                MemoryUsageBytes = cacheStatus.MemoryUsageBytes,
                AvgResponseTime = cacheStatus.AvgResponseTime
            };
            isCacheEnabled = cacheStatus.IsEnabled;
            cacheType = cacheStatus.CacheType;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error checking cache status: {ex.Message}");
            cacheStats = null;
        }
        finally
        {
            isCheckingCachingStatus = false;
            isLoadingCaching = false;
            StateHasChanged();
        }
    }

    private void NavigateToConfiguration()
    {
        NavigationManager.NavigateTo("/configuration");
    }

    private void NavigateToChat()
    {
        NavigationManager.NavigateTo("/chat");
    }
    
    private void NavigateToRoutingSettings()
    {
        NavigationManager.NavigateTo("/routing-settings");
    }
    
    private void NavigateToCachingSettings()
    {
        NavigationManager.NavigateTo("/caching-settings");
    }
    
    private string GetStrategyDisplayName(string strategy)
    {
        return strategy?.ToLower() switch
        {
            "simple" => "Simple",
            "random" => "Random",
            "round-robin" => "Round Robin",
            _ => strategy ?? "Unknown"
        };
    }
    
    private string FormatBytes(long bytes)
    {
        string[] suffix = { "B", "KB", "MB", "GB", "TB" };
        int i;
        double dblBytes = bytes;
        
        for (i = 0; i < suffix.Length && bytes >= 1024; i++, bytes /= 1024)
        {
            dblBytes = bytes / 1024.0;
        }
        
        return $"{dblBytes:0.#} {suffix[i]}";
    }
    
    private class CacheStats
    {
        public int TotalItems { get; set; }
        public double HitRate { get; set; }
        public long MemoryUsageBytes { get; set; }
        public double AvgResponseTime { get; set; }
    }
    
    public void Dispose()
    {
        // Unregister the event handler when component is disposed
        if (locationChangedHandler != null)
        {
            NavigationManager.LocationChanged -= locationChangedHandler;
        }
    }
}
