@page "/system-info"
@using Microsoft.EntityFrameworkCore
@using ConduitLLM.WebUI.Data
@using System.IO
@using ConduitLLM.Configuration
@using ConduitLLM.Configuration.Entities
@inject IDbContextFactory<ConduitLLM.Configuration.ConfigurationDbContext> ConfigDbContextFactory
@inject IProviderCredentialService ProviderCredentialService
@inject IModelProviderMappingService ModelMappingService

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h3" Class="mb-4">System Information</MudText>

    <MudGrid>
        <!-- Database Information Card -->
        <MudItem xs="12" md="6">
            <MudCard Elevation="3" Class="mb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">Database Information</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh" 
                                      Color="Color.Primary" 
                                      Size="Size.Small" 
                                      OnClick="RefreshDatabaseInfo"
                                      aria-label="Refresh database information" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    @if (IsLoading)
                    {
                        <div class="d-flex justify-center">
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                        </div>
                    }
                    else
                    {
                        <MudGrid Class="mb-4">
                            <MudItem xs="12" md="6">
                                <MudPaper Elevation="0" Class="pa-2">
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">Provider</MudText>
                                    <MudText Typo="Typo.body1" Style="font-weight: 500;">
                                        <MudIcon Icon="@(DatabaseProvider == "SQLite" 
                                                    ? Icons.Material.Filled.Storage 
                                                    : Icons.Material.Filled.Cloud)" 
                                                Size="Size.Small" 
                                                Class="mr-1" />
                                        @DatabaseProvider
                                    </MudText>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudPaper Elevation="0" Class="pa-2">
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">Connection</MudText>
                                    <MudText Typo="Typo.body1" Style="font-weight: 500;" 
                                            Class="text-truncate"
                                            title="@ConnectionStringMasked">
                                        @ConnectionStringMasked
                                    </MudText>
                                </MudPaper>
                            </MudItem>
                        </MudGrid>

                        <MudGrid>
                            <MudItem xs="12" md="4">
                                <MudPaper Elevation="0" Class="pa-2">
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">Tables</MudText>
                                    <MudText Typo="Typo.body1" Style="font-weight: 500;">@TableCount</MudText>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="12" md="4">
                                <MudPaper Elevation="0" Class="pa-2">
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">Size</MudText>
                                    <MudText Typo="Typo.body1" Style="font-weight: 500;">@DatabaseSize</MudText>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="12" md="4">
                                <MudPaper Elevation="0" Class="pa-2">
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">Location</MudText>
                                    <MudText Typo="Typo.body1" Style="font-weight: 500;" 
                                            Class="text-truncate"
                                            title="@DatabaseLocation">
                                        @DatabaseLocation
                                    </MudText>
                                </MudPaper>
                            </MudItem>
                        </MudGrid>

                        <MudDivider Class="my-4" />

                        <MudText Typo="Typo.h6" Class="mb-3">Records Count</MudText>
                        <MudGrid>
                            <MudItem xs="12" md="4">
                                <MudPaper Elevation="0" Class="d-flex flex-column align-center pa-2">
                                    <MudText Typo="Typo.h4" Color="Color.Primary">@VirtualKeyCount</MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">Virtual Keys</MudText>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="12" md="4">
                                <MudPaper Elevation="0" Class="d-flex flex-column align-center pa-2">
                                    <MudText Typo="Typo.h4" Color="Color.Primary">@RequestCount</MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">Requests</MudText>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="12" md="4">
                                <MudPaper Elevation="0" Class="d-flex flex-column align-center pa-2">
                                    <MudText Typo="Typo.h4" Color="Color.Primary">@SettingsCount</MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">Global Settings</MudText>
                                </MudPaper>
                            </MudItem>
                        </MudGrid>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- LLM Configuration Card -->
        <MudItem xs="12" md="6">
            <MudCard Elevation="3" Class="mb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">LLM Configuration</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh" 
                                      Color="Color.Primary" 
                                      Size="Size.Small" 
                                      OnClick="RefreshLlmInfo"
                                      aria-label="Refresh LLM information" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    @if (IsLoading)
                    {
                        <div class="d-flex justify-center">
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                        </div>
                    }
                    else
                    {
                        <MudGrid Class="mb-4">
                            <MudItem xs="12" md="6">
                                <MudPaper Elevation="0" Class="d-flex flex-column align-center pa-4">
                                    <MudText Typo="Typo.h3" Color="Color.Primary">@ProviderCount</MudText>
                                    <MudText Typo="Typo.subtitle1" Color="Color.Secondary">Providers</MudText>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudPaper Elevation="0" Class="d-flex flex-column align-center pa-4">
                                    <MudText Typo="Typo.h3" Color="Color.Primary">@ModelCount</MudText>
                                    <MudText Typo="Typo.subtitle1" Color="Color.Secondary">Model Mappings</MudText>
                                </MudPaper>
                            </MudItem>
                        </MudGrid>

                        <MudDivider Class="my-4" />

                        @if (Providers.Any())
                        {
                            <MudText Typo="Typo.h6" Class="mb-2">Provider Credentials</MudText>
                            <MudPaper Elevation="0" Class="mb-4">
                                @foreach (var provider in Providers)
                                {
                                    <MudPaper Class="d-flex align-center justify-space-between pa-2 mb-1" Elevation="0" Outlined="true">
                                        <div class="d-flex align-center">
                                            <MudIcon Icon="@Icons.Material.Filled.Api" Class="mr-2" Color="Color.Primary" />
                                            <MudText>@provider</MudText>
                                        </div>
                                        <MudText Color="Color.Primary" Style="font-size: 0.8rem;">Provider</MudText>
                                    </MudPaper>
                                }
                            </MudPaper>
                        }
                        else
                        {
                            <MudAlert Severity="Severity.Info" Class="mb-4">
                                No providers configured yet.
                            </MudAlert>
                        }

                        @if (Models.Any())
                        {
                            <MudText Typo="Typo.h6" Class="mb-2">Model Mappings</MudText>
                            <MudPaper Elevation="0">
                                @foreach (var model in Models)
                                {
                                    <MudPaper Class="d-flex align-center justify-space-between pa-2 mb-1" Elevation="0" Outlined="true">
                                        <div class="d-flex align-center">
                                            <MudIcon Icon="@Icons.Material.Filled.Psychology" Class="mr-2" Color="Color.Secondary" />
                                            <MudText>@model</MudText>
                                        </div>
                                        <MudText Color="Color.Secondary" Style="font-size: 0.8rem;">Mapping</MudText>
                                    </MudPaper>
                                }
                            </MudPaper>
                        }
                        else
                        {
                            <MudAlert Severity="Severity.Info">
                                No model mappings configured yet.
                            </MudAlert>
                        }
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Tools and Actions -->
    <MudPaper Elevation="0" Class="d-flex justify-center mt-4">
        <MudButton Variant="Variant.Filled"
                  Color="Color.Secondary"
                  StartIcon="@Icons.Material.Filled.DataObject"
                  Href="/db-status">
            View Database Status
        </MudButton>
    </MudPaper>
</MudContainer>

@code {
    private bool IsLoading = true;
    private string DatabaseProvider = "Unknown";
    private string ConnectionStringMasked = "";
    private string DatabaseLocation = "";
    private string DatabaseSize = "Unknown";
    private int TableCount = 0;
    private int VirtualKeyCount = 0;
    private int RequestCount = 0;
    private int SettingsCount = 0;
    private int ProviderCount = 0;
    private int ModelCount = 0;
    private List<string> Providers = new();
    private List<string> Models = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshAllData();
    }

    private async Task RefreshAllData()
    {
        IsLoading = true;
        await Task.WhenAll(
            RefreshDatabaseInfo(),
            RefreshLlmInfo()
        );
        IsLoading = false;
    }

    private async Task RefreshDatabaseInfo()
    {
        try
        {
            // Use the correct context factory
            using var context = await ConfigDbContextFactory.CreateDbContextAsync(); 
            
            // Get database provider info
            var connectionType = context.Database.ProviderName;
            DatabaseProvider = connectionType?.Contains("Sqlite", StringComparison.OrdinalIgnoreCase) == true 
                ? "SQLite" 
                : connectionType?.Contains("Npgsql", StringComparison.OrdinalIgnoreCase) == true
                    ? "PostgreSQL"
                    : connectionType ?? "Unknown";

            // Mask connection string for security
            var connectionString = context.Database.GetConnectionString();
            if (!string.IsNullOrEmpty(connectionString))
            {
                if (connectionString.Contains("Data Source="))
                {
                    // For SQLite
                    var path = connectionString.Replace("Data Source=", "").Trim();
                    DatabaseLocation = path;
                    ConnectionStringMasked = $"Data Source={Path.GetFileName(path)}";
                    
                    // Get database file size if available
                    if (File.Exists(path))
                    {
                        var fileInfo = new FileInfo(path);
                        DatabaseSize = FormatFileSize(fileInfo.Length);
                    }
                }
                else if (connectionString.Contains("Host="))
                {
                    // For PostgreSQL
                    ConnectionStringMasked = MaskConnectionString(connectionString);
                    DatabaseLocation = ExtractHostFromConnectionString(connectionString);
                    
                    // Can't determine database size directly for PostgreSQL
                    DatabaseSize = "Remote DB";
                }
                else
                {
                    ConnectionStringMasked = "Configured";
                    DatabaseLocation = "Unknown";
                }
            }
            else
            {
                ConnectionStringMasked = "Not configured";
            }

            // Count records in main tables
            VirtualKeyCount = await context.VirtualKeys.CountAsync();
            RequestCount = await context.RequestLogs.CountAsync();
            SettingsCount = await context.GlobalSettings.CountAsync();

            // Count tables (approximation for SQLite)
            if (DatabaseProvider == "SQLite")
            {
                var tables = await context.Database.SqlQuery<string>($"SELECT name FROM sqlite_master WHERE type='table'").ToListAsync();
                TableCount = tables.Count;
            }
            else if (DatabaseProvider == "PostgreSQL")
            {
                // For PostgreSQL, schema information would require a different query
                TableCount = 13; // Approximate count based on the known schema
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting database info: {ex.Message}");
            // Set default values on error
            DatabaseProvider = "Error";
            ConnectionStringMasked = "Error retrieving";
            TableCount = 0;
        }

        StateHasChanged();
    }

    private async Task RefreshLlmInfo()
    {
        try
        {
            // Get provider info
            var providers = await ProviderCredentialService.GetAllCredentialsAsync();
            ProviderCount = providers.Count;
            Providers = providers.Select(p => p.ProviderName).ToList();

            // Get model mappings
            var modelMappings = await ModelMappingService.GetAllMappingsAsync();
            ModelCount = modelMappings.Count;
            Models = modelMappings.Select(m => $"{m.ModelAlias} → {m.ProviderName}/{m.ProviderModelId}").ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting LLM info: {ex.Message}");
            ProviderCount = 0;
            ModelCount = 0;
        }

        StateHasChanged();
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len /= 1024;
        }

        return $"{len:0.##} {sizes[order]}";
    }

    private string MaskConnectionString(string connectionString)
    {
        // Replace password and sensitive info with ****
        if (string.IsNullOrEmpty(connectionString)) return string.Empty;
        
        var parts = connectionString.Split(';');
        var maskedParts = new List<string>();
        
        foreach (var part in parts)
        {
            if (part.StartsWith("Password=", StringComparison.OrdinalIgnoreCase) || 
                part.StartsWith("Pwd=", StringComparison.OrdinalIgnoreCase))
            {
                maskedParts.Add(part.Split('=')[0] + "=****");
            }
            else
            {
                maskedParts.Add(part);
            }
        }
        
        return string.Join(";", maskedParts);
    }

    private string ExtractHostFromConnectionString(string connectionString)
    {
        // Extract host from PostgreSQL connection string
        if (string.IsNullOrEmpty(connectionString)) return string.Empty;
        
        var parts = connectionString.Split(';');
        foreach (var part in parts)
        {
            if (part.StartsWith("Host=", StringComparison.OrdinalIgnoreCase) || 
                part.StartsWith("Server=", StringComparison.OrdinalIgnoreCase))
            {
                return part.Split('=')[1];
            }
        }
        
        return "Unknown host";
    }
}
