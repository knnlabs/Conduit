@page "/system-info"
@using Microsoft.EntityFrameworkCore
@using ConduitLLM.WebUI.Data
@using System.IO
@using ConduitLLM.Configuration
@using ConduitLLM.Configuration.Entities
@inject IDbContextFactory<ConduitLLM.Configuration.ConfigurationDbContext> ConfigDbContextFactory
@inject IProviderCredentialService ProviderCredentialService
@inject IModelProviderMappingService ModelMappingService

<div class="container-fluid mt-4">
    <h3 class="mb-4">System Information</h3>

    <div class="row">
        <!-- Database Information Card -->
        <div class="col-12 col-md-6">
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Database Information</h5>
                    <button class="btn btn-sm btn-primary" @onclick="RefreshDatabaseInfo" aria-label="Refresh database information">
                        <i class="fa fa-refresh"></i>
                    </button>
                </div>
                <div class="card-body">
                    @if (IsLoading)
                    {
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row mb-4">
                            <div class="col-12 col-md-6">
                                <div class="p-2">
                                    <small class="text-secondary">Provider</small>
                                    <p class="fw-500">
                                        <i class="fa @(DatabaseProvider == "SQLite" ? "fa-database" : "fa-cloud") me-1"></i>
                                        @DatabaseProvider
                                    </p>
                                </div>
                            </div>
                            <div class="col-12 col-md-6">
                                <div class="p-2">
                                    <small class="text-secondary">Connection</small>
                                    <p class="fw-500 text-truncate" title="@ConnectionStringMasked">
                                        @ConnectionStringMasked
                                    </p>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-12 col-md-4">
                                <div class="p-2">
                                    <small class="text-secondary">Tables</small>
                                    <p class="fw-500">@TableCount</p>
                                </div>
                            </div>
                            <div class="col-12 col-md-4">
                                <div class="p-2">
                                    <small class="text-secondary">Size</small>
                                    <p class="fw-500">@DatabaseSize</p>
                                </div>
                            </div>
                            <div class="col-12 col-md-4">
                                <div class="p-2">
                                    <small class="text-secondary">Location</small>
                                    <p class="fw-500 text-truncate" title="@DatabaseLocation">
                                        @DatabaseLocation
                                    </p>
                                </div>
                            </div>
                        </div>

                        <hr class="my-4" />

                        <h6 class="mb-3">Records Count</h6>
                        <div class="row">
                            <div class="col-12 col-md-4">
                                <div class="d-flex flex-column align-items-center p-2">
                                    <h4 class="text-primary">@VirtualKeyCount</h4>
                                    <small class="text-secondary">Virtual Keys</small>
                                </div>
                            </div>
                            <div class="col-12 col-md-4">
                                <div class="d-flex flex-column align-items-center p-2">
                                    <h4 class="text-primary">@RequestCount</h4>
                                    <small class="text-secondary">Requests</small>
                                </div>
                            </div>
                            <div class="col-12 col-md-4">
                                <div class="d-flex flex-column align-items-center p-2">
                                    <h4 class="text-primary">@SettingsCount</h4>
                                    <small class="text-secondary">Global Settings</small>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- LLM Configuration Card -->
        <div class="col-12 col-md-6">
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">LLM Configuration</h5>
                    <button class="btn btn-sm btn-primary" @onclick="RefreshLlmInfo" aria-label="Refresh LLM information">
                        <i class="fa fa-refresh"></i>
                    </button>
                </div>
                <div class="card-body">
                    @if (IsLoading)
                    {
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row mb-4">
                            <div class="col-12 col-md-6">
                                <div class="d-flex flex-column align-items-center p-4">
                                    <h3 class="text-primary">@ProviderCount</h3>
                                    <span class="text-secondary">Providers</span>
                                </div>
                            </div>
                            <div class="col-12 col-md-6">
                                <div class="d-flex flex-column align-items-center p-4">
                                    <h3 class="text-primary">@ModelCount</h3>
                                    <span class="text-secondary">Model Mappings</span>
                                </div>
                            </div>
                        </div>

                        <hr class="my-4" />

                        @if (Providers.Any())
                        {
                            <h6 class="mb-2">Provider Credentials</h6>
                            <div class="mb-4">
                                @foreach (var provider in Providers)
                                {
                                    <div class="d-flex align-items-center justify-content-between p-2 mb-1 border">
                                        <div class="d-flex align-items-center">
                                            <i class="fa fa-cogs me-2 text-primary"></i>
                                            <span>@provider</span>
                                        </div>
                                        <small class="text-primary" style="font-size: 0.8rem;">Provider</small>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info mb-4">
                                No providers configured yet.
                            </div>
                        }

                        @if (Models.Any())
                        {
                            <h6 class="mb-2">Model Mappings</h6>
                            <div>
                                @foreach (var model in Models)
                                {
                                    <div class="d-flex align-items-center justify-content-between p-2 mb-1 border">
                                        <div class="d-flex align-items-center">
                                            <i class="fa fa-sitemap me-2 text-secondary"></i>
                                            <span>@model</span>
                                        </div>
                                        <small class="text-secondary" style="font-size: 0.8rem;">Mapping</small>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info">
                                No model mappings configured yet.
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>

</div>

@code {
    private bool IsLoading = true;
    private string DatabaseProvider = "Unknown";
    private string ConnectionStringMasked = "";
    private string DatabaseLocation = "";
    private string DatabaseSize = "Unknown";
    private int TableCount = 0;
    private int VirtualKeyCount = 0;
    private int RequestCount = 0;
    private int SettingsCount = 0;
    private int ProviderCount = 0;
    private int ModelCount = 0;
    private List<string> Providers = new();
    private List<string> Models = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshAllData();
    }

    private async Task RefreshAllData()
    {
        IsLoading = true;
        await Task.WhenAll(
            RefreshDatabaseInfo(),
            RefreshLlmInfo()
        );
        IsLoading = false;
    }

    private async Task RefreshDatabaseInfo()
    {
        try
        {
            // Use the correct context factory
            using var context = await ConfigDbContextFactory.CreateDbContextAsync(); 
            
            // Get database provider info
            var connectionType = context.Database.ProviderName;
            DatabaseProvider = connectionType?.Contains("Sqlite", StringComparison.OrdinalIgnoreCase) == true 
                ? "SQLite" 
                : connectionType?.Contains("Npgsql", StringComparison.OrdinalIgnoreCase) == true
                    ? "PostgreSQL"
                    : connectionType ?? "Unknown";

            // Mask connection string for security
            var connectionString = context.Database.GetConnectionString();
            if (!string.IsNullOrEmpty(connectionString))
            {
                if (connectionString.Contains("Data Source="))
                {
                    // For SQLite
                    var path = connectionString.Replace("Data Source=", "").Trim();
                    DatabaseLocation = path;
                    ConnectionStringMasked = $"Data Source={Path.GetFileName(path)}";
                    
                    // Get database file size if available
                    if (File.Exists(path))
                    {
                        var fileInfo = new FileInfo(path);
                        DatabaseSize = FormatFileSize(fileInfo.Length);
                    }
                }
                else if (connectionString.Contains("Host="))
                {
                    // For PostgreSQL
                    ConnectionStringMasked = MaskConnectionString(connectionString);
                    DatabaseLocation = ExtractHostFromConnectionString(connectionString);
                    
                    // Can't determine database size directly for PostgreSQL
                    DatabaseSize = "Remote DB";
                }
                else
                {
                    ConnectionStringMasked = "Configured";
                    DatabaseLocation = "Unknown";
                }
            }
            else
            {
                ConnectionStringMasked = "Not configured";
            }

            // Count records in main tables
            VirtualKeyCount = await context.VirtualKeys.CountAsync();
            RequestCount = await context.RequestLogs.CountAsync();
            SettingsCount = await context.GlobalSettings.CountAsync();

            // Count tables (approximation for SQLite)
            if (DatabaseProvider == "SQLite")
            {
                var tables = await context.Database.SqlQuery<string>($"SELECT name FROM sqlite_master WHERE type='table'").ToListAsync();
                TableCount = tables.Count;
            }
            else if (DatabaseProvider == "PostgreSQL")
            {
                // For PostgreSQL, schema information would require a different query
                TableCount = 13; // Approximate count based on the known schema
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting database info: {ex.Message}");
            // Set default values on error
            DatabaseProvider = "Error";
            ConnectionStringMasked = "Error retrieving";
            TableCount = 0;
        }

        StateHasChanged();
    }

    private async Task RefreshLlmInfo()
    {
        try
        {
            // Get provider info
            var providers = await ProviderCredentialService.GetAllCredentialsAsync();
            ProviderCount = providers.Count;
            Providers = providers.Select(p => p.ProviderName).ToList();

            // Get model mappings
            var modelMappings = await ModelMappingService.GetAllMappingsAsync();
            ModelCount = modelMappings.Count;
            Models = modelMappings.Select(m => $"{m.ModelAlias} → {m.ProviderName}/{m.ProviderModelId}").ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting LLM info: {ex.Message}");
            ProviderCount = 0;
            ModelCount = 0;
        }

        StateHasChanged();
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len /= 1024;
        }

        return $"{len:0.##} {sizes[order]}";
    }

    private string MaskConnectionString(string connectionString)
    {
        // Replace password and sensitive info with ****
        if (string.IsNullOrEmpty(connectionString)) return string.Empty;
        
        var parts = connectionString.Split(';');
        var maskedParts = new List<string>();
        
        foreach (var part in parts)
        {
            if (part.StartsWith("Password=", StringComparison.OrdinalIgnoreCase) || 
                part.StartsWith("Pwd=", StringComparison.OrdinalIgnoreCase))
            {
                maskedParts.Add(part.Split('=')[0] + "=****");
            }
            else
            {
                maskedParts.Add(part);
            }
        }
        
        return string.Join(";", maskedParts);
    }

    private string ExtractHostFromConnectionString(string connectionString)
    {
        // Extract host from PostgreSQL connection string
        if (string.IsNullOrEmpty(connectionString)) return string.Empty;
        
        var parts = connectionString.Split(';');
        foreach (var part in parts)
        {
            if (part.StartsWith("Host=", StringComparison.OrdinalIgnoreCase) || 
                part.StartsWith("Server=", StringComparison.OrdinalIgnoreCase))
            {
                return part.Split('=')[1];
            }
        }
        
        return "Unknown host";
    }
}