@page "/system-info"
@using System.IO
@using ConduitLLM.Configuration
@using ConduitLLM.Configuration.Entities
@using ConduitLLM.WebUI.Interfaces
@using ConduitLLM.WebUI.Components.Shared
@inject IAdminApiClient AdminApiClient
@inject ILogger<SystemInfo> Logger
@rendermode InteractiveServer

<PageTitle>System Information - ConduitLLM</PageTitle>

<div class="container container-xxl">
    <PageHeader Title="System Information" 
                Description="Monitor database status, LLM configuration, and system health"
                Icon="fa-info-circle" />

    <div class="row">
        <!-- Database Information Card -->
        <div class="col-12 col-md-6">
            <div class="card modern-card mb-4">
                <div class="card-header modern-card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Database Information</h5>
                    <button class="btn btn-sm btn-primary modern-btn modern-btn-primary" @onclick="RefreshDatabaseInfo" @onclick:preventDefault="true" aria-label="Refresh database information">
                        @if (IsLoadingDatabase)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="ms-1">Refreshing...</span>
                        }
                        else
                        {
                            <i class="fas fa-sync-alt"></i>
                            <span class="ms-1">Refresh</span>
                        }
                    </button>
                </div>
                <div class="card-body modern-card-body">
                    @if (IsLoading || IsLoadingDatabase)
                    {
                        <LoadingSpinner Message="Loading database information..." />
                    }
                    else
                    {
                        <div class="row mb-4">
                            <div class="col-12 col-md-6">
                                <div class="p-2">
                                    <small class="text-secondary">Provider</small>
                                    <p class="fw-500">
                                        <i class="fa @(DatabaseProvider == "SQLite" ? "fa-database" : "fa-cloud") me-1"></i>
                                        @DatabaseProvider
                                    </p>
                                </div>
                            </div>
                            <div class="col-12 col-md-6">
                                <div class="p-2">
                                    <small class="text-secondary">Connection</small>
                                    <p class="fw-500 text-truncate" title="@ConnectionStringMasked">
                                        @ConnectionStringMasked
                                    </p>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-12 col-md-4">
                                <div class="p-2">
                                    <small class="text-secondary">Tables</small>
                                    <p class="fw-500">@TableCount</p>
                                </div>
                            </div>
                            <div class="col-12 col-md-4">
                                <div class="p-2">
                                    <small class="text-secondary">Size</small>
                                    <p class="fw-500">@DatabaseSize</p>
                                </div>
                            </div>
                            <div class="col-12 col-md-4">
                                <div class="p-2">
                                    <small class="text-secondary">Location</small>
                                    <p class="fw-500 text-truncate" title="@DatabaseLocation">
                                        @DatabaseLocation
                                    </p>
                                </div>
                            </div>
                        </div>

                        <hr class="my-4" />

                        <h6 class="mb-3">Records Count</h6>
                        <div class="row">
                            <div class="col-12 col-md-4">
                                <div class="d-flex flex-column align-items-center p-2">
                                    <h4 class="text-primary">@VirtualKeyCount</h4>
                                    <small class="text-secondary">Virtual Keys</small>
                                </div>
                            </div>
                            <div class="col-12 col-md-4">
                                <div class="d-flex flex-column align-items-center p-2">
                                    <h4 class="text-primary">@RequestCount</h4>
                                    <small class="text-secondary">Requests</small>
                                </div>
                            </div>
                            <div class="col-12 col-md-4">
                                <div class="d-flex flex-column align-items-center p-2">
                                    <h4 class="text-primary">@SettingsCount</h4>
                                    <small class="text-secondary">Global Settings</small>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- LLM Configuration Card -->
        <div class="col-12 col-md-6">
            <div class="card modern-card mb-4">
                <div class="card-header modern-card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">LLM Configuration</h5>
                    <button class="btn btn-sm btn-primary modern-btn modern-btn-primary" @onclick="RefreshLlmInfo" aria-label="Refresh LLM information">
                        @if (IsLoadingLlm)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        }
                        else
                        {
                            <i class="fas fa-sync-alt"></i>
                        }
                    </button>
                </div>
                <div class="card-body modern-card-body">
                    @if (IsLoading || IsLoadingLlm)
                    {
                        <LoadingSpinner Message="Loading LLM configuration..." />
                    }
                    else
                    {
                        <div class="row mb-4">
                            <div class="col-12 col-md-6">
                                <div class="d-flex flex-column align-items-center p-4">
                                    <h3 class="text-primary">@ProviderCount</h3>
                                    <span class="text-secondary">Providers</span>
                                </div>
                            </div>
                            <div class="col-12 col-md-6">
                                <div class="d-flex flex-column align-items-center p-4">
                                    <h3 class="text-primary">@ModelCount</h3>
                                    <span class="text-secondary">Model Mappings</span>
                                </div>
                            </div>
                        </div>

                        <hr class="my-4" />

                        @if (Providers.Any())
                        {
                            <h6 class="mb-2">Provider Credentials</h6>
                            <div class="mb-4">
                                @foreach (var provider in Providers)
                                {
                                    <div class="d-flex align-items-center justify-content-between p-2 mb-1 rounded modern-info-card">
                                        <div class="d-flex align-items-center">
                                            <i class="fa fa-cogs me-2 text-primary"></i>
                                            <span>@provider</span>
                                        </div>
                                        <small class="text-primary" style="font-size: 0.8rem;">Provider</small>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <EmptyState Title="No providers configured yet"
                                        Description="Set up provider credentials to start using AI models"
                                        Icon="fa-cogs" />
                        }

                        @if (Models.Any())
                        {
                            <h6 class="mb-2">Model Mappings</h6>
                            <div>
                                @foreach (var model in Models)
                                {
                                    <div class="d-flex align-items-center justify-content-between p-2 mb-1 rounded modern-info-card">
                                        <div class="d-flex align-items-center">
                                            <i class="fa fa-sitemap me-2 text-secondary"></i>
                                            <span>@model</span>
                                        </div>
                                        <small class="text-secondary" style="font-size: 0.8rem;">Mapping</small>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <EmptyState Title="No model mappings configured yet"
                                        Description="Configure model mappings to route requests to providers"
                                        Icon="fa-sitemap" />
                        }
                    }
                </div>
            </div>
        </div>
    </div>


</div>

@code {
    private bool IsLoading = true;
    private bool IsLoadingDatabase = false;
    private bool IsLoadingLlm = false;
    private string DatabaseProvider = "Unknown";
    private string ConnectionStringMasked = "";
    private string DatabaseLocation = "";
    private string DatabaseSize = "Unknown";
    private int TableCount = 0;
    private int VirtualKeyCount = 0;
    private int RequestCount = 0;
    private int SettingsCount = 0;
    private int ProviderCount = 0;
    private int ModelCount = 0;
    private List<string> Providers = new();
    private List<string> Models = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshAllData();
    }

    private async Task RefreshAllData()
    {
        IsLoading = true;
        await Task.WhenAll(
            RefreshDatabaseInfo(),
            RefreshLlmInfo()
        );
        IsLoading = false;
    }

    private async Task RefreshDatabaseInfo()
    {
        Logger.LogInformation("RefreshDatabaseInfo method called");
        Console.WriteLine("RefreshDatabaseInfo method called - Console");
        try
        {
            IsLoadingDatabase = true;
            StateHasChanged();
            Logger.LogInformation("Starting database refresh...");
            
            // Get system information from Admin API
            var systemInfo = await AdminApiClient.GetSystemInfoAsync();
            
            // Process the system information to display database details
            if (systemInfo is System.Text.Json.JsonElement jsonElement)
            {
                // Extract database information
                if (jsonElement.TryGetProperty("database", out var dbInfo))
                {
                    // Get database provider info
                    if (dbInfo.TryGetProperty("provider", out var providerProp))
                    {
                        string? provider = providerProp.GetString();
                        DatabaseProvider = provider?.Contains("Sqlite", StringComparison.OrdinalIgnoreCase) == true 
                            ? "SQLite" 
                            : provider?.Contains("Postgres", StringComparison.OrdinalIgnoreCase) == true
                                ? "PostgreSQL"
                                : provider ?? "Unknown";
                    }
                    
                    // Get connection string (masked)
                    if (dbInfo.TryGetProperty("connectionString", out var connStringProp))
                    {
                        string? connectionString = connStringProp.GetString();
                        if (!string.IsNullOrEmpty(connectionString))
                        {
                            ConnectionStringMasked = connectionString;
                        }
                        else
                        {
                            ConnectionStringMasked = "Not configured";
                        }
                    }
                    
                    // Get database location
                    if (dbInfo.TryGetProperty("location", out var locationProp))
                    {
                        DatabaseLocation = locationProp.GetString() ?? "Unknown";
                    }
                    
                    // Get database size
                    if (dbInfo.TryGetProperty("size", out var sizeProp))
                    {
                        DatabaseSize = sizeProp.GetString() ?? "Unknown";
                    }
                    
                    // Get table count
                    if (dbInfo.TryGetProperty("tableCount", out var tableCountProp) &&
                        tableCountProp.TryGetInt32(out int count))
                    {
                        TableCount = count;
                    }
                    else
                    {
                        TableCount = 13; // Default approximate table count for Conduit
                    }
                }
                
                // Extract record counts
                if (jsonElement.TryGetProperty("recordCounts", out var recordCounts))
                {
                    if (recordCounts.TryGetProperty("virtualKeys", out var vkCountProp) &&
                        vkCountProp.TryGetInt32(out int vkCount))
                    {
                        VirtualKeyCount = vkCount;
                    }
                    
                    if (recordCounts.TryGetProperty("requests", out var reqCountProp) &&
                        reqCountProp.TryGetInt32(out int reqCount))
                    {
                        RequestCount = reqCount;
                    }
                    
                    if (recordCounts.TryGetProperty("settings", out var settingsCountProp) &&
                        settingsCountProp.TryGetInt32(out int settingsCount))
                    {
                        SettingsCount = settingsCount;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting database info from Admin API: {ex.Message}");
            // Set default values on error
            DatabaseProvider = "Error";
            ConnectionStringMasked = "Error retrieving";
            TableCount = 0;
            VirtualKeyCount = 0;
            RequestCount = 0;
            SettingsCount = 0;
        }
        finally
        {
            IsLoadingDatabase = false;
            StateHasChanged();
        }
    }

    private async Task RefreshLlmInfo()
    {
        Logger.LogInformation("Refreshing LLM information");
        try
        {
            IsLoadingLlm = true;
            StateHasChanged();
            
            // Get provider info
            var providers = await AdminApiClient.GetAllProviderCredentialsAsync();
            ProviderCount = providers.Count();
            Providers = providers.Select(p => p.ProviderName).ToList();

            // Get model mappings
            var modelMappings = await AdminApiClient.GetAllModelProviderMappingsAsync();
            ModelCount = modelMappings.Count();
            Models = modelMappings.Select(m => $"{m.ModelId} → {m.ProviderId}/{m.ProviderModelId}").ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting LLM info: {ex.Message}");
            ProviderCount = 0;
            ModelCount = 0;
        }
        finally
        {
            IsLoadingLlm = false;
            StateHasChanged();
        }
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len /= 1024;
        }

        return $"{len:0.##} {sizes[order]}";
    }

    private string MaskConnectionString(string connectionString)
    {
        // Replace password and sensitive info with ****
        if (string.IsNullOrEmpty(connectionString)) return string.Empty;
        
        var parts = connectionString.Split(';');
        var maskedParts = new List<string>();
        
        foreach (var part in parts)
        {
            if (part.StartsWith("Password=", StringComparison.OrdinalIgnoreCase) || 
                part.StartsWith("Pwd=", StringComparison.OrdinalIgnoreCase))
            {
                maskedParts.Add(part.Split('=')[0] + "=****");
            }
            else
            {
                maskedParts.Add(part);
            }
        }
        
        return string.Join(";", maskedParts);
    }

    private string ExtractHostFromConnectionString(string connectionString)
    {
        // Extract host from PostgreSQL connection string
        if (string.IsNullOrEmpty(connectionString)) return string.Empty;
        
        var parts = connectionString.Split(';');
        foreach (var part in parts)
        {
            if (part.StartsWith("Host=", StringComparison.OrdinalIgnoreCase) || 
                part.StartsWith("Server=", StringComparison.OrdinalIgnoreCase))
            {
                return part.Split('=')[1];
            }
        }
        
        return "Unknown host";
    }
}