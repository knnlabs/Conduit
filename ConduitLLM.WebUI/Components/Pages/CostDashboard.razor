@page "/cost-dashboard"
@using System.Globalization
@using System.Text
@using ConfigDTO = ConduitLLM.Configuration.DTOs
@using ConduitLLM.WebUI.Services
@using ConduitLLM.Configuration.Entities
@using ConduitLLM.WebUI.Interfaces
@using ConduitLLM.WebUI.Extensions
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IAdminApiClient AdminApiClient
@inject IToastService ToastService
@rendermode InteractiveServer
@implements IAsyncDisposable

<PageTitle>Cost Dashboard - ConduitLLM</PageTitle>

<div class="container container-xxl">
    <!-- Header Section -->
    <PageHeader Title="Cost Dashboard" 
                Description="Analyze spending patterns, track costs by model and virtual key, and monitor usage trends"
                Icon="fa-chart-pie">
        <Statistics>
            <div class="stat-item">
                <i class="fa fa-dollar-sign me-2"></i>
                <span class="small">@(dashboardData?.TotalCost.ToString("C2") ?? "$0.00") Total</span>
            </div>
            <div class="stat-item mt-2">
                <i class="fa fa-activity me-2"></i>
                <span class="small">@(dashboardData?.TotalRequests().ToString("N0") ?? "0") Requests</span>
            </div>
        </Statistics>
    </PageHeader>

    <!-- Filters Section -->
    <div class="card cd-filter-card border-0 shadow-lg rounded-4 mb-4">
        <div class="card-header cd-card-header border-0">
            <h5 class="mb-0 fw-bold text-dark">
                <i class="fa fa-filter me-2 text-primary"></i>Filters & Controls
            </h5>
        </div>
        <div class="card-body p-4">
            <div class="row g-3">
                <div class="col-12 col-sm-6 col-lg-3">
                    <div class="cd-form-group">
                        <label for="dateRange" class="cd-form-label">
                            <i class="fa fa-calendar me-1"></i>Date Range
                        </label>
                        <select id="dateRange" class="form-select cd-form-select" @bind="selectedDateRange">
                            <option value="7d">Last 7 Days</option>
                            <option value="30d">Last 30 Days</option>
                            <option value="90d">Last 90 Days</option>
                            <option value="custom">Custom Range</option>
                        </select>
                    </div>
                </div>
                
                @if (selectedDateRange == @"custom")
                {
                    <div class="col-12 col-sm-6 col-lg-3">
                        <div class="cd-form-group">
                            <label for="startDate" class="cd-form-label">
                                <i class="fa fa-calendar-alt me-1"></i>Start Date
                            </label>
                            <input type="date" id="startDate" class="form-control cd-form-control" 
                                @bind="startDate" @bind:format="yyyy-MM-dd" placeholder="Select start date" />
                        </div>
                    </div>
                    <div class="col-12 col-sm-6 col-lg-3">
                        <div class="cd-form-group">
                            <label for="endDate" class="cd-form-label">
                                <i class="fa fa-calendar-alt me-1"></i>End Date
                            </label>
                            <input type="date" id="endDate" class="form-control cd-form-control" 
                                @bind="endDate" @bind:format="yyyy-MM-dd" placeholder="Select end date" />
                        </div>
                    </div>
                }
                
                <div class="col-12 col-sm-6 col-lg-3">
                    <div class="cd-form-group">
                        <label for="virtualKey" class="cd-form-label">
                            <i class="fa fa-key me-1"></i>Virtual Key
                        </label>
                        <select id="virtualKey" class="form-select cd-form-select" @bind="selectedVirtualKeyId">
                            <option value="all">All Keys</option>
                            @if (virtualKeys != null)
                            {
                                @foreach (var key in virtualKeys)
                                {
                                    <option value="@key.Id.ToString()">@key.Name</option>
                                }
                            }
                        </select>
                    </div>
                </div>
                
                <div class="col-12 col-sm-6 col-lg-3">
                    <div class="cd-form-group">
                        <label for="model" class="cd-form-label">
                            <i class="fa fa-robot me-1"></i>Model
                        </label>
                        <select id="model" class="form-select cd-form-select" @bind="selectedModel">
                            <option value="all">All Models</option>
                            @if (models != null)
                            {
                                @foreach (var model in models)
                                {
                                    <option value="@model">@model</option>
                                }
                            }
                        </select>
                    </div>
                </div>
            </div>
            
            <div class="d-flex justify-content-end mt-4">
                <button class="btn btn-outline-secondary me-3" @onclick="ClearFilters">
                    <i class="fa fa-times me-2"></i>Clear Filters
                </button>
                <button class="btn btn-primary" @onclick="ApplyFilters">
                    <i class="fa fa-search me-2"></i>Apply Filters
                </button>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <LoadingSpinner Message="Loading cost data..." />
    }
    else if (dashboardData == null)
    {
        <EmptyState Title="No Cost Data Available"
                    Description="No cost data found for the selected filters. Try adjusting your date range or filters."
                    Icon="fa-chart-pie">
            <ActionTemplate>
                <button class="btn btn-primary" @onclick="ClearFilters">
                    <i class="fa fa-refresh me-2"></i>Reset Filters
                </button>
            </ActionTemplate>
        </EmptyState>
    }
    else
    {
        <!-- Statistics Cards -->
        <div class="row mb-4">
            <div class="col-12 col-lg-4 mb-4">
                <div class="card cd-stat-card border-0 shadow-lg rounded-4 h-100">
                    <div class="card-body p-4 text-center">
                        <div class="cd-stat-icon mb-3">
                            <i class="fa fa-dollar-sign text-success fa-2x"></i>
                        </div>
                        <h3 class="cd-stat-number text-dark mb-2">
                            $@dashboardData.TotalCost.ToString("F2")
                        </h3>
                        <p class="cd-stat-label text-muted mb-0">Total Cost</p>
                        <small class="text-muted">For the selected period</small>
                    </div>
                </div>
            </div>
            
            <div class="col-12 col-lg-4 mb-4">
                <div class="card cd-stat-card border-0 shadow-lg rounded-4 h-100">
                    <div class="card-body p-4 text-center">
                        <div class="cd-stat-icon mb-3">
                            <i class="fa fa-activity text-info fa-2x"></i>
                        </div>
                        <h3 class="cd-stat-number text-dark mb-2">
                            @dashboardData.TotalRequests().ToString("N0")
                        </h3>
                        <p class="cd-stat-label text-muted mb-0">Total Requests</p>
                        <small class="text-muted">Successful API calls</small>
                    </div>
                </div>
            </div>
            
            <div class="col-12 col-lg-4 mb-4">
                <div class="card cd-stat-card border-0 shadow-lg rounded-4 h-100">
                    <div class="card-body p-4 text-center">
                        <div class="cd-stat-icon mb-3">
                            <i class="fa fa-calculator text-warning fa-2x"></i>
                        </div>
                        <h3 class="cd-stat-number text-dark mb-2">
                            $@((dashboardData.TotalRequests() > 0 ? dashboardData.TotalCost / dashboardData.TotalRequests() : 0).ToString("F4"))
                        </h3>
                        <p class="cd-stat-label text-muted mb-0">Avg. Cost/Request</p>
                        <small class="text-muted">Average cost per API call</small>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <div class="card mb-6">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h6 class="text-h6 m-0">Cost Trends</h6>
                        <button class="btn btn-text text-primary" @onclick="DownloadCostData">
                            <i class="fa fa-download me-2"></i>
                            Download Data
                        </button>
                    </div>
                    <div class="card-body modern-card-body">
                        @if (dashboardData.CostTrends() == null || !dashboardData.CostTrends().Any())
                        {
                            <div class="alert modern-alert modern-alert-info">
                                No trend data available for the selected period.
                            </div>
                        }
                        else
                        {
                            <div class="chart-container">
                                <canvas id="costTrendChart"></canvas>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12 col-md-6">
                <div class="card mb-6">
                    <div class="card-header">
                        <h6 class="text-h6 m-0">Cost by Model</h6>
                    </div>
                    <div class="card-body">
                        @if (dashboardData.CostByModel() == null || !dashboardData.CostByModel().Any())
                        {
                            <div class="alert alert-info">
                                No model data available for the selected period.
                            </div>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Model</th>
                                            <th>Requests</th>
                                            <th>Cost</th>
                                            <th>% of Total</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in dashboardData.CostByModel().OrderByDescending(kvp => kvp.Value))
                                        {
                                            <tr>
                                                <td>@item.Key</td>
                                                <td>0</td>
                                                <td>$@item.Value.ToString("F2")</td>
                                                <td>@((dashboardData.TotalCost > 0 ? item.Value / dashboardData.TotalCost * 100 : 0).ToString("F1"))%</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>
            </div>
            
            <div class="col-12 col-md-6">
                <div class="card mb-6">
                    <div class="card-header">
                        <h6 class="text-h6 m-0">Model Usage</h6>
                    </div>
                    <div class="card-body">
                        @if (dashboardData.CostByModel() == null || !dashboardData.CostByModel().Any())
                        {
                            <div class="alert alert-info">
                                No model data available for the selected period.
                            </div>
                        }
                        else
                        {
                            <div style="height: 300px; width: 100%;">
                                <canvas id="modelUsageChart"></canvas>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        @if (dashboardData.CostByVirtualKey() != null && dashboardData.CostByVirtualKey().Any())
        {
            <div class="card mb-6">
                <div class="card-header">
                    <h6 class="text-h6 m-0">Cost by Virtual Key</h6>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Virtual Key</th>
                                    <th>Requests</th>
                                    <th>Cost</th>
                                    <th>% of Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in dashboardData.CostByVirtualKey().OrderByDescending(k => k.Value.Cost))
                                {
                                    <tr>
                                        <td>@item.Value.Name</td>
                                        <td>0</td>
                                        <td>$@item.Value.Cost.ToString("F2")</td>
                                        <td>@((dashboardData.TotalCost > 0 ? item.Value.Cost / dashboardData.TotalCost * 100 : 0).ToString("F1"))%</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
    }
</div>

<!-- Custom CSS Styling -->
<style>
    /* Keep only styles specific to this page that aren't covered by components */
    .cd-filter-card,
    .cd-stat-card,
    .cd-chart-card,
    .cd-table-card {
        transition: all 0.3s ease;
    }

    .cd-filter-card:hover,
    .cd-stat-card:hover,
    .cd-chart-card:hover,
    .cd-table-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 12px 40px rgba(0, 0, 0, 0.1) !important;
    }

    .cd-card-header {
        background: linear-gradient(135deg, #f8f9ff 0%, #e8f4fd 100%);
        padding: 1.5rem;
    }

    .cd-stat-card {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9ff 100%);
    }

    .cd-stat-icon {
        transition: all 0.3s ease;
    }

    .cd-stat-card:hover .cd-stat-icon {
        transform: scale(1.1);
    }

    .cd-stat-number {
        font-size: 1.75rem;
        font-weight: 700;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .cd-stat-label {
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        font-size: 0.875rem;
    }

    .cd-form-group {
        margin-bottom: 1rem;
    }

    .cd-form-label {
        font-weight: 600;
        color: #4a5568;
        margin-bottom: 0.5rem;
        font-size: 0.875rem;
    }

    .cd-form-select,
    .cd-form-control {
        border-radius: 0.75rem;
        border: 2px solid #e8f4fd;
        padding: 0.75rem 1rem;
        transition: all 0.3s ease;
        font-size: 0.875rem;
    }

    .cd-form-select:focus,
    .cd-form-control:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }

    .cd-chart-container {
        position: relative;
        height: 300px;
        width: 100%;
        padding: 1rem;
        background: linear-gradient(135deg, #f8f9ff 0%, #ffffff 100%);
        border-radius: 1rem;
    }

    @@media (max-width: 768px) {
        .cd-stat-number {
            font-size: 1.5rem;
        }

        .cd-form-select,
        .cd-form-control {
            font-size: 1rem;
        }
    }
</style>

@code {
    // Filter state
    private string selectedDateRange = "30d";
    private DateTime? startDate;
    private DateTime? endDate;
    // Removed startDateInput and endDateInput properties as we're binding directly to DateTime? properties
    private string selectedVirtualKeyId = "all";
    private string selectedModel = "all";
    
    // Data state
    private ConduitLLM.Configuration.DTOs.Costs.CostDashboardDto? dashboardData;
    private List<ConduitLLM.Configuration.DTOs.VirtualKey.VirtualKeyDto>? virtualKeys;
    private List<string>? models;
    private bool isLoading = false;
    
    // Chart data
    private double[] modelUsageData = Array.Empty<double>();
    private string[] modelUsageLabels = Array.Empty<string>();
    private double[] costTrendData = Array.Empty<double>();
    private string[] costTrendLabels = Array.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        // Set default date range
        SetDateRangeFromPreset("30d");
        
        // Load filter options
        await LoadFilterOptionsAsync();
        
        // Load dashboard data with default filters
        await LoadDashboardDataAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Only render charts if we have data and after the DOM elements are ready
        if (dashboardData != null && !isLoading)
        {
            if (dashboardData.CostTrends() != null && dashboardData.CostTrends().Any())
            {
                await JSRuntime.InvokeVoidAsync("renderLineChart", "costTrendChart", 
                    costTrendLabels, costTrendData);
            }
            
            if (dashboardData.CostByModel() != null && dashboardData.CostByModel().Any())
            {
                await JSRuntime.InvokeVoidAsync("renderPieChart", "modelUsageChart", 
                    modelUsageLabels, modelUsageData);
            }
        }
    }

    private async Task LoadFilterOptionsAsync()
    {
        try
        {
            // Load virtual keys
            var vkList = await AdminApiClient.GetAllVirtualKeysAsync();
            virtualKeys = vkList.ToList();
            
            // Load model list - get distinct models from Admin API
            var distinctModels = await AdminApiClient.GetDistinctModelsAsync();
            models = distinctModels.ToList();
        }
        catch (Exception ex)
        {
            ToastService.ShowException(ex, "Error loading filter options");
        }
    }

    private async Task LoadDashboardDataAsync()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            // Load dashboard data
            dashboardData = await AdminApiClient.GetCostDashboardAsync(
                startDate, 
                endDate, 
                selectedVirtualKeyId == "all" ? null : !string.IsNullOrEmpty(selectedVirtualKeyId) ? int.Parse(selectedVirtualKeyId) : null,
                selectedModel == "all" ? null : selectedModel
            );
            
            // Prepare chart data if we have dashboard data
            if (dashboardData != null)
            {
                PrepareChartData();
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowException(ex, "Error loading dashboard data");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void PrepareChartData()
    {
        if (dashboardData == null) return;
        
        // Prepare model usage pie chart data
        if (dashboardData.CostByModel() != null && dashboardData.CostByModel().Any())
        {
            var orderedModels = dashboardData.CostByModel()
                .Select(kvp => new { ModelName = kvp.Key, Cost = kvp.Value })
                .OrderByDescending(m => m.Cost)
                .ToList();
            modelUsageData = orderedModels.Select(m => (double)m.Cost).ToArray();
            modelUsageLabels = orderedModels.Select(m => m.ModelName).ToArray();
        }
        
        // Prepare cost trend line chart data
        if (dashboardData.CostTrends() != null && dashboardData.CostTrends().Any())
        {
            costTrendLabels = dashboardData.CostTrends().Select(c => c.Date.ToString("MM/dd")).ToArray();
            costTrendData = dashboardData.CostTrends().Select(c => (double)c.Cost).ToArray();
        }
    }

    private void SetDateRangeFromPreset(string preset)
    {
        var today = DateTime.Now.Date;
        
        switch (preset)
        {
            case "7d":
                startDate = today.AddDays(-7);
                endDate = today;
                break;
            case "30d":
                startDate = today.AddDays(-30);
                endDate = today;
                break;
            case "90d":
                startDate = today.AddDays(-90);
                endDate = today;
                break;
            case "custom":
                // Keep existing dates if they're set, otherwise use last 30 days
                if (startDate == null || endDate == null)
                {
                    startDate = today.AddDays(-30);
                    endDate = today;
                }
                break;
        }
    }

    private async Task ApplyFilters()
    {
        // If custom range is selected, ensure dates are valid
        if (selectedDateRange == "custom")
        {
            if (startDate == null || endDate == null)
            {
                ToastService.ShowValidationError("Please select both start and end dates");
                return;
            }
            
            if (startDate > endDate)
            {
                ToastService.ShowValidationError("Start date must be before end date");
                return;
            }
        }
        else
        {
            // Apply preset date range
            SetDateRangeFromPreset(selectedDateRange);
        }
        
        // Load dashboard data with new filters
        await LoadDashboardDataAsync();
    }

    private async Task ClearFilters()
    {
        selectedDateRange = "30d";
        SetDateRangeFromPreset("30d");
        selectedVirtualKeyId = "all";
        selectedModel = "all";
        
        await LoadDashboardDataAsync();
    }
    
    private async Task DownloadCostData()
    {
        if (dashboardData == null) return;
        
        try
        {
            var sb = new StringBuilder();
            
            // Add header
            sb.AppendLine("Date,Model,VirtualKey,Requests,Cost");
            
            // Get detailed cost data for the current filter
            var detailedData = await AdminApiClient.GetDetailedCostDataAsync(
                startDate, 
                endDate, 
                selectedVirtualKeyId == "all" ? null : !string.IsNullOrEmpty(selectedVirtualKeyId) ? int.Parse(selectedVirtualKeyId) : null,
                selectedModel == "all" ? null : selectedModel
            );
            
            // Add data rows
            if (detailedData != null)
            {
                foreach (var item in detailedData)
                {
                    sb.AppendLine($"{DateTime.Now:yyyy-MM-dd},{item.Name},{"-"},{1},{item.Cost.ToString(CultureInfo.InvariantCulture)}");
                }
            }
            
            // Create file name with current date
            var fileName = $"cost_data_{DateTime.Now:yyyyMMdd}.csv";
            
            // Download file
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, sb.ToString(), "text/csv");
        }
        catch (Exception ex)
        {
            ToastService.ShowException(ex, "Error downloading data");
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        // Clean up any chart instances to avoid memory leaks
        await JSRuntime.InvokeVoidAsync("destroyCharts");
    }
}