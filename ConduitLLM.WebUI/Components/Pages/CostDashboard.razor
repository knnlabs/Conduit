@page "/cost-dashboard"
@using System.Globalization
@using System.Text
@using ConduitLLM.WebUI.DTOs
@using ConduitLLM.WebUI.Services
@using ConduitLLM.Configuration.Entities
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ICostDashboardService CostDashboardService
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h3" Class="mb-4">Cost Dashboard</MudText>

    <MudCard Elevation="2" Class="mb-6">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5">Filters</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" sm="6" md="3">
                    <MudSelect T="string" 
                           @bind-Value="selectedDateRange" 
                           Label="Date Range" 
                           Variant="Variant.Outlined"
                           Class="mb-3">
                        <MudSelectItem Value="@("7d")">Last 7 Days</MudSelectItem>
                        <MudSelectItem Value="@("30d")">Last 30 Days</MudSelectItem>
                        <MudSelectItem Value="@("90d")">Last 90 Days</MudSelectItem>
                        <MudSelectItem Value="@("custom")">Custom Range</MudSelectItem>
                    </MudSelect>
                </MudItem>
                
                @if (selectedDateRange == @"custom")
                {
                    <MudItem xs="12" sm="6" md="3">
                        <MudDatePicker @bind-Date="startDate" 
                                    Label="Start Date" 
                                    Variant="Variant.Outlined"
                                    Placeholder="Select start date"
                                    Class="mb-3" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <MudDatePicker @bind-Date="endDate" 
                                    Label="End Date" 
                                    Variant="Variant.Outlined"
                                    Placeholder="Select end date" 
                                    Class="mb-3" />
                    </MudItem>
                }
                
                <MudItem xs="12" sm="6" md="3">
                    <MudSelect T="string" 
                           @bind-Value="selectedVirtualKeyId" 
                           Label="Virtual Key" 
                           Variant="Variant.Outlined"
                           Class="mb-3">
                        <MudSelectItem Value="@("all")">All Keys</MudSelectItem>
                        @if (virtualKeys != null)
                        {
                            @foreach (var key in virtualKeys)
                            {
                                <MudSelectItem Value="@key.Id.ToString()">@key.KeyName</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>
                
                <MudItem xs="12" sm="6" md="3">
                    <MudSelect T="string" 
                           @bind-Value="selectedModel" 
                           Label="Model" 
                           Variant="Variant.Outlined"
                           Class="mb-3">
                        <MudSelectItem Value="@("all")">All Models</MudSelectItem>
                        @if (models != null)
                        {
                            @foreach (var model in models)
                            {
                                <MudSelectItem Value="@model">@model</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>
            
            <div class="d-flex justify-end">
                <MudButton Variant="Variant.Outlined" 
                         Color="Color.Secondary" 
                         OnClick="ClearFilters" 
                         Class="mr-2">
                    Clear Filters
                </MudButton>
                <MudButton Variant="Variant.Filled" 
                         Color="Color.Primary" 
                         OnClick="ApplyFilters">
                    Apply Filters
                </MudButton>
            </div>
        </MudCardContent>
    </MudCard>

    @if (isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" Class="d-block mx-auto my-6" />
        <MudText Align="Align.Center" Class="mt-2">Loading cost data...</MudText>
    }
    else if (dashboardData == null)
    {
        <MudAlert Severity="Severity.Info" Class="my-4">
            <MudText>No cost data found for the selected filters.</MudText>
        </MudAlert>
    }
    else
    {
        <MudGrid>
            <MudItem xs="12" md="4">
                <MudCard Elevation="2" Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Total Cost</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Typo="Typo.h3" Color="Color.Primary">
                            $@dashboardData.TotalCost.ToString("F2")
                        </MudText>
                        <MudText Typo="Typo.body2" Class="mud-text-secondary mt-2">
                            For the selected period
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="12" md="4">
                <MudCard Elevation="2" Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Total Requests</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Typo="Typo.h3" Color="Color.Secondary">
                            @dashboardData.TotalRequests.ToString("N0")
                        </MudText>
                        <MudText Typo="Typo.body2" Class="mud-text-secondary mt-2">
                            Successful API calls
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="12" md="4">
                <MudCard Elevation="2" Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Avg. Cost/Request</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Typo="Typo.h3" Color="Color.Tertiary">
                            $@((dashboardData.TotalRequests > 0 ? dashboardData.TotalCost / dashboardData.TotalRequests : 0).ToString("F4"))
                        </MudText>
                        <MudText Typo="Typo.body2" Class="mud-text-secondary mt-2">
                            Average cost per API call
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <MudGrid>
            <MudItem xs="12">
                <MudCard Elevation="2" Class="mb-6">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <div class="d-flex justify-space-between align-center">
                                <MudText Typo="Typo.h6">Cost Trends</MudText>
                                <MudButton Variant="Variant.Text" 
                                         Color="Color.Primary" 
                                         StartIcon="@Icons.Material.Filled.Download"
                                         OnClick="DownloadCostData">
                                    Download Data
                                </MudButton>
                            </div>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (dashboardData.CostTrends == null || !dashboardData.CostTrends.Any())
                        {
                            <MudAlert Severity="Severity.Info" Variant="Variant.Outlined">
                                No trend data available for the selected period.
                            </MudAlert>
                        }
                        else
                        {
                            <MudChart ChartType="ChartType.Line" 
                                    ChartSeries="@costTrendSeries"
                                    XAxisLabels="@costTrendLabels"
                                    Width="100%" 
                                    Height="300px">
                            </MudChart>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <MudGrid>
            <MudItem xs="12" md="6">
                <MudCard Elevation="2" Class="mb-6">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Cost by Model</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (dashboardData.CostByModel == null || !dashboardData.CostByModel.Any())
                        {
                            <MudAlert Severity="Severity.Info" Variant="Variant.Outlined">
                                No model data available for the selected period.
                            </MudAlert>
                        }
                        else
                        {
                            <MudSimpleTable Hover="true">
                                <thead>
                                    <tr>
                                        <th>Model</th>
                                        <th>Requests</th>
                                        <th>Cost</th>
                                        <th>% of Total</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in dashboardData.CostByModel.OrderByDescending(m => m.Cost))
                                    {
                                        <tr>
                                            <td>@item.Model</td>
                                            <td>@item.Requests.ToString("N0")</td>
                                            <td>$@item.Cost.ToString("F2")</td>
                                            <td>@((dashboardData.TotalCost > 0 ? item.Cost / dashboardData.TotalCost * 100 : 0).ToString("F1"))%</td>
                                        </tr>
                                    }
                                </tbody>
                            </MudSimpleTable>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudCard Elevation="2" Class="mb-6">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Model Usage</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (dashboardData.CostByModel == null || !dashboardData.CostByModel.Any())
                        {
                            <MudAlert Severity="Severity.Info" Variant="Variant.Outlined">
                                No model data available for the selected period.
                            </MudAlert>
                        }
                        else
                        {
                            <MudChart ChartType="ChartType.Pie" 
                                    Width="100%" 
                                    Height="300px"
                                    InputData="@modelUsageData"
                                    InputLabels="@modelUsageLabels">
                            </MudChart>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        @if (dashboardData.CostByVirtualKey != null && dashboardData.CostByVirtualKey.Any())
        {
            <MudCard Elevation="2" Class="mb-6">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Cost by Virtual Key</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudSimpleTable Hover="true">
                        <thead>
                            <tr>
                                <th>Virtual Key</th>
                                <th>Requests</th>
                                <th>Cost</th>
                                <th>% of Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in dashboardData.CostByVirtualKey.OrderByDescending(k => k.Cost))
                            {
                                <tr>
                                    <td>@item.KeyName</td>
                                    <td>@item.Requests.ToString("N0")</td>
                                    <td>$@item.Cost.ToString("F2")</td>
                                    <td>@((dashboardData.TotalCost > 0 ? item.Cost / dashboardData.TotalCost * 100 : 0).ToString("F1"))%</td>
                                </tr>
                            }
                        </tbody>
                    </MudSimpleTable>
                </MudCardContent>
            </MudCard>
        }
    }
</MudContainer>

@code {
    // Filter state
    private string selectedDateRange = "30d";
    private DateTime? startDate;
    private DateTime? endDate;
    private string selectedVirtualKeyId = "all";
    private string selectedModel = "all";
    
    // Data state
    private CostDashboardDto? dashboardData;
    private List<VirtualKey>? virtualKeys;
    private List<string>? models;
    private bool isLoading = false;
    
    // Chart data
    private double[] modelUsageData = Array.Empty<double>();
    private string[] modelUsageLabels = Array.Empty<string>();
    private List<ChartSeries> costTrendSeries = new();
    private string[] costTrendLabels = Array.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        // Set default date range
        SetDateRangeFromPreset("30d");
        
        // Load filter options
        await LoadFilterOptionsAsync();
        
        // Load dashboard data with default filters
        await LoadDashboardDataAsync();
    }

    private async Task LoadFilterOptionsAsync()
    {
        try
        {
            // Load virtual keys
            virtualKeys = await CostDashboardService.GetVirtualKeysAsync();
            
            // Load model list
            models = await CostDashboardService.GetAvailableModelsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading filter options: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadDashboardDataAsync()
    {
        isLoading = true;
        
        try
        {
            // Create filter object from current selections
            var filter = new
            {
                StartDate = startDate?.ToString("yyyy-MM-dd"),
                EndDate = endDate?.ToString("yyyy-MM-dd"),
                VirtualKeyId = string.IsNullOrEmpty(selectedVirtualKeyId) ? null : selectedVirtualKeyId,
                Model = string.IsNullOrEmpty(selectedModel) ? null : selectedModel
            };
            
            // Load dashboard data
            dashboardData = await CostDashboardService.GetDashboardDataAsync(
                startDate, 
                endDate, 
                selectedVirtualKeyId == "all" ? null : !string.IsNullOrEmpty(selectedVirtualKeyId) ? int.Parse(selectedVirtualKeyId) : null,
                selectedModel == "all" ? null : selectedModel
            );
            
            // Prepare chart data if we have dashboard data
            if (dashboardData != null)
            {
                PrepareChartData();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading dashboard data: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void PrepareChartData()
    {
        if (dashboardData == null) return;
        
        // Prepare model usage pie chart data
        if (dashboardData.CostByModel != null && dashboardData.CostByModel.Any())
        {
            var orderedModels = dashboardData.CostByModel.OrderByDescending(m => m.Cost).ToList();
            modelUsageData = orderedModels.Select(m => (double)m.Cost).ToArray();
            modelUsageLabels = orderedModels.Select(m => m.Model).ToArray();
        }
        
        // Prepare cost trend line chart data
        if (dashboardData.CostTrends != null && dashboardData.CostTrends.Any())
        {
            var dates = dashboardData.CostTrends.Select(c => c.Date.ToString("MM/dd")).ToArray();
            var costs = dashboardData.CostTrends.Select(c => c.Cost).ToArray();
            
            costTrendLabels = dates;
            costTrendSeries = new List<ChartSeries>
            {
                new ChartSeries() 
                { 
                    Name = "Daily Cost", 
                    Data = costs.Select(c => (double)c).ToArray() 
                }
            };
        }
    }

    private void SetDateRangeFromPreset(string preset)
    {
        var today = DateTime.Now.Date;
        
        switch (preset)
        {
            case "7d":
                startDate = today.AddDays(-7);
                endDate = today;
                break;
            case "30d":
                startDate = today.AddDays(-30);
                endDate = today;
                break;
            case "90d":
                startDate = today.AddDays(-90);
                endDate = today;
                break;
            case "custom":
                // Keep existing dates if they're set, otherwise use last 30 days
                if (startDate == null || endDate == null)
                {
                    startDate = today.AddDays(-30);
                    endDate = today;
                }
                break;
        }
    }

    private async Task ApplyFilters()
    {
        // If custom range is selected, ensure dates are valid
        if (selectedDateRange == "custom")
        {
            if (startDate == null || endDate == null)
            {
                Snackbar.Add("Please select both start and end dates", Severity.Warning);
                return;
            }
            
            if (startDate > endDate)
            {
                Snackbar.Add("Start date must be before end date", Severity.Warning);
                return;
            }
        }
        else
        {
            // Apply preset date range
            SetDateRangeFromPreset(selectedDateRange);
        }
        
        // Load dashboard data with new filters
        await LoadDashboardDataAsync();
    }

    private async Task ClearFilters()
    {
        selectedDateRange = "30d";
        SetDateRangeFromPreset("30d");
        selectedVirtualKeyId = "all";
        selectedModel = "all";
        
        await LoadDashboardDataAsync();
    }
    
    private async Task DownloadCostData()
    {
        if (dashboardData == null) return;
        
        try
        {
            var sb = new StringBuilder();
            
            // Add header
            sb.AppendLine("Date,Model,VirtualKey,Requests,Cost");
            
            // Get detailed cost data for the current filter
            var detailedData = await CostDashboardService.GetDetailedCostDataAsync(
                startDate, 
                endDate, 
                selectedVirtualKeyId == "all" ? null : !string.IsNullOrEmpty(selectedVirtualKeyId) ? int.Parse(selectedVirtualKeyId) : null,
                selectedModel == "all" ? null : selectedModel
            );
            
            // Add data rows
            foreach (var item in detailedData)
            {
                sb.AppendLine($"{item.Date:yyyy-MM-dd},{item.Model},{item.KeyName},{item.Requests},{item.Cost.ToString(CultureInfo.InvariantCulture)}");
            }
            
            // Create file name with current date
            var fileName = $"cost_data_{DateTime.Now:yyyyMMdd}.csv";
            
            // Download file
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, sb.ToString(), "text/csv");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error downloading data: {ex.Message}", Severity.Error);
        }
    }
}