@page "/llm-providers"
@using System.Text.Json
@using ConduitLLM.Configuration
@using ConfigDTOs = ConduitLLM.Configuration.DTOs
@using WebUIDTOs = ConduitLLM.WebUI.DTOs
@using ConduitLLM.Providers.Configuration
@using ConduitLLM.WebUI.Services
@using ConduitLLM.WebUI.Interfaces
@using Microsoft.Extensions.Logging
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using Microsoft.JSInterop
@using ConduitLLM.WebUI.Components.Shared

@inject NavigationManager NavigationManager
@inject ILogger<LLMProviders> Logger
@inject IAdminApiClient AdminApiClient
@inject ConfigurationChangeNotifier ConfigChangeNotifier
@inject IJSRuntime JSRuntime
@inject ProviderModelsService ProviderModelsService
@inject IToastService ToastService
@rendermode InteractiveServer

<PageTitle>LLM Providers - ConduitLLM</PageTitle>

<div class="container container-xxl mt-4">
    <!-- Header Section -->
    <PageHeader Title="LLM Provider Management" 
                Description="Configure your LLM providers and API credentials"
                Icon="fa-cloud">
        <Statistics>
            <div class="stat-item">
                <i class="fa fa-server me-2"></i>
                <span class="small">@(providerCredentials?.Count ?? 0) Providers</span>
            </div>
            <div class="stat-item mt-2">
                <i class="fa fa-check-circle me-2"></i>
                <span class="small">@(providerCredentials?.Count(p => !string.IsNullOrEmpty(p.ApiKey)) ?? 0) Active</span>
            </div>
        </Statistics>
    </PageHeader>

    <!-- LLM Providers Section -->
    <div class="card shadow-sm border-0 mb-5">
        <div class="card-header bg-light border-0">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="fa fa-cloud me-2 text-primary"></i>Configured Providers
                </h5>
                <div class="dropdown">
                    <button class="btn btn-primary dropdown-toggle shadow-sm" type="button" id="addProviderDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="fa fa-plus me-1"></i> Add Provider
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end shadow" aria-labelledby="addProviderDropdown">
                        @foreach (var provider in _supportedProviders)
                        {
                            <li><button class="dropdown-item" @onclick="() => LaunchGuidedSetup(provider)">
                                <i class="fa fa-plus me-2"></i>@provider
                            </button></li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        
        <div class="card-body">
            @if (providerCredentials == null)
            {
                <LoadingSpinner Message="Loading providers..." />
            }
            else if (!providerCredentials.Any())
            {
                <EmptyState Title="No Providers Configured"
                            Description="Get started by adding your first LLM provider"
                            Icon="fa-cloud"
                            IconOpacity="opacity-50" />

                <div class="row">
                    @foreach (var provider in _supportedProviders)
                    {
                        <div class="col-12 col-sm-6 col-lg-4 mb-4">
                            <div class="card h-100 provider-card shadow-sm border-0 hover-card">
                                <div class="card-header bg-light border-0">
                                    <h6 class="mb-0 fw-semibold">
                                        <i class="fa fa-server me-2"></i>@provider
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <p class="card-text text-muted">
                                        @GetProviderDescription(provider)
                                    </p>
                                </div>
                                <div class="card-footer bg-transparent border-0">
                                    <button class="btn btn-primary w-100 shadow-sm" @onclick="() => LaunchGuidedSetup(provider)">
                                        <i class="fa fa-plus me-1"></i> Setup @provider
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover align-middle">
                        <thead class="table-light">
                            <tr>
                                <th class="border-0 fw-semibold">
                                    <i class="fa fa-server me-2"></i>Provider
                                </th>
                                <th class="border-0 fw-semibold">
                                    <i class="fa fa-key me-2"></i>API Key
                                </th>
                                <th class="border-0 fw-semibold">
                                    <i class="fa fa-link me-2"></i>Base URL
                                </th>
                                <th class="border-0 fw-semibold text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var context in providerCredentials)
                            {
                                <tr class="border-light">
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="provider-icon bg-primary-light rounded-circle p-2 me-3">
                                                <i class="fa fa-cloud text-primary"></i>
                                            </div>
                                            <span class="fw-semibold">@context.ProviderName</span>
                                        </div>
                                    </td>
                                    <td>
                                        @if (string.IsNullOrEmpty(context.ApiKey))
                                        {
                                            <span class="badge bg-warning text-dark">Not configured</span>
                                        }
                                        else
                                        {
                                            <span class="text-success">
                                                <i class="fa fa-check-circle me-1"></i>••••••••
                                            </span>
                                        }
                                    </td>
                                    <td>
                                        <code class="text-muted">@(string.IsNullOrEmpty(context.ApiBase) ? "Default" : context.ApiBase)</code>
                                    </td>
                                    <td class="text-center">
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-outline-primary btn-sm" @onclick="() => EditProvider(context.Id)">
                                                <i class="fa fa-edit me-1"></i>Edit
                                            </button>
                                            <button type="button" class="btn btn-outline-danger btn-sm" @onclick="() => DeleteProvider(context.Id)">
                                                <i class="fa fa-trash me-1"></i>Delete
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>

    <!-- Provider Information Section -->
    <div class="card shadow-sm border-0 mb-5">
        <div class="card-header bg-light border-0">
            <h5 class="mb-0">
                <i class="fa fa-info-circle me-2 text-info"></i>About LLM Providers
            </h5>
        </div>
        <div class="card-body">
            <p class="mb-3">
                LLM providers are the AI services that power your Conduit instance. Configure multiple providers to enable failover, load balancing, and access to different models.
            </p>
            <div class="bg-light p-4 border rounded">
                <div class="d-flex mb-3">
                    <i class="fa fa-key me-3 mt-1"></i>
                    <div>
                        <strong>API Keys</strong>: Each provider requires an API key from their respective service. Keep these keys secure and never share them.
                    </div>
                </div>
                <div class="d-flex mb-3">
                    <i class="fa fa-link me-3 mt-1"></i>
                    <div>
                        <strong>Base URLs</strong>: Some providers (like Azure OpenAI or self-hosted models) require custom base URLs. Leave empty for default endpoints.
                    </div>
                </div>
                <div class="d-flex">
                    <i class="fa fa-sitemap me-3 mt-1"></i>
                    <div>
                        <strong>Model Mappings</strong>: After adding providers, configure model mappings to create user-friendly aliases for your models.
                    </div>
                </div>
            </div>
            <div class="alert alert-info mt-3">
                <i class="fa fa-lightbulb me-2"></i>
                <strong>Tip:</strong> You can configure multiple providers of the same type (e.g., multiple OpenAI accounts) for load distribution or different rate limits.
            </div>
        </div>
    </div>
</div>

@code {
    // Provider state
    private List<ConfigDTOs.ProviderCredentialDto> providerCredentials = new();
    private ConfigDTOs.ProviderCredentialDto currentProvider = new();
    
    private readonly List<string> _supportedProviders = new List<string> {
        "OpenAI", "OpenAI Compatible", "Anthropic", "Cohere", "Gemini", "Mistral", "Groq", "HuggingFace", "AWS Bedrock", "SageMaker", "VertexAI", "Fireworks", "OpenRouter", "Cerebras"
    };
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadProvidersAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing LLM Providers page");
        }
    }
    
    private async Task LoadProvidersAsync()
    {
        try
        {
            var providers = await AdminApiClient.GetAllProviderCredentialsAsync();
            providerCredentials = providers.ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading provider credentials");
            providerCredentials = new List<ConfigDTOs.ProviderCredentialDto>(); 
        }
    }
    
    private void AddProvider()
    {
        NavigationManager.NavigateTo("/configuration/provider/edit");
    }

    private void EditProvider(int id)
    {
        NavigationManager.NavigateTo($"/configuration/provider/edit/{id}");
    }

    private async Task DeleteProvider(int id)
    {
        try
        {
            var providerToDelete = await AdminApiClient.GetProviderCredentialByIdAsync(id);
            if (providerToDelete == null) return;

            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
                $"Are you sure you want to delete the provider '{providerToDelete.ProviderName}'? This cannot be undone.");

            if (!confirmed) return;

            // Get related mappings and delete them first
            var allMappings = await AdminApiClient.GetAllModelProviderMappingsAsync();
            var relatedMappings = allMappings.Where(m => int.Parse(m.ProviderId) == providerToDelete.Id).ToList();

            foreach (var mapping in relatedMappings)
            {
                await AdminApiClient.DeleteModelProviderMappingAsync(mapping.Id);
            }

            var success = await AdminApiClient.DeleteProviderCredentialAsync(id);
            
            if (success)
            {
                await LoadProvidersAsync();
                ToastService.ShowSuccess($"Provider '{providerToDelete.ProviderName}' deleted successfully");
            }
            else
            {
                ToastService.ShowError("Failed to delete provider.");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error deleting provider: {ex.Message}");
            Logger.LogError(ex, "Error deleting provider");
        }
    }

    private void LaunchGuidedSetup(string providerName) 
    {
        try
        {
            Logger.LogDebug("LaunchGuidedSetup called for provider: {ProviderName}", providerName);
            
            // Navigate to the provider edit page with the provider name as a query parameter
            NavigationManager.NavigateTo($"/configuration/provider/edit?provider={Uri.EscapeDataString(providerName)}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling guided setup for {ProviderName}", providerName);
            ToastService.ShowError($"Error: {ex.Message}");
        }
    }

    private string GetProviderDescription(string provider)
    {
        return provider switch
        {
            "OpenAI" => "Connect to GPT-3.5, GPT-4, and other OpenAI models",
            "OpenAI Compatible" => "Connect to any service with an OpenAI-compatible API (Requires Base URL)",
            "Anthropic" => "Connect to Claude models for advanced reasoning",
            "Cohere" => "Connect to Cohere's command models",
            "Gemini" => "Connect to Google AI models like Gemini",
            "Mistral" => "Connect to Mistral AI's models",
            "Groq" => "Connect to models running on Groq's LPU Inference Engine for high speed",
            "HuggingFace" => "Access models hosted on Hugging Face Inference Endpoints",
            "AWS Bedrock" => "Connect to foundation models via Amazon Bedrock",
            "SageMaker" => "Connect to hosted LLMs via AWS SageMaker",
            "VertexAI" => "Connect to Google Vertex AI models",
            "Fireworks" => "Connect to a variety of open-source and first-party models",
            "OpenRouter" => "Route requests to various models through OpenRouter",
            "Cerebras" => "Connect to models running on Cerebras infrastructure",
            _ => "Connect to AI models through this provider"
        };
    }
}

<style>
    /* Provider-specific styles */
    .provider-card {
        transition: all 0.2s ease;
    }
    
    .provider-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15) !important;
    }
    
    .provider-icon {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .bg-primary-light {
        background-color: rgba(102, 126, 234, 0.1);
    }
    
    .hover-card {
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }
    
    .hover-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 20px rgba(0,0,0,0.15) !important;
    }
    
    .table th {
        background-color: #f8f9fa;
    }
    
    .stat-item {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 20px;
        padding: 0.5rem 1rem;
        display: inline-block;
    }
</style>