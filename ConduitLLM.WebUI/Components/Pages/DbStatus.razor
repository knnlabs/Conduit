@page "/db-status"
@using System.IO
@using Npgsql
@using System.Text.RegularExpressions
@using ConduitLLM.Core
@using Microsoft.AspNetCore.Components
@inject NavigationManager Navigation
@inject IConfiguration Configuration

@functions {
    private string? DatabasePath;
    private string? Source;
    private bool Exists;
    private bool Readable;
    private bool Writable;
    private string? Error;
    private string? FileSize;
    private string? DbProvider;
    private string? PgHost;
    private string? PgDatabase;
    private bool PgReachable;
    private string? PgError;
    private string? PgConnStrMasked;

    protected override void OnInitialized()
    {
        // Use the same logic as DbConnectionHelper to determine database provider
        // First check for DATABASE_URL (Postgres)
        var databaseUrl = Environment.GetEnvironmentVariable("DATABASE_URL");
        
        if (!string.IsNullOrEmpty(databaseUrl) &&
            (databaseUrl.StartsWith("postgres://") || databaseUrl.StartsWith("postgresql://")))
        {
            DbProvider = "postgres";
            
            try
            {
                // Parse connection string using same logic as DbConnectionHelper
                string connStr = ParsePostgresUrl(databaseUrl);
                PgConnStrMasked = MaskPgConnectionString(connStr);
                
                // Extract host and database info
                var match = Regex.Match(databaseUrl, @"^(postgres(?:ql)?):\/\/(?<user>[^:]+):(?<password>[^@]+)@(?<host>[^:/]+)(?::(?<port>\d+))?\/(?<database>[^?]+)");
                if (match.Success)
                {
                    PgHost = match.Groups["host"].Value;
                    PgDatabase = match.Groups["database"].Value;
                }
                
                // Test connection
                using var conn = new NpgsqlConnection(connStr);
                conn.Open();
                PgReachable = conn.State == System.Data.ConnectionState.Open;
                conn.Close();
            }
            catch (Exception ex)
            {
                PgError = ex.Message;
                PgReachable = false;
            }
        }
        else
        {
            // Fallback to SQLite - using same logic as DbConnectionHelper
            DbProvider = "sqlite";
            
            var sqlitePath = Environment.GetEnvironmentVariable("CONDUIT_SQLITE_PATH");
            if (!string.IsNullOrEmpty(sqlitePath))
            {
                DatabasePath = sqlitePath;
                Source = "CONDUIT_SQLITE_PATH";
            }
            else
            {
                // Last fallback: default SQLite file
                DatabasePath = "ConduitConfig.db";
                Source = "Default path";
            }
            
            if (!string.IsNullOrEmpty(DatabasePath))
            {
                try
                {
                    Exists = File.Exists(DatabasePath);
                    if (Exists)
                    {
                        // Try read
                        try { using var fs = File.Open(DatabasePath, FileMode.Open, FileAccess.Read); Readable = true; } catch { Readable = false; }
                        // Try write
                        try { using var fs = File.Open(DatabasePath, FileMode.Open, FileAccess.Write); Writable = true; } catch { Writable = false; }
                        var info = new FileInfo(DatabasePath);
                        FileSize = $"{info.Length / 1024.0:F1} KB";
                    }
                    else
                    {
                        Readable = false;
                        Writable = false;
                        FileSize = "-";
                    }
                }
                catch (Exception ex)
                {
                    Error = ex.Message;
                }
            }
            else
            {
                Error = "Database path could not be determined.";
            }
        }
    }

    private string ParsePostgresUrl(string url)
    {
        // Based on DbConnectionHelper.ParsePostgresUrl logic
        var pattern = @"^(postgres(?:ql)?):\/\/(?<user>[^:]+):(?<password>[^@]+)@(?<host>[^:/]+)(?::(?<port>\d+))?\/(?<database>[^?]+)";
        var match = Regex.Match(url, pattern);
        if (!match.Success)
            return string.Empty;

        var user = match.Groups["user"].Value;
        var password = match.Groups["password"].Value;
        var host = match.Groups["host"].Value;
        var port = match.Groups["port"].Success ? match.Groups["port"].Value : "5432";
        var database = match.Groups["database"].Value;

        // Optionally handle query params (e.g., sslmode)
        var uri = new Uri(url);
        var query = uri.Query;
        var queryString = string.IsNullOrEmpty(query) ? string.Empty : query.TrimStart('?');

        var connStr = $"Host={host};Port={port};Database={database};Username={user};Password={password}";
        if (!string.IsNullOrEmpty(queryString))
            connStr += ";" + queryString.Replace("&", ";");
        return connStr;
    }

    private string MaskPgConnectionString(string? connStr)
    {
        if (string.IsNullOrEmpty(connStr)) return string.Empty;
        var parts = connStr.Split(';');
        var maskedParts = new List<string>();
        foreach (var part in parts)
        {
            if (part.StartsWith("Password=", StringComparison.OrdinalIgnoreCase) || part.StartsWith("Pwd=", StringComparison.OrdinalIgnoreCase))
            {
                maskedParts.Add(part.Split('=')[0] + "=****");
            }
            else
            {
                maskedParts.Add(part);
            }
        }
        return string.Join(';', maskedParts);
    }
}

<MudContainer Class="mt-4">
    <MudPaper Elevation="3" Class="pa-4 mb-4">
        <MudText Typo="Typo.h4" Class="mb-4">Database Status</MudText>

        <MudCard Elevation="0" Outlined="true">
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12">
                        <MudPaper Class="d-flex flex-row align-center pa-3" Elevation="0">
                            <MudIcon Icon="@(DbProvider == "postgres" ? @Icons.Material.Filled.Storage : @Icons.Material.Filled.DataObject)" 
                                     Color="Color.Primary" Size="Size.Large" Class="mr-3" />
                            <MudText Typo="Typo.h6">
                                @(DbProvider == "postgres" ? "PostgreSQL" : "SQLite") Database
                            </MudText>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
                
                @if (DbProvider == "sqlite")
                {
                    <MudSimpleTable Striped="true" Hover="true" Dense="true" Class="mt-3">
                        <tbody>
                            <tr>
                                <td style="width:200px"><MudText Typo="Typo.subtitle2">Path Source</MudText></td>
                                <td><MudText>@Source</MudText></td>
                            </tr>
                            <tr>
                                <td><MudText Typo="Typo.subtitle2">File Path</MudText></td>
                                <td><MudText>@DatabasePath</MudText></td>
                            </tr>
                            <tr>
                                <td><MudText Typo="Typo.subtitle2">Exists</MudText></td>
                                <td>
                                    <MudBadge Color="@(Exists ? Color.Success : Color.Error)" 
                                              Overlap="true" 
                                              Class="ml-2">
                                        <MudText Color="@(Exists ? Color.Success : Color.Error)">
                                            @(Exists ? "Yes" : "No")
                                        </MudText>
                                    </MudBadge>
                                </td>
                            </tr>
                            <tr>
                                <td><MudText Typo="Typo.subtitle2">Readable</MudText></td>
                                <td>
                                    <MudBadge Color="@(Readable ? Color.Success : Color.Error)" 
                                              Overlap="true" 
                                              Class="ml-2">
                                        <MudText Color="@(Readable ? Color.Success : Color.Error)">
                                            @(Readable ? "Yes" : "No")
                                        </MudText>
                                    </MudBadge>
                                </td>
                            </tr>
                            <tr>
                                <td><MudText Typo="Typo.subtitle2">Writable</MudText></td>
                                <td>
                                    <MudBadge Color="@(Writable ? Color.Success : Color.Error)" 
                                              Overlap="true" 
                                              Class="ml-2">
                                        <MudText Color="@(Writable ? Color.Success : Color.Error)">
                                            @(Writable ? "Yes" : "No")
                                        </MudText>
                                    </MudBadge>
                                </td>
                            </tr>
                            <tr>
                                <td><MudText Typo="Typo.subtitle2">File Size</MudText></td>
                                <td><MudText>@FileSize</MudText></td>
                            </tr>
                            @if (!string.IsNullOrEmpty(Error))
                            {
                                <tr>
                                    <td><MudText Typo="Typo.subtitle2" Color="Color.Error">Error</MudText></td>
                                    <td><MudText Color="Color.Error">@Error</MudText></td>
                                </tr>
                            }
                        </tbody>
                    </MudSimpleTable>
                }
                else if (DbProvider == "postgres")
                {
                    <MudSimpleTable Striped="true" Hover="true" Dense="true" Class="mt-3">
                        <tbody>
                            <tr>
                                <td style="width:200px"><MudText Typo="Typo.subtitle2">Host</MudText></td>
                                <td><MudText>@PgHost</MudText></td>
                            </tr>
                            <tr>
                                <td><MudText Typo="Typo.subtitle2">Database</MudText></td>
                                <td><MudText>@PgDatabase</MudText></td>
                            </tr>
                            <tr>
                                <td><MudText Typo="Typo.subtitle2">Connection String</MudText></td>
                                <td>
                                    <MudText Class="mud-text-secondary text-truncate" Style="max-width: 500px;">
                                        @PgConnStrMasked
                                    </MudText>
                                </td>
                            </tr>
                            <tr>
                                <td><MudText Typo="Typo.subtitle2">Status</MudText></td>
                                <td>
                                    <MudBadge Color="@(PgReachable ? Color.Success : Color.Error)" 
                                              Overlap="true" 
                                              Class="ml-2">
                                        <MudText Color="@(PgReachable ? Color.Success : Color.Error)">
                                            @(PgReachable ? "Connected" : "Disconnected")
                                        </MudText>
                                    </MudBadge>
                                </td>
                            </tr>
                            @if (!string.IsNullOrEmpty(PgError))
                            {
                                <tr>
                                    <td><MudText Typo="Typo.subtitle2" Color="Color.Error">Error</MudText></td>
                                    <td>
                                        <MudAlert Severity="Severity.Error" Dense="true" Class="my-2">@PgError</MudAlert>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </MudSimpleTable>
                }
            </MudCardContent>
        </MudCard>
    </MudPaper>

    <MudButton Variant="Variant.Filled" 
               Color="Color.Secondary" 
               StartIcon="@Icons.Material.Filled.ArrowBack" 
               Class="mt-4" 
               OnClick="GoToSystemInfo">
        Back to System Info
    </MudButton>
</MudContainer>

@code {
    private void GoToSystemInfo() => Navigation.NavigateTo("/system-info");
}
