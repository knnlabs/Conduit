@page "/db-status"
@using System.IO
@using Npgsql
@using System.Text.RegularExpressions
@using ConduitLLM.Core
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using System.Threading.Tasks
@using System.Text.Json
@inject NavigationManager Navigation
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime
@inject ConduitLLM.WebUI.Interfaces.IDatabaseBackupService BackupService
@implements IAsyncDisposable

@functions {
    private string? DatabasePath;
    private string? Source;
    private bool Exists;
    private bool Readable;
    private bool Writable;
    private string? Error;
    private string? FileSize;
    private string? DbProvider;
    private string? PgHost;
    private string? PgDatabase;
    private bool PgReachable;
    private string? PgError;
    private string? PgConnStrMasked;

    // Backup/Restore state
    private bool IsBackupInProgress = false;
    private bool IsRestoreInProgress = false;
    private string? BackupError;
    private string? RestoreError;
    private string? RestoreSuccess;
    private DotNetObjectReference<DbStatus>? objRef;

    // JavaScript module reference
    private IJSObjectReference? _jsModule;

    protected override async Task OnInitializedAsync()
    {
        // Use the same logic as DbConnectionHelper to determine database provider
        // First check for DATABASE_URL (Postgres)
        var databaseUrl = Environment.GetEnvironmentVariable("DATABASE_URL");
        
        if (!string.IsNullOrEmpty(databaseUrl) &&
            (databaseUrl.StartsWith("postgres://") || databaseUrl.StartsWith("postgresql://")))
        {
            DbProvider = "postgres";
            
            try
            {
                // Parse connection string using same logic as DbConnectionHelper
                string connStr = ParsePostgresUrl(databaseUrl);
                PgConnStrMasked = MaskPgConnectionString(connStr);
                
                // Extract host and database info
                var match = Regex.Match(databaseUrl, @"^(postgres(?:ql)?):\/\/(?<user>[^:]+):(?<password>[^@]+)@(?<host>[^:/]+)(?::(?<port>\d+))?\/(?<database>[^?]+)");
                if (match.Success)
                {
                    PgHost = match.Groups["host"].Value;
                    PgDatabase = match.Groups["database"].Value;
                }
                
                // Test connection
                using var conn = new NpgsqlConnection(connStr);
                conn.Open();
                PgReachable = conn.State == System.Data.ConnectionState.Open;
                conn.Close();
            }
            catch (Exception ex)
            {
                PgError = ex.Message;
                PgReachable = false;
            }
        }
        else
        {
            // Fallback to SQLite - using same logic as DbConnectionHelper
            DbProvider = "sqlite";
            
            var sqlitePath = Environment.GetEnvironmentVariable("CONDUIT_SQLITE_PATH");
            if (!string.IsNullOrEmpty(sqlitePath))
            {
                DatabasePath = sqlitePath;
                Source = "CONDUIT_SQLITE_PATH";
            }
            else
            {
                // Last fallback: default SQLite file
                DatabasePath = "ConduitConfig.db";
                Source = "Default path";
            }
            
            if (!string.IsNullOrEmpty(DatabasePath))
            {
                try
                {
                    Exists = File.Exists(DatabasePath);
                    if (Exists)
                    {
                        // Try read
                        try { using var fs = File.Open(DatabasePath, FileMode.Open, FileAccess.Read); Readable = true; } catch { Readable = false; }
                        // Try write
                        try { using var fs = File.Open(DatabasePath, FileMode.Open, FileAccess.Write); Writable = true; } catch { Writable = false; }
                        var info = new FileInfo(DatabasePath);
                        FileSize = $"{info.Length / 1024.0:F1} KB";
                    }
                    else
                    {
                        Readable = false;
                        Writable = false;
                        FileSize = "-";
                    }
                }
                catch (Exception ex)
                {
                    Error = ex.Message;
                }
            }
            else
            {
                Error = "Database path could not be determined.";
            }
        }

        // Import JavaScript module
        try {
            _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/downloadHelper.js");
        }
        catch (Exception ex) {
            Error = $"Failed to load JavaScript module: {ex.Message}";
        }

        // Initialize the object reference
        objRef = DotNetObjectReference.Create(this);
    }

    public async ValueTask DisposeAsync()
    {
        // Dispose JavaScript module
        if (_jsModule != null)
        {
            await _jsModule.DisposeAsync();
        }
        
        // Dispose object reference
        objRef?.Dispose();
    }

    private string ParsePostgresUrl(string url)
    {
        // Based on DbConnectionHelper.ParsePostgresUrl logic
        var pattern = @"^(postgres(?:ql)?):\/\/(?<user>[^:]+):(?<password>[^@]+)@(?<host>[^:/]+)(?::(?<port>\d+))?\/(?<database>[^?]+)";
        var match = Regex.Match(url, pattern);
        if (!match.Success)
            return string.Empty;

        var user = match.Groups["user"].Value;
        var password = match.Groups["password"].Value;
        var host = match.Groups["host"].Value;
        var port = match.Groups["port"].Success ? match.Groups["port"].Value : "5432";
        var database = match.Groups["database"].Value;

        // Optionally handle query params (e.g., sslmode)
        var uri = new Uri(url);
        var query = uri.Query;
        var queryString = string.IsNullOrEmpty(query) ? string.Empty : query.TrimStart('?');

        var connStr = $"Host={host};Port={port};Database={database};Username={user};Password={password}";
        if (!string.IsNullOrEmpty(queryString))
            connStr += ";" + queryString.Replace("&", ";");
        return connStr;
    }

    private string MaskPgConnectionString(string? connStr)
    {
        if (string.IsNullOrEmpty(connStr)) return string.Empty;
        var parts = connStr.Split(';');
        var maskedParts = new List<string>();
        foreach (var part in parts)
        {
            if (part.StartsWith("Password=", StringComparison.OrdinalIgnoreCase) || part.StartsWith("Pwd=", StringComparison.OrdinalIgnoreCase))
            {
                maskedParts.Add(part.Split('=')[0] + "=****");
            }
            else
            {
                maskedParts.Add(part);
            }
        }
        return string.Join(';', maskedParts);
    }

    // Backup database method
    private async Task BackupDatabaseAsync()
    {
        try
        {
            IsBackupInProgress = true;
            BackupError = null;
            StateHasChanged();

            // Instead of directly fetching from service, use API endpoint
            var baseUrl = Navigation.BaseUri.TrimEnd('/');
            var url = $"{baseUrl}/api/DatabaseBackup/backup";
            
            // Create timestamp for the file
            var timestamp = DateTime.UtcNow.ToString("yyyyMMdd_HHmmss");
            
            // Create filename with appropriate extension based on the database provider
            var fileExtension = DbProvider == "sqlite" ? "db" : "json";
            var fileName = $"conduit_backup_{timestamp}.{fileExtension}";
            
            // Trigger the download from the URL
            if (_jsModule != null)
            {
                await _jsModule.InvokeVoidAsync("downloadFromUrl", url, fileName);
            }
            else
            {
                BackupError = "JavaScript module not loaded. Please refresh the page and try again.";
            }
        }
        catch (Exception ex)
        {
            BackupError = $"Error creating backup: {ex.Message}";
        }
        finally
        {
            IsBackupInProgress = false;
            StateHasChanged();
        }
    }
    
    // Trigger file dialog for restore
    private async Task TriggerRestoreFileDialogAsync()
    {
        try
        {
            RestoreError = null;
            RestoreSuccess = null;
            StateHasChanged();
            
            // Determine the accept file types based on database provider
            string acceptTypes = DbProvider == "sqlite" ? ".db" : ".json";
            
            // Trigger file upload dialog
            if (_jsModule != null && objRef != null)
            {
                await _jsModule.InvokeVoidAsync("uploadFile", acceptTypes, objRef, "HandleFileUpload");
            }
            else
            {
                RestoreError = "JavaScript module not loaded. Please refresh the page and try again.";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            RestoreError = $"Error initializing file dialog: {ex.Message}";
            StateHasChanged();
        }
    }
    
    // Method called by JavaScript when a file is selected
    [JSInvokable]
    public async Task HandleFileUpload(object fileInfo)
    {
        try
        {
            IsRestoreInProgress = true;
            RestoreError = null;
            RestoreSuccess = null;
            StateHasChanged();
            
            // Convert fileInfo to JSON and parse properties
            var fileJson = JsonSerializer.Serialize(fileInfo);
            var fileData = JsonSerializer.Deserialize<Dictionary<string, object>>(fileJson);
            
            if (fileData == null || !fileData.ContainsKey("base64Content"))
            {
                RestoreError = "Invalid file data received";
                return;
            }
            
            // Get file properties
            string fileName = fileData.ContainsKey("fileName") ? (fileData["fileName"]?.ToString() ?? "unknown") : "unknown";
            string base64Content = fileData["base64Content"]?.ToString() ?? string.Empty;
            
            // Decode base64 to byte array
            byte[] fileBytes = Convert.FromBase64String(base64Content);
            
            // Validate the backup
            if (!await BackupService.ValidateBackupAsync(fileBytes))
            {
                RestoreError = "Invalid backup file format. Please select a correct backup file.";
                return;
            }
            
            // Restore the database from backup
            bool success = await BackupService.RestoreFromBackupAsync(fileBytes);
            
            if (success)
            {
                RestoreSuccess = $"Database successfully restored from {fileName}. You may need to restart the application for changes to take effect.";
            }
            else
            {
                RestoreError = "Failed to restore the database. Please check the logs for more information.";
            }
        }
        catch (Exception ex)
        {
            RestoreError = $"Error restoring database: {ex.Message}";
        }
        finally
        {
            IsRestoreInProgress = false;
            StateHasChanged();
        }
    }
}

<div class="container container-xxl mt-4">
    <div class="card shadow-sm p-4 mb-4">
        <h4 class="mb-4">Database Status</h4>

        <div class="card border mb-3">
            <div class="card-body">
                <div class="row">
                    <div class="col-12">
                        <div class="d-flex flex-row align-items-center p-3">
                            <i class="fa @(DbProvider == "postgres" ? "fa-database" : "fa-file-o") fa-2x text-primary me-3"></i>
                            <h6 class="mb-0">
                                @(DbProvider == "postgres" ? "PostgreSQL" : "SQLite") Database
                            </h6>
                        </div>
                    </div>
                </div>
                
                @if (DbProvider == "sqlite")
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover table-sm mt-3">
                            <tbody>
                                <tr>
                                    <td style="width:200px"><strong>Path Source</strong></td>
                                    <td>@Source</td>
                                </tr>
                                <tr>
                                    <td><strong>File Path</strong></td>
                                    <td>@DatabasePath</td>
                                </tr>
                                <tr>
                                    <td><strong>Exists</strong></td>
                                    <td>
                                        <span class="badge @(Exists ? "bg-success" : "bg-danger") ms-2">
                                            @(Exists ? "Yes" : "No")
                                        </span>
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>Readable</strong></td>
                                    <td>
                                        <span class="badge @(Readable ? "bg-success" : "bg-danger") ms-2">
                                            @(Readable ? "Yes" : "No")
                                        </span>
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>Writable</strong></td>
                                    <td>
                                        <span class="badge @(Writable ? "bg-success" : "bg-danger") ms-2">
                                            @(Writable ? "Yes" : "No")
                                        </span>
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>File Size</strong></td>
                                    <td>@FileSize</td>
                                </tr>
                                @if (!string.IsNullOrEmpty(Error))
                                {
                                    <tr>
                                        <td><strong class="text-danger">Error</strong></td>
                                        <td class="text-danger">@Error</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else if (DbProvider == "postgres")
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover table-sm mt-3">
                            <tbody>
                                <tr>
                                    <td style="width:200px"><strong>Host</strong></td>
                                    <td>@PgHost</td>
                                </tr>
                                <tr>
                                    <td><strong>Database</strong></td>
                                    <td>@PgDatabase</td>
                                </tr>
                                <tr>
                                    <td><strong>Connection String</strong></td>
                                    <td>
                                        <span class="text-secondary text-truncate d-inline-block" style="max-width: 500px;">
                                            @PgConnStrMasked
                                        </span>
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>Status</strong></td>
                                    <td>
                                        <span class="badge @(PgReachable ? "bg-success" : "bg-danger") ms-2">
                                            @(PgReachable ? "Connected" : "Disconnected")
                                        </span>
                                    </td>
                                </tr>
                                @if (!string.IsNullOrEmpty(PgError))
                                {
                                    <tr>
                                        <td><strong class="text-danger">Error</strong></td>
                                        <td>
                                            <div class="alert alert-danger py-2 my-2" role="alert">@PgError</div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>

        <div class="card border mb-3">
            <div class="card-header bg-light">
                <h5 class="mb-0">Database Backup and Restore</h5>
            </div>
            <div class="card-body">
                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="card h-100">
                            <div class="card-header bg-light">
                                <h6 class="mb-0">Backup Database</h6>
                            </div>
                            <div class="card-body">
                                <p>Create a backup file of the current database state. This will download a @(DbProvider == "sqlite" ? ".db" : ".json") file that you can store as a backup.</p>
                                <button class="btn btn-primary" @onclick="BackupDatabaseAsync" disabled="@IsBackupInProgress">
                                    @if (IsBackupInProgress)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span> Creating Backup...</span>
                                    }
                                    else
                                    {
                                        <i class="fa fa-download me-2"></i>
                                        <span>Backup Database</span>
                                    }
                                </button>
                                @if (!string.IsNullOrEmpty(BackupError))
                                {
                                    <div class="alert alert-danger mt-3">@BackupError</div>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card h-100">
                            <div class="card-header bg-light">
                                <h6 class="mb-0">Restore Database</h6>
                            </div>
                            <div class="card-body">
                                <p>Restore the database from a previously created backup file. This will replace your current database with the backup.</p>
                                <div class="alert alert-warning mb-3">
                                    <i class="fa fa-exclamation-triangle me-2"></i>
                                    <strong>Warning:</strong> This will overwrite your current database. Make sure to backup first.
                                </div>
                                <button class="btn btn-danger" @onclick="TriggerRestoreFileDialogAsync" disabled="@IsRestoreInProgress">
                                    @if (IsRestoreInProgress)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span> Restoring...</span>
                                    }
                                    else
                                    {
                                        <i class="fa fa-upload me-2"></i>
                                        <span>Restore Database</span>
                                    }
                                </button>
                                @if (!string.IsNullOrEmpty(RestoreError))
                                {
                                    <div class="alert alert-danger mt-3">@RestoreError</div>
                                }
                                @if (!string.IsNullOrEmpty(RestoreSuccess))
                                {
                                    <div class="alert alert-success mt-3">@RestoreSuccess</div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
}