@page "/image-generation"
@attribute [Authorize(Policy = "MasterKeyPolicy")]
@using Microsoft.Extensions.Options
@using ConduitLLM.Core.Models
@using ConduitLLM.Configuration
@using ConduitLLM.Configuration.DTOs
@using ConduitLLM.WebUI.Models
@using System.Text.Json
@inject ConduitLLM.WebUI.Interfaces.IAdminApiClient AdminApiClient
@inject ConduitLLM.WebUI.Interfaces.IConduitApiClient ConduitApiClient
@inject IOptions<ConduitSettings> ConduitSettingsOptions
@inject IJSRuntime JSRuntime
@inject IToastService ToastService
@inject ILogger<ImageGeneration> _logger
@using ConduitLLM.WebUI.Services
@rendermode InteractiveServer

<PageTitle>Image Generation - ConduitLLM</PageTitle>

<div class="container container-xxl">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="image-gen-header bg-gradient-primary text-white rounded-4 p-4 mb-4">
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <h1 class="h3 mb-2">
                            <i class="fa fa-image me-3"></i>Image Generation
                        </h1>
                        <p class="mb-0 opacity-90">
                            Create images from text descriptions using AI models
                        </p>
                    </div>
                    <div class="col-md-4 text-md-end">
                        <div class="image-stats">
                            <div class="stat-item">
                                <i class="fa fa-palette me-2"></i>
                                <span class="small">@availableModels.Count Models Available</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (!availableModels.Any())
    {
        <div class="alert alert-info mb-4" role="alert">
            <h4 class="alert-heading">
                <i class="fa fa-info-circle me-2"></i>No Image Generation Models Available
            </h4>
            <p class="mb-0">
                To use image generation, you need to configure models with image generation support in the Admin panel. 
                Make sure to:
            </p>
            <ul class="mb-0 mt-2">
                <li>Add provider credentials (e.g., OpenAI API key)</li>
                <li>Create model mappings for image models (e.g., dall-e-3, dall-e-2)</li>
                <li>Enable "Supports Image Generation" for those models</li>
            </ul>
        </div>
    }

    <div class="row">
        <div class="col-12 col-lg-8">
            <!-- Generation Interface Card -->
            <div class="card shadow-sm border-0 mb-4">
                <div class="card-header bg-light border-0">
                    <h5 class="mb-0">
                        <i class="fa fa-magic me-2"></i>Create Image
                    </h5>
                </div>
                <div class="card-body">
                    <!-- Prompt Input -->
                    <div class="form-group mb-4">
                        <label for="imagePrompt" class="form-label fw-semibold">
                            <i class="fa fa-edit me-2"></i>Image Description
                        </label>
                        <textarea id="imagePrompt" 
                                  class="form-control" 
                                  rows="4" 
                                  placeholder="Describe the image you want to create... e.g., 'A serene mountain landscape at sunset with a lake reflecting the orange sky'"
                                  @bind="imagePrompt"></textarea>
                        <div class="form-text">
                            Be specific about colors, styles, composition, and details you want in the image
                        </div>
                    </div>
                    
                    <!-- Size Selection -->
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <label class="form-label fw-semibold">
                                <i class="fa fa-expand me-2"></i>Image Size
                            </label>
                            <select class="form-select" @bind="selectedSize">
                                <option value="1024x1024">Square (1024x1024)</option>
                                <option value="1792x1024">Landscape (1792x1024)</option>
                                <option value="1024x1792">Portrait (1024x1792)</option>
                                @if (selectedModel?.StartsWith("dall-e-2") == true)
                                {
                                    <option value="512x512">Small Square (512x512)</option>
                                    <option value="256x256">Tiny Square (256x256)</option>
                                }
                            </select>
                        </div>
                        
                        <div class="col-md-6">
                            <label class="form-label fw-semibold">
                                <i class="fa fa-hashtag me-2"></i>Number of Images
                            </label>
                            <select class="form-select" @bind="numberOfImages">
                                <option value="1">1 Image</option>
                                <option value="2">2 Images</option>
                                <option value="3">3 Images</option>
                                <option value="4">4 Images</option>
                            </select>
                        </div>
                    </div>
                    
                    <!-- Quality Settings (for DALL-E 3) -->
                    @if (selectedModel == "dall-e-3")
                    {
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <label class="form-label fw-semibold">
                                    <i class="fa fa-gem me-2"></i>Quality
                                </label>
                                <select class="form-select" @bind="quality">
                                    <option value="standard">Standard</option>
                                    <option value="hd">HD (Higher detail)</option>
                                </select>
                            </div>
                            
                            <div class="col-md-6">
                                <label class="form-label fw-semibold">
                                    <i class="fa fa-paint-brush me-2"></i>Style
                                </label>
                                <select class="form-select" @bind="style">
                                    <option value="vivid">Vivid (Hyper-real)</option>
                                    <option value="natural">Natural (More natural)</option>
                                </select>
                            </div>
                        </div>
                    }
                    
                    <!-- Action Buttons -->
                    <div class="d-flex gap-2">
                        <button type="button" 
                                class="btn btn-primary btn-lg" 
                                @onclick="GenerateImage" 
                                disabled="@(isGenerating || string.IsNullOrWhiteSpace(imagePrompt) || !availableModels.Any())">
                            @if (isGenerating)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Generating...</span>
                            }
                            else
                            {
                                <i class="fa fa-magic me-2"></i>
                                <span>Generate Image</span>
                            }
                        </button>
                        
                        <button type="button" 
                                class="btn btn-outline-secondary" 
                                @onclick="ClearAll" 
                                disabled="@isGenerating">
                            <i class="fa fa-eraser me-2"></i>
                            Clear All
                        </button>
                    </div>
                </div>
            </div>

            <!-- Generated Images Display -->
            @if (generatedImages.Any())
            {
                <div class="card shadow-sm border-0">
                    <div class="card-header bg-light border-0">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">
                                <i class="fa fa-images me-2"></i>Generated Images
                            </h5>
                            <span class="badge bg-secondary">@generatedImages.Count images</span>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            @foreach (var (image, index) in generatedImages.Select((img, idx) => (img, idx)))
                            {
                                <div class="col-12 col-md-6">
                                    <div class="generated-image-container position-relative">
                                        <img src="@image.Url" 
                                             alt="Generated image @(index + 1)" 
                                             class="img-fluid rounded shadow-sm w-100"
                                             style="cursor: pointer;"
                                             @onclick="() => ShowImageModal(image)" />
                                        
                                        <div class="image-actions position-absolute top-0 end-0 p-2">
                                            <button class="btn btn-sm btn-light shadow-sm me-1" 
                                                    title="Download"
                                                    @onclick="() => DownloadImage(image)">
                                                <i class="fa fa-download"></i>
                                            </button>
                                            <button class="btn btn-sm btn-light shadow-sm" 
                                                    title="Delete"
                                                    @onclick="() => RemoveImage(image)">
                                                <i class="fa fa-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
        
        <div class="col-12 col-lg-4">
            <!-- Model Settings Card -->
            <div class="card shadow-sm border-0 mb-4">
                <div class="card-header bg-light border-0">
                    <h6 class="mb-0">
                        <i class="fa fa-sliders-h me-2"></i>Model Settings
                    </h6>
                </div>
                <div class="card-body">
                    <div class="form-group mb-3">
                        <label for="modelSelect" class="form-label fw-semibold">
                            <i class="fa fa-robot me-2"></i>Image Model
                        </label>
                        @if (availableModels.Any())
                        {
                            <select id="modelSelect" 
                                    class="form-select" 
                                    @bind="selectedModel"
                                    @bind:after="OnModelChanged">
                                @foreach (var model in availableModels)
                                {
                                    <option value="@model.ModelName">@model.DisplayName</option>
                                }
                            </select>
                        }
                        else
                        {
                            <div class="alert alert-warning mb-0">
                                <i class="fa fa-exclamation-triangle me-2"></i>
                                No image generation models configured. Please add models with image generation support in the Admin panel.
                            </div>
                        }
                        <div class="form-text">@GetModelDescription(selectedModel)</div>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="apiKey" class="form-label fw-semibold">
                            <i class="fa fa-key me-2"></i>API Key (Optional)
                        </label>
                        <input type="password" 
                               id="apiKey" 
                               class="form-control" 
                               placeholder="Override default key"
                               @bind="apiKey" />
                        <div class="form-text">Override the default API key for testing</div>
                    </div>
                </div>
            </div>

            <!-- Generation History Card -->
            <div class="card shadow-sm border-0">
                <div class="card-header bg-light border-0">
                    <h6 class="mb-0">
                        <i class="fa fa-history me-2"></i>Recent Prompts
                    </h6>
                </div>
                <div class="card-body">
                    @if (recentPrompts.Any())
                    {
                        <div class="list-group list-group-flush">
                            @foreach (var promptItem in recentPrompts.Take(5))
                            {
                                <a href="#" 
                                   class="list-group-item list-group-item-action small py-2 @(promptItem.IsSample ? "sample-prompt" : "")"
                                   @onclick="() => UsePrompt(promptItem.Prompt)"
                                   @onclick:preventDefault="true">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div class="text-truncate flex-grow-1">
                                            @promptItem.Prompt
                                            @if (promptItem.IsSample)
                                            {
                                                <small class="text-primary ms-1">[Sample]</small>
                                            }
                                        </div>
                                        @if (!promptItem.IsSample)
                                        {
                                            <small class="text-muted ms-2 flex-shrink-0">@GetRelativeTime(promptItem.Timestamp)</small>
                                        }
                                    </div>
                                </a>
                            }
                        </div>
                        @if (recentPrompts.Any(p => !p.IsSample))
                        {
                            <div class="mt-2">
                                <button type="button" 
                                        class="btn btn-sm btn-outline-secondary w-100"
                                        @onclick="ClearPromptHistory">
                                    <i class="fa fa-trash me-1"></i>Clear History
                                </button>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted small mb-0">No recent prompts</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Image Modal -->
@if (modalImage != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.8);">
        <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Generated Image</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body text-center p-0">
                    <img src="@modalImage.Url" alt="Full size image" class="img-fluid" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="() => DownloadImage(modalImage)">
                        <i class="fa fa-download me-2"></i>Download
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ImageModel> availableModels = new();
    private List<ImageData> generatedImages = new();
    private List<PromptHistoryItem> recentPrompts = new();
    
    private string imagePrompt = "";
    private string selectedModel = "dall-e-3";
    private string selectedSize = "1024x1024";
    private int numberOfImages = 1;
    private string quality = "standard";
    private string style = "vivid";
    private string? apiKey;
    private bool isGenerating = false;
    private ImageData? modalImage;

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableModels();
        await LoadRecentPrompts();
    }

    private async Task LoadAvailableModels()
    {
        try
        {
            // Get all model mappings from Admin API
            var mappingDtos = await AdminApiClient.GetAllModelProviderMappingsAsync();
            _logger.LogInformation("Retrieved {Count} model mappings from Admin API", mappingDtos?.Count() ?? 0);
            
            var imageGenModels = new List<ImageModel>();
            
            // Check for models with image generation capability using proper DTO fields
            foreach (var dto in mappingDtos ?? Enumerable.Empty<ModelProviderMappingDto>())
            {
                if (dto.IsEnabled && dto.SupportsImageGeneration)
                {
                    _logger.LogInformation("Found known image generation model: {Model}", dto.ModelId);
                    
                    // Get provider name from provider ID if needed
                    var providerName = dto.ProviderId;
                    if (int.TryParse(dto.ProviderId, out var providerId))
                    {
                        // Provider ID is numeric, try to resolve the name
                        var providers = await AdminApiClient.GetAllProviderCredentialsAsync();
                        var provider = providers?.FirstOrDefault(p => p.Id == providerId);
                        if (provider != null)
                        {
                            providerName = provider.ProviderName;
                        }
                    }
                    
                    imageGenModels.Add(new ImageModel
                    {
                        ModelName = dto.ModelId,
                        DisplayName = $"{dto.ModelId} ({providerName})",
                        Provider = providerName
                    });
                }
            }
            
            // If no models found in mappings, keep the list empty
            if (!imageGenModels.Any())
            {
                _logger.LogWarning("No image generation models found in mappings. Please configure models with SupportsImageGeneration=true in the Admin API.");
            }
            
            availableModels = imageGenModels;
            
            // Set default model if current selection is not available
            if (!availableModels.Any(m => m.ModelName == selectedModel) && availableModels.Any())
            {
                selectedModel = availableModels.First().ModelName;
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error loading available models");
            ToastService.ShowError("Failed to load available models");
            
            // Keep the list empty if loading fails
            availableModels = new List<ImageModel>();
            ToastService.ShowWarning("No image generation models available. Please configure models in the Admin panel.");
        }
    }

    private async Task LoadRecentPrompts()
    {
        try
        {
            var promptsJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "conduit-image-prompts");
            
            if (!string.IsNullOrEmpty(promptsJson))
            {
                var storedPrompts = JsonSerializer.Deserialize<List<PromptHistoryItem>>(promptsJson);
                if (storedPrompts != null)
                {
                    // Filter out old prompts (older than 30 days) and limit to 20 items
                    var cutoffDate = DateTime.UtcNow.AddDays(-30);
                    recentPrompts = storedPrompts
                        .Where(p => p.IsSample || p.Timestamp > cutoffDate)
                        .OrderByDescending(p => p.IsSample ? DateTime.MaxValue : p.Timestamp)
                        .Take(20)
                        .ToList();
                }
            }
            
            // Add sample prompts if no real prompts exist
            if (!recentPrompts.Any(p => !p.IsSample))
            {
                AddSamplePrompts();
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error loading prompt history from localStorage");
            AddSamplePrompts();
        }
    }

    private void AddSamplePrompts()
    {
        var samplePrompts = new List<string>
        {
            "A serene mountain landscape at sunset with a lake reflecting the orange sky",
            "Futuristic cityscape with flying cars and neon lights at night",
            "Abstract art piece with vibrant swirling colors and geometric patterns",
            "Cute robot playing with a kitten in a cozy living room",
            "Underwater coral reef ecosystem with tropical fish and sea turtles"
        };

        var samples = samplePrompts.Select(prompt => new PromptHistoryItem
        {
            Prompt = prompt,
            IsSample = true,
            Timestamp = DateTime.UtcNow
        }).ToList();

        recentPrompts.AddRange(samples);
    }

    private async Task GenerateImage()
    {
        if (string.IsNullOrWhiteSpace(imagePrompt))
        {
            ToastService.ShowWarning("Please enter an image description");
            return;
        }

        isGenerating = true;
        try
        {
            var request = new ImageGenerationRequest
            {
                Prompt = imagePrompt,
                Model = selectedModel,
                N = numberOfImages,
                Size = selectedSize,
                Quality = quality,
                Style = style,
                ResponseFormat = "url"
            };

            var response = await ConduitApiClient.CreateImageAsync(request, apiKey);
            
            if (response?.Data != null)
            {
                generatedImages.AddRange(response.Data);
                
                // Add to recent prompts
                await AddToPromptHistory(imagePrompt);
                
                ToastService.ShowSuccess($"Successfully generated {response.Data.Count} image(s)");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error generating image");
            ToastService.ShowError($"Error: {ex.Message}");
        }
        finally
        {
            isGenerating = false;
        }
    }

    private void OnModelChanged()
    {
        // Adjust settings based on selected model
        if (selectedModel == "dall-e-2")
        {
            // DALL-E 2 only supports 1 image at a time in some configurations
            if (numberOfImages > 1)
                numberOfImages = 1;
                
            // Reset to standard size if using DALL-E 3 specific sizes
            if (selectedSize == "1792x1024" || selectedSize == "1024x1792")
                selectedSize = "1024x1024";
        }
    }

    private string GetModelDescription(string model)
    {
        return model switch
        {
            "dall-e-3" => "Latest OpenAI model with best quality and detail",
            "dall-e-2" => "Previous OpenAI model, faster but less detailed",
            "image-01" => "MiniMax's image generation model",
            "stable-diffusion-xl" => "Open-source model with artistic flexibility",
            _ => "Image generation model"
        };
    }

    private async Task AddToPromptHistory(string prompt)
    {
        try
        {
            // Remove sample prompts when first real prompt is added
            if (recentPrompts.All(p => p.IsSample))
            {
                recentPrompts.Clear();
            }

            // Remove existing prompt if it exists
            recentPrompts.RemoveAll(p => p.Prompt.Equals(prompt, StringComparison.OrdinalIgnoreCase));

            // Add new prompt at the beginning
            recentPrompts.Insert(0, new PromptHistoryItem
            {
                Prompt = prompt,
                IsSample = false,
                Timestamp = DateTime.UtcNow
            });

            // Keep only the last 20 prompts
            if (recentPrompts.Count > 20)
            {
                recentPrompts = recentPrompts.Take(20).ToList();
            }

            // Save to localStorage
            var promptsJson = JsonSerializer.Serialize(recentPrompts);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "conduit-image-prompts", promptsJson);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error saving prompt to history");
        }
    }

    private async Task ClearPromptHistory()
    {
        try
        {
            recentPrompts.RemoveAll(p => !p.IsSample);
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "conduit-image-prompts");
            
            // Add sample prompts back if no real prompts exist
            if (!recentPrompts.Any())
            {
                AddSamplePrompts();
            }
            
            ToastService.ShowInfo("Prompt history cleared");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error clearing prompt history");
            ToastService.ShowError("Failed to clear prompt history");
        }
    }

    private string GetRelativeTime(DateTime timestamp)
    {
        var timeSpan = DateTime.UtcNow - timestamp;
        
        if (timeSpan.TotalMinutes < 1) return "Just now";
        if (timeSpan.TotalMinutes < 60) return $"{(int)timeSpan.TotalMinutes}m ago";
        if (timeSpan.TotalHours < 24) return $"{(int)timeSpan.TotalHours}h ago";
        if (timeSpan.TotalDays < 7) return $"{(int)timeSpan.TotalDays}d ago";
        return timestamp.ToString("MMM dd");
    }

    private void UsePrompt(string prompt)
    {
        imagePrompt = prompt;
    }

    private void ClearAll()
    {
        imagePrompt = "";
        generatedImages.Clear();
    }

    private void RemoveImage(ImageData image)
    {
        generatedImages.Remove(image);
    }

    private void ShowImageModal(ImageData image)
    {
        modalImage = image;
    }

    private void CloseModal()
    {
        modalImage = null;
    }

    private async Task DownloadImage(ImageData image)
    {
        if (!string.IsNullOrEmpty(image.Url))
        {
            await JSRuntime.InvokeVoidAsync("downloadImage", image.Url, $"generated-image-{DateTime.Now:yyyyMMdd-HHmmss}.png");
        }
    }

    private class ImageModel
    {
        public string ModelName { get; set; } = "";
        public string DisplayName { get; set; } = "";
        public string Provider { get; set; } = "";
    }

    private class PromptHistoryItem
    {
        public string Prompt { get; set; } = "";
        public bool IsSample { get; set; }
        public DateTime Timestamp { get; set; }
    }
}

<style>
    .image-gen-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    
    .generated-image-container {
        position: relative;
        overflow: hidden;
        border-radius: 0.5rem;
    }
    
    .generated-image-container:hover .image-actions {
        opacity: 1;
    }
    
    .image-actions {
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    
    .modal.show {
        display: block !important;
    }
    
    .sample-prompt {
        background-color: rgba(13, 110, 253, 0.05);
        border-left: 3px solid #0d6efd;
    }
    
    .sample-prompt:hover {
        background-color: rgba(13, 110, 253, 0.1);
    }
</style>