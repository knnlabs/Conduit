@page "/image-generation"
@attribute [Authorize(Policy = "MasterKeyPolicy")]
@using Microsoft.Extensions.Options
@using ConduitLLM.Core.Models
@using ConduitLLM.Configuration
@using ConduitLLM.Configuration.DTOs
@using ConduitLLM.WebUI.Models
@using System.Text.Json
@using System.Text.Json.Serialization
@using Microsoft.JSInterop
@inject ConduitLLM.WebUI.Interfaces.IAdminApiClient AdminApiClient
@inject ConduitLLM.WebUI.Interfaces.IConduitApiClient ConduitApiClient
@inject IOptions<ConduitSettings> ConduitSettingsOptions
@inject IJSRuntime JSRuntime
@inject ServerSideSignalRService SignalRService
@inject IToastService ToastService
@inject ILogger<ImageGeneration> _logger
@using ConduitLLM.WebUI.Services
@rendermode InteractiveServer
@implements IServerSideSignalRListener
@implements IDisposable

<PageTitle>Image Generation - ConduitLLM</PageTitle>

<div class="container container-xxl">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="image-gen-header bg-gradient-primary text-white rounded-4 p-4 mb-4">
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <h1 class="h3 mb-2">
                            <i class="fa fa-image me-3"></i>Image Generation
                        </h1>
                        <p class="mb-0 opacity-90">
                            Create images from text descriptions using AI models
                        </p>
                    </div>
                    <div class="col-md-4 text-md-end">
                        <div class="image-stats">
                            <div class="stat-item">
                                <i class="fa fa-palette me-2"></i>
                                <span class="small">@availableModels.Count Models Available</span>
                            </div>
                            <div class="stat-item mt-2">
                                <ConnectionStatusIndicator />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @* Display persistent error alert if there's a recent error *@
    @if (!string.IsNullOrEmpty(lastError) && lastErrorTime.HasValue && (DateTime.Now - lastErrorTime.Value).TotalMinutes < 5)
    {
        <div class="alert alert-danger shadow-sm border-0 mb-4" role="alert">
            <div class="d-flex justify-content-between align-items-start">
                <div class="d-flex align-items-start flex-grow-1">
                    <i class="fa fa-exclamation-circle fa-2x me-3"></i>
                    <div class="flex-grow-1">
                        <h6 class="alert-heading mb-1">API Error</h6>
                        <p class="mb-2">@lastError</p>
                        <small class="text-muted">
                            <i class="fa fa-clock me-1"></i>
                            @lastErrorTime.Value.ToString("h:mm:ss tt")
                        </small>
                    </div>
                </div>
                <button type="button" class="btn-close" @onclick="() => { lastError = null; lastErrorTime = null; }" aria-label="Close"></button>
            </div>
        </div>
    }

    @if (!availableModels.Any())
    {
        <div class="alert alert-info mb-4" role="alert">
            <h4 class="alert-heading">
                <i class="fa fa-info-circle me-2"></i>No Image Generation Models Available
            </h4>
            <p class="mb-0">
                To use image generation, you need to configure models with image generation support in the Admin panel. 
                Make sure to:
            </p>
            <ul class="mb-0 mt-2">
                <li>Add provider credentials</li>
                <li>Create model mappings for image generation models</li>
                <li>Enable "Supports Image Generation" for those models</li>
            </ul>
        </div>
    }

    <div class="row">
        <div class="col-12 col-lg-8">
            <!-- Generation Interface Card -->
            <div class="card shadow-sm border-0 mb-4">
                <div class="card-header bg-light border-0">
                    <h5 class="mb-0">
                        <i class="fa fa-magic me-2"></i>Create Image
                    </h5>
                </div>
                <div class="card-body">
                    <!-- Prompt Input -->
                    <div class="form-group mb-4">
                        <label for="imagePrompt" class="form-label fw-semibold">
                            <i class="fa fa-edit me-2"></i>Image Description
                        </label>
                        <textarea id="imagePrompt" 
                                  class="form-control" 
                                  rows="4" 
                                  placeholder="Describe the image you want to create... e.g., 'A serene mountain landscape at sunset with a lake reflecting the orange sky'"
                                  @bind="imagePrompt"></textarea>
                        <div class="form-text">
                            Be specific about colors, styles, composition, and details you want in the image
                        </div>
                    </div>
                    
                    <!-- Image-to-Image Input -->
                    <div class="form-group mb-4">
                        <label class="form-label fw-semibold">
                            <i class="fa fa-image me-2"></i>Source Image (Optional - for Image-to-Image)
                        </label>
                        <div class="image-upload-area">
                            <InputFile OnChange="@HandleSourceImageUpload" accept="image/*" class="form-control" />
                            <div class="form-text">Upload an image to modify or create variations from. Leave empty for text-to-image generation.</div>
                        </div>
                        
                        @if (sourceImage != null)
                        {
                            <div class="source-image-preview mt-3">
                                <div class="d-flex align-items-start gap-3">
                                    <div class="position-relative">
                                        <img src="@sourceImage.DataUrl" alt="Source image" class="img-thumbnail" style="height: 120px; object-fit: cover;" />
                                        <button type="button" class="btn btn-sm btn-danger position-absolute top-0 end-0 m-1" 
                                                @onclick="RemoveSourceImage">
                                            <i class="fa fa-times"></i>
                                        </button>
                                    </div>
                                    <div class="flex-grow-1">
                                        <div class="form-group">
                                            <label class="form-label fw-semibold small">Operation Type</label>
                                            <select class="form-select form-select-sm" @bind="operationType">
                                                <option value="edit">Edit Image (modify with prompt)</option>
                                                <option value="variation">Create Variations (ignore prompt)</option>
                                            </select>
                                        </div>
                                        @if (operationType == "edit")
                                        {
                                            <div class="mt-2">
                                                <small class="text-muted">
                                                    <i class="fa fa-info-circle me-1"></i>
                                                    The prompt will be used to modify the uploaded image
                                                </small>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="mt-2">
                                                <small class="text-muted">
                                                    <i class="fa fa-info-circle me-1"></i>
                                                    Variations will be created regardless of the prompt
                                                </small>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    
                    <!-- Size Selection -->
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <label class="form-label fw-semibold">
                                <i class="fa fa-expand me-2"></i>Image Size
                            </label>
                            <select class="form-select" @bind="selectedSize">
                                <option value="1024x1024">Square (1024x1024)</option>
                                <option value="1792x1024">Landscape (1792x1024)</option>
                                <option value="1024x1792">Portrait (1024x1792)</option>
                                <option value="512x512">Small Square (512x512)</option>
                                <option value="256x256">Tiny Square (256x256)</option>
                            </select>
                        </div>
                        
                        <div class="col-md-6">
                            <label class="form-label fw-semibold">
                                <i class="fa fa-hashtag me-2"></i>Number of Images
                            </label>
                            <select class="form-select" @bind="numberOfImages">
                                <option value="1">1 Image</option>
                                <option value="2">2 Images</option>
                                <option value="3">3 Images</option>
                                <option value="4">4 Images</option>
                            </select>
                        </div>
                    </div>
                    
                    <!-- Quality Settings -->
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <label class="form-label fw-semibold">
                                <i class="fa fa-gem me-2"></i>Quality
                            </label>
                            <select class="form-select" @bind="quality">
                                <option value="standard">Standard</option>
                                <option value="hd">HD (Higher detail)</option>
                            </select>
                        </div>
                        
                        <div class="col-md-6">
                            <label class="form-label fw-semibold">
                                <i class="fa fa-paint-brush me-2"></i>Style
                            </label>
                            <select class="form-select" @bind="style">
                                <option value="vivid">Vivid (Hyper-real)</option>
                                <option value="natural">Natural (More natural)</option>
                            </select>
                        </div>
                    </div>
                    
                    <!-- Action Buttons -->
                    <div class="d-flex gap-2">
                        <button type="button" 
                                class="btn btn-primary btn-lg" 
                                @onclick="GenerateImage" 
                                disabled="@(isGenerating || string.IsNullOrWhiteSpace(imagePrompt) || !availableModels.Any())">
                            @if (isGenerating)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Generating...</span>
                            }
                            else
                            {
                                <i class="fa fa-magic me-2"></i>
                                <span>Generate Image</span>
                            }
                        </button>
                        
                        <button type="button" 
                                class="btn btn-outline-secondary" 
                                @onclick="ClearAll" 
                                disabled="@isGenerating">
                            <i class="fa fa-eraser me-2"></i>
                            Clear All
                        </button>
                    </div>
                </div>
            </div>

            <!-- Active Generation Tasks -->
            @if (activeTasks.Any())
            {
                <div class="card shadow-sm border-0 mb-4">
                    <div class="card-header bg-light border-0">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">
                                <i class="fa fa-tasks me-2"></i>Active Generation Tasks
                            </h5>
                            <span class="badge bg-primary">@activeTasks.Count tasks</span>
                        </div>
                    </div>
                    <div class="card-body">
                        @foreach (var task in activeTasks)
                        {
                            <div class="task-item border rounded p-3 mb-3">
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <div class="flex-grow-1">
                                        <h6 class="mb-1 text-truncate" title="@task.Prompt">@task.Prompt</h6>
                                        <small class="text-muted">
                                            <i class="fa fa-clock me-1"></i>Started: @task.CreatedAt.ToString("h:mm:ss tt")
                                        </small>
                                    </div>
                                    <span class="badge bg-@GetStatusBadgeClass(task.Status)">@task.Status</span>
                                </div>
                                
                                @if (task.Progress.HasValue)
                                {
                                    <div class="progress mb-2" style="height: 8px;">
                                        <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                             role="progressbar" 
                                             style="width: @(task.Progress)%"
                                             aria-valuenow="@task.Progress" 
                                             aria-valuemin="0" 
                                             aria-valuemax="100">
                                        </div>
                                    </div>
                                }
                                
                                @if (!string.IsNullOrEmpty(task.Error))
                                {
                                    <div class="alert alert-danger small mb-0 mt-2">
                                        <i class="fa fa-exclamation-circle me-1"></i>@task.Error
                                    </div>
                                }
                                
                                @if (task.Status == "pending" || task.Status == "running")
                                {
                                    <button class="btn btn-sm btn-outline-danger mt-2" 
                                            @onclick="() => CancelTask(task.TaskId)">
                                        <i class="fa fa-times me-1"></i>Cancel
                                    </button>
                                }
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Generated Images Display -->
            @if (generatedImages.Any())
            {
                <div class="card shadow-sm border-0">
                    <div class="card-header bg-light border-0">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">
                                <i class="fa fa-images me-2"></i>Generated Images
                            </h5>
                            <span class="badge bg-secondary">@generatedImages.Count images</span>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            @foreach (var (image, index) in generatedImages.Select((img, idx) => (img, idx)))
                            {
                                <div class="col-12 col-md-6">
                                    <div class="generated-image-container position-relative">
                                        <img src="@GetImageSource(image)" 
                                             alt="Generated image @(index + 1)" 
                                             class="img-fluid rounded shadow-sm w-100"
                                             style="cursor: pointer;"
                                             @onclick="() => ShowImageModal(image)" />
                                        
                                        <div class="image-actions position-absolute top-0 end-0 p-2">
                                            <button class="btn btn-sm btn-light shadow-sm me-1" 
                                                    title="Download"
                                                    @onclick="() => DownloadImage(image)">
                                                <i class="fa fa-download"></i>
                                            </button>
                                            <button class="btn btn-sm btn-light shadow-sm" 
                                                    title="Delete"
                                                    @onclick="() => RemoveImage(image)">
                                                <i class="fa fa-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
        
        <div class="col-12 col-lg-4">
            <!-- Model Settings Card -->
            <div class="card shadow-sm border-0 mb-4">
                <div class="card-header bg-light border-0">
                    <h6 class="mb-0">
                        <i class="fa fa-sliders-h me-2"></i>Model Settings
                    </h6>
                </div>
                <div class="card-body">
                    <div class="form-group mb-3">
                        <label for="modelSelect" class="form-label fw-semibold">
                            <i class="fa fa-robot me-2"></i>Image Model
                        </label>
                        @if (availableModels.Any())
                        {
                            <select id="modelSelect" 
                                    class="form-select" 
                                    @bind="selectedModel"
                                    @bind:after="OnModelChanged">
                                @foreach (var model in availableModels)
                                {
                                    <option value="@model.ModelName">@model.DisplayName</option>
                                }
                            </select>
                        }
                        else
                        {
                            <div class="alert alert-warning mb-0">
                                <i class="fa fa-exclamation-triangle me-2"></i>
                                No image generation models configured. Please add models with image generation support in the Admin panel.
                            </div>
                        }
                        <div class="form-text">@GetModelDescription(selectedModel)</div>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="apiKey" class="form-label fw-semibold">
                            <i class="fa fa-key me-2"></i>API Key (Optional)
                        </label>
                        <input type="password" 
                               id="apiKey" 
                               class="form-control" 
                               placeholder="Override default key"
                               @bind="apiKey" />
                        <div class="form-text">Override the default API key for testing</div>
                    </div>
                </div>
            </div>

            <!-- Generation History Card -->
            <RecentPrompts @ref="recentPromptsComponent"
                          LocalStorageKey="conduit-image-prompts"
                          DefaultSamplePrompts="@GetDefaultSamplePrompts()"
                          OnPromptClick="UsePrompt" />
        </div>
    </div>
</div>

<!-- Image Modal -->
@if (modalImage != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.8);">
        <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Generated Image</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body text-center p-0">
                    <img src="@GetImageSource(modalImage)" alt="Full size image" class="img-fluid" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="() => DownloadImage(modalImage)">
                        <i class="fa fa-download me-2"></i>Download
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ImageModel> availableModels = new();
    private List<ImageData> generatedImages = new();
    private RecentPrompts? recentPromptsComponent;
    private List<ImageGenerationTask> activeTasks = new();
    private bool isInitialized = false;
    
    private string imagePrompt = "";
    private string selectedModel = "";
    private string selectedSize = "1024x1024";
    private int numberOfImages = 1;
    private string quality = "standard";
    private string style = "vivid";
    private string? apiKey;
    private bool isGenerating = false;
    private ImageData? modalImage;
    
    // Image-to-image related fields
    private AttachedImage? sourceImage;
    private string operationType = "edit";
    private const long MaxFileSize = 20 * 1024 * 1024; // 20MB max file size
    
    // Error tracking
    private string? lastError = null;
    private DateTime? lastErrorTime = null;
    
    private class AttachedImage
    {
        public string FileName { get; set; } = "";
        public string DataUrl { get; set; } = "";
        public string ContentType { get; set; } = "";
        public string Base64Data { get; set; } = "";
    }

    private class ImageGenerationTask
    {
        public string TaskId { get; set; } = "";
        public string Status { get; set; } = "";
        public DateTimeOffset CreatedAt { get; set; }
        public DateTimeOffset UpdatedAt { get; set; }
        public DateTimeOffset? CompletedAt { get; set; }
        public string Prompt { get; set; } = "";
        public int? Progress { get; set; }
        public string? Error { get; set; }
        public DateTimeOffset? EstimatedCompletionTime { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableModels();
        // Load persisted active tasks
        await LoadPersistedTasks();
        
        // Register as a SignalR listener
        SignalRService.RegisterListener(this);
        isInitialized = true;
    }
    
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    private async Task LoadAvailableModels()
    {
        try
        {
            // Get all model mappings from Admin API
            var mappingDtos = await AdminApiClient.GetAllModelProviderMappingsAsync();
            _logger.LogInformation("Retrieved {Count} model mappings from Admin API", mappingDtos?.Count() ?? 0);
            
            var imageGenModels = new List<ImageModel>();
            
            // Check for models with image generation capability using proper DTO fields
            foreach (var dto in mappingDtos ?? Enumerable.Empty<ModelProviderMappingDto>())
            {
                if (dto.IsEnabled && dto.SupportsImageGeneration)
                {
                    _logger.LogInformation("Found known image generation model: {Model}", dto.ModelId);
                    
                    // Get provider name from provider ID if needed
                    var providerName = dto.ProviderId;
                    if (int.TryParse(dto.ProviderId, out var providerId))
                    {
                        // Provider ID is numeric, try to resolve the name
                        var providers = await AdminApiClient.GetAllProviderCredentialsAsync();
                        var provider = providers?.FirstOrDefault(p => p.Id == providerId);
                        if (provider != null)
                        {
                            providerName = provider.ProviderName;
                        }
                    }
                    
                    imageGenModels.Add(new ImageModel
                    {
                        ModelName = dto.ModelId,
                        DisplayName = $"{dto.ModelId} ({providerName})",
                        Provider = providerName
                    });
                }
            }
            
            // If no models found in mappings, keep the list empty
            if (!imageGenModels.Any())
            {
                _logger.LogWarning("No image generation models found in mappings. Please configure models with SupportsImageGeneration=true in the Admin API.");
            }
            
            availableModels = imageGenModels;
            
            // Set default model if current selection is not available or empty
            if ((string.IsNullOrEmpty(selectedModel) || !availableModels.Any(m => m.ModelName == selectedModel)) && availableModels.Any())
            {
                selectedModel = availableModels.First().ModelName;
                _logger.LogInformation("Set default selected model to: {Model}", selectedModel);
            }
        }
        catch (Exception ex)
        {
            // Set the last error for persistent display
            lastError = ex.Message;
            lastErrorTime = DateTime.Now;
            
            _logger.LogError(ex, "Error loading available models");
            ToastService.ShowError("Failed to load available models");
            
            // Keep the list empty if loading fails
            availableModels = new List<ImageModel>();
            ToastService.ShowWarning("No image generation models available. Please configure models in the Admin panel.");
        }
    }

    private List<string> GetDefaultSamplePrompts()
    {
        return new List<string>
        {
            "A serene mountain landscape at sunset with a lake reflecting the orange sky",
            "Futuristic cityscape with flying cars and neon lights at night",
            "Abstract art piece with vibrant swirling colors and geometric patterns",
            "Cute robot playing with a kitten in a cozy living room",
            "Underwater coral reef ecosystem with tropical fish and sea turtles"
        };
    }

    private async Task GenerateImage()
    {
        // Validation
        if (sourceImage == null && string.IsNullOrWhiteSpace(imagePrompt))
        {
            ToastService.ShowWarning("Please enter an image description or upload a source image");
            return;
        }

        if (string.IsNullOrWhiteSpace(selectedModel))
        {
            ToastService.ShowWarning("Please select an image generation model");
            return;
        }

        // For variations, we don't require a prompt
        if (sourceImage != null && operationType == "variation" && string.IsNullOrWhiteSpace(imagePrompt))
        {
            // This is okay for variations
        }
        else if (string.IsNullOrWhiteSpace(imagePrompt))
        {
            ToastService.ShowWarning("Please enter an image description");
            return;
        }

        isGenerating = true;
        StateHasChanged(); // Ensure UI updates immediately
        try
        {
            var request = new ImageGenerationRequest
            {
                Prompt = imagePrompt,
                Model = selectedModel,
                N = numberOfImages,
                Size = selectedSize,
                Quality = quality,
                Style = style,
                ResponseFormat = "url" // Changed to URL for async generation
            };

            // Add image-to-image parameters if source image is provided
            if (sourceImage != null)
            {
                request.Image = sourceImage.Base64Data;
                request.Operation = operationType;
                
                // For variations, use empty prompt if none provided
                if (operationType == "variation" && string.IsNullOrWhiteSpace(imagePrompt))
                {
                    request.Prompt = ""; // Some providers may require an empty prompt for variations
                }
            }

            // Always use async for image generation to avoid UI blocking
            await StartAsyncImageGeneration(request);
            
            // For async generation, we reset the generating flag after the task is created
            isGenerating = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Set the last error for persistent display
            lastError = ex.Message;
            lastErrorTime = DateTime.Now;
            
            _logger.LogError(ex, "Error generating image");
            ToastService.ShowError($"Error: {ex.Message}");
            
            // Only reset on error
            isGenerating = false;
            StateHasChanged();
        }
    }

    private void OnModelChanged()
    {
        // Model changed - could add generic logic here if needed
        // Model-specific constraints should be handled by the API based on actual capabilities
    }

    private string GetModelDescription(string model)
    {
        // Return a generic description - specific model details should come from configuration
        return "Image generation model";
    }


    private void UsePrompt(string prompt)
    {
        imagePrompt = prompt;
    }

    private void ClearAll()
    {
        imagePrompt = "";
        generatedImages.Clear();
        sourceImage = null;
    }

    private void RemoveImage(ImageData image)
    {
        generatedImages.Remove(image);
    }

    private void ShowImageModal(ImageData image)
    {
        modalImage = image;
    }

    private void CloseModal()
    {
        modalImage = null;
    }

    private string GetImageSource(ImageData image)
    {
        if (!string.IsNullOrEmpty(image.B64Json))
        {
            return $"data:image/png;base64,{image.B64Json}";
        }
        else if (!string.IsNullOrEmpty(image.Url))
        {
            return image.Url;
        }
        return "";
    }

    private async Task DownloadImage(ImageData image)
    {
        var imageSource = GetImageSource(image);
        if (!string.IsNullOrEmpty(imageSource))
        {
            await JSRuntime.InvokeVoidAsync("downloadImage", imageSource, $"generated-image-{DateTime.Now:yyyyMMdd-HHmmss}.png");
        }
    }

    private async Task HandleSourceImageUpload(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        if (imageFile == null) return;

        if (imageFile.Size > MaxFileSize)
        {
            ToastService.ShowError($"File {imageFile.Name} is too large. Maximum size is 20MB.");
            return;
        }

        if (!imageFile.ContentType.StartsWith("image/"))
        {
            ToastService.ShowError($"File {imageFile.Name} is not an image.");
            return;
        }

        try
        {
            // Read the image and convert to base64
            using var stream = imageFile.OpenReadStream(MaxFileSize);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var bytes = ms.ToArray();
            var base64 = Convert.ToBase64String(bytes);
            var dataUrl = $"data:{imageFile.ContentType};base64,{base64}";

            sourceImage = new AttachedImage
            {
                FileName = imageFile.Name,
                DataUrl = dataUrl,
                ContentType = imageFile.ContentType,
                Base64Data = base64
            };

            ToastService.ShowSuccess($"Source image uploaded: {imageFile.Name}");
        }
        catch (Exception ex)
        {
            // Set the last error for persistent display
            lastError = $"Error uploading {imageFile.Name}: {ex.Message}";
            lastErrorTime = DateTime.Now;
            
            _logger.LogError(ex, "Error uploading source image {FileName}", imageFile.Name);
            ToastService.ShowError($"Error uploading {imageFile.Name}: {ex.Message}");
        }

        StateHasChanged();
    }

    private void RemoveSourceImage()
    {
        sourceImage = null;
        StateHasChanged();
    }

    private async Task StartAsyncImageGeneration(ImageGenerationRequest request)
    {
        try
        {
            var taskResponse = await ConduitApiClient.CreateImageAsyncTask(request, string.IsNullOrWhiteSpace(apiKey) ? null : apiKey);
            
            if (taskResponse != null && !string.IsNullOrEmpty(taskResponse.TaskId))
            {
                var task = new ImageGenerationTask
                {
                    TaskId = taskResponse.TaskId,
                    Status = taskResponse.Status,
                    CreatedAt = taskResponse.CreatedAt,
                    Prompt = imagePrompt,
                    EstimatedCompletionTime = taskResponse.EstimatedCompletionTime
                };
                
                activeTasks.Add(task);
                
                // Persist active tasks
                await SavePersistedTasks();
                
                // Subscribe to SignalR updates for this task
                await SignalRService.SubscribeToImageTask(taskResponse.TaskId);
                _logger.LogInformation("Subscribed to SignalR updates for task {TaskId}", taskResponse.TaskId);
                
                // Add to recent prompts
                if (!string.IsNullOrWhiteSpace(imagePrompt) && recentPromptsComponent != null)
                {
                    await recentPromptsComponent.AddPromptToHistory(imagePrompt);
                }
                
                ToastService.ShowInfo($"Image generation started. Task ID: {taskResponse.TaskId}");
            }
            else
            {
                ToastService.ShowError("Failed to start image generation task");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error starting async image generation");
            throw;
        }
    }


    // IServerSideSignalRListener implementation
    public async Task OnConnectionStateChanged(string hubName, ConnectionState state)
    {
        if (hubName == "image-generation")
        {
            _logger.LogInformation("Image generation hub connection state changed to {State}", state);
            
            if (state == ConnectionState.Connected)
            {
                // Re-subscribe to all active tasks
                foreach (var task in activeTasks.Where(t => t.Status == "pending" || t.Status == "running"))
                {
                    await SignalRService.SubscribeToImageTask(task.TaskId);
                }
            }
            
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task OnImageGenerationProgress(string taskId, JsonElement progress)
    {
        try
        {
            var task = activeTasks.FirstOrDefault(t => t.TaskId == taskId);
            
            if (task != null)
            {
                // Update task status from progress data
                if (progress.TryGetProperty("status", out var statusElement))
                {
                    task.Status = statusElement.GetString() ?? "running";
                }
                
                if (progress.TryGetProperty("progress", out var progressElement))
                {
                    task.Progress = progressElement.GetInt32();
                }
                
                task.UpdatedAt = DateTimeOffset.UtcNow;
                _logger.LogInformation("Image generation progress for task {TaskId}: {Progress}%", taskId, task.Progress);
                
                await SavePersistedTasks();
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error handling image generation started event");
        }
    }


    public async Task OnImageGenerationCompleted(string taskId, JsonElement result)
    {
        try
        {
            _logger.LogInformation("Image generation completed for task {TaskId}", taskId);
            var task = activeTasks.FirstOrDefault(t => t.TaskId == taskId);
            
            if (task != null)
            {
                task.Status = "completed";
                task.Progress = 100;
                task.CompletedAt = DateTimeOffset.UtcNow;
                task.UpdatedAt = DateTimeOffset.UtcNow;
                
                // Check if image URLs are provided in the SignalR event
                if (result.TryGetProperty("images", out var imagesElement))
                {
                    foreach (var imageElement in imagesElement.EnumerateArray())
                    {
                        if (imageElement.TryGetProperty("url", out var urlElement))
                        {
                            var imageData = new ImageData
                            {
                                Url = urlElement.GetString()
                            };
                            generatedImages.Add(imageData);
                        }
                    }
                    ToastService.ShowSuccess($"Image generation completed for task {task.TaskId}");
                }
                else
                {
                    // Fallback: fetch the completed images from API if not in event
                    var status = await ConduitApiClient.GetImageGenerationStatusAsync(task.TaskId, apiKey);
                    if (status != null)
                    {
                        if (status.ImageResponse?.Data != null && status.ImageResponse.Data.Any())
                        {
                            generatedImages.AddRange(status.ImageResponse.Data);
                        }
                        else if (!string.IsNullOrEmpty(status.Result))
                        {
                            // Parse the result JSON to get the image data
                            try
                            {
                                var jsonOptions = new JsonSerializerOptions
                                {
                                    PropertyNamingPolicy = JsonNamingPolicy.SnakeCaseLower
                                };
                                var resultData = System.Text.Json.JsonSerializer.Deserialize<ImageGenerationResult>(status.Result, jsonOptions);
                                if (resultData?.Data != null && resultData.Data.Any())
                                {
                                    generatedImages.AddRange(resultData.Data);
                                }
                            }
                            catch (Exception ex)
                            {
                                _logger.LogError(ex, "Failed to parse image result for task {TaskId}", task.TaskId);
                            }
                        }
                        ToastService.ShowSuccess($"Image generation completed for task {task.TaskId}");
                    }
                }
                
                // Clean up old completed tasks
                var cutoffTime = DateTimeOffset.UtcNow.AddSeconds(-30);
                activeTasks.RemoveAll(t => 
                    (t.Status == "completed" || t.Status == "failed" || t.Status == "cancelled") 
                    && t.CompletedAt.HasValue 
                    && t.CompletedAt.Value < cutoffTime);
                
                await SavePersistedTasks();
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error handling image generation completed event");
        }
    }

    public async Task OnImageGenerationFailed(string taskId, string error)
    {
        try
        {
            _logger.LogError("Image generation failed for task {TaskId}: {Error}", taskId, error);
            
            var task = activeTasks.FirstOrDefault(t => t.TaskId == taskId);
            
            if (task != null)
            {
                task.Status = "failed";
                task.Error = error;
                task.CompletedAt = DateTimeOffset.UtcNow;
                task.UpdatedAt = DateTimeOffset.UtcNow;
                
                ToastService.ShowError($"Image generation failed: {error}");
                await SavePersistedTasks();
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error handling image generation failed event");
        }
    }

    // Default implementations for other SignalR events
    public Task OnSystemNotificationReceived(JsonElement notification) => Task.CompletedTask;
    public Task OnModelMappingChanged(JsonElement data) => Task.CompletedTask;
    public Task OnProviderHealthChanged(JsonElement data) => Task.CompletedTask;
    public Task OnNavigationStateChanged(JsonElement data) => Task.CompletedTask;
    public Task OnVideoGenerationProgress(string taskId, JsonElement progress) => Task.CompletedTask;
    public Task OnVideoGenerationCompleted(string taskId, JsonElement result) => Task.CompletedTask;
    public Task OnVideoGenerationFailed(string taskId, string error) => Task.CompletedTask;
    public Task OnSpendUpdate(JsonElement notification) => Task.CompletedTask;
    public Task OnBudgetAlert(JsonElement notification) => Task.CompletedTask;
    public Task OnSpendSummary(JsonElement notification) => Task.CompletedTask;
    public Task OnUnusualSpending(JsonElement notification) => Task.CompletedTask;
    public Task OnNewModelsDiscovered(JsonElement notification) => Task.CompletedTask;
    public Task OnModelCapabilitiesChanged(JsonElement notification) => Task.CompletedTask;
    public Task OnModelPricingUpdated(JsonElement notification) => Task.CompletedTask;
    public Task OnModelDeprecated(JsonElement notification) => Task.CompletedTask;
    public Task OnBatchOperationProgress(string operationId, JsonElement progress) => Task.CompletedTask;
    public Task OnBatchOperationCompleted(string operationId, JsonElement result) => Task.CompletedTask;
    public Task OnBatchOperationFailed(string operationId, string error) => Task.CompletedTask;
    public Task OnAdminNotificationReceived(JsonElement notification) => Task.CompletedTask;

    private async Task CancelTask(string taskId)
    {
        try
        {
            var success = await ConduitApiClient.CancelImageGenerationAsync(taskId, apiKey);
            if (success)
            {
                var task = activeTasks.FirstOrDefault(t => t.TaskId == taskId);
                if (task != null)
                {
                    task.Status = "cancelled";
                    task.CompletedAt = DateTimeOffset.UtcNow;
                }
                
                await SavePersistedTasks();
                ToastService.ShowInfo("Image generation task cancelled");
            }
            else
            {
                ToastService.ShowWarning("Failed to cancel image generation task");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error cancelling task {TaskId}", taskId);
            ToastService.ShowError($"Error cancelling task: {ex.Message}");
        }
    }

    private async Task LoadPersistedTasks()
    {
        try
        {
            // Load from localStorage
            var tasksJson = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "conduit-image-tasks");
            if (!string.IsNullOrEmpty(tasksJson))
            {
                var tasks = JsonSerializer.Deserialize<List<ImageGenerationTask>>(tasksJson);
                if (tasks != null)
                {
                    // Only load tasks that are not too old (e.g., created within last hour)
                    var cutoffTime = DateTimeOffset.UtcNow.AddHours(-1);
                    activeTasks = tasks.Where(t => t.CreatedAt > cutoffTime).ToList();
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error loading persisted tasks");
        }
    }

    private async Task SavePersistedTasks()
    {
        try
        {
            var tasksJson = JsonSerializer.Serialize(activeTasks);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "conduit-image-tasks", tasksJson);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error saving persisted tasks");
        }
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "pending" => "warning",
            "running" => "primary",
            "completed" => "success",
            "failed" => "danger",
            "cancelled" => "secondary",
            _ => "secondary"
        };
    }


    public void Dispose()
    {
        if (isInitialized)
        {
            SignalRService.UnregisterListener(this);
        }
    }

    private class ImageModel
    {
        public string ModelName { get; set; } = "";
        public string DisplayName { get; set; } = "";
        public string Provider { get; set; } = "";
    }

    private class ImageGenerationResult
    {
        public List<ImageData>? Data { get; set; }
        public long Created { get; set; }
    }

}

<style>
    .image-gen-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    
    .generated-image-container {
        position: relative;
        overflow: hidden;
        border-radius: 0.5rem;
    }
    
    .generated-image-container:hover .image-actions {
        opacity: 1;
    }
    
    .image-actions {
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    
    .modal.show {
        display: block !important;
    }
    
    .image-upload-area {
        position: relative;
    }
    
    .source-image-preview {
        background: #f8f9fa;
        padding: 0.75rem;
        border-radius: 0.5rem;
        border: 1px solid #dee2e6;
    }
    
    .source-image-preview .img-thumbnail {
        cursor: pointer;
        transition: transform 0.2s;
    }
    
    .source-image-preview .img-thumbnail:hover {
        transform: scale(1.05);
    }
</style>