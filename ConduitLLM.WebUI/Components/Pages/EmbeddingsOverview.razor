@page "/embeddings/overview"
@attribute [Authorize(Policy = "MasterKeyPolicy")]
@using ConduitLLM.Configuration.DTOs
@using ConduitLLM.WebUI.Models
@inject IAdminApiClient AdminApiClient
@inject IToastService ToastService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Embeddings Overview - Conduit</PageTitle>

<PageHeader Title="Embeddings Overview" 
            Description="Monitor embedding model availability, usage statistics, and provider capabilities"
            Icon="fa-vector-square">
    <Statistics>
        <div class="stat-item">
            <i class="fa fa-vector-square me-2 text-primary"></i>
            <span class="small">@totalEmbeddingModels Total Models</span>
        </div>
        <div class="stat-item mt-2">
            <i class="fa fa-server me-2 text-success"></i>
            <span class="small">@activeProviders Active Providers</span>
        </div>
        <div class="stat-item mt-2">
            <i class="fa fa-chart-line me-2 text-info"></i>
            <span class="small">@totalRequests24h Requests (24h)</span>
        </div>
        <div class="stat-item mt-2">
            <i class="fa fa-dollar-sign me-2 text-warning"></i>
            <span class="small">$@totalCost24h.ToString("F2") Cost (24h)</span>
        </div>
    </Statistics>
</PageHeader>

@if (isLoading)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <div class="mt-2">Loading embeddings overview...</div>
    </div>
}
else
{
    <div class="row g-4">
        <!-- Provider Capabilities Cards -->
        <div class="col-12 col-xl-8">
            <div class="modern-card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fa fa-cogs me-2"></i>
                        Provider Capabilities
                    </h5>
                    <button class="modern-btn modern-btn-outline-primary modern-btn-sm" @onclick="RefreshData">
                        <i class="fa fa-refresh me-2"></i>Refresh
                    </button>
                </div>
                <div class="card-body">
                    @if (providerCapabilities != null && providerCapabilities.Any())
                    {
                        <div class="row g-3">
                            @foreach (var provider in providerCapabilities)
                            {
                                <div class="col-12 col-md-6 col-lg-4">
                                    <EmbeddingProviderCard Provider="@provider" />
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4 text-muted">
                            <i class="fa fa-info-circle fa-2x mb-3"></i>
                            <div>No embedding providers configured</div>
                            <small>Configure providers in <a href="/model-mappings" class="text-decoration-none">Model Mappings</a></small>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Quick Stats -->
        <div class="col-12 col-xl-4">
            <div class="row g-4">
                <div class="col-12">
                    <StatCard 
                        Label="Model Performance"
                        Value="@($"{averageLatency:F0}ms")"
                        SubText="Average Latency"
                        IconClass="fa fa-tachometer-alt"
                        Color="StatCard.StatCardColor.Info"
                        ShowTrend="true"
                        TrendValue="@((decimal)latencyTrend)" />
                </div>
                <div class="col-12">
                    <StatCard 
                        Label="Success Rate"
                        Value="@($"{successRate:F1}%")"
                        SubText="Last 24 Hours"
                        IconClass="fa fa-check-circle"
                        Color="@(successRate >= 99 ? StatCard.StatCardColor.Success : successRate >= 95 ? StatCard.StatCardColor.Warning : StatCard.StatCardColor.Danger)"
                        ShowTrend="true"
                        TrendValue="@((decimal)successRateTrend)" />
                </div>
                <div class="col-12">
                    <StatCard 
                        Label="Cost Efficiency"
                        Value="@($"{costPerThousand:F4}")"
                        SubText="Per 1K Tokens"
                        IconClass="fa fa-coins"
                        Color="StatCard.StatCardColor.Secondary"
                        IsCurrency="true"
                        ShowTrend="true"
                        TrendValue="@((decimal)costTrend)" />
                </div>
            </div>
        </div>

        <!-- Monitoring Dashboard -->
        <div class="col-12">
            <EmbeddingMonitoringDashboard />
        </div>

        <!-- Recent Embedding Requests -->
        <div class="col-12">
            <div class="modern-card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fa fa-history me-2"></i>
                        Recent Embedding Requests
                    </h5>
                    <a href="/embeddings/analytics" class="modern-btn modern-btn-outline-primary modern-btn-sm text-decoration-none">
                        <i class="fa fa-chart-bar me-2"></i>View Analytics
                    </a>
                </div>
                <div class="card-body">
                    @if (recentRequests != null && recentRequests.Any())
                    {
                        <DataTable Items="@recentRequests" TItem="EmbeddingRequestSummary">
                            <HeaderTemplate>
                                <th>Timestamp</th>
                                <th>Virtual Key</th>
                                <th>Model</th>
                                <th>Tokens</th>
                                <th>Latency</th>
                                <th>Cost</th>
                                <th>Status</th>
                            </HeaderTemplate>
                            <RowTemplate>
                                <td>
                                    <small class="text-muted">@context.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</small>
                                </td>
                                <td>
                                    <span class="badge bg-light text-dark">@context.VirtualKeyName</span>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <i class="fa fa-vector-square me-2 text-primary"></i>
                                        <span>@context.Model</span>
                                    </div>
                                </td>
                                <td>
                                    <span class="text-muted">@context.TokenCount.ToString("N0")</span>
                                </td>
                                <td>
                                    <span class="text-muted">@context.LatencyMs ms</span>
                                </td>
                                <td>
                                    <span class="text-success">$@context.Cost.ToString("F4")</span>
                                </td>
                                <td>
                                    @if (context.IsSuccess)
                                    {
                                        <span class="badge bg-success">Success</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger" title="@context.ErrorMessage">Error</span>
                                    }
                                </td>
                            </RowTemplate>
                            <EmptyTemplate>
                                <div class="text-center py-4 text-muted">
                                    <i class="fa fa-inbox fa-2x mb-3"></i>
                                    <div>No recent embedding requests</div>
                                    <small>Requests will appear here once embeddings are used</small>
                                </div>
                            </EmptyTemplate>
                        </DataTable>
                    }
                    else
                    {
                        <div class="text-center py-4 text-muted">
                            <i class="fa fa-inbox fa-2x mb-3"></i>
                            <div>No recent embedding requests</div>
                            <small>Requests will appear here once embeddings are used</small>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private List<EmbeddingProviderCapability>? providerCapabilities;
    private List<EmbeddingRequestSummary>? recentRequests;
    
    // Statistics
    private int totalEmbeddingModels = 0;
    private int activeProviders = 0;
    private int totalRequests24h = 0;
    private decimal totalCost24h = 0;
    private double averageLatency = 0;
    private double successRate = 0;
    private decimal costPerThousand = 0;
    
    // Trends (mock data for now)
    private double latencyTrend = -15.2; // -15.2% improvement
    private double successRateTrend = 2.1; // +2.1% improvement
    private double costTrend = -5.8; // -5.8% cost reduction

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadEmbeddingsOverviewData();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load embeddings overview: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadEmbeddingsOverviewData()
    {
        // Load provider capabilities
        var providers = await AdminApiClient.GetAllProviderCredentialsAsync();
        providerCapabilities = providers
            .Where(p => p.IsEnabled)
            .Select(p => new EmbeddingProviderCapability
            {
                Id = p.Id,
                ProviderName = p.ProviderName,
                IsHealthy = true, // TODO: Get from health service
                ModelCount = GetEmbeddingModelCount(p),
                AvgLatency = GetRandomLatency(), // TODO: Get real metrics
                SuccessRate = GetRandomSuccessRate(), // TODO: Get real metrics
                CostPer1K = GetEstimatedCostPer1K(p.ProviderName)
            })
            .Where(p => p.ModelCount > 0)
            .ToList();

        // Calculate statistics
        totalEmbeddingModels = providerCapabilities?.Sum(p => p.ModelCount) ?? 0;
        activeProviders = providerCapabilities?.Count(p => p.IsHealthy) ?? 0;
        
        // TODO: Replace with real data from analytics service
        totalRequests24h = GetRandomInt(500, 2000);
        totalCost24h = GetRandomDecimal(5.0m, 25.0m);
        averageLatency = providerCapabilities?.Average(p => p.AvgLatency) ?? 0;
        successRate = providerCapabilities?.Average(p => p.SuccessRate) ?? 100;
        costPerThousand = providerCapabilities?.Average(p => p.CostPer1K) ?? 0;

        // Load recent requests (mock data for now)
        recentRequests = GenerateMockRecentRequests();
    }

    private int GetEmbeddingModelCount(ProviderCredentialDto provider)
    {
        // TODO: Get actual count from model mappings with embeddings capability
        return provider.ProviderName.ToLower() switch
        {
            "openai" => 3, // text-embedding-3-small, text-embedding-3-large, text-embedding-ada-002
            "cohere" => 2, // embed-english-v3.0, embed-multilingual-v3.0
            "huggingface" => 5, // Various embedding models
            _ => 0
        };
    }

    private double GetRandomLatency() => new Random().NextDouble() * 200 + 50; // 50-250ms
    private double GetRandomSuccessRate() => 95 + new Random().NextDouble() * 5; // 95-100%
    private int GetRandomInt(int min, int max) => new Random().Next(min, max);
    private decimal GetRandomDecimal(decimal min, decimal max) => (decimal)(new Random().NextDouble() * (double)(max - min)) + min;

    private decimal GetEstimatedCostPer1K(string providerName)
    {
        return providerName.ToLower() switch
        {
            "openai" => 0.0001m, // Approximate for text-embedding-3-small
            "cohere" => 0.0001m,
            "huggingface" => 0.00005m, // Generally cheaper
            _ => 0.0001m
        };
    }

    private List<EmbeddingRequestSummary> GenerateMockRecentRequests()
    {
        var random = new Random();
        var models = new[] { "text-embedding-3-small", "text-embedding-3-large", "embed-english-v3.0", "all-MiniLM-L6-v2" };
        var keyNames = new[] { "Production", "Development", "Testing", "Analytics" };
        
        return Enumerable.Range(0, 10)
            .Select(i => new EmbeddingRequestSummary
            {
                Timestamp = DateTime.UtcNow.AddMinutes(-random.Next(1, 1440)), // Last 24 hours
                VirtualKeyName = keyNames[random.Next(keyNames.Length)],
                Model = models[random.Next(models.Length)],
                TokenCount = random.Next(100, 8000),
                LatencyMs = random.Next(50, 300),
                Cost = (decimal)(random.NextDouble() * 0.01),
                IsSuccess = random.NextDouble() > 0.05, // 95% success rate
                ErrorMessage = random.NextDouble() < 0.05 ? "Rate limit exceeded" : null
            })
            .OrderByDescending(r => r.Timestamp)
            .ToList();
    }

    private async Task RefreshData()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            await LoadEmbeddingsOverviewData();
            ToastService.ShowSuccess("Embeddings overview refreshed successfully");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to refresh data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}

