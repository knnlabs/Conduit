@page "/configuration"
@using System.Text.Json
@using Microsoft.EntityFrameworkCore
@using ConduitLLM.Configuration
@using ConduitLLM.Configuration.Entities
@using ConduitLLM.Providers.Configuration
@using ConduitLLM.WebUI.Services
@using Microsoft.Extensions.Logging
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using Microsoft.JSInterop

@inject NavigationManager NavigationManager
@inject ILogger<Configuration> Logger
@inject IDbContextFactory<ConduitLLM.Configuration.ConfigurationDbContext> DbContextFactory
@inject ConfigurationChangeNotifier ConfigChangeNotifier
@inject HttpRetryConfigurationService HttpRetryService
@inject HttpTimeoutConfigurationService HttpTimeoutService
@inject IJSRuntime JSRuntime
@inject ProviderModelsService ProviderModelsService
@rendermode InteractiveServer

<div class="container-fluid">
    <h2 class="mb-4">Configuration Management</h2>

    @if (!string.IsNullOrEmpty(deleteErrorMessage))
    {
        <div class="alert alert-danger mb-4">@deleteErrorMessage</div>
    }

    <div class="card mb-5 shadow-sm">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">LLM Providers</h5>
            <div class="dropdown">
                <button class="btn btn-primary dropdown-toggle" type="button" id="addProviderDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fa fa-plus me-1"></i> Add Provider
                </button>
                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="addProviderDropdown">
                    @foreach (var provider in _supportedProviders)
                    {
                        <li><button class="dropdown-item" @onclick="() => LaunchGuidedSetup(provider)">@provider</button></li>
                    }
                </ul>
            </div>
        </div>
        
        <div class="card-body">
            @if (providerCredentials == null)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!providerCredentials.Any())
            {
                <div class="alert alert-info mb-4">
                    No providers configured yet. Add an LLM provider to get started.
                </div>

                <div class="row">
                    @foreach (var provider in _supportedProviders)
                    {
                        <div class="col-12 col-sm-6 col-md-4 mb-4">
                            <div class="card h-100">
                                <div class="card-header">
                                    <h6 class="mb-0">@provider</h6>
                                </div>
                                <div class="card-body">
                                    <p class="card-text">
                                        @GetProviderDescription(provider)
                                    </p>
                                </div>
                                <div class="card-footer">
                                    <button class="btn btn-primary w-100" @onclick="() => LaunchGuidedSetup(provider)">
                                        <i class="fa fa-plus me-1"></i> Setup @provider
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Provider</th>
                                <th>API Key</th>
                                <th>Base URL</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var context in providerCredentials)
                            {
                                <tr>
                                    <td>@context.ProviderName</td>
                                    <td>
                                        <span class="text-secondary">@(string.IsNullOrEmpty(context.ApiKey) ? "Not set" : "••••••••")</span>
                                    </td>
                                    <td>@(string.IsNullOrEmpty(context.BaseUrl) ? "Default" : context.BaseUrl)</td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-outline-primary btn-sm" @onclick="() => EditProvider(context.Id)">Edit</button>
                                            <button type="button" class="btn btn-outline-danger btn-sm" @onclick="() => DeleteProvider(context.Id)">Delete</button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>

    <hr class="my-5" />

    <div class="card mb-5 shadow-sm">
        <div class="card-header">
            <h5 class="mb-0">Model Mappings</h5>
        </div>
        
        <div class="card-body">
            <p class="mb-4">
                Map user-friendly model names to specific provider models. For example, you can map "gpt4" to OpenAI's "gpt-4-turbo-preview" model.
            </p>
            
            @if (modelMappings == null)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!modelMappings.Any())
            {
                <div class="alert alert-info mb-4">
                    No model mappings defined yet. Add one below.
                </div>
            }
            else
            {
                <div class="table-responsive mb-4">
                    <table class="table table-hover table-striped">
                        <thead>
                            <tr>
                                <th>Model Alias</th>
                                <th>Provider</th>
                                <th>Provider Model</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var context in modelMappings)
                            {
                                <tr>
                                    <td>@context.ModelAlias</td>
                                    <td>@context.ProviderCredential?.ProviderName</td>
                                    <td>@context.ProviderModelName</td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-outline-primary btn-sm" @onclick="() => HandleEditMapping(context.Id)">
                                                <i class="fa fa-edit me-1"></i> Edit
                                            </button>
                                            <button type="button" class="btn btn-outline-danger btn-sm" @onclick="() => DeleteMapping(context.Id)">
                                                <i class="fa fa-trash me-1"></i> Delete
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            
            <button class="btn btn-primary" 
                  @onclick="() => { isEditingMapping = true; currentMapping = new MappingFormModel { ModelAlias = string.Empty, ProviderName = string.Empty, ProviderModelId = string.Empty, Id = 0 }; mappingErrorMessage = null; }">
                <i class="fa fa-plus me-1"></i> Add Model Mapping
            </button>
        </div>
    </div>

    @if (isEditingMapping)
    {
        <div class="card mb-5 shadow-sm">
            <div class="card-header">
                <h5 class="mb-0">@(currentMapping.ModelAlias == null ? "Add" : "Edit") Model Mapping</h5>
            </div>
            <div class="card-body">
                @if (!string.IsNullOrEmpty(mappingErrorMessage))
                {
                    <div class="alert alert-danger mb-4">@mappingErrorMessage</div>
                }
                
                <div class="form-group mb-4">
                    <label for="modelAlias">Model Alias</label>
                    <input type="text" class="form-control" id="modelAlias" 
                           @bind="currentMapping.ModelAlias" />
                    <small class="form-text text-muted">The friendly name you'll use in your code (e.g., 'gpt4', 'claude-latest')</small>
                </div>
                
                <div class="form-group mb-4">
                    <label for="providerName">Provider</label>
                    <select class="form-select" id="providerName" 
                            value="@currentMapping.ProviderName"
                            @onchange="@(async (ChangeEventArgs e) => { currentMapping.ProviderName = e.Value?.ToString() ?? ""; await LoadModelsForSelectedProvider(); })">
                        <option value="">-- Select Provider --</option>
                        @if (providerCredentials != null)
                        {
                            @foreach (var provider in providerCredentials.OrderBy(p => p.ProviderName))
                            {
                                <option value="@provider.ProviderName">@provider.ProviderName</option>
                            }
                        }
                    </select>
                </div>
                
                <div class="form-group mb-4">
                    <label for="providerModelId">Provider Model ID</label>
                    
                    @if (isLoadingModels)
                    {
                        <div class="d-flex align-items-center">
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>Loading models...</span>
                        </div>
                    }
                    else if (showModelTextbox || (!availableModels.Any() && !string.IsNullOrEmpty(currentMapping.ProviderName)))
                    {
                        <div>
                            <input type="text" class="form-control" id="providerModelIdInput"
                                   @bind="currentMapping.ProviderModelId"
                                   placeholder="Enter model ID"
                                   disabled="@string.IsNullOrEmpty(currentMapping.ProviderName)" />
                            
                            @if (!availableModels.Any() && !string.IsNullOrEmpty(currentMapping.ProviderName))
                            {
                                <small class="text-muted mt-1 d-block">
                                    Could not retrieve model list. Please enter the model ID manually.
                                </small>
                            }
                            
                            <div class="mt-2">
                                <button type="button" class="btn btn-sm btn-outline-secondary"
                                        @onclick="RefreshModelsList"
                                        disabled="@(isLoadingModels || string.IsNullOrEmpty(currentMapping.ProviderName))">
                                    <i class="fa fa-refresh me-1"></i> Try loading models again
                                </button>
                                
                                @if (showModelTextbox && availableModels.Any())
                                {
                                    <button type="button" class="btn btn-sm btn-outline-secondary ms-2"
                                            @onclick="ToggleModelInputMode">
                                        <i class="fa fa-list me-1"></i> Show dropdown
                                    </button>
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="input-group">
                            <select class="form-select" id="providerModelId"
                                    @bind="currentMapping.ProviderModelId"
                                    disabled="@(isLoadingModels || string.IsNullOrEmpty(currentMapping.ProviderName))">
                                @if (string.IsNullOrEmpty(currentMapping.ProviderName))
                                {
                                    <option value="">Select a provider first</option>
                                }
                                else
                                {
                                    <option value="">-- Select a model --</option>
                                    @foreach (var model in availableModels.OrderBy(m => m))
                                    {
                                        <option value="@model">@model</option>
                                    }
                                }
                            </select>
                            <button class="btn btn-outline-secondary" type="button"
                                    @onclick="RefreshModelsList"
                                    disabled="@(isLoadingModels || string.IsNullOrEmpty(currentMapping.ProviderName))">
                                <i class="fa fa-refresh"></i>
                            </button>
                            <button class="btn btn-outline-secondary" type="button"
                                    @onclick="ToggleModelInputMode"
                                    disabled="@(isLoadingModels || string.IsNullOrEmpty(currentMapping.ProviderName))">
                                <i class="fa fa-pencil"></i>
                            </button>
                        </div>
                        <small class="form-text text-muted">Select from available models or click <i class="fa fa-pencil"></i> to enter manually</small>
                    }
                </div>
                
                <div class="d-flex justify-content-end">
                    <button type="button" class="btn btn-outline-secondary me-2" @onclick="() => isEditingMapping = false">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveMapping">Save</button>
                </div>
            </div>
        </div>
    }

    <hr class="my-5" />

    <h3 class="mb-4">Global Settings</h3>

    <div class="row">
        <div class="col-12 col-md-6">
            <div class="card mb-4 shadow-sm">
                <div class="card-header">
                    <h5 class="mb-0">Proxy Base URL</h5>
                </div>
                <div class="card-body">
                    <div class="form-group mb-3">
                        <label for="proxyBaseUrl">Conduit Proxy Base URL</label>
                        <input type="text" class="form-control" id="proxyBaseUrl" 
                               @bind="proxyBaseUrlInput"
                               placeholder="e.g., https://api.yourcompany.com/conduit" />
                        <small class="form-text text-muted">URL where your Conduit API is publicly accessible. Used for SDK clients.</small>
                    </div>
                    
                    <button class="btn btn-primary mt-2" 
                            @onclick="SaveProxyUrl">
                        Save
                    </button>
                    
                    @if (!string.IsNullOrEmpty(proxyUrlSaveMessage))
                    {
                        <div class="alert alert-success mt-3">
                            @proxyUrlSaveMessage
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12 col-md-6">
            <div class="card mb-5 shadow-sm">
                <div class="card-header">
                    <h5 class="mb-0">HTTP Retry Settings</h5>
                </div>
                <div class="card-body">
                    <div class="form-group mb-4">
                        <label for="maxRetries">Maximum Retry Attempts</label>
                        <input type="number" class="form-control" id="maxRetries" 
                               min="0" max="10"
                               @bind="httpRetryOptions.MaxRetries" />
                        <small class="form-text text-muted">Maximum number of times to retry HTTP requests on transient failures (0-10)</small>
                    </div>
                    
                    <div class="form-group mb-4">
                        <label for="initialDelay">Initial Delay (seconds)</label>
                        <input type="number" class="form-control" id="initialDelay" 
                               min="0" max="10"
                               @bind="httpRetryOptions.InitialDelaySeconds" />
                        <small class="form-text text-muted">Initial delay before first retry attempt</small>
                    </div>
                    
                    <div class="form-group mb-4">
                        <label for="maxDelay">Maximum Delay (seconds)</label>
                        <input type="number" class="form-control" id="maxDelay" 
                               min="1" max="60"
                               @bind="httpRetryOptions.MaxDelaySeconds" />
                        <small class="form-text text-muted">Maximum delay cap for any retry attempt</small>
                    </div>
                    
                    <div class="form-check mb-4">
                        <input class="form-check-input" type="checkbox" id="enableRetryLogging" 
                               @bind="httpRetryOptions.EnableRetryLogging" />
                        <label class="form-check-label" for="enableRetryLogging">
                            Enable Retry Logging
                        </label>
                    </div>
                    
                    <button class="btn btn-primary mb-2" 
                            @onclick="async () => await SaveHttpRetryOptions()">
                        <i class="fa fa-save me-1"></i> Save Retry Settings
                    </button>
                    
                    @if (!string.IsNullOrEmpty(httpRetryOptionsSaveMessage))
                    {
                        <div class="alert alert-success mt-3">
                            @httpRetryOptionsSaveMessage
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <div class="col-12 col-md-6">
            <div class="card mb-5 shadow-sm">
                <div class="card-header">
                    <h5 class="mb-0">HTTP Timeout Settings</h5>
                </div>
                <div class="card-body">
                    <div class="form-group mb-4">
                        <label for="timeoutDuration">Timeout Duration (seconds)</label>
                        <input type="number" class="form-control" id="timeoutDuration" 
                               min="10" max="600"
                               @bind="httpTimeoutOptions.TimeoutSeconds" />
                        <small class="form-text text-muted">Maximum time to wait for HTTP requests to complete before timing out (10-600 seconds)</small>
                    </div>
                    
                    <div class="form-check mb-4">
                        <input class="form-check-input" type="checkbox" id="enableTimeoutLogging" 
                               @bind="httpTimeoutOptions.EnableTimeoutLogging" />
                        <label class="form-check-label" for="enableTimeoutLogging">
                            Enable Timeout Logging
                        </label>
                        <small class="d-block text-muted ms-4 mb-4">
                            Log detailed information about request timeouts
                        </small>
                    </div>
                    
                    <button class="btn btn-primary mb-2" 
                            @onclick="async () => await SaveHttpTimeoutOptions()">
                        <i class="fa fa-save me-1"></i> Save Timeout Settings
                    </button>
                    
                    @if (!string.IsNullOrEmpty(httpTimeoutOptionsSaveMessage))
                    {
                        <div class="alert alert-success mt-3">
                            @httpTimeoutOptionsSaveMessage
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12 col-md-6">
            <div class="card mb-5 shadow-sm">
                <div class="card-header">
                    <h5 class="mb-0">About HTTP Client Settings</h5>
                </div>
                <div class="card-body">
                    <p class="mb-3">
                        These settings control how ConduitLLM handles retry logic when communicating with LLM provider APIs.
                    </p>
                    <div class="bg-light p-4 border rounded">
                        <div class="d-flex mb-3">
                            <i class="fa fa-refresh me-3 mt-1"></i>
                            <div>
                                <strong>Maximum Retry Attempts</strong>: Number of times the system will retry failed API calls that encounter transient errors.
                            </div>
                        </div>
                        <div class="d-flex mb-3">
                            <i class="fa fa-clock-o me-3 mt-1"></i>
                            <div>
                                <strong>Initial Delay</strong>: How long to wait before the first retry attempt. Subsequent retries use exponential backoff with jitter.
                            </div>
                        </div>
                        <div class="d-flex mb-3">
                            <i class="fa fa-hourglass-half me-3 mt-1"></i>
                            <div>
                                <strong>Maximum Delay</strong>: The maximum time to wait between retry attempts, regardless of the backoff calculation.
                            </div>
                        </div>
                        <div class="d-flex">
                            <i class="fa fa-bell me-3 mt-1"></i>
                            <div>
                                <strong>Enable Retry Logging</strong>: When enabled, detailed logs will be generated for each retry attempt, helping with troubleshooting.
                            </div>
                        </div>
                    </div>
                    <div class="alert alert-info mt-3">
                        These settings apply to all provider clients and provide resilience against temporary API outages and rate limiting.
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-6">
            <div class="card mb-5 shadow-sm">
                <div class="card-header">
                    <h5 class="mb-0">About HTTP Timeout Settings</h5>
                </div>
                <div class="card-body">
                    <p class="mb-3">
                        These settings control how ConduitLLM handles timeouts when communicating with LLM provider APIs.
                    </p>
                    <div class="bg-light p-4 border rounded">
                        <div class="d-flex mb-3">
                            <i class="fa fa-hourglass-end me-3 mt-1"></i>
                            <div>
                                <strong>Timeout Duration</strong>: Maximum time to wait for HTTP requests to complete before timing out.
                            </div>
                        </div>
                        <div class="d-flex">
                            <i class="fa fa-bell me-3 mt-1"></i>
                            <div>
                                <strong>Enable Timeout Logging</strong>: When enabled, detailed logs will be generated for each request timeout, helping with troubleshooting.
                            </div>
                        </div>
                    </div>
                    <div class="alert alert-info mt-3">
                        These settings apply to all provider clients and provide resilience against slow or unresponsive APIs.
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@* Guided Setup Modal Components *@
<GuidedSetupWizard
    @ref="guidedSetupWizardInstance"
    IsOpen="isGuidedSetupOpen"
    OnSetupComplete="HandleSetupComplete"
    IsOpenChanged="HandleIsOpenChanged" />

@code {
    // --- Providers and Mappings State ---
    private List<ConduitLLM.Configuration.Entities.ProviderCredential> providerCredentials = new();
    private List<ConduitLLM.Configuration.Entities.ModelProviderMapping> modelMappings = new();
    private List<ConduitLLM.Configuration.Entities.GlobalSetting> globalSettings = new();

    // Provider form state
    private ConduitLLM.Configuration.Entities.ProviderCredential currentProvider = new();

    // Mapping form state
    private bool isEditingMapping = false;
    // Create a custom model for the form to include an ID field
    private class MappingFormModel
    {
        public int Id { get; set; } = 0;
        public string ModelAlias { get; set; } = "";
        public string ProviderName { get; set; } = "";
        public string ProviderModelId { get; set; } = "";
    }
    
    private MappingFormModel currentMapping = new() 
    { 
        ModelAlias = "",
        ProviderName = "",
        ProviderModelId = "",
        Id = 0
    };
    private string? mappingErrorMessage;
    private List<string> availableModels = new();
    private bool isLoadingModels = false;
    private bool showModelTextbox = false; // Whether to show textbox instead of dropdown

    // Settings state
    private ConduitLLM.Configuration.Entities.GlobalSetting currentSettings = new();
    
    // HTTP options state
    private string? proxyBaseUrlInput;
    private string? proxyUrlSaveMessage;
    private string? httpRetryOptionsSaveMessage;
    private string? httpTimeoutOptionsSaveMessage;
    private ConduitLLM.Providers.Configuration.RetryOptions httpRetryOptions = new();
    private ConduitLLM.Providers.Configuration.TimeoutOptions httpTimeoutOptions = new();
    
    // --- Guided Setup State ---
    private GuidedSetupWizard? guidedSetupWizardInstance;
    private bool isGuidedSetupOpen;
    private string? deleteErrorMessage;
    
    private readonly List<string> _supportedProviders = new List<string> {
        "OpenAI", "Anthropic", "Cohere", "Google", "Mistral", "Groq", "HuggingFace", "AWS", "Azure", "OpenRouter", "Cerebras"
    };
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadProvidersAsync();
            await LoadModelMappingsAsync();
            await LoadProxyUrlAsync();
            await LoadHttpRetryOptionsAsync();
            await LoadHttpTimeoutOptionsAsync();
            
            // Ensure guidedSetupWizardInstance is properly initialized
            await Task.Delay(100); // Brief delay to ensure component rendering completes
            if (guidedSetupWizardInstance == null)
            {
                Logger.LogWarning("GuidedSetupWizard component reference was null during initialization. UI interactions may not work as expected.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing Configuration page");
        }
    }
    
    // --- Settings Loading Methods ---
    
    private async Task LoadProvidersAsync()
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync(); 
            providerCredentials = await dbContext.ProviderCredentials.ToListAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading provider credentials");
            providerCredentials = new List<ConduitLLM.Configuration.Entities.ProviderCredential>(); 
        }
    }
    
    private async Task LoadModelMappingsAsync()
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync(); 
            modelMappings = await dbContext.ModelProviderMappings
                .Include(m => m.ProviderCredential)
                .OrderBy(m => m.ModelAlias)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading model mappings");
            modelMappings = new List<ConduitLLM.Configuration.Entities.ModelProviderMapping>();
        }
    }
    
    private async Task LoadProxyUrlAsync()
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync(); 
            var proxyUrlSetting = await dbContext.GlobalSettings.FirstOrDefaultAsync(s => s.Key == "ConduitSettings:ProxyBaseUrl");
            proxyBaseUrlInput = proxyUrlSetting?.Value;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading proxy URL setting");
        }
    }
    
    private async Task LoadHttpRetryOptionsAsync()
    {
        httpRetryOptions = HttpRetryService.GetRetryConfiguration() ?? new ConduitLLM.Providers.Configuration.RetryOptions();
        await Task.CompletedTask;
    }
    
    private async Task LoadHttpTimeoutOptionsAsync()
    {
        httpTimeoutOptions = HttpTimeoutService.GetTimeoutConfiguration() ?? new ConduitLLM.Providers.Configuration.TimeoutOptions();
        await Task.CompletedTask;
    }
    
    // --- Provider/Mapping Methods ---
    
    private void AddProvider()
    {
        NavigationManager.NavigateTo("/configuration/provider/edit");
    }

    private void EditProvider(int id)
    {
        NavigationManager.NavigateTo($"/configuration/provider/edit/{id}");
    }

    private async Task DeleteProvider(int id)
    {
        try
        {
            deleteErrorMessage = null;
            using var dbContext = await DbContextFactory.CreateDbContextAsync(); 
            var providerToDelete = await dbContext.ProviderCredentials.FindAsync(id);
            if (providerToDelete == null) return;

            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
                $"Are you sure you want to delete the provider '{providerToDelete.ProviderName}'? This cannot be undone.");

            if (!confirmed) return;

            var relatedMappings = await dbContext.ModelProviderMappings
                .Where(m => m.ProviderCredentialId == providerToDelete.Id)
                .ToListAsync();

            if (relatedMappings.Any())
            {
                dbContext.ModelProviderMappings.RemoveRange(relatedMappings);
            }

            dbContext.ProviderCredentials.Remove(providerToDelete);
            await dbContext.SaveChangesAsync(); 

            await LoadProvidersAsync(); 
            await LoadModelMappingsAsync();
            
            deleteErrorMessage = null;
            await JSRuntime.InvokeVoidAsync("alert", $"Provider '{providerToDelete.ProviderName}' deleted successfully");
        }
        catch (Exception ex)
        {
            deleteErrorMessage = $"Error deleting provider: {ex.Message}";
            Logger.LogError(ex, "Error deleting provider");
            StateHasChanged();
        }
    }

    private void AddMapping()
    {
        NavigationManager.NavigateTo("/configuration/mapping/edit");
    }

    private void EditMapping(int id)
    {
        NavigationManager.NavigateTo($"/configuration/mapping/edit/{id}");
    }

    private async Task DeleteMapping(int id)
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            var mapping = await dbContext.ModelProviderMappings.FindAsync(id);
            if (mapping == null)
            {
                Logger.LogError("No mapping found with ID {Id}", id);
                return;
            }

            dbContext.ModelProviderMappings.Remove(mapping);
            await dbContext.SaveChangesAsync();
            
            await LoadModelMappingsAsync();
            await JSRuntime.InvokeVoidAsync("alert", "Model mapping deleted successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting mapping");
            deleteErrorMessage = $"Error deleting mapping: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task LaunchGuidedSetup(string providerName) 
    {
        try
        {
            Logger.LogDebug("LaunchGuidedSetup called for provider: {ProviderName}", providerName);
            
            if (guidedSetupWizardInstance != null)
            {
                // Set the flag before calling the component method
                isGuidedSetupOpen = true;
                StateHasChanged();
                
                await guidedSetupWizardInstance.OpenForProvider(providerName);
                Logger.LogDebug("GuidedSetupWizard.OpenForProvider completed successfully");
            }
            else
            {
                Logger.LogError("GuidedSetupWizard instance reference is null when trying to launch setup.");
                deleteErrorMessage = "Error launching guided setup. Please try refreshing the page.";
                StateHasChanged();
                
                // Force re-render to try to resolve the reference
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error launching guided setup for {ProviderName}", providerName);
            deleteErrorMessage = $"Error launching setup: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task HandleIsOpenChanged(bool isOpen)
    {
        Logger.LogDebug("HandleIsOpenChanged called with value: {IsOpen}", isOpen);
        isGuidedSetupOpen = isOpen;
        
        // Force UI update
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task HandleSetupComplete(ConduitLLM.Configuration.Entities.ProviderCredential newProvider) 
    {
        try
        {
            Logger.LogDebug("HandleSetupComplete called for provider: {ProviderName}", newProvider.ProviderName);
            
            using var dbContext = await DbContextFactory.CreateDbContextAsync(); 
            await dbContext.ProviderCredentials.AddAsync(newProvider);
            await dbContext.SaveChangesAsync();

            await LoadProvidersAsync();
            await LoadModelMappingsAsync();
            
            // The wizard should close itself via the IsOpenChanged event
            // We don't need to set isGuidedSetupOpen = false here as it will be set in HandleIsOpenChanged
            
            await JSRuntime.InvokeVoidAsync("alert", $"Provider '{newProvider.ProviderName}' added successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving provider from guided setup");
            deleteErrorMessage = $"Error saving provider: {ex.Message}";
            await InvokeAsync(StateHasChanged);
        }
    }

    private string GetProviderDescription(string provider)
    {
        return provider switch
        {
            "OpenAI" => "Connect to GPT-3.5, GPT-4, and other OpenAI models",
            "Anthropic" => "Connect to Claude models for advanced reasoning",
            "Cohere" => "Connect to Cohere's command models",
            "Google" => "Connect to Google AI models like Gemini",
            "Mistral" => "Connect to Mistral AI's models",
            "Groq" => "Connect to models running on Groq's LPU Inference Engine for high speed",
            "HuggingFace" => "Access models hosted on Hugging Face Inference Endpoints",
            "AWS" => "Connect to models via AWS Bedrock or SageMaker (Requires Base URL)",
            "Azure" => "Connect to models deployed on Azure OpenAI Service (Requires Base URL)",
            "OpenRouter" => "Route requests to various models through OpenRouter",
            "Cerebras" => "Connect to models running on Cerebras infrastructure",
            _ => "Connect to AI models through this provider"
        };
    }

    // --- Mapping form state ---
    private async Task HandleEditMapping(int id)
    {
        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        
        var mapping = await dbContext.ModelProviderMappings
            .Include(m => m.ProviderCredential)
            .FirstOrDefaultAsync(m => m.Id == id);
            
        if (mapping != null)
        {
            currentMapping = new MappingFormModel
            {
                Id = mapping.Id, // Store the ID to identify this record for updates
                ModelAlias = mapping.ModelAlias,
                ProviderName = mapping.ProviderCredential.ProviderName,
                ProviderModelId = mapping.ProviderModelName
            };
            isEditingMapping = true;
            mappingErrorMessage = null;
            
            // Load models for the selected provider
            await LoadModelsForSelectedProvider();
        }
    }

    private async Task SaveMapping()
    {
        mappingErrorMessage = null;

        if (string.IsNullOrWhiteSpace(currentMapping.ModelAlias))
        {
            mappingErrorMessage = "Model alias is required";
            return;
        }

        if (string.IsNullOrWhiteSpace(currentMapping.ProviderName))
        {
            mappingErrorMessage = "Provider is required";
            return;
        }

        if (string.IsNullOrWhiteSpace(currentMapping.ProviderModelId))
        {
            mappingErrorMessage = "Provider model is required";
            return;
        }

        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        
        var provider = await dbContext.ProviderCredentials
            .FirstOrDefaultAsync(p => p.ProviderName == currentMapping.ProviderName);
            
        if (provider == null)
        {
            mappingErrorMessage = $"Provider {currentMapping.ProviderName} not found. Please add this provider first.";
            return;
        }
        
        // Check for duplicate alias only if we're creating a new mapping or changing the alias
        // For updates to existing mappings, we need to exclude the current mapping from the duplicate check
        var existingMapping = await dbContext.ModelProviderMappings
            .Include(m => m.ProviderCredential)
            .FirstOrDefaultAsync(m => m.ModelAlias == currentMapping.ModelAlias && 
                                       m.Id != currentMapping.Id); // Exclude the current mapping by ID
                                     
        if (existingMapping != null)
        {
            mappingErrorMessage = $"A mapping with alias '{currentMapping.ModelAlias}' already exists";
            return;
        }

        try
        {
            // Determine if this is an update or a new record
            bool isUpdate = currentMapping.Id > 0;
            ConduitLLM.Configuration.Entities.ModelProviderMapping mappingEntity;
            
            if (isUpdate)
            {
                // Get the existing entity for update
                mappingEntity = await dbContext.ModelProviderMappings.FindAsync(currentMapping.Id) ?? new ConduitLLM.Configuration.Entities.ModelProviderMapping();
                
                if (mappingEntity == null)
                {
                    mappingErrorMessage = "The mapping you're trying to update no longer exists.";
                    return;
                }
                
                // Update the existing entity's properties
                mappingEntity.ModelAlias = currentMapping.ModelAlias;
                mappingEntity.ProviderModelName = currentMapping.ProviderModelId;
                mappingEntity.ProviderCredentialId = provider.Id;
                mappingEntity.UpdatedAt = DateTime.UtcNow;
                
                dbContext.ModelProviderMappings.Update(mappingEntity);
            }
            else
            {
                // Create a new entity
                mappingEntity = new ConduitLLM.Configuration.Entities.ModelProviderMapping
                {
                    ModelAlias = currentMapping.ModelAlias,
                    ProviderModelName = currentMapping.ProviderModelId,
                    ProviderCredentialId = provider.Id,
                    IsEnabled = true,
                    CreatedAt = DateTime.UtcNow,
                    UpdatedAt = DateTime.UtcNow
                };
                
                dbContext.ModelProviderMappings.Add(mappingEntity);
            }
            
            await dbContext.SaveChangesAsync();
            
            isEditingMapping = false;
            currentMapping = new MappingFormModel 
            { 
                ModelAlias = "",
                ProviderName = "",
                ProviderModelId = "",
                Id = 0
            };
            await LoadModelMappingsAsync();
            mappingErrorMessage = null;
            
            await JSRuntime.InvokeVoidAsync("alert", "Model mapping saved successfully");
        }
        catch (Exception ex)
        {
            mappingErrorMessage = $"Error saving mapping: {ex.Message}";
            Logger.LogError(ex, "Error saving mapping");
        }
    }

    private async Task SaveProxyUrl()
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync(); 
            var proxyUrlSetting = await dbContext.GlobalSettings.FirstOrDefaultAsync(s => s.Key == "ConduitSettings:ProxyBaseUrl");
            
            if (proxyUrlSetting == null)
            {
                proxyUrlSetting = new ConduitLLM.Configuration.Entities.GlobalSetting { Key = "ConduitSettings:ProxyBaseUrl", Value = proxyBaseUrlInput ?? string.Empty }; 
                dbContext.GlobalSettings.Add(proxyUrlSetting);
            }
            else
            {
                proxyUrlSetting.Value = proxyBaseUrlInput ?? string.Empty;
                dbContext.GlobalSettings.Update(proxyUrlSetting);
            }
            
            await dbContext.SaveChangesAsync();
            
            proxyUrlSaveMessage = "Base URL saved successfully";
            await JSRuntime.InvokeVoidAsync("alert", "Base URL saved successfully");
            await Task.Delay(3000); 
            proxyUrlSaveMessage = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            proxyUrlSaveMessage = $"Error saving URL: {ex.Message}";
            deleteErrorMessage = $"Error saving URL: {ex.Message}";
            StateHasChanged();
        }
    }
    
    private async Task SaveHttpRetryOptions()
    {
        try
        {
            await HttpRetryService.UpdateRetryConfigurationAsync(httpRetryOptions);
            httpRetryOptionsSaveMessage = "HTTP retry settings saved successfully.";
            await JSRuntime.InvokeVoidAsync("alert", "HTTP retry settings saved successfully");
        }
        catch (Exception ex)
        {
            httpRetryOptionsSaveMessage = $"Error saving settings: {ex.Message}";
            deleteErrorMessage = $"Error saving settings: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task SaveHttpTimeoutOptions()
    {
        try
        {
            await HttpTimeoutService.UpdateTimeoutConfigurationAsync(httpTimeoutOptions);
            httpTimeoutOptionsSaveMessage = "HTTP timeout settings saved successfully.";
            await JSRuntime.InvokeVoidAsync("alert", "HTTP timeout settings saved successfully");
        }
        catch (Exception ex)
        {
            httpTimeoutOptionsSaveMessage = $"Error saving settings: {ex.Message}";
            deleteErrorMessage = $"Error saving settings: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task<bool> CheckIfProviderHasMappings(string providerName)
    {
        try
        {
            await using var dbContext = await DbContextFactory.CreateDbContextAsync();
            return await dbContext.ModelProviderMappings
                .Include(m => m.ProviderCredential)
                .AnyAsync(m => m.ProviderCredential.ProviderName == providerName);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking if provider has mappings");
            return false;
        }
    }
    
    private async Task LoadModelsForSelectedProvider()
    {
        if (string.IsNullOrEmpty(currentMapping.ProviderName))
        {
            availableModels.Clear();
            return;
        }

        try
        {
            isLoadingModels = true;
            StateHasChanged();
            
            availableModels = await ProviderModelsService.GetModelsAsync(currentMapping.ProviderName);
            
            // If the previously selected model is not in the list, clear it
            if (!string.IsNullOrEmpty(currentMapping.ProviderModelId) && 
                !availableModels.Contains(currentMapping.ProviderModelId))
            {
                currentMapping.ProviderModelId = "";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading models for provider {ProviderName}", currentMapping.ProviderName);
            availableModels.Clear();
        }
        finally
        {
            isLoadingModels = false;
            StateHasChanged();
        }
    }
    
    private void ToggleModelInputMode()
    {
        // Toggle between dropdown and textbox
        showModelTextbox = !showModelTextbox;
    }
    
    private async Task RefreshModelsList()
    {
        if (string.IsNullOrEmpty(currentMapping.ProviderName))
        {
            return;
        }
        
        try
        {
            isLoadingModels = true;
            StateHasChanged();
            
            // Force refresh from API
            availableModels = await ProviderModelsService.GetModelsAsync(currentMapping.ProviderName, true);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing models for provider {ProviderName}", currentMapping.ProviderName);
            availableModels.Clear();
        }
        finally
        {
            isLoadingModels = false;
            StateHasChanged();
        }
    }
}