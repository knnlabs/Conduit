@page "/configuration"
@using ConduitLLM.WebUI.Data
@using ConduitLLM.WebUI.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.Infrastructure
@using Microsoft.JSInterop
@using ConduitLLM.Providers.Configuration
@using Microsoft.Extensions.DependencyInjection
@using System.Linq
@using System.Linq.Expressions
@using Microsoft.EntityFrameworkCore.Query
@using Microsoft.EntityFrameworkCore.Storage
@using System.Net.Http
@inject IDbContextFactory<ConfigurationDbContext> DbContextFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ILogger<Configuration> Logger
@inject ConfigurationChangeNotifier ConfigChangeNotifier
@rendermode InteractiveServer

<h1>Configuration Management</h1>

@if (!string.IsNullOrEmpty(deleteErrorMessage))
{
    <div class="alert alert-danger mt-2">@deleteErrorMessage</div>
}

<div class="mb-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>LLM Providers</h2>
        <div>
            <button class="btn btn-primary" @onclick="AddProvider">
                <i class="bi bi-plus-lg me-1"></i> Add Provider
            </button>
            <div class="dropdown d-inline-block ms-2">
                <button class="btn btn-outline-primary dropdown-toggle" type="button" id="quickSetupDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="bi bi-magic me-1"></i> Quick Setup
                </button>
                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="quickSetupDropdown">
                    @foreach (var provider in _supportedProviders)
                    {
                        <li><button class="dropdown-item" @onclick="() => LaunchGuidedSetup(provider)">@provider</button></li>
                    }
                </ul>
            </div>
        </div>
    </div>

    @if (providerCredentials == null)
    {
        <p><em>Loading credentials...</em></p>
    }
    else if (!providerCredentials.Any())
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle me-2"></i>
            <span>No providers configured yet. Add an LLM provider to get started.</span>
        </div>

        <div class="row row-cols-1 row-cols-md-3 g-4 mt-2">
            @foreach (var provider in _supportedProviders)
            {
                <div class="col">
                    <div class="card h-100 provider-card">
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@provider</h5>
                            <p class="card-text flex-grow-1">
                                @GetProviderDescription(provider)
                            </p>
                            <button class="btn btn-outline-primary" @onclick="() => LaunchGuidedSetup(provider)">
                                <i class="bi bi-magic me-1"></i> Setup @provider
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Provider</th>
                        <th>Name</th>
                        <th>API Key</th>
                        <th>Base URL</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var cred in providerCredentials)
                    {
                        <tr>
                            <td>@cred.ProviderName</td>
                            <td>@(string.IsNullOrEmpty(cred.Name) ? "—" : cred.Name)</td>
                            <td class="text-muted">@(string.IsNullOrEmpty(cred.ApiKey) ? "Not set" : "••••••••")</td>
                            <td>@(string.IsNullOrEmpty(cred.ApiBase) ? "Default" : cred.ApiBase)</td>
                            <td>
                                <div class="btn-group">
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => EditProvider(cred.Id)">Edit</button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteProvider(cred.Id)">Delete</button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<hr />

<h2>Model Mappings</h2>

@if (modelMappings == null)
{
    <p><em>Loading mappings...</em></p>
}
else if (!modelMappings.Any())
{
    <div class="alert alert-info mb-3">
        <i class="bi bi-info-circle me-2"></i>
        <span>No model mappings configured yet. Add a mapping to begin using ConduitLLM.</span>
    </div>

    <button class="btn btn-primary" @onclick="AddMapping">
        <i class="bi bi-plus-lg me-1"></i>Add First Mapping
    </button>
}
else
{
    <div class="table-responsive">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Model Alias</th>
                    <th>Provider</th>
                    <th>Provider Model</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var mapping in modelMappings)
                {
                    <tr>
                        <td>@mapping.ModelAlias</td>
                        <td>
                            @{
                                var providerInfo = providerCredentials?.FirstOrDefault(p => p.ProviderName == mapping.ProviderName);
                                var displayName = providerInfo != null && !string.IsNullOrEmpty(providerInfo.Name) 
                                                ? providerInfo.Name 
                                                : mapping.ProviderName;
                            }
                            @displayName
                        </td>
                        <td>@mapping.ProviderModelId</td>
                        <td>
                            <div class="btn-group">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => EditMapping(mapping.Id)">Edit</button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteMapping(mapping.Id)">Delete</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <button class="btn btn-primary" @onclick="AddMapping">
        <i class="bi bi-plus-lg me-1"></i>Add Mapping
    </button>
}

<hr />

<h2>Global Settings</h2>

<div class="row">
    <div class="col-md-6">
        <div class="mb-3">
            <label for="proxyUrl" class="form-label">Conduit Proxy Base URL:</label>
            <div class="input-group mb-3">
                <input type="text" class="form-control" id="proxyUrl" @bind="proxyBaseUrlInput" placeholder="e.g., https://api.yourcompany.com/conduit" />
                <button class="btn btn-outline-primary" @onclick="SaveProxyUrl">Save</button>
            </div>
            @if (!string.IsNullOrEmpty(proxyUrlSaveMessage))
            {
                <div class="alert alert-success mt-2" role="alert">
                    @proxyUrlSaveMessage
                </div>
            }
            <div class="form-text text-muted">
                URL where your Conduit API is publicly accessible. Used for SDK clients.
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <div class="card mb-3">
            <div class="card-header">
                <h5 class="mb-0">HTTP Client Settings</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label for="maxRetries" class="form-label">Maximum Retry Attempts</label>
                    <input type="number" class="form-control" id="maxRetries" 
                           @bind="httpRetryOptions.MaxRetries" min="0" max="10" />
                    <div class="form-text">
                        Maximum number of times to retry HTTP requests on transient failures (0-10).
                    </div>
                </div>
                <div class="mb-3">
                    <label for="initialDelay" class="form-label">Initial Delay (seconds)</label>
                    <input type="number" class="form-control" id="initialDelay" 
                           @bind="httpRetryOptions.InitialDelaySeconds" min="0" max="10" step="0.5" />
                    <div class="form-text">
                        Initial delay before first retry attempt.
                    </div>
                </div>
                <div class="mb-3">
                    <label for="maxDelay" class="form-label">Maximum Delay (seconds)</label>
                    <input type="number" class="form-control" id="maxDelay" 
                           @bind="httpRetryOptions.MaxDelaySeconds" min="1" max="60" />
                    <div class="form-text">
                        Maximum delay cap for any retry attempt.
                    </div>
                </div>
                <div class="form-check mb-3">
                    <input class="form-check-input" type="checkbox" id="enableRetryLogging" 
                           @bind="httpRetryOptions.EnableRetryLogging" />
                    <label class="form-check-label" for="enableRetryLogging">
                        Enable Retry Logging
                    </label>
                    <div class="form-text">
                        Log detailed information about retry attempts.
                    </div>
                </div>
                <button class="btn btn-primary" @onclick="SaveHttpRetryOptions">
                    <i class="bi bi-save me-1"></i> Save HTTP Settings
                </button>
                @if (!string.IsNullOrEmpty(httpRetryOptionsSaveMessage))
                {
                    <div class="alert alert-success mt-2" role="alert">
                        @httpRetryOptionsSaveMessage
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card mb-3">
            <div class="card-header">
                <h5 class="mb-0">About HTTP Client Settings</h5>
            </div>
            <div class="card-body">
                <p>
                    These settings control how ConduitLLM handles retry logic when communicating with LLM provider APIs.
                </p>
                <ul>
                    <li>
                        <strong>Maximum Retry Attempts</strong>: Number of times the system will retry failed API calls that encounter transient errors (such as network issues or rate limiting).
                    </li>
                    <li>
                        <strong>Initial Delay</strong>: How long to wait before the first retry attempt. Subsequent retries use exponential backoff with jitter.
                    </li>
                    <li>
                        <strong>Maximum Delay</strong>: The maximum time to wait between retry attempts, regardless of the backoff calculation.
                    </li>
                    <li>
                        <strong>Enable Retry Logging</strong>: When enabled, detailed logs will be generated for each retry attempt, helping with troubleshooting.
                    </li>
                </ul>
                <div class="alert alert-info">
                    <i class="bi bi-info-circle me-2"></i>
                    These settings apply to all provider clients and provide resilience against temporary API outages and rate limiting.
                </div>
            </div>
        </div>
    </div>
</div>

@* Guided Setup Modal Components *@
<GuidedSetupWizard
    @ref="guidedSetupWizardInstance"
    IsOpen="isGuidedSetupOpen"
    OnSetupComplete="HandleSetupComplete"
    IsOpenChanged="(value) => { isGuidedSetupOpen = value; StateHasChanged(); }" />
    @* Removed @key and ProviderName parameter *@

@code {
    private List<DbProviderCredentials>? providerCredentials;
    private List<DbModelProviderMapping>? modelMappings;
    private string? deleteErrorMessage;

    // --- Global Settings State ---
    private string? proxyBaseUrlInput;
    private string? proxyUrlSaveMessage;
    private const string ProxyUrlKey = "ProxyBaseUrl";
    private const string DefaultProxyUrl = "http://localhost:5000";

    // --- HTTP Retry Options State ---
    private RetryOptions httpRetryOptions = new RetryOptions();
    private string? httpRetryOptionsSaveMessage;
    
    // --- Guided Setup State ---
    private GuidedSetupWizard? guidedSetupWizardInstance;
    private bool isGuidedSetupOpen;
    
    private readonly string[] _supportedProviders = { "OpenAI", "Anthropic", "Cohere", "Gemini", "Fireworks", "OpenRouter", "Cerebras", "AWS Bedrock", "SageMaker", "VertexAI", "HuggingFace", "Groq", "Mistral" };

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            await LoadProviderCredentialsAsync();
            await LoadModelMappingsAsync();
            await LoadProxyUrlAsync();
            await LoadHttpRetryOptionsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading data");
        }
    }

    private async Task LoadProviderCredentialsAsync()
    {
        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        providerCredentials = await dbContext.ProviderCredentials.OrderBy(p => p.ProviderName).ToListAsync();
    }

    private async Task LoadModelMappingsAsync()
    {
        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        modelMappings = await dbContext.ModelMappings.OrderBy(m => m.ModelAlias).ToListAsync();
    }

    private async Task LoadProxyUrlAsync()
    {
        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        proxyUrlSaveMessage = null;
        var setting = await dbContext.GlobalSettings.FindAsync(ProxyUrlKey);
        proxyBaseUrlInput = setting?.Value ?? DefaultProxyUrl;
    }

    private async Task LoadHttpRetryOptionsAsync()
    {
        try 
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            // Load MaxRetries setting
            var maxRetriesSetting = await dbContext.GlobalSettings.FirstOrDefaultAsync(s => s.Key == "HttpRetry:MaxRetries");
            if (maxRetriesSetting != null && int.TryParse(maxRetriesSetting.Value, out int maxRetries))
            {
                httpRetryOptions.MaxRetries = maxRetries;
            }
            
            // Load InitialDelaySeconds setting
            var initialDelaySetting = await dbContext.GlobalSettings.FirstOrDefaultAsync(s => s.Key == "HttpRetry:InitialDelaySeconds");
            if (initialDelaySetting != null && int.TryParse(initialDelaySetting.Value, out int initialDelay))
            {
                httpRetryOptions.InitialDelaySeconds = initialDelay;
            }
            
            // Load MaxDelaySeconds setting
            var maxDelaySetting = await dbContext.GlobalSettings.FirstOrDefaultAsync(s => s.Key == "HttpRetry:MaxDelaySeconds");
            if (maxDelaySetting != null && int.TryParse(maxDelaySetting.Value, out int maxDelay))
            {
                httpRetryOptions.MaxDelaySeconds = maxDelay;
            }
            
            // Load EnableRetryLogging setting
            var enableLoggingSetting = await dbContext.GlobalSettings.FirstOrDefaultAsync(s => s.Key == "HttpRetry:EnableRetryLogging");
            if (enableLoggingSetting != null && bool.TryParse(enableLoggingSetting.Value, out bool enableLogging))
            {
                httpRetryOptions.EnableRetryLogging = enableLogging;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading HTTP retry options");
            // Don't display error to user, just use defaults
        }
    }
    
    private async Task SaveProxyUrl()
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            // Clear any previous message
            proxyUrlSaveMessage = null;
            var setting = await dbContext.GlobalSettings.FirstOrDefaultAsync(s => s.Key == ProxyUrlKey);
            if (setting == null)
            {
                setting = new GlobalSetting 
                { 
                    Key = ProxyUrlKey, 
                    Value = proxyBaseUrlInput ?? DefaultProxyUrl 
                };
                dbContext.GlobalSettings.Add(setting);
            }
            else
            {
                setting.Value = proxyBaseUrlInput ?? DefaultProxyUrl;
                dbContext.GlobalSettings.Update(setting);
            }
            await dbContext.SaveChangesAsync();
            proxyUrlSaveMessage = "Proxy URL saved successfully.";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving proxy URL");
            proxyUrlSaveMessage = $"Error saving proxy URL: {ex.Message}";
        }
    }

    private async Task SaveHttpRetryOptions()
    {
        try
        {
            httpRetryOptionsSaveMessage = null;
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            // Save MaxRetries setting
            var maxRetriesSetting = await dbContext.GlobalSettings.FirstOrDefaultAsync(s => s.Key == "HttpRetry:MaxRetries");
            if (maxRetriesSetting == null)
            {
                maxRetriesSetting = new GlobalSetting 
                { 
                    Key = "HttpRetry:MaxRetries", 
                    Value = httpRetryOptions.MaxRetries.ToString() 
                };
                dbContext.GlobalSettings.Add(maxRetriesSetting);
            }
            else
            {
                maxRetriesSetting.Value = httpRetryOptions.MaxRetries.ToString();
                dbContext.GlobalSettings.Update(maxRetriesSetting);
            }
            
            // Save InitialDelaySeconds setting
            var initialDelaySetting = await dbContext.GlobalSettings.FirstOrDefaultAsync(s => s.Key == "HttpRetry:InitialDelaySeconds");
            if (initialDelaySetting == null)
            {
                initialDelaySetting = new GlobalSetting 
                { 
                    Key = "HttpRetry:InitialDelaySeconds", 
                    Value = httpRetryOptions.InitialDelaySeconds.ToString() 
                };
                dbContext.GlobalSettings.Add(initialDelaySetting);
            }
            else
            {
                initialDelaySetting.Value = httpRetryOptions.InitialDelaySeconds.ToString();
                dbContext.GlobalSettings.Update(initialDelaySetting);
            }
            
            // Save MaxDelaySeconds setting
            var maxDelaySetting = await dbContext.GlobalSettings.FirstOrDefaultAsync(s => s.Key == "HttpRetry:MaxDelaySeconds");
            if (maxDelaySetting == null)
            {
                maxDelaySetting = new GlobalSetting 
                { 
                    Key = "HttpRetry:MaxDelaySeconds", 
                    Value = httpRetryOptions.MaxDelaySeconds.ToString() 
                };
                dbContext.GlobalSettings.Add(maxDelaySetting);
            }
            else
            {
                maxDelaySetting.Value = httpRetryOptions.MaxDelaySeconds.ToString();
                dbContext.GlobalSettings.Update(maxDelaySetting);
            }
            
            // Save EnableRetryLogging setting
            var enableLoggingSetting = await dbContext.GlobalSettings.FirstOrDefaultAsync(s => s.Key == "HttpRetry:EnableRetryLogging");
            if (enableLoggingSetting == null)
            {
                enableLoggingSetting = new GlobalSetting 
                { 
                    Key = "HttpRetry:EnableRetryLogging", 
                    Value = httpRetryOptions.EnableRetryLogging.ToString() 
                };
                dbContext.GlobalSettings.Add(enableLoggingSetting);
            }
            else
            {
                enableLoggingSetting.Value = httpRetryOptions.EnableRetryLogging.ToString();
                dbContext.GlobalSettings.Update(enableLoggingSetting);
            }
            
            await dbContext.SaveChangesAsync();
            httpRetryOptionsSaveMessage = "HTTP retry settings saved successfully.";
            
            // Get the proxy base URL from global settings
            var proxyUrlSetting = await dbContext.GlobalSettings
                .FirstOrDefaultAsync(s => s.Key == "ProxyBaseUrl");
            
            string proxyUrl = proxyUrlSetting?.Value ?? "http://localhost:5000";
            
            // Trigger reload of settings across the application
            await ConfigChangeNotifier.NotifyConfigurationChangedAsync(proxyUrl);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving HTTP retry options");
            httpRetryOptionsSaveMessage = $"Error saving settings: {ex.Message}";
        }
    }

    // --- Provider/Mapping Methods ---

    private void AddProvider()
    {
        NavigationManager.NavigateTo("/configuration/provider/edit");
    }

    private void EditProvider(int id)
    {
        NavigationManager.NavigateTo($"/configuration/provider/edit/{id}");
    }

    private async Task DeleteProvider(int id)
    {
        try
        {
            deleteErrorMessage = null;
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            var providerToDelete = await dbContext.ProviderCredentials.FindAsync(id);
            if (providerToDelete == null) return;

            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
                $"Are you sure you want to delete the provider '{providerToDelete.ProviderName}'? This cannot be undone.");

            if (!confirmed) return;

            var relatedMappings = await dbContext.ModelMappings
                .Where(m => m.ProviderName == providerToDelete.ProviderName)
                .ToListAsync();

            if (relatedMappings.Any())
            {
                dbContext.ModelMappings.RemoveRange(relatedMappings);
            }

            dbContext.ProviderCredentials.Remove(providerToDelete);
            await dbContext.SaveChangesAsync();
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            deleteErrorMessage = $"Error deleting provider: {ex.Message}";
            Logger.LogError(ex, "Error deleting provider");
            StateHasChanged();
        }
    }

    private void AddMapping()
    {
        NavigationManager.NavigateTo("/configuration/mapping/edit");
    }

    private void EditMapping(int id)
    {
        NavigationManager.NavigateTo($"/configuration/mapping/edit/{id}");
    }

    private async Task DeleteMapping(int id)
    {
        try
        {
            deleteErrorMessage = null;
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            var mappingToDelete = await dbContext.ModelMappings.FindAsync(id);
            if (mappingToDelete == null) return;

            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
                $"Are you sure you want to delete the mapping '{mappingToDelete.ModelAlias}'? This cannot be undone.");

            if (!confirmed) return;

            dbContext.ModelMappings.Remove(mappingToDelete);
            await dbContext.SaveChangesAsync();
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            deleteErrorMessage = $"Error deleting mapping: {ex.Message}";
            Logger.LogError(ex, "Error deleting mapping");
            StateHasChanged();
        }
    }

    private async Task LaunchGuidedSetup(string providerName) 
    {
        if (guidedSetupWizardInstance != null)
        {
             await guidedSetupWizardInstance.OpenForProvider(providerName); 
        }
        else
        {
             Logger.LogError("GuidedSetupWizard instance reference is null when trying to launch setup.");
             // Handle error? Maybe show a message to the user?
             // For now, just log the error. The wizard won't open.
         }
    }

    private async Task HandleSetupComplete(DbProviderCredentials newProvider)
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            await dbContext.ProviderCredentials.AddAsync(newProvider);
            await dbContext.SaveChangesAsync();

            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving provider from guided setup");
            deleteErrorMessage = $"Error saving provider: {ex.Message}";
            StateHasChanged();
        }
    }

    private string GetProviderDescription(string provider)
    {
        return provider switch
        {
            "OpenAI" => "Connect to GPT-3.5, GPT-4, and other OpenAI models",
            "Anthropic" => "Connect to Claude models for advanced reasoning",
            "Cohere" => "Connect to Command models for enterprise applications",
            "Gemini" => "Connect to Google's Gemini models for multimodal capabilities",
            "Fireworks" => "Connect to Fireworks.ai for fast and cost-effective inference",
            "OpenRouter" => "Connect to OpenRouter for access to multiple models through one API",
            "Cerebras" => "Connect to Cerebras Cloud for Slimpajama models",
            "AWS Bedrock" => "Connect to Amazon Bedrock for foundation models",
            "SageMaker" => "Connect to AWS SageMaker for hosted LLMs",
            "VertexAI" => "Connect to Google Vertex AI for enterprise-grade models",
            "HuggingFace" => "Connect to HuggingFace Hub for open-source models",
            "Groq" => "Connect to Groq for ultra-fast inference on Llama/Mixtral",
            "Mistral" => "Connect to Mistral AI for Mixtral and Le Chat models",
            _ => "Connect to AI models through this provider"
        };
    }
}
