@page "/configuration"
@using System.Text.Json
@using ConduitLLM.Configuration
@using ConfigDTOs = ConduitLLM.Configuration.DTOs
@using WebUIDTOs = ConduitLLM.WebUI.DTOs
@using ConduitLLM.Providers.Configuration
@using ConduitLLM.WebUI.Services
@using ConduitLLM.WebUI.Interfaces
@using Microsoft.Extensions.Logging
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using Microsoft.JSInterop
@using ConduitLLM.WebUI.Components.Shared

@inject NavigationManager NavigationManager
@inject ILogger<Configuration> Logger
@inject Interfaces.IAdminApiClient AdminApiClient
@inject ConfigurationChangeNotifier ConfigChangeNotifier
@inject IJSRuntime JSRuntime
@inject ProviderModelsService ProviderModelsService
@inject IToastService ToastService
@rendermode InteractiveServer

<PageTitle>Configuration - ConduitLLM</PageTitle>

<div class="container container-xxl">
    <!-- Header Section -->
    <PageHeader Title="Configuration Management" 
                Description="Configure system settings for your deployment"
                Icon="fa-cogs">
    </PageHeader>

    <!-- Global Settings Section -->
    <div class="row mb-4">
        <div class="col-12">
            <h3 class="mb-4">
                <i class="fa fa-globe me-2 text-info"></i>Global Settings
            </h3>
        </div>
    </div>

    <div class="row">
        <div class="col-12 col-md-6">
            <div class="card modern-card mb-4">
                <div class="card-header modern-card-header">
                    <h5 class="mb-0">
                        <i class="fa fa-link me-2 text-primary"></i>Proxy Base URL
                    </h5>
                </div>
                <div class="card-body modern-card-body">
                    <div class="modern-form-group mb-3">
                        <label for="proxyBaseUrl" class="modern-form-label">Conduit Proxy Base URL</label>
                        <input type="text" class="form-control modern-form-control" id="proxyBaseUrl" 
                               @bind="proxyBaseUrlInput"
                               placeholder="e.g., https://api.yourcompany.com/conduit" />
                        <small class="form-text text-muted">URL where your Conduit API is publicly accessible. Used for SDK clients.</small>
                    </div>
                    
                    <button class="btn btn-primary modern-btn modern-btn-primary mt-2" 
                            @onclick="SaveProxyUrl">
                        <i class="fa fa-save me-1"></i>Save
                    </button>
                    
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12 col-md-6">
            <div class="card modern-card mb-5">
                <div class="card-header modern-card-header">
                    <h5 class="mb-0">
                        <i class="fa fa-refresh me-2 text-warning"></i>HTTP Retry Settings
                    </h5>
                </div>
                <div class="card-body modern-card-body">
                    <div class="modern-form-group mb-4">
                        <label for="maxRetries" class="modern-form-label">Maximum Retry Attempts</label>
                        <input type="number" class="form-control modern-form-control" id="maxRetries" 
                               min="0" max="10"
                               @bind="httpRetryOptions.MaxRetries" />
                        <small class="form-text text-muted">Maximum number of times to retry HTTP requests on transient failures (0-10)</small>
                    </div>
                    
                    <div class="modern-form-group mb-4">
                        <label for="initialDelay" class="modern-form-label">Initial Delay (seconds)</label>
                        <input type="number" class="form-control modern-form-control" id="initialDelay" 
                               min="0" max="10"
                               @bind="httpRetryOptions.InitialDelaySeconds" />
                        <small class="form-text text-muted">Initial delay before first retry attempt</small>
                    </div>
                    
                    <div class="modern-form-group mb-4">
                        <label for="maxDelay" class="modern-form-label">Maximum Delay (seconds)</label>
                        <input type="number" class="form-control modern-form-control" id="maxDelay" 
                               min="1" max="60"
                               @bind="httpRetryOptions.MaxDelaySeconds" />
                        <small class="form-text text-muted">Maximum delay cap for any retry attempt</small>
                    </div>
                    
                    <div class="form-check mb-4">
                        <input class="form-check-input" type="checkbox" id="enableRetryLogging" 
                               @bind="httpRetryOptions.EnableRetryLogging" />
                        <label class="form-check-label" for="enableRetryLogging">
                            Enable Retry Logging
                        </label>
                    </div>
                    
                    <button class="btn btn-primary modern-btn modern-btn-primary mb-2" 
                            @onclick="async () => await SaveHttpRetryOptions()">
                        <i class="fa fa-save me-1"></i> Save Retry Settings
                    </button>
                    
                </div>
            </div>
        </div>
        
        <div class="col-12 col-md-6">
            <div class="card modern-card mb-5">
                <div class="card-header modern-card-header">
                    <h5 class="mb-0">
                        <i class="fa fa-clock-o me-2 text-danger"></i>HTTP Timeout Settings
                    </h5>
                </div>
                <div class="card-body modern-card-body">
                    <div class="modern-form-group mb-4">
                        <label for="timeoutDuration" class="modern-form-label">Timeout Duration (seconds)</label>
                        <input type="number" class="form-control modern-form-control" id="timeoutDuration" 
                               min="10" max="600"
                               @bind="httpTimeoutOptions.TimeoutSeconds" />
                        <small class="form-text text-muted">Maximum time to wait for HTTP requests to complete before timing out (10-600 seconds)</small>
                    </div>
                    
                    <div class="form-check mb-4">
                        <input class="form-check-input" type="checkbox" id="enableTimeoutLogging" 
                               @bind="httpTimeoutOptions.EnableTimeoutLogging" />
                        <label class="form-check-label" for="enableTimeoutLogging">
                            Enable Timeout Logging
                        </label>
                        <small class="d-block text-muted ms-4 mb-4">
                            Log detailed information about request timeouts
                        </small>
                    </div>
                    
                    <button class="btn btn-primary modern-btn modern-btn-primary mb-2" 
                            @onclick="async () => await SaveHttpTimeoutOptions()">
                        <i class="fa fa-save me-1"></i> Save Timeout Settings
                    </button>
                    
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12 col-md-6">
            <div class="card modern-card mb-5">
                <div class="card-header modern-card-header">
                    <h5 class="mb-0">
                        <i class="fa fa-info-circle me-2 text-info"></i>About HTTP Client Settings
                    </h5>
                </div>
                <div class="card-body modern-card-body">
                    <p class="mb-3">
                        These settings control how ConduitLLM handles retry logic when communicating with LLM provider APIs.
                    </p>
                    <div class="modern-info-card p-4 rounded">
                        <div class="d-flex mb-3">
                            <i class="fa fa-refresh me-3 mt-1"></i>
                            <div>
                                <strong>Maximum Retry Attempts</strong>: Number of times the system will retry failed API calls that encounter transient errors.
                            </div>
                        </div>
                        <div class="d-flex mb-3">
                            <i class="fa fa-clock-o me-3 mt-1"></i>
                            <div>
                                <strong>Initial Delay</strong>: How long to wait before the first retry attempt. Subsequent retries use exponential backoff with jitter.
                            </div>
                        </div>
                        <div class="d-flex mb-3">
                            <i class="fa fa-hourglass-half me-3 mt-1"></i>
                            <div>
                                <strong>Maximum Delay</strong>: The maximum time to wait between retry attempts, regardless of the backoff calculation.
                            </div>
                        </div>
                        <div class="d-flex">
                            <i class="fa fa-bell me-3 mt-1"></i>
                            <div>
                                <strong>Enable Retry Logging</strong>: When enabled, detailed logs will be generated for each retry attempt, helping with troubleshooting.
                            </div>
                        </div>
                    </div>
                    <div class="alert modern-alert modern-alert-info mt-3">
                        These settings apply to all provider clients and provide resilience against temporary API outages and rate limiting.
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-6">
            <div class="card modern-card mb-5">
                <div class="card-header modern-card-header">
                    <h5 class="mb-0">
                        <i class="fa fa-info-circle me-2 text-info"></i>About HTTP Timeout Settings
                    </h5>
                </div>
                <div class="card-body modern-card-body">
                    <p class="mb-3">
                        These settings control how ConduitLLM handles timeouts when communicating with LLM provider APIs.
                    </p>
                    <div class="modern-info-card p-4 rounded">
                        <div class="d-flex mb-3">
                            <i class="fa fa-hourglass-end me-3 mt-1"></i>
                            <div>
                                <strong>Timeout Duration</strong>: Maximum time to wait for HTTP requests to complete before timing out.
                            </div>
                        </div>
                        <div class="d-flex">
                            <i class="fa fa-bell me-3 mt-1"></i>
                            <div>
                                <strong>Enable Timeout Logging</strong>: When enabled, detailed logs will be generated for each request timeout, helping with troubleshooting.
                            </div>
                        </div>
                    </div>
                    <div class="alert modern-alert modern-alert-info mt-3">
                        These settings apply to all provider clients and provide resilience against slow or unresponsive APIs.
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@* Guided Setup Modal Components - Disabled during Admin API migration *@
@* 
<GuidedSetupWizard
    @ref="guidedSetupWizardInstance"
    IsOpen="isGuidedSetupOpen"
    OnSetupComplete="@(async (ConduitLLM.Configuration.Entities.ProviderCredential provider) => await HandleSetupComplete(provider))"
    IsOpenChanged="HandleIsOpenChanged" />
*@

@code {
    // --- State ---
    private List<ConfigDTOs.GlobalSettingDto> globalSettings = new();

    // Settings state
    private ConfigDTOs.GlobalSettingDto currentSettings = new();
    
    // HTTP options state
    private string? proxyBaseUrlInput;
    private ConduitLLM.Providers.Configuration.RetryOptions httpRetryOptions = new();
    private ConduitLLM.Providers.Configuration.TimeoutOptions httpTimeoutOptions = new();
    
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadProxyUrlAsync();
            await LoadHttpRetryOptionsAsync();
            await LoadHttpTimeoutOptionsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing Configuration page");
        }
    }
    
    // --- Settings Loading Methods ---
    
    private async Task LoadProxyUrlAsync()
    {
        try
        {
            proxyBaseUrlInput = await AdminApiClient.GetSettingAsync("ConduitSettings:ProxyBaseUrl");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading proxy URL setting");
        }
    }
    
    private async Task LoadHttpRetryOptionsAsync()
    {
        // TODO: Update to use AdminApiClient once HTTP config API is available
        httpRetryOptions = new ConduitLLM.Providers.Configuration.RetryOptions();
        await Task.CompletedTask;
    }
    
    private async Task LoadHttpTimeoutOptionsAsync()
    {
        // TODO: Update to use AdminApiClient once HTTP config API is available
        httpTimeoutOptions = new ConduitLLM.Providers.Configuration.TimeoutOptions();
        await Task.CompletedTask;
    }
    
    // --- Settings Methods ---

    
    private async Task SaveProxyUrl()
    {
        try
        {
            await AdminApiClient.SetSettingAsync("ConduitSettings:ProxyBaseUrl", proxyBaseUrlInput ?? string.Empty);
            
            ToastService.ShowSuccess("Base URL saved successfully");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error saving URL: {ex.Message}");
        }
    }
    
    private Task SaveHttpRetryOptions()
    {
        try
        {
            // TODO: Update to use AdminApiClient once HTTP config API is available
            // await AdminApiClient.UpdateHttpRetryConfigurationAsync(httpRetryOptions);
            ToastService.ShowSuccess("HTTP retry settings saved successfully (placeholder)");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error saving settings: {ex.Message}");
        }
        return Task.CompletedTask;
    }

    private Task SaveHttpTimeoutOptions()
    {
        try
        {
            // TODO: Update to use AdminApiClient once HTTP config API is available
            // await AdminApiClient.UpdateHttpTimeoutConfigurationAsync(httpTimeoutOptions);
            ToastService.ShowSuccess("HTTP timeout settings saved successfully (placeholder)");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error saving settings: {ex.Message}");
        }
        return Task.CompletedTask;
    }
}

<style>
    /* Keep only styles specific to this page that aren't covered by components */
    .hover-card {
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }
    
    .hover-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 20px rgba(0,0,0,0.15) !important;
    }
</style>