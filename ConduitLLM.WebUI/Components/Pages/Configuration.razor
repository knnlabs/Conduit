@page "/configuration"
@using System.Text.Json
@using ConduitLLM.Configuration
@using ConfigDTOs = ConduitLLM.Configuration.DTOs
@using WebUIDTOs = ConduitLLM.WebUI.DTOs
@using ConduitLLM.Providers.Configuration
@using ConduitLLM.WebUI.Services
@using ConduitLLM.WebUI.Interfaces
@using Microsoft.Extensions.Logging
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using Microsoft.JSInterop
@using AudioDTOs = ConduitLLM.Configuration.DTOs.Audio
@using ConduitLLM.WebUI.Components.Shared

@inject NavigationManager NavigationManager
@inject ILogger<Configuration> Logger
@inject Interfaces.IAdminApiClient AdminApiClient
@inject ConfigurationChangeNotifier ConfigChangeNotifier
@inject IJSRuntime JSRuntime
@inject ProviderModelsService ProviderModelsService
@inject IToastService ToastService
@rendermode InteractiveServer

<PageTitle>Configuration - ConduitLLM</PageTitle>

<div class="container container-xxl mt-4">
    <!-- Header Section -->
    <PageHeader Title="Configuration Management" 
                Description="Configure audio capabilities and system settings for your deployment"
                Icon="fa-cogs">
        <Statistics>
            <div class="stat-item">
                <i class="fa fa-headphones me-2"></i>
                <span class="small">@(audioProviders?.Count ?? 0) Audio Providers</span>
            </div>
        </Statistics>
    </PageHeader>

    <!-- Audio Providers Section -->
    <div class="card shadow-sm border-0 mb-5">
        <div class="card-header bg-light border-0">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="fa fa-headphones me-2 text-info"></i>Audio Providers
                </h5>
                <button class="btn btn-primary shadow-sm" @onclick="() => isEditingAudioProvider = true">
                    <i class="fa fa-plus me-1"></i> Configure Audio Provider
                </button>
            </div>
        </div>
        
        <div class="card-body">
            <div class="alert alert-info border-0 shadow-sm mb-4">
                <i class="fa fa-info-circle me-2"></i>
                <strong>Audio Providers:</strong> Configure audio capabilities for your LLM providers including transcription, text-to-speech, and real-time audio.
            </div>
            
            @if (audioProviders == null)
            {
                <div class="d-flex justify-content-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!audioProviders.Any())
            {
                <div class="text-center py-5">
                    <i class="fa fa-headphones fa-4x text-muted mb-4"></i>
                    <h4 class="text-muted mb-3">No Audio Providers Configured</h4>
                    <p class="text-muted mb-4">Configure audio capabilities for your existing LLM providers</p>
                </div>
            }
            else
            {
                <div class="table-responsive mb-4">
                    <table class="table table-hover table-striped">
                        <thead>
                            <tr>
                                <th>Provider</th>
                                <th>Transcription</th>
                                <th>Text-to-Speech</th>
                                <th>Real-time Audio</th>
                                <th>Priority</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var audioProvider in audioProviders)
                            {
                                <tr>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="provider-icon bg-info-light rounded-circle p-2 me-3">
                                                <i class="fa fa-headphones text-info"></i>
                                            </div>
                                            <span class="fw-semibold">@audioProvider.ProviderName</span>
                                        </div>
                                    </td>
                                    <td>
                                        @if (audioProvider.TranscriptionEnabled)
                                        {
                                            <span class="badge bg-success">
                                                <i class="fa fa-check me-1"></i>Enabled
                                            </span>
                                            @if (!string.IsNullOrEmpty(audioProvider.DefaultTranscriptionModel))
                                            {
                                                <br/>
                                                <small class="text-muted">@audioProvider.DefaultTranscriptionModel</small>
                                            }
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Disabled</span>
                                        }
                                    </td>
                                    <td>
                                        @if (audioProvider.TextToSpeechEnabled)
                                        {
                                            <span class="badge bg-success">
                                                <i class="fa fa-check me-1"></i>Enabled
                                            </span>
                                            @if (!string.IsNullOrEmpty(audioProvider.DefaultTTSModel))
                                            {
                                                <br/>
                                                <small class="text-muted">@audioProvider.DefaultTTSModel</small>
                                            }
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Disabled</span>
                                        }
                                    </td>
                                    <td>
                                        @if (audioProvider.RealtimeEnabled)
                                        {
                                            <span class="badge bg-success">
                                                <i class="fa fa-check me-1"></i>Enabled
                                            </span>
                                            @if (!string.IsNullOrEmpty(audioProvider.DefaultRealtimeModel))
                                            {
                                                <br/>
                                                <small class="text-muted">@audioProvider.DefaultRealtimeModel</small>
                                            }
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Disabled</span>
                                        }
                                    </td>
                                    <td>
                                        <span class="badge bg-primary">@audioProvider.RoutingPriority</span>
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-outline-primary btn-sm" @onclick="() => EditAudioProvider(audioProvider.Id)">
                                                <i class="fa fa-edit me-1"></i> Edit
                                            </button>
                                            <button type="button" class="btn btn-outline-danger btn-sm" @onclick="() => DeleteAudioProvider(audioProvider.Id)">
                                                <i class="fa fa-trash me-1"></i> Delete
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>

    @if (isEditingAudioProvider)
    {
        <div class="card shadow-sm border-0 mb-5">
            <div class="card-header bg-light border-0">
                <h5 class="mb-0">
                    <i class="fa fa-@(currentAudioProvider.Id == 0 ? "plus" : "edit") me-2 text-info"></i>
                    @(currentAudioProvider.Id == 0 ? "Configure" : "Edit") Audio Provider
                </h5>
            </div>
            <div class="card-body">
                
                <div class="form-group mb-4">
                    <label for="audioProviderSelect">LLM Provider</label>
                    <select class="form-select" id="audioProviderSelect" 
                            @bind="currentAudioProvider.ProviderCredentialId">
                        <option value="0">-- Select Provider --</option>
                        @if (providerCredentials != null)
                        {
                            @foreach (var provider in providerCredentials.OrderBy(p => p.ProviderName))
                            {
                                <option value="@provider.Id">@provider.ProviderName</option>
                            }
                        }
                    </select>
                    <small class="form-text text-muted">Select the LLM provider to configure audio capabilities for</small>
                </div>
                
                <!-- Transcription Settings -->
                <h6 class="mb-3"><i class="fa fa-microphone me-2"></i>Transcription Settings</h6>
                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="form-check mb-3">
                            <input class="form-check-input" type="checkbox" id="transcriptionEnabled" 
                                   @bind="currentAudioProvider.TranscriptionEnabled" />
                            <label class="form-check-label" for="transcriptionEnabled">
                                Enable Transcription
                            </label>
                        </div>
                        <div class="form-group">
                            <label for="transcriptionModel">Default Transcription Model</label>
                            <input type="text" class="form-control" id="transcriptionModel" 
                                   @bind="currentAudioProvider.DefaultTranscriptionModel"
                                   placeholder="e.g., whisper-1"
                                   disabled="@(!currentAudioProvider.TranscriptionEnabled)" />
                        </div>
                    </div>
                </div>
                
                <!-- Text-to-Speech Settings -->
                <h6 class="mb-3"><i class="fa fa-volume-up me-2"></i>Text-to-Speech Settings</h6>
                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="form-check mb-3">
                            <input class="form-check-input" type="checkbox" id="ttsEnabled" 
                                   @bind="currentAudioProvider.TextToSpeechEnabled" />
                            <label class="form-check-label" for="ttsEnabled">
                                Enable Text-to-Speech
                            </label>
                        </div>
                        <div class="form-group mb-3">
                            <label for="ttsModel">Default TTS Model</label>
                            <input type="text" class="form-control" id="ttsModel" 
                                   @bind="currentAudioProvider.DefaultTTSModel"
                                   placeholder="e.g., tts-1"
                                   disabled="@(!currentAudioProvider.TextToSpeechEnabled)" />
                        </div>
                        <div class="form-group">
                            <label for="ttsVoice">Default TTS Voice</label>
                            <input type="text" class="form-control" id="ttsVoice" 
                                   @bind="currentAudioProvider.DefaultTTSVoice"
                                   placeholder="e.g., alloy"
                                   disabled="@(!currentAudioProvider.TextToSpeechEnabled)" />
                        </div>
                    </div>
                </div>
                
                <!-- Real-time Audio Settings -->
                <h6 class="mb-3"><i class="fa fa-podcast me-2"></i>Real-time Audio Settings</h6>
                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="form-check mb-3">
                            <input class="form-check-input" type="checkbox" id="realtimeEnabled" 
                                   @bind="currentAudioProvider.RealtimeEnabled" />
                            <label class="form-check-label" for="realtimeEnabled">
                                Enable Real-time Audio
                            </label>
                        </div>
                        <div class="form-group mb-3">
                            <label for="realtimeModel">Default Real-time Model</label>
                            <input type="text" class="form-control" id="realtimeModel" 
                                   @bind="currentAudioProvider.DefaultRealtimeModel"
                                   placeholder="e.g., gpt-4-realtime"
                                   disabled="@(!currentAudioProvider.RealtimeEnabled)" />
                        </div>
                        <div class="form-group">
                            <label for="realtimeEndpoint">WebSocket Endpoint</label>
                            <input type="text" class="form-control" id="realtimeEndpoint" 
                                   @bind="currentAudioProvider.RealtimeEndpoint"
                                   placeholder="e.g., wss://api.openai.com/v1/realtime"
                                   disabled="@(!currentAudioProvider.RealtimeEnabled)" />
                        </div>
                    </div>
                </div>
                
                <!-- Routing Priority -->
                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="routingPriority">Routing Priority</label>
                            <input type="number" class="form-control" id="routingPriority" 
                                   @bind="currentAudioProvider.RoutingPriority"
                                   min="1" max="1000" />
                            <small class="form-text text-muted">Higher priority providers are preferred when routing audio requests</small>
                        </div>
                    </div>
                </div>
                
                <div class="d-flex justify-content-end">
                    <button type="button" class="btn btn-outline-secondary me-2" @onclick="CancelAudioProviderEdit">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveAudioProvider">Save</button>
                </div>
            </div>
        </div>
    }

    <!-- Global Settings Section -->
    <div class="row mb-4">
        <div class="col-12">
            <h3 class="mb-4">
                <i class="fa fa-globe me-2 text-info"></i>Global Settings
            </h3>
        </div>
    </div>

    <div class="row">
        <div class="col-12 col-md-6">
            <div class="card shadow-sm border-0 mb-4">
                <div class="card-header bg-light border-0">
                    <h5 class="mb-0">
                        <i class="fa fa-link me-2 text-primary"></i>Proxy Base URL
                    </h5>
                </div>
                <div class="card-body">
                    <div class="form-group mb-3">
                        <label for="proxyBaseUrl">Conduit Proxy Base URL</label>
                        <input type="text" class="form-control" id="proxyBaseUrl" 
                               @bind="proxyBaseUrlInput"
                               placeholder="e.g., https://api.yourcompany.com/conduit" />
                        <small class="form-text text-muted">URL where your Conduit API is publicly accessible. Used for SDK clients.</small>
                    </div>
                    
                    <button class="btn btn-primary shadow-sm mt-2" 
                            @onclick="SaveProxyUrl">
                        <i class="fa fa-save me-1"></i>Save
                    </button>
                    
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12 col-md-6">
            <div class="card shadow-sm border-0 mb-5">
                <div class="card-header bg-light border-0">
                    <h5 class="mb-0">
                        <i class="fa fa-refresh me-2 text-warning"></i>HTTP Retry Settings
                    </h5>
                </div>
                <div class="card-body">
                    <div class="form-group mb-4">
                        <label for="maxRetries">Maximum Retry Attempts</label>
                        <input type="number" class="form-control" id="maxRetries" 
                               min="0" max="10"
                               @bind="httpRetryOptions.MaxRetries" />
                        <small class="form-text text-muted">Maximum number of times to retry HTTP requests on transient failures (0-10)</small>
                    </div>
                    
                    <div class="form-group mb-4">
                        <label for="initialDelay">Initial Delay (seconds)</label>
                        <input type="number" class="form-control" id="initialDelay" 
                               min="0" max="10"
                               @bind="httpRetryOptions.InitialDelaySeconds" />
                        <small class="form-text text-muted">Initial delay before first retry attempt</small>
                    </div>
                    
                    <div class="form-group mb-4">
                        <label for="maxDelay">Maximum Delay (seconds)</label>
                        <input type="number" class="form-control" id="maxDelay" 
                               min="1" max="60"
                               @bind="httpRetryOptions.MaxDelaySeconds" />
                        <small class="form-text text-muted">Maximum delay cap for any retry attempt</small>
                    </div>
                    
                    <div class="form-check mb-4">
                        <input class="form-check-input" type="checkbox" id="enableRetryLogging" 
                               @bind="httpRetryOptions.EnableRetryLogging" />
                        <label class="form-check-label" for="enableRetryLogging">
                            Enable Retry Logging
                        </label>
                    </div>
                    
                    <button class="btn btn-primary mb-2" 
                            @onclick="async () => await SaveHttpRetryOptions()">
                        <i class="fa fa-save me-1"></i> Save Retry Settings
                    </button>
                    
                </div>
            </div>
        </div>
        
        <div class="col-12 col-md-6">
            <div class="card shadow-sm border-0 mb-5">
                <div class="card-header bg-light border-0">
                    <h5 class="mb-0">
                        <i class="fa fa-clock-o me-2 text-danger"></i>HTTP Timeout Settings
                    </h5>
                </div>
                <div class="card-body">
                    <div class="form-group mb-4">
                        <label for="timeoutDuration">Timeout Duration (seconds)</label>
                        <input type="number" class="form-control" id="timeoutDuration" 
                               min="10" max="600"
                               @bind="httpTimeoutOptions.TimeoutSeconds" />
                        <small class="form-text text-muted">Maximum time to wait for HTTP requests to complete before timing out (10-600 seconds)</small>
                    </div>
                    
                    <div class="form-check mb-4">
                        <input class="form-check-input" type="checkbox" id="enableTimeoutLogging" 
                               @bind="httpTimeoutOptions.EnableTimeoutLogging" />
                        <label class="form-check-label" for="enableTimeoutLogging">
                            Enable Timeout Logging
                        </label>
                        <small class="d-block text-muted ms-4 mb-4">
                            Log detailed information about request timeouts
                        </small>
                    </div>
                    
                    <button class="btn btn-primary mb-2" 
                            @onclick="async () => await SaveHttpTimeoutOptions()">
                        <i class="fa fa-save me-1"></i> Save Timeout Settings
                    </button>
                    
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12 col-md-6">
            <div class="card shadow-sm border-0 mb-5">
                <div class="card-header bg-light border-0">
                    <h5 class="mb-0">
                        <i class="fa fa-info-circle me-2 text-info"></i>About HTTP Client Settings
                    </h5>
                </div>
                <div class="card-body">
                    <p class="mb-3">
                        These settings control how ConduitLLM handles retry logic when communicating with LLM provider APIs.
                    </p>
                    <div class="bg-light p-4 border rounded">
                        <div class="d-flex mb-3">
                            <i class="fa fa-refresh me-3 mt-1"></i>
                            <div>
                                <strong>Maximum Retry Attempts</strong>: Number of times the system will retry failed API calls that encounter transient errors.
                            </div>
                        </div>
                        <div class="d-flex mb-3">
                            <i class="fa fa-clock-o me-3 mt-1"></i>
                            <div>
                                <strong>Initial Delay</strong>: How long to wait before the first retry attempt. Subsequent retries use exponential backoff with jitter.
                            </div>
                        </div>
                        <div class="d-flex mb-3">
                            <i class="fa fa-hourglass-half me-3 mt-1"></i>
                            <div>
                                <strong>Maximum Delay</strong>: The maximum time to wait between retry attempts, regardless of the backoff calculation.
                            </div>
                        </div>
                        <div class="d-flex">
                            <i class="fa fa-bell me-3 mt-1"></i>
                            <div>
                                <strong>Enable Retry Logging</strong>: When enabled, detailed logs will be generated for each retry attempt, helping with troubleshooting.
                            </div>
                        </div>
                    </div>
                    <div class="alert alert-info mt-3">
                        These settings apply to all provider clients and provide resilience against temporary API outages and rate limiting.
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-6">
            <div class="card shadow-sm border-0 mb-5">
                <div class="card-header bg-light border-0">
                    <h5 class="mb-0">
                        <i class="fa fa-info-circle me-2 text-info"></i>About HTTP Timeout Settings
                    </h5>
                </div>
                <div class="card-body">
                    <p class="mb-3">
                        These settings control how ConduitLLM handles timeouts when communicating with LLM provider APIs.
                    </p>
                    <div class="bg-light p-4 border rounded">
                        <div class="d-flex mb-3">
                            <i class="fa fa-hourglass-end me-3 mt-1"></i>
                            <div>
                                <strong>Timeout Duration</strong>: Maximum time to wait for HTTP requests to complete before timing out.
                            </div>
                        </div>
                        <div class="d-flex">
                            <i class="fa fa-bell me-3 mt-1"></i>
                            <div>
                                <strong>Enable Timeout Logging</strong>: When enabled, detailed logs will be generated for each request timeout, helping with troubleshooting.
                            </div>
                        </div>
                    </div>
                    <div class="alert alert-info mt-3">
                        These settings apply to all provider clients and provide resilience against slow or unresponsive APIs.
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@* Guided Setup Modal Components - Disabled during Admin API migration *@
@* 
<GuidedSetupWizard
    @ref="guidedSetupWizardInstance"
    IsOpen="isGuidedSetupOpen"
    OnSetupComplete="@(async (ConduitLLM.Configuration.Entities.ProviderCredential provider) => await HandleSetupComplete(provider))"
    IsOpenChanged="HandleIsOpenChanged" />
*@

@code {
    // --- State ---
    private List<ConfigDTOs.ProviderCredentialDto> providerCredentials = new(); // Still needed for audio provider dropdown
    private List<ConfigDTOs.GlobalSettingDto> globalSettings = new();
    private List<AudioDTOs.AudioProviderConfigDto> audioProviders = new();

    // Audio provider form state
    private bool isEditingAudioProvider = false;
    private AudioDTOs.AudioProviderConfigDto currentAudioProvider = new();

    // Settings state
    private ConfigDTOs.GlobalSettingDto currentSettings = new();
    
    // HTTP options state
    private string? proxyBaseUrlInput;
    private ConduitLLM.Providers.Configuration.RetryOptions httpRetryOptions = new();
    private ConduitLLM.Providers.Configuration.TimeoutOptions httpTimeoutOptions = new();
    
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadProvidersAsync();
            await LoadAudioProvidersAsync();
            await LoadProxyUrlAsync();
            await LoadHttpRetryOptionsAsync();
            await LoadHttpTimeoutOptionsAsync();
            
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing Configuration page");
        }
    }
    
    // --- Settings Loading Methods ---
    
    private async Task LoadProvidersAsync()
    {
        try
        {
            var providers = await AdminApiClient.GetAllProviderCredentialsAsync();
            providerCredentials = providers.ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading provider credentials");
            providerCredentials = new List<ConfigDTOs.ProviderCredentialDto>(); 
        }
    }
    
    private async Task LoadAudioProvidersAsync()
    {
        try
        {
            audioProviders = await AdminApiClient.GetAudioProvidersAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading audio providers");
            audioProviders = new List<AudioDTOs.AudioProviderConfigDto>();
        }
    }
    
    private async Task LoadProxyUrlAsync()
    {
        try
        {
            proxyBaseUrlInput = await AdminApiClient.GetSettingAsync("ConduitSettings:ProxyBaseUrl");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading proxy URL setting");
        }
    }
    
    private async Task LoadHttpRetryOptionsAsync()
    {
        // TODO: Update to use AdminApiClient once HTTP config API is available
        httpRetryOptions = new ConduitLLM.Providers.Configuration.RetryOptions();
        await Task.CompletedTask;
    }
    
    private async Task LoadHttpTimeoutOptionsAsync()
    {
        // TODO: Update to use AdminApiClient once HTTP config API is available
        httpTimeoutOptions = new ConduitLLM.Providers.Configuration.TimeoutOptions();
        await Task.CompletedTask;
    }
    
    // --- Settings Methods ---

    
    private async Task SaveProxyUrl()
    {
        try
        {
            await AdminApiClient.SetSettingAsync("ConduitSettings:ProxyBaseUrl", proxyBaseUrlInput ?? string.Empty);
            
            ToastService.ShowSuccess("Base URL saved successfully");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error saving URL: {ex.Message}");
        }
    }
    
    private Task SaveHttpRetryOptions()
    {
        try
        {
            // TODO: Update to use AdminApiClient once HTTP config API is available
            // await AdminApiClient.UpdateHttpRetryConfigurationAsync(httpRetryOptions);
            ToastService.ShowSuccess("HTTP retry settings saved successfully (placeholder)");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error saving settings: {ex.Message}");
        }
        return Task.CompletedTask;
    }

    private Task SaveHttpTimeoutOptions()
    {
        try
        {
            // TODO: Update to use AdminApiClient once HTTP config API is available
            // await AdminApiClient.UpdateHttpTimeoutConfigurationAsync(httpTimeoutOptions);
            ToastService.ShowSuccess("HTTP timeout settings saved successfully (placeholder)");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error saving settings: {ex.Message}");
        }
        return Task.CompletedTask;
    }

    // --- Audio Provider Methods ---
    
    private async Task EditAudioProvider(int id)
    {
        try
        {
            var audioProvider = await AdminApiClient.GetAudioProviderAsync(id);
            if (audioProvider != null)
            {
                currentAudioProvider = new AudioDTOs.AudioProviderConfigDto
                {
                    Id = audioProvider.Id,
                    ProviderCredentialId = audioProvider.ProviderCredentialId,
                    TranscriptionEnabled = audioProvider.TranscriptionEnabled,
                    DefaultTranscriptionModel = audioProvider.DefaultTranscriptionModel,
                    TextToSpeechEnabled = audioProvider.TextToSpeechEnabled,
                    DefaultTTSModel = audioProvider.DefaultTTSModel,
                    DefaultTTSVoice = audioProvider.DefaultTTSVoice,
                    RealtimeEnabled = audioProvider.RealtimeEnabled,
                    DefaultRealtimeModel = audioProvider.DefaultRealtimeModel,
                    RealtimeEndpoint = audioProvider.RealtimeEndpoint,
                    RoutingPriority = audioProvider.RoutingPriority,
                    CustomSettings = audioProvider.CustomSettings
                };
                isEditingAudioProvider = true;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading audio provider for editing");
            ToastService.ShowError($"Error loading audio provider: {ex.Message}");
        }
    }
    
    private async Task DeleteAudioProvider(int id)
    {
        try
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
                "Are you sure you want to delete this audio provider configuration? This cannot be undone.");

            if (!confirmed) return;

            var success = await AdminApiClient.DeleteAudioProviderAsync(id);
            if (success)
            {
                await LoadAudioProvidersAsync();
                ToastService.ShowSuccess("Audio provider configuration deleted successfully");
            }
            else
            {
                ToastService.ShowError("Failed to delete audio provider configuration.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting audio provider");
            ToastService.ShowError($"Error deleting audio provider: {ex.Message}");
        }
    }
    
    private void CancelAudioProviderEdit()
    {
        isEditingAudioProvider = false;
        currentAudioProvider = new AudioDTOs.AudioProviderConfigDto();
    }
    
    private async Task SaveAudioProvider()
    {
        if (currentAudioProvider.ProviderCredentialId == 0)
        {
            ToastService.ShowError("Please select a provider");
            return;
        }

        try
        {
            if (currentAudioProvider.Id == 0)
            {
                // Create new
                var newAudioProvider = await AdminApiClient.CreateAudioProviderAsync(currentAudioProvider);
                if (newAudioProvider != null)
                {
                    await LoadAudioProvidersAsync();
                    isEditingAudioProvider = false;
                    currentAudioProvider = new AudioDTOs.AudioProviderConfigDto();
                    ToastService.ShowSuccess("Audio provider configuration created successfully");
                }
                else
                {
                    ToastService.ShowError("Failed to create audio provider configuration.");
                }
            }
            else
            {
                // Update existing
                var updatedAudioProvider = await AdminApiClient.UpdateAudioProviderAsync(currentAudioProvider.Id, currentAudioProvider);
                if (updatedAudioProvider != null)
                {
                    await LoadAudioProvidersAsync();
                    isEditingAudioProvider = false;
                    currentAudioProvider = new AudioDTOs.AudioProviderConfigDto();
                    ToastService.ShowSuccess("Audio provider configuration updated successfully");
                }
                else
                {
                    ToastService.ShowError("Failed to update audio provider configuration.");
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error saving audio provider: {ex.Message}");
            Logger.LogError(ex, "Error saving audio provider");
        }
    }
}

<style>
    /* Keep only styles specific to this page that aren't covered by components */
    .config-stats .stat-item {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 20px;
        padding: 0.5rem 1rem;
        display: inline-block;
    }
    
    .provider-icon {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .bg-info-light {
        background-color: rgba(13, 202, 240, 0.1);
    }
    
    .hover-card {
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }
    
    .hover-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 20px rgba(0,0,0,0.15) !important;
    }
    
    .table th {
        background-color: #f8f9fa;
    }
</style>