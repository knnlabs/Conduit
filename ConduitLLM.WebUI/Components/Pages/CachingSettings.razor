@page "/caching-settings"
@using ConduitLLM.WebUI.Interfaces
@using ConduitLLM.WebUI.Services
@using ConduitLLM.Core.Caching
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@inject ICacheStatusService CacheStatusService
@inject ICacheMetricsService MetricsService
@rendermode InteractiveServer
@inject ILogger<CachingSettings> Logger
@implements IDisposable

<PageTitle>Cache Settings</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">
    <MudIcon Icon="@Icons.Material.Filled.Storage" Class="mr-2" />
    Cache Settings
</MudText>
<MudDivider Class="mb-4" />

<MudGrid>
    <MudItem xs="12" md="8">
        <MudCard Elevation="2" Class="mb-4">
            <MudCardHeader>
                <MudText Typo="Typo.h6">Cache Configuration</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudSwitch T="bool" @bind-checked="_isEnabled" Color="Color.Primary" Label="Enable Cache" 
                          Class="mb-4" onClick="ToggleCacheEnabled" />

                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudSelect @bind-Value="_cacheType" Label="Cache Type" Disabled="@(!_isEnabled)" 
                                  Variant="Variant.Outlined" Class="mb-4">
                            @foreach (var option in _cacheTypeOptions)
                            {
                                <MudSelectItem Value="@option.Value">@option.Label</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudNumericField @bind-Value="_maxCacheItems" Label="Max Cache Items" Min="100"
                                        Disabled="@(!_isEnabled)" Variant="Variant.Outlined" Class="mb-4" />
                    </MudItem>
                </MudGrid>

                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudNumericField @bind-Value="_defaultExpirationMinutes" Label="Default Expiration (minutes)" 
                                        Min="1" Disabled="@(!_isEnabled)" Variant="Variant.Outlined" Class="mb-4" />
                    </MudItem>
                </MudGrid>

                @if (_cacheType == "Redis")
                {
                    <MudCard Elevation="0" Outlined="true" Class="mb-4">
                        <MudCardHeader>
                            <MudText Typo="Typo.h6">Redis Settings</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudTextField @bind-Value="_redisConnectionString" Label="Connection String" 
                                         Placeholder="localhost:6379" Disabled="@(!_isEnabled)"
                                         Variant="Variant.Outlined" Class="mb-4" />
                            <MudTextField @bind-Value="_redisInstanceName" Label="Redis Instance Name" 
                                         Placeholder="conduitllm-cache" Disabled="@(!_isEnabled)"
                                         Variant="Variant.Outlined" Class="mb-4" />
                        </MudCardContent>
                    </MudCard>
                }

                <MudExpansionPanels disableGutters="True" Elevation="0" Class="mb-4">
                    <MudExpansionPanel Disabled="@(!_isEnabled)" isInitiallyExpanded="False">
                        <TitleContent>
                            <MudText Typo="Typo.body1">Cache Key Settings</MudText>
                        </TitleContent>
                        <ChildContent>
                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudCheckBox T="bool" @bind-checked="_includeModelInKey" Label="Include Model" 
                                                Disabled="@(!_isEnabled)" Color="Color.Primary" Class="mb-2" />
                                    <MudCheckBox T="bool" @bind-checked="_includeProviderInKey" Label="Include Provider" 
                                                Disabled="@(!_isEnabled)" Color="Color.Primary" Class="mb-2" />
                                    <MudCheckBox T="bool" @bind-checked="_includeApiKeyInKey" Label="Include API Key" 
                                                Disabled="@(!_isEnabled)" Color="Color.Primary" Class="mb-2" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudCheckBox T="bool" @bind-checked="_includeTemperatureInKey" Label="Include Temperature" 
                                                Disabled="@(!_isEnabled)" Color="Color.Primary" Class="mb-2" />
                                    <MudCheckBox T="bool" @bind-checked="_includeMaxTokensInKey" Label="Include Max Tokens" 
                                                Disabled="@(!_isEnabled)" Color="Color.Primary" Class="mb-2" />
                                    <MudCheckBox T="bool" @bind-checked="_includeTopPInKey" Label="Include Top P" 
                                                Disabled="@(!_isEnabled)" Color="Color.Primary" Class="mb-2" />
                                </MudItem>
                            </MudGrid>
                        </ChildContent>
                    </MudExpansionPanel>
                    
                    <MudExpansionPanel Disabled="@(!_isEnabled)" isInitiallyExpanded="False">
                        <TitleContent>
                            <MudText Typo="Typo.body1">Model-Specific Rules</MudText>
                        </TitleContent>
                        <ChildContent>
                            @foreach (var rule in _modelRules)
                            {
                                <MudCard Elevation="0" Outlined="true" Class="mb-2">
                                    <MudCardContent>
                                        <MudGrid>
                                            <MudItem xs="12" md="5">
                                                <MudTextField @bind-Value="rule.ModelNamePattern" Label="Model Pattern" 
                                                             Disabled="@(!_isEnabled)" Variant="Variant.Outlined" Class="mb-2" />
                                            </MudItem>
                                            <MudItem xs="12" md="3">
                                                <MudSelect @bind-Value="rule.CacheBehavior" Label="Behavior" 
                                                          Disabled="@(!_isEnabled)" Variant="Variant.Outlined" Class="mb-2">
                                                    <MudSelectItem Value="@CacheBehavior.Default">Default</MudSelectItem>
                                                    <MudSelectItem Value="@CacheBehavior.Always">Always</MudSelectItem>
                                                    <MudSelectItem Value="@CacheBehavior.Never">Never</MudSelectItem>
                                                </MudSelect>
                                            </MudItem>
                                            <MudItem xs="12" md="3">
                                                <MudNumericField @bind-Value="rule.ExpirationMinutes" Label="Expiration (min)" 
                                                               Disabled="@(!_isEnabled || rule.CacheBehavior == CacheBehavior.Never)" 
                                                               Variant="Variant.Outlined" Class="mb-2" />
                                            </MudItem>
                                            <MudItem xs="12" md="1" Class="d-flex align-center">
                                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" 
                                                             Size="Size.Small" OnClick="@(() => RemoveModelRule(rule))" 
                                                             Disabled="@(!_isEnabled)" />
                                            </MudItem>
                                        </MudGrid>
                                    </MudCardContent>
                                </MudCard>
                            }
                            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="AddModelRule" 
                                      StartIcon="@Icons.Material.Filled.Add" Disabled="@(!_isEnabled)" Class="mt-2">
                                Add Model Rule
                            </MudButton>
                        </ChildContent>
                    </MudExpansionPanel>
                </MudExpansionPanels>

                <MudGrid>
                    <MudItem xs="6" Class="d-flex">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveConfiguration" 
                                 StartIcon="@Icons.Material.Filled.Save" Disabled="@(!_isInitialized)">
                            Save Changes
                        </MudButton>
                    </MudItem>
                    <MudItem xs="6" Class="d-flex justify-end">
                        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="ClearCache" 
                                 StartIcon="@Icons.Material.Filled.Delete" Disabled="@(!_isEnabled)">
                            Clear Cache
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="12" md="4">
        <MudCard Elevation="2" Class="mb-4">
            <MudCardHeader>
                <MudText Typo="Typo.h6">Cache Statistics</MudText>
            </MudCardHeader>
            <MudCardContent>
                @if (_isLoading)
                {
                    <div class="d-flex justify-center my-4">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    </div>
                }
                else
                {
                    <MudList T="string" clickable="false" Dense="true">
                        <MudListItem T="string">
                            <div class="d-flex justify-space-between">
                                <MudText>Status:</MudText>
                                <MudChip T="string" Color="@(_cacheStats.IsEnabled ? Color.Success : Color.Default)" 
                                        Size="Size.Small">
                                    @(_cacheStats.IsEnabled ? "Enabled" : "Disabled")
                                </MudChip>
                            </div>
                        </MudListItem>
                        <MudListItem T="string">
                            <div class="d-flex justify-space-between">
                                <MudText>Type:</MudText>
                                <MudText>@_cacheStats.CacheType</MudText>
                            </div>
                        </MudListItem>
                        <MudListItem T="string">
                            <div class="d-flex justify-space-between">
                                <MudText>Total Items:</MudText>
                                <MudText>@_cacheStats.TotalItems</MudText>
                            </div>
                        </MudListItem>
                        <MudListItem T="string">
                            <div class="d-flex justify-space-between">
                                <MudText>Hit Rate:</MudText>
                                <MudText>@(_cacheStats.HitRate.ToString("P2"))</MudText>
                            </div>
                        </MudListItem>
                        <MudListItem T="string">
                            <div class="d-flex justify-space-between">
                                <MudText>Memory Usage:</MudText>
                                <MudText>@FormatBytes(_cacheStats.MemoryUsageBytes)</MudText>
                            </div>
                        </MudListItem>
                        <MudListItem T="string">
                            <div class="d-flex justify-space-between">
                                <MudText>Avg. Response Time:</MudText>
                                <MudText>@_cacheStats.AvgResponseTime.ToString("F2") ms</MudText>
                            </div>
                        </MudListItem>
                    </MudList>
                    
                    <div class="d-flex justify-end mt-3">
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="LoadCacheStatisticsAsync" 
                                 StartIcon="@Icons.Material.Filled.Refresh" Size="Size.Small">
                            Refresh
                        </MudButton>
                    </div>
                }
            </MudCardContent>
        </MudCard>

        <MudCard Elevation="2" Class="mb-4">
            <MudCardHeader>
                <MudText Typo="Typo.h6">Model-Specific Statistics</MudText>
            </MudCardHeader>
            <MudCardContent>
                @if (_modelStats.Count == 0)
                {
                    <MudAlert Severity="Severity.Info" Class="my-2">
                        No model-specific statistics available.
                    </MudAlert>
                }
                else
                {
                    <MudTable Items="_modelStats" Dense="true" Hover="true" Bordered="false" Striped="true">
                        <HeaderContent>
                            <MudTh>Model</MudTh>
                            <MudTh>Hits</MudTh>
                            <MudTh>Misses</MudTh>
                            <MudTh>Hit Rate</MudTh>
                            <MudTh>Avg Time</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Model">@context.ModelName</MudTd>
                            <MudTd DataLabel="Hits">@context.Hits</MudTd>
                            <MudTd DataLabel="Misses">@context.Misses</MudTd>
                            <MudTd DataLabel="Hit Rate">@context.HitRate.ToString("P2")</MudTd>
                            <MudTd DataLabel="Avg Time">@context.AvgResponseTime.ToString("F2") ms</MudTd>
                        </RowTemplate>
                    </MudTable>
                }
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private readonly List<CacheTypeOption> _cacheTypeOptions = new()
    {
        new CacheTypeOption("Memory", "Memory"),
        new CacheTypeOption("Redis", "Redis")
    };
    
    private bool _isEnabled;
    private string _cacheType = "Memory";
    private int _maxCacheItems = 10000;
    private int _defaultExpirationMinutes = 60;
    private string _redisConnectionString = "localhost:6379";
    private string _redisInstanceName = "conduitllm-cache";
    private bool _includeModelInKey = true;
    private bool _includeProviderInKey = true;
    private bool _includeApiKeyInKey = false;
    private bool _includeTemperatureInKey = true;
    private bool _includeMaxTokensInKey = false;
    private bool _includeTopPInKey = false;
    private List<ModelCacheRule> _modelRules = new();
    
    private bool _isInitialized = false;
    private bool _isLoading = true;
    
    // Cache statistics
    private CacheStats _cacheStats = new();
    private List<ModelStatistics> _modelStats = new();
    
    private Timer? _refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadConfigurationAsync();
        _isInitialized = true;
        
        // Set up a timer to refresh cache statistics every 30 seconds
        _refreshTimer = new Timer(async _ => 
        {
            try 
            {
                await LoadCacheStatisticsAsync();
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error refreshing cache statistics: {ex.Message}");
            }
        }, null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));
    }
    
    private async Task LoadConfigurationAsync()
    {
        _isLoading = true;
        
        try
        {
            var cacheSection = Configuration.GetSection("Caching");
            _isEnabled = cacheSection?.GetValue<bool>("Enabled") ?? false;
            _cacheType = cacheSection?.GetValue<string>("Provider") ?? "Memory";
            _maxCacheItems = cacheSection?.GetValue<int>("MaxItems") ?? 10000;
            _defaultExpirationMinutes = cacheSection?.GetValue<int>("DefaultExpirationMinutes") ?? 60;
            _redisConnectionString = cacheSection?.GetValue<string>("RedisConnectionString") ?? "localhost:6379";
            _redisInstanceName = cacheSection?.GetValue<string>("RedisInstanceName") ?? "conduitllm-cache";
            _includeModelInKey = cacheSection?.GetValue<bool>("IncludeModelInKey") ?? true;
            _includeProviderInKey = cacheSection?.GetValue<bool>("IncludeProviderInKey") ?? true;
            _includeApiKeyInKey = cacheSection?.GetValue<bool>("IncludeApiKeyInKey") ?? false;
            _includeTemperatureInKey = cacheSection?.GetValue<bool>("IncludeTemperatureInKey") ?? true;
            _includeMaxTokensInKey = cacheSection?.GetValue<bool>("IncludeMaxTokensInKey") ?? false;
            _includeTopPInKey = cacheSection?.GetValue<bool>("IncludeTopPInKey") ?? false;
            
            // Load model rules
            _modelRules = new List<ModelCacheRule>();
            var rulesSection = cacheSection?.GetSection("ModelRules");
            if (rulesSection != null)
            {
                foreach (var ruleSection in rulesSection.GetChildren())
                {
                    _modelRules.Add(new ModelCacheRule
                    {
                        ModelNamePattern = ruleSection.GetValue<string>("ModelNamePattern") ?? "",
                        CacheBehavior = (CacheBehavior)ruleSection.GetValue<int>("CacheBehavior"),
                        ExpirationMinutes = ruleSection.GetValue<int?>("ExpirationMinutes")
                    });
                }
            };
            
            await LoadCacheStatisticsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading cache configuration");
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private async Task LoadCacheStatisticsAsync()
    {
        try
        {
            var status = await CacheStatusService.GetCacheStatusAsync();
            _cacheStats = new CacheStats
            {
                IsEnabled = status.IsEnabled,
                CacheType = status.CacheType,
                TotalItems = status.TotalItems,
                HitRate = status.HitRate,
                MemoryUsageBytes = status.MemoryUsageBytes,
                AvgResponseTime = status.AvgResponseTime
            };
            
            // Load model-specific statistics from the metrics service
            _modelStats.Clear();
            var modelMetrics = MetricsService.GetModelMetrics();
            
            foreach (var modelName in MetricsService.GetTrackedModels())
            {
                var metrics = MetricsService.GetMetricsForModel(modelName);
                if (metrics != null)
                {
                    _modelStats.Add(new ModelStatistics
                    {
                        ModelName = modelName,
                        Hits = metrics.Hits,
                        Misses = metrics.Misses,
                        HitRate = metrics.GetHitRate(),
                        AvgResponseTime = metrics.GetAverageRetrievalTimeMs()
                    });
                }
            }
            
            // Sort by hit rate descending, then by usage (hits + misses) descending
            _modelStats = _modelStats
                .OrderByDescending(m => m.HitRate)
                .ThenByDescending(m => m.Hits + m.Misses)
                .ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading cache statistics: {Message}", ex.Message);
        }
    }
    
    private async Task SaveConfiguration()
    {
        try
        {
            // In a real implementation, this would save configuration to a service
            // For this sample, we'll just log the configuration
            Logger.LogInformation("Saving cache configuration: Enabled={Enabled}, Type={Type}", _isEnabled, _cacheType);
            
            // Update cache status with new settings
            await CacheStatusService.SetCacheEnabledAsync(_isEnabled);
            
            // Refresh the statistics
            await LoadCacheStatisticsAsync();
            
            Logger.LogInformation("Cache configuration saved");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving cache configuration");
        }
    }
    
    private void ToggleCacheEnabled()
    {
        _isEnabled = !_isEnabled;
    }
    
    private void AddModelRule()
    {
        _modelRules.Add(new ModelCacheRule
        {
            ModelNamePattern = "",
            CacheBehavior = CacheBehavior.Default,
            ExpirationMinutes = _defaultExpirationMinutes
        });
    }
    
    private void RemoveModelRule(ModelCacheRule rule)
    {
        _modelRules.Remove(rule);
    }
    
    private async Task ClearCache()
    {
        try
        {
            await CacheStatusService.ClearCacheAsync();
            
            // Refresh statistics after clearing the cache
            await LoadCacheStatisticsAsync();
            
            Logger.LogInformation("Cache cleared successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error clearing cache");
        }
    }
    
    private string FormatBytes(long bytes)
    {
        string[] suffix = { "B", "KB", "MB", "GB", "TB" };
        int i;
        double dblBytes = bytes;
        for (i = 0; i < suffix.Length && bytes >= 1024; i++, bytes /= 1024)
        {
            dblBytes = bytes / 1024.0;
        }
        
        return $"{dblBytes:0.#} {suffix[i]}";
    }

    public void Dispose()
    {
        _refreshTimer?.Dispose();
    }

    // Model classes for the cache UI
    private class CacheTypeOption
    {
        public string Value { get; }
        public string Label { get; }
        
        public CacheTypeOption(string value, string label)
        {
            Value = value;
            Label = label;
        }
    }
    
    private enum CacheBehavior
    {
        Default = 0,
        Always = 1,
        Never = 2
    }
    
    private class ModelCacheRule
    {
        public string ModelNamePattern { get; set; } = string.Empty;
        public CacheBehavior CacheBehavior { get; set; } = CacheBehavior.Default;
        public int? ExpirationMinutes { get; set; }
    }
    
    private class CacheStats
    {
        public bool IsEnabled { get; set; }
        public string CacheType { get; set; } = "Memory";
        public int TotalItems { get; set; }
        public double HitRate { get; set; }
        public long MemoryUsageBytes { get; set; }
        public double AvgResponseTime { get; set; }
    }

    private class ModelStatistics
    {
        public string ModelName { get; set; } = string.Empty;
        public long Hits { get; set; }
        public long Misses { get; set; }
        public double HitRate { get; set; }
        public double AvgResponseTime { get; set; }
    }
}