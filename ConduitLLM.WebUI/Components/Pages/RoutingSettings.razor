@page "/routing-settings"
@using Microsoft.EntityFrameworkCore
@using ConduitLLM.Configuration
@using ConduitLLM.WebUI.Interfaces
@using System.ComponentModel.DataAnnotations
@using ConduitLLM.Core.Models.Routing
@using ConduitLLM.Core.Routing
@using ConduitLLM.Configuration.Entities
@using ConduitLLM.WebUI.Services
@using Microsoft.Extensions.Logging
@inject IDbContextFactory<ConfigurationDbContext> DbContextFactory
@inject IRouterService RouterService
@inject RouterOptionsService RouterOptionsService
@inject ILogger<RoutingSettings> Logger
@inject IJSRuntime JSRuntime

<PageTitle>Routing Settings</PageTitle>

<h2 class="mb-4">
    <i class="fa fa-random me-2"></i>
    Routing Settings
</h2>
<hr class="mb-4" />

@if (!_isInitialized)
{
    <div class="row">
        <div class="col-12 d-flex flex-column align-items-center py-4">
            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-4">Loading routing settings...</p>
        </div>
    </div>
}
else
{
    <div class="card mb-4" style="background-color: @(_isEnabled ? "#d4edda" : "#fff3cd")">
        <div class="card-body p-4">
            <div class="d-flex align-items-center">
                <i class="fa @(_isEnabled ? "fa-toggle-on text-success" : "fa-toggle-off text-warning") fa-2x me-3"></i>
                <div class="flex-grow-1">
                    <h5 class="mb-0">Router is @(_isEnabled ? "enabled" : "disabled")</h5>
                    <small>Router @(_isEnabled ? "is" : "is not") currently handling model requests</small>
                </div>
                <button class="btn @(_isEnabled ? "btn-warning" : "btn-success")" @onclick="ToggleRouterEnabled">
                    @(_isEnabled ? "Disable" : "Enable") Router
                </button>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12 col-md-6">
            <div class="card mb-4 shadow-sm">
                <div class="card-header">
                    <h5 class="mb-0">Router Configuration</h5>
                </div>
                <div class="card-body">
                    <div class="mb-4">
                        <label for="routingStrategy" class="form-label">Default Routing Strategy</label>
                        <select id="routingStrategy" class="form-select" @bind="_config.DefaultRoutingStrategy">
                            <option value="simple">Simple (Use first available model)</option>
                            <option value="random">Random (Random model selection)</option>
                            <option value="round-robin">Round Robin (Equal distribution)</option>
                        </select>
                    </div>
                    
                    <div class="mb-4">
                        <label for="maxRetries" class="form-label">Maximum Retries</label>
                        <input type="number" id="maxRetries" class="form-control" @bind="_config.MaxRetries" min="0" max="10" />
                    </div>
                    
                    <div class="mb-4">
                        <label for="baseRetryDelay" class="form-label">Base Retry Delay (ms)</label>
                        <input type="number" id="baseRetryDelay" class="form-control" @bind="_config.RetryBaseDelayMs" min="100" step="100" />
                    </div>
                    
                    <div class="mb-4">
                        <label for="maxRetryDelay" class="form-label">Maximum Retry Delay (ms)</label>
                        <input type="number" id="maxRetryDelay" class="form-control" @bind="_config.RetryMaxDelayMs" min="500" step="500" />
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-12 col-md-6">
            <div class="card mb-4 shadow-sm h-100">
                <div class="card-header">
                    <h5 class="mb-0">Routing Strategies Explained</h5>
                </div>
                <div class="card-body">
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">
                            <h6>Simple</h6>
                            <p class="small">Uses the first available model deployment in the list. If it fails, falls back to the next one.</p>
                        </li>
                        <li class="list-group-item">
                            <h6>Random</h6>
                            <p class="small">Randomly selects from available model deployments. Provides load distribution across all deployments.</p>
                        </li>
                        <li class="list-group-item">
                            <h6>Round Robin</h6>
                            <p class="small">Evenly distributes requests across all model deployments in a sequential order.</p>
                        </li>
                    </ul>
                    <div class="alert alert-info mt-4">
                        <p class="small mb-0"><strong>Note:</strong> Fallback configuration is applied regardless of the routing strategy when a model fails.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mb-4">
        <div class="col-12 d-flex justify-content-end">
            <button class="btn btn-primary" @onclick="async () => await SaveConfigurationAsync()">
                <i class="fa fa-save me-1"></i> Save Configuration
            </button>
        </div>
    </div>

    <div class="card mb-4 shadow-sm">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Model Deployments</h5>
            <button class="btn btn-primary btn-sm" @onclick="AddNewDeploymentAsync">
                <i class="fa fa-plus me-1"></i> Add Deployment
            </button>
        </div>
        <div class="card-body">
            @if (_config.ModelDeployments.Count == 0)
            {
                <div class="alert alert-warning border my-2">
                    No model deployments configured. Add deployments to enable routing between models.
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover table-sm">
                        <thead>
                            <tr>
                                <th>Model Name</th>
                                <th>Provider</th>
                                <th>Weight</th>
                                <th>Health Check</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var deployment in _config.ModelDeployments)
                            {
                                <tr>
                                    <td>@deployment.ModelName</td>
                                    <td>@deployment.ProviderName</td>
                                    <td>@deployment.Weight</td>
                                    <td>
                                        <span class="badge bg-@(_isEnabled ? "success" : "secondary") rounded-pill">
                                            @(deployment.HealthCheckEnabled ? "Enabled" : "Disabled")
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge bg-@(_isEnabled ? "success" : "secondary") rounded-pill">
                                            @(deployment.IsHealthy && deployment.IsEnabled ? "Healthy" : 
                                            !deployment.IsEnabled ? "Disabled" : "Unhealthy")
                                        </span>
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-primary" @onclick="() => EditDeploymentAsync(deployment)" title="Edit">
                                                <i class="fa fa-edit"></i>
                                            </button>
                                            <button class="btn btn-outline-danger" @onclick="() => DeleteDeploymentAsync(deployment)" title="Delete">
                                                <i class="fa fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
    
    <div class="card mb-4 shadow-sm">
        <div class="card-header">
            <h5 class="mb-0">Fallback Configurations</h5>
        </div>
        <div class="card-body">
            @if (_config.ModelDeployments.Count == 0)
            {
                <div class="alert alert-warning border my-2">
                    You need to add model deployments before configuring fallbacks.
                </div>
            }
            else
            {
                <div class="mb-3">
                    <button class="btn btn-outline-primary" @onclick="AddFallbackConfigAsync">
                        <i class="fa fa-plus me-1"></i> Add Fallback Configuration
                    </button>
                </div>
                
                @if (_config.FallbackConfigurations?.Count > 0)
                {
                    <div class="table-responsive">
                        <table class="table table-hover table-sm">
                            <thead>
                                <tr>
                                    <th>Primary Model</th>
                                    <th>Fallback Models</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var fallback in _config.FallbackConfigurations)
                                {
                                    <tr>
                                        <td>@GetModelDisplayName(fallback.PrimaryModelDeploymentId)</td>
                                        <td>
                                            @if (fallback.FallbackModelDeploymentIds.Count == 0)
                                            {
                                                <span class="badge bg-warning text-dark rounded-pill">No fallbacks</span>
                                            }
                                            else
                                            {
                                                <div class="d-flex flex-wrap gap-1">
                                                    @foreach (var modelId in fallback.FallbackModelDeploymentIds)
                                                    {
                                                        <span class="badge bg-info text-dark rounded-pill m-1">
                                                            @GetModelDisplayName(modelId)
                                                        </span>
                                                    }
                                                </div>
                                            }
                                        </td>
                                        <td>
                                            <div class="btn-group btn-group-sm">
                                                <button class="btn btn-outline-primary" @onclick="() => EditFallbackAsync(fallback)" title="Edit">
                                                    <i class="fa fa-edit"></i>
                                                </button>
                                                <button class="btn btn-outline-danger" @onclick="() => DeleteFallbackAsync(fallback)" title="Delete">
                                                    <i class="fa fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="alert alert-info border my-2">
                        No fallback configurations defined. Fallbacks determine which models to use when a preferred model is unavailable.
                    </div>
                }
            }
        </div>
    </div>
    
    <div class="modal @(_showDeploymentModal ? "show" : "")" style="display: @(_showDeploymentModal ? "block" : "none")">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(_editingDeployment.Id == Guid.Empty ? "Add" : "Edit") Model Deployment</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeploymentModal"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label for="modelName" class="form-label">Model Name</label>
                            <select id="modelName" class="form-select" @bind="_editingDeployment.ModelName" required>
                                <option value="">-- Select Model --</option>
                                @foreach (var model in _availableModelMappings)
                                {
                                    <option value="@model.ModelAlias">@model.ModelAlias</option>
                                }
                            </select>
                        </div>
                        
                        <div class="mb-3">
                            <label for="providerName" class="form-label">Provider Name</label>
                            <select id="providerName" class="form-select" @bind="_editingDeployment.ProviderName" required>
                                <option value="">-- Select Provider --</option>
                                @foreach (var provider in _availableProviders)
                                {
                                    <option value="@provider.ProviderName">@provider.ProviderName</option>
                                }
                            </select>
                        </div>
                        
                        <div class="mb-3">
                            <label for="weight" class="form-label">Weight</label>
                            <input type="number" id="weight" class="form-control" @bind="_editingDeployment.Weight" min="1" required />
                        </div>
                        
                        <div class="form-check mb-3">
                            <input class="form-check-input" type="checkbox" id="healthCheckEnabled" @bind="_editingDeployment.HealthCheckEnabled" />
                            <label class="form-check-label" for="healthCheckEnabled">Enable Health Checks</label>
                        </div>
                        
                        <div class="form-check mb-3">
                            <input class="form-check-input" type="checkbox" id="isEnabled" @bind="_editingDeployment.IsEnabled" />
                            <label class="form-check-label" for="isEnabled">Enabled</label>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeploymentModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveDeploymentAsync">Save</button>
                </div>
            </div>
        </div>
    </div>
    
    <div class="modal @(_showFallbackModal ? "show" : "")" style="display: @(_showFallbackModal ? "block" : "none")">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(_editingFallback.Id == Guid.Empty ? "Add" : "Edit") Fallback Configuration</h5>
                    <button type="button" class="btn-close" @onclick="CloseFallbackModal"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label for="primaryModel" class="form-label">Primary Model</label>
                            <select id="primaryModel" class="form-select" @bind="_editingFallback.PrimaryModelDeploymentId" required>
                                <option value="">-- Select Primary Model --</option>
                                @foreach (var model in _config.ModelDeployments)
                                {
                                    <option value="@model.Id.ToString()">@model.ModelName (@model.ProviderName)</option>
                                }
                            </select>
                        </div>
                        
                        <h6 class="mb-2">Fallback Models (in order)</h6>
                        
                        <div class="card mb-3">
                            <div class="card-body">
                                @if (_editingFallback.FallbackModelDeploymentIds.Any())
                                {
                                    <ul class="list-group list-group-flush">
                                        @foreach (var fallbackId in _editingFallback.FallbackModelDeploymentIds)
                                        {
                                            var model = _config.ModelDeployments.FirstOrDefault(m => m.Id.ToString() == fallbackId);
                                            if (model != null)
                                            {
                                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                                    @model.ModelName (@model.ProviderName)
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveFallbackModelAsync(fallbackId)">
                                                        <i class="fa fa-trash"></i>
                                                    </button>
                                                </li>
                                            }
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <p class="p-2 mb-0">No fallback models selected yet.</p>
                                }
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col">
                                <select class="form-select" @bind="_selectedFallbackModelId">
                                    <option value="">-- Add Fallback Model --</option>
                                    @foreach (var model in _config.ModelDeployments.Where(m => 
                                        m.Id.ToString() != _editingFallback.PrimaryModelDeploymentId && 
                                        !_editingFallback.FallbackModelDeploymentIds.Contains(m.Id.ToString())))
                                    {
                                        <option value="@model.Id.ToString()">@model.ModelName (@model.ProviderName)</option>
                                    }
                                </select>
                            </div>
                            <div class="col-auto">
                                <button type="button" class="btn btn-outline-primary btn-sm" 
                                        @onclick="AddFallbackModelAsync" 
                                        disabled="@(string.IsNullOrEmpty(_selectedFallbackModelId))">
                                    <i class="fa fa-plus me-1"></i> Add Model
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseFallbackModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveFallbackAsync">Save</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool _isInitialized = false;
    private bool _isEnabled = false;
    private RouterConfig _config = new();
    private bool _isSaving = false;
    
    // Deployment modal state
    private bool _showDeploymentModal = false;
    private ModelDeployment _editingDeployment = new();
    
    // Fallback modal state
    private bool _showFallbackModal = false;
    private FallbackConfiguration _editingFallback = new();
    private string _selectedFallbackModelId = string.Empty;
    
    // Lists for dropdowns
    private List<ConduitLLM.Configuration.Entities.ProviderCredential> _availableProviders = new();
    private List<ConduitLLM.Configuration.Entities.ModelProviderMapping> _availableModelMappings = new();

    // Dialog options for standard modal dialogs
    private Dictionary<string, object> dialogOptions = new() { 
        { "class", "modal-dialog modal-lg" },
        { "role", "dialog" }
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isEnabled = await RouterOptionsService.GetRouterEnabledAsync();
            
            await ReloadConfiguration();
            
            // Load providers and model mappings for dropdowns
            await LoadProvidersAndMappingsAsync();
            
            _isInitialized = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing routing settings");
            await ShowMessage("Failed to load routing settings: " + ex.Message, true);
            _isInitialized = true; // Still mark as initialized to show the error
        }
    }
    
    private async Task ReloadConfiguration()
    {
        try
        {
            var config = await RouterService.GetRouterConfigAsync();
            if (config != null)
            {
                _config = config;
            }
            else
            {
                // Create default config if none exists
                _config = new RouterConfig
                {
                    DefaultRoutingStrategy = "simple",
                    MaxRetries = 3,
                    RetryBaseDelayMs = 500,
                    RetryMaxDelayMs = 5000,
                    ModelDeployments = new List<ModelDeployment>(),
                    FallbackConfigurations = new List<FallbackConfiguration>(),
                    FallbacksEnabled = false
                };
            }
            
            if (_config.FallbackConfigurations == null)
            {
                _config.FallbackConfigurations = new List<FallbackConfiguration>();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load router configuration");
            await ShowMessage("Failed to load router configuration: " + ex.Message, true);
        }
    }
    
    private async Task<bool> SaveConfigurationAsync()
    {
        if (_isSaving) return false; // Indicate save didn't proceed if already saving
        
        bool success = false; // Flag to track success
        try
        {
            _isSaving = true;
            await ShowMessage("Saving router configuration...", false);
            
            // Validate configuration before saving
            if (_config == null)
            {
                await ShowMessage("Error: Router configuration is null", true);
                return false;
            }
            
            // Ensure unique deployment names
            var duplicateNames = _config.ModelDeployments
                .GroupBy(d => d.DeploymentName)
                .Where(g => g.Count() > 1)
                .Select(g => g.Key)
                .ToList();
                
            if (duplicateNames.Any())
            {
                await ShowMessage($"Error: Duplicate deployment names found: {string.Join(", ", duplicateNames)}", true);
                return false;
            }

            // Save the configuration
            success = await RouterService.UpdateRouterConfigAsync(_config);
            
            if (success)
            {
                await ShowMessage("Router configuration saved successfully", false);
                await ReloadConfiguration(); // Refresh data
            }
            else
            {
                await ShowMessage("Failed to save router configuration", true);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving router configuration");
            await ShowMessage($"Error saving configuration: {ex.Message}", true);
            success = false;
        }
        finally
        {
            _isSaving = false;
            StateHasChanged(); // Update UI regardless of success/failure
        }
        return success; // Return the success status
    }
    
    private async Task ToggleRouterEnabled()
    {
        try
        {
            // Toggle the router enabled state
            bool newState = !_isEnabled;
            await ShowMessage($"Updating router state to {(newState ? "enabled" : "disabled")}...", false);
            StateHasChanged();
            
            // Update the router state
            bool success = await RouterOptionsService.SetRouterEnabledAsync(newState);
            
            if (success)
            {
                _isEnabled = newState;
                await ShowMessage($"Router {(_isEnabled ? "enabled" : "disabled")} successfully", false);
                
                // If enabling, initialize the router to ensure it's properly set up
                if (_isEnabled)
                {
                    await RouterService.InitializeRouterAsync();
                }
            }
            else
            {
                await ShowMessage("Failed to save router state", true);
                Logger.LogError("Failed to save router state");
            }
        }
        catch (Exception ex)
        {
            // Revert the UI state on error
            await ShowMessage("Error toggling router state: " + ex.Message, true);
            Logger.LogError(ex, "Failed to toggle router state");
        }
    }
    
    // Model Deployment methods
    private async Task AddNewDeploymentAsync()
    {
        _editingDeployment = new ModelDeployment
        {
            Id = Guid.NewGuid(),
            IsEnabled = true,
            HealthCheckEnabled = true,
            Weight = 1
        };
        _showDeploymentModal = true;
        StateHasChanged();
        await Task.CompletedTask;
    }
    
    private async Task EditDeploymentAsync(ModelDeployment deployment)
    {
        _editingDeployment = new ModelDeployment
        {
            Id = deployment.Id,
            ModelName = deployment.ModelName,
            ProviderName = deployment.ProviderName,
            Weight = deployment.Weight,
            HealthCheckEnabled = deployment.HealthCheckEnabled,
            IsEnabled = deployment.IsEnabled
        };
        _showDeploymentModal = true;
        StateHasChanged();
        await Task.CompletedTask;
    }
    
    private async Task SaveDeploymentAsync()
    {
        try
        {
            // Validate the deployment
            if (string.IsNullOrWhiteSpace(_editingDeployment.DeploymentName))
            {
                await ShowMessage("Deployment name cannot be empty", true);
                return;
            }
            
            if (string.IsNullOrWhiteSpace(_editingDeployment.ModelName))
            {
                await ShowMessage("Model name cannot be empty", true);
                return;
            }
            
            if (string.IsNullOrWhiteSpace(_editingDeployment.ProviderName))
            {
                await ShowMessage("Provider name cannot be empty", true);
                return;
            }
            
            // Generate ID if this is a new deployment
            if (_editingDeployment.Id == Guid.Empty)
            {
                _editingDeployment.Id = Guid.NewGuid();
            }
            
            var existingIndex = _config.ModelDeployments.FindIndex(d => d.Id == _editingDeployment.Id);
            
            if (existingIndex >= 0)
            {
                _config.ModelDeployments[existingIndex] = _editingDeployment;
            }
            else
            {
                _config.ModelDeployments.Add(_editingDeployment);
            }
            
            // Save the updated configuration to the database and check result
            bool success = await SaveConfigurationAsync();
            
            if (success)
            {
                _showDeploymentModal = false;
                // StateHasChanged is called within SaveConfigurationAsync on success
            }
            else
            {
                // Rely on the status message set by SaveConfigurationAsync
                StateHasChanged(); // Ensure UI reflects status message change
            }
        }
        catch (Exception ex)
        {
            await ShowMessage($"Error saving deployment: {ex.Message}", true);
            Logger.LogError(ex, "Error saving model deployment");
            StateHasChanged();
        }
    }
    
    private async Task DeleteDeploymentAsync(ModelDeployment deployment)
    {
        try
        {
            // Store the ID in case 'deployment' object becomes invalid after removal
            var deploymentId = deployment.Id;
            var deploymentName = deployment.DeploymentName;
            
            // Check if this deployment is used in any fallback configurations
            bool usedInFallbacks = false;
            if (_config.FallbackConfigurations != null)
            {
                foreach (var fallback in _config.FallbackConfigurations)
                {
                    if (fallback.PrimaryModelDeploymentId == deploymentId.ToString() ||
                        fallback.FallbackModelDeploymentIds.Contains(deploymentId.ToString()))
                    {
                        usedInFallbacks = true;
                        break;
                    }
                }
            }
            
            if (usedInFallbacks)
            {
                await ShowMessage($"Cannot delete '{deploymentName}' because it's used in fallback configurations", true);
                return;
            }
            
            // Remove the deployment
            _config.ModelDeployments.RemoveAll(d => d.Id == deploymentId);
            
            // Save the updated configuration to the database and check result
            bool success = await SaveConfigurationAsync();

            // StateHasChanged is called within SaveConfigurationAsync on success/failure
        }
        catch (Exception ex)
        {
            await ShowMessage($"Error deleting deployment: {ex.Message}", true);
            Logger.LogError(ex, "Error deleting model deployment");
            StateHasChanged();
        }
    }
    
    // Fallback Configuration methods
    private async Task AddFallbackConfigAsync()
    {
        _editingFallback = new FallbackConfiguration
        {
            Id = Guid.NewGuid(),
            FallbackModelDeploymentIds = new List<string>()
        };
        _selectedFallbackModelId = string.Empty;
        _showFallbackModal = true;
        StateHasChanged();
        await Task.CompletedTask;
    }
    
    private async Task EditFallbackAsync(FallbackConfiguration fallback)
    {
        _editingFallback = new FallbackConfiguration
        {
            Id = fallback.Id,
            PrimaryModelDeploymentId = fallback.PrimaryModelDeploymentId,
            FallbackModelDeploymentIds = new List<string>(fallback.FallbackModelDeploymentIds)
        };
        _selectedFallbackModelId = string.Empty;
        _showFallbackModal = true;
        StateHasChanged();
        await Task.CompletedTask;
    }
    
    private async Task SaveFallbackAsync()
    {
        try
        {
            // Validate the fallback configuration
            if (string.IsNullOrEmpty(_editingFallback.PrimaryModelDeploymentId))
            {
                await ShowMessage("Primary model must be selected", true);
                return;
            }
            
            if (_editingFallback.FallbackModelDeploymentIds == null || 
                !_editingFallback.FallbackModelDeploymentIds.Any())
            {
                await ShowMessage("At least one fallback model must be selected", true);
                return;
            }
            
            if (_config.FallbackConfigurations == null)
            {
                _config.FallbackConfigurations = new List<FallbackConfiguration>();
            }
            
            var existingIndex = _config.FallbackConfigurations.FindIndex(f => f.Id == _editingFallback.Id);
            
            if (existingIndex >= 0)
            {
                _config.FallbackConfigurations[existingIndex] = _editingFallback;
            }
            else
            {
                _config.FallbackConfigurations.Add(_editingFallback);
            }
            
            // Save the updated configuration to the database and check result
            bool success = await SaveConfigurationAsync();

            if (success)
            {
                _showFallbackModal = false;
                // StateHasChanged is called within SaveConfigurationAsync on success
            }
            else
            {
                // Rely on the status message set by SaveConfigurationAsync
                StateHasChanged(); // Ensure UI reflects status message change
            }
        }
        catch (Exception ex)
        {
            await ShowMessage($"Error saving fallback configuration: {ex.Message}", true);
            Logger.LogError(ex, "Error saving fallback configuration");
            StateHasChanged();
        }
    }
    
    private async Task DeleteFallbackAsync(FallbackConfiguration fallback)
    {
        try
        {
            var fallbackId = fallback.Id;
            _config.FallbackConfigurations?.RemoveAll(f => f.Id == fallbackId);
            
            // Save the updated configuration to the database and check result
            bool success = await SaveConfigurationAsync();

            // StateHasChanged is called within SaveConfigurationAsync on success/failure
        }
        catch (Exception ex)
        {
            await ShowMessage($"Error deleting fallback configuration: {ex.Message}", true);
            Logger.LogError(ex, "Error deleting fallback configuration");
            StateHasChanged();
        }
    }
    
    private async Task AddFallbackModelAsync()
    {
        if (!string.IsNullOrEmpty(_selectedFallbackModelId) && 
            !_editingFallback.FallbackModelDeploymentIds.Contains(_selectedFallbackModelId))
        {
            _editingFallback.FallbackModelDeploymentIds.Add(_selectedFallbackModelId);
            _selectedFallbackModelId = string.Empty;
            StateHasChanged();
        }
        await Task.CompletedTask;
    }
    
    private async Task RemoveFallbackModelAsync(string modelId)
    {
        _editingFallback.FallbackModelDeploymentIds.Remove(modelId);
        StateHasChanged();
        await Task.CompletedTask;
    }
    
    private async Task CloseDeploymentModal()
    {
        _showDeploymentModal = false;
        StateHasChanged();
        await Task.CompletedTask;
    }
    
    private async Task CloseFallbackModal()
    {
        _showFallbackModal = false;
        StateHasChanged();
        await Task.CompletedTask;
    }
    
    private string GetModelDisplayName(string modelId)
    {
        var model = _config.ModelDeployments.FirstOrDefault(m => m.Id.ToString() == modelId);
        return model != null ? $"{model.ModelName} ({model.ProviderName})" : "Unknown Model";
    }
    
    private async Task ShowMessage(string message, bool isError)
    {
        await JSRuntime.InvokeVoidAsync("alert", message);
        StateHasChanged();
    }
    
    private async Task LoadProvidersAndMappingsAsync()
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            // Load providers
            _availableProviders = await dbContext.ProviderCredentials.ToListAsync();
            
            // Load model mappings
            _availableModelMappings = await dbContext.ModelProviderMappings.ToListAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading providers and mappings");
            await ShowMessage("Failed to load providers and mappings: " + ex.Message, true);
        }
    }
}