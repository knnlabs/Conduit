@page "/routing-settings"
@using Microsoft.EntityFrameworkCore
@using ConduitLLM.Configuration
@using ConduitLLM.WebUI.Interfaces
@using System.ComponentModel.DataAnnotations
@using ConduitLLM.Core.Models.Routing
@using ConduitLLM.Core.Routing
@using ConduitLLM.Configuration.Entities
@using ConduitLLM.WebUI.Services
@using Microsoft.Extensions.Logging
@inject IDbContextFactory<ConfigurationDbContext> DbContextFactory
@inject IRouterService RouterService
@inject RouterOptionsService RouterOptionsService
@inject ILogger<RoutingSettings> Logger
@inject ISnackbar Snackbar

<PageTitle>Routing Settings</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">
    <MudIcon Icon="@Icons.Material.Filled.Shuffle" Class="mr-2" />
    Routing Settings
</MudText>
<MudDivider Class="mb-4" />

@if (!_isInitialized)
{
    <MudGrid>
        <MudItem xs="12" Class="d-flex flex-column align-center py-8">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
            <MudText Typo="Typo.body1" Class="mt-4">Loading routing settings...</MudText>
        </MudItem>
    </MudGrid>
}
else
{
    <MudPaper Elevation="0" Class="mb-4" 
             Style="@(_isEnabled ? "background-color: var(--mud-palette-success-lighten)" : "background-color: var(--mud-palette-warning-lighten)")">
        <MudGrid Class="pa-4">
            <MudItem xs="12" Class="d-flex align-center">
                <MudIcon Icon="@(_isEnabled ? Icons.Material.Filled.ToggleOn : Icons.Material.Filled.ToggleOff)" 
                        Color="@(_isEnabled ? Color.Success : Color.Warning)" Size="Size.Large" Class="mr-3" />
                <div class="flex-grow-1">
                    <MudText Typo="Typo.h5" GutterBottom="false">Router is @(_isEnabled ? "enabled" : "disabled")</MudText>
                    <MudText Typo="Typo.caption">Router @(_isEnabled ? "is" : "is not") currently handling model requests</MudText>
                </div>
                <MudButton Variant="Variant.Filled" 
                         Color="@(_isEnabled ? Color.Warning : Color.Success)" 
                         OnClick="ToggleRouterEnabled">
                    @(_isEnabled ? "Disable" : "Enable") Router
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudGrid>
        <MudItem xs="12" md="6">
            <MudCard Elevation="2" Class="mb-4">
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Router Configuration</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudSelect T="string" Label="Default Routing Strategy" @bind-Value="_config.DefaultRoutingStrategy"
                              Variant="Variant.Outlined" Class="mb-4">
                        <MudSelectItem Value="@("simple")">Simple (Use first available model)</MudSelectItem>
                        <MudSelectItem Value="@("random")">Random (Random model selection)</MudSelectItem>
                        <MudSelectItem Value="@("round-robin")">Round Robin (Equal distribution)</MudSelectItem>
                    </MudSelect>
                    
                    <MudNumericField T="int" Label="Maximum Retries" @bind-Value="_config.MaxRetries" 
                                   Min="0" Max="10" Variant="Variant.Outlined" Class="mb-4" />
                                   
                    <MudNumericField T="int" Label="Base Retry Delay (ms)" @bind-Value="_config.RetryBaseDelayMs" 
                                   Min="100" Step="100" Variant="Variant.Outlined" Class="mb-4" />
                                   
                    <MudNumericField T="int" Label="Maximum Retry Delay (ms)" @bind-Value="_config.RetryMaxDelayMs" 
                                   Min="500" Step="500" Variant="Variant.Outlined" Class="mb-4" />
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" md="6">
            <MudCard Elevation="2" Class="mb-4 h-100">
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Routing Strategies Explained</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudList T="string" Clickable="true" Dense="true">
                        <MudListItem T="string">
                            <MudText Typo="Typo.subtitle1">Simple</MudText>
                            <MudText Typo="Typo.body2">Uses the first available model deployment in the list. If it fails, falls back to the next one.</MudText>
                        </MudListItem>
                        <MudListItem T="string">
                            <MudText Typo="Typo.subtitle1">Random</MudText>
                            <MudText Typo="Typo.body2">Randomly selects from available model deployments. Provides load distribution across all deployments.</MudText>
                        </MudListItem>
                        <MudListItem T="string">
                            <MudText Typo="Typo.subtitle1">Round Robin</MudText>
                            <MudText Typo="Typo.body2">Evenly distributes requests across all model deployments in a sequential order.</MudText>
                        </MudListItem>
                    </MudList>
                    <MudAlert Severity="Severity.Info" Class="mt-4" Variant="Variant.Filled">
                        <MudText Typo="Typo.body2"><strong>Note:</strong> Fallback configuration is applied regardless of the routing strategy when a model fails.</MudText>
                    </MudAlert>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
    
    <MudGrid Class="mb-4">
        <MudItem xs="12" Class="d-flex justify-end">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                     OnClick="async () => await SaveConfigurationAsync()"
                     StartIcon="@Icons.Material.Filled.Save">
                Save Configuration
            </MudButton>
        </MudItem>
    </MudGrid>

    <MudCard Elevation="2" Class="mb-4">
        <MudCardHeader>
            <MudText Typo="Typo.h6">Model Deployments</MudText>
            <MudToolBar DisableGutters="true">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                         OnClick="AddNewDeploymentAsync" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small">
                    Add Deployment
                </MudButton>
            </MudToolBar>
        </MudCardHeader>
        <MudCardContent>
            @if (_config.ModelDeployments.Count == 0)
            {
                <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined" Class="my-2">
                    No model deployments configured. Add deployments to enable routing between models.
                </MudAlert>
            }
            else
            {
                <MudTable Items="@_config.ModelDeployments" Hover="true" Bordered="false" Dense="true">
                    <HeaderContent>
                        <MudTh>Model Name</MudTh>
                        <MudTh>Provider</MudTh>
                        <MudTh>Weight</MudTh>
                        <MudTh>Health Check</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Model Name">@context.ModelName</MudTd>
                        <MudTd DataLabel="Provider">@context.ProviderName</MudTd>
                        <MudTd DataLabel="Weight">@context.Weight</MudTd>
                        <MudTd DataLabel="Health Check">
                            <MudChip T="string" Size="Size.Small" 
                                   Color="@(_isEnabled ? Color.Success : Color.Default)">
                                @(context.HealthCheckEnabled ? "Enabled" : "Disabled")
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Status">
                            <MudChip T="string" Size="Size.Small" 
                                   Color="@(_isEnabled ? Color.Success : Color.Default)">
                                @(context.IsHealthy && context.IsEnabled ? "Healthy" : 
                                  !context.IsEnabled ? "Disabled" : "Unhealthy")
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Actions">
                            <MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" 
                                             OnClick="() => EditDeploymentAsync(context)" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" 
                                             OnClick="() => DeleteDeploymentAsync(context)" />
                            </MudButtonGroup>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
        </MudCardContent>
    </MudCard>
    
    <MudCard Elevation="2" Class="mb-4">
        <MudCardHeader>
            <MudText Typo="Typo.h6">Fallback Configurations</MudText>
        </MudCardHeader>
        <MudCardContent>
            @if (_config.ModelDeployments.Count == 0)
            {
                <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined" Class="my-2">
                    You need to add model deployments before configuring fallbacks.
                </MudAlert>
            }
            else
            {
                <div class="mb-3">
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" 
                             OnClick="AddFallbackConfigAsync" StartIcon="@Icons.Material.Filled.Add">
                        Add Fallback Configuration
                    </MudButton>
                </div>
                
                @if (_config.FallbackConfigurations?.Count > 0)
                {
                    <MudTable Items="@_config.FallbackConfigurations" Hover="true" Bordered="false" Dense="true">
                        <HeaderContent>
                            <MudTh>Primary Model</MudTh>
                            <MudTh>Fallback Models</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Primary Model">@GetModelDisplayName(context.PrimaryModelDeploymentId)</MudTd>
                            <MudTd DataLabel="Fallback Models">
                                @if (context.FallbackModelDeploymentIds.Count == 0)
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Warning">No fallbacks</MudChip>
                                }
                                else
                                {
                                    <MudStack Row="true" Spacing="1" Wrap="Wrap.Wrap">
                                        @foreach (var modelId in context.FallbackModelDeploymentIds)
                                        {
                                            <MudChip T="string" Size="Size.Small" Color="Color.Info" Class="ma-1">
                                                @GetModelDisplayName(modelId)
                                            </MudChip>
                                        }
                                    </MudStack>
                                }
                            </MudTd>
                            <MudTd DataLabel="Actions">
                                <MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" 
                                                 OnClick="() => EditFallbackAsync(context)" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" 
                                                 OnClick="() => DeleteFallbackAsync(context)" />
                                </MudButtonGroup>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
                else
                {
                    <MudAlert Severity="Severity.Info" Variant="Variant.Outlined" Class="my-2">
                        No fallback configurations defined. Fallbacks determine which models to use when a preferred model is unavailable.
                    </MudAlert>
                }
            }
        </MudCardContent>
    </MudCard>
    
    <MudDialog @bind-IsVisible="_showDeploymentModal" Options="dialogOptions">
        <TitleContent>
            <MudText Typo="Typo.h6">@(_editingDeployment.Id == Guid.Empty ? "Add" : "Edit") Model Deployment</MudText>
        </TitleContent>
        <DialogContent>
            <MudSelect T="string" Label="Model Name" Required="true" @bind-Value="_editingDeployment.ModelName" 
                      AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mb-3">
                <MudSelectItem Value="@string.Empty">-- Select Model --</MudSelectItem>
                @foreach (var model in _availableModelMappings)
                {
                    <MudSelectItem Value="@model.ModelAlias">@model.ModelAlias</MudSelectItem>
                }
            </MudSelect>
            
            <MudSelect T="string" Label="Provider Name" Required="true" @bind-Value="_editingDeployment.ProviderName" 
                      AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mb-3">
                <MudSelectItem Value="@string.Empty">-- Select Provider --</MudSelectItem>
                @foreach (var provider in _availableProviders)
                {
                    <MudSelectItem Value="@provider.ProviderName">@provider.ProviderName</MudSelectItem>
                }
            </MudSelect>
            
            <MudNumericField T="int" Label="Weight" Required="true" @bind-Value="_editingDeployment.Weight" 
                           Min="1" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mb-3" />
                           
            <MudCheckBox T="bool" @bind-checked="_editingDeployment.HealthCheckEnabled" Label="Enable Health Checks" 
                        Color="Color.Primary" Class="mb-3" />
                        
            <MudCheckBox T="bool" @bind-checked="_editingDeployment.IsEnabled" Label="Enabled" 
                        Color="Color.Primary" Class="mb-3" />
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Text" OnClick="CloseDeploymentModal" Color="Color.Default">Cancel</MudButton>
            <MudButton Variant="Variant.Filled" OnClick="SaveDeploymentAsync" Color="Color.Primary">Save</MudButton>
        </DialogActions>
    </MudDialog>
    
    <MudDialog @bind-IsVisible="_showFallbackModal" Options="dialogOptions">
        <TitleContent>
            <MudText Typo="Typo.h6">@(_editingFallback.Id == Guid.Empty ? "Add" : "Edit") Fallback Configuration</MudText>
        </TitleContent>
        <DialogContent>
            <MudSelect T="string" Label="Primary Model" Required="true" @bind-Value="_editingFallback.PrimaryModelDeploymentId" 
                      AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mb-3">
                <MudSelectItem Value="@string.Empty">-- Select Primary Model --</MudSelectItem>
                @foreach (var model in _config.ModelDeployments)
                {
                    <MudSelectItem Value="@model.Id.ToString()">@model.ModelName (@model.ProviderName)</MudSelectItem>
                }
            </MudSelect>
            
            <MudText Typo="Typo.subtitle1" Class="mb-2">Fallback Models (in order)</MudText>
            
            <MudPaper Elevation="0" Outlined="true" Class="pa-2 mb-3">
                @if (_editingFallback.FallbackModelDeploymentIds.Any())
                {
                    <MudList T="string" Dense="true" Clickable="true">
                        @foreach (var fallbackId in _editingFallback.FallbackModelDeploymentIds)
                        {
                            var model = _config.ModelDeployments.FirstOrDefault(m => m.Id.ToString() == fallbackId);
                            if (model != null)
                            {
                                <MudListItem T="string">
                                    <div class="d-flex align-center">
                                        <MudText>@model.ModelName (@model.ProviderName)</MudText>
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"
                                                     Class="ml-auto" OnClick="() => RemoveFallbackModelAsync(fallbackId)" />
                                    </div>
                                </MudListItem>
                            }
                        }
                    </MudList>
                }
                else
                {
                    <MudText Typo="Typo.body2" Class="pa-2">No fallback models selected yet.</MudText>
                }
            </MudPaper>
            
            <MudSelect T="string" Label="Add Fallback Model" @bind-Value="_selectedFallbackModelId" 
                      AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mb-2">
                <MudSelectItem Value="@string.Empty">-- Add Fallback Model --</MudSelectItem>
                @foreach (var model in _config.ModelDeployments.Where(m => 
                    m.Id.ToString() != _editingFallback.PrimaryModelDeploymentId && 
                    !_editingFallback.FallbackModelDeploymentIds.Contains(m.Id.ToString())))
                {
                    <MudSelectItem Value="@model.Id.ToString()">@model.ModelName (@model.ProviderName)</MudSelectItem>
                }
            </MudSelect>
            
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small"
                     OnClick="AddFallbackModelAsync" Disabled="@(string.IsNullOrEmpty(_selectedFallbackModelId))"
                     StartIcon="@Icons.Material.Filled.Add" Class="mb-3">
                Add Model
            </MudButton>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Text" OnClick="CloseFallbackModal" Color="Color.Default">Cancel</MudButton>
            <MudButton Variant="Variant.Filled" OnClick="SaveFallbackAsync" Color="Color.Primary">Save</MudButton>
        </DialogActions>
    </MudDialog>
}

@code {
    private bool _isInitialized = false;
    private bool _isEnabled = false;
    private RouterConfig _config = new();
    private bool _isSaving = false;
    
    // Deployment modal state
    private bool _showDeploymentModal = false;
    private ModelDeployment _editingDeployment = new();
    
    // Fallback modal state
    private bool _showFallbackModal = false;
    private FallbackConfiguration _editingFallback = new();
    private string _selectedFallbackModelId = string.Empty;
    
    // Lists for dropdowns
    private List<ConduitLLM.Configuration.Entities.ProviderCredential> _availableProviders = new();
    private List<ConduitLLM.Configuration.Entities.ModelProviderMapping> _availableModelMappings = new();

    // Dialog options
    private DialogOptions dialogOptions = new() { 
        // CloseOnEscapeKey property removed in MudBlazor v8.6.0
        MaxWidth = MaxWidth.Medium,
        FullWidth = true
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isEnabled = await RouterOptionsService.GetRouterEnabledAsync();
            
            await ReloadConfiguration();
            
            // Load providers and model mappings for dropdowns
            await LoadProvidersAndMappingsAsync();
            
            _isInitialized = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing routing settings");
            ShowMessage("Failed to load routing settings: " + ex.Message, true);
            _isInitialized = true; // Still mark as initialized to show the error
        }
    }
    
    private async Task ReloadConfiguration()
    {
        try
        {
            var config = await RouterService.GetRouterConfigAsync();
            if (config != null)
            {
                _config = config;
            }
            else
            {
                // Create default config if none exists
                _config = new RouterConfig
                {
                    DefaultRoutingStrategy = "simple",
                    MaxRetries = 3,
                    RetryBaseDelayMs = 500,
                    RetryMaxDelayMs = 5000,
                    ModelDeployments = new List<ModelDeployment>(),
                    FallbackConfigurations = new List<FallbackConfiguration>(),
                    FallbacksEnabled = false
                };
            }
            
            if (_config.FallbackConfigurations == null)
            {
                _config.FallbackConfigurations = new List<FallbackConfiguration>();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load router configuration");
            ShowMessage("Failed to load router configuration: " + ex.Message, true);
        }
    }
    
    private async Task<bool> SaveConfigurationAsync()
    {
        if (_isSaving) return false; // Indicate save didn't proceed if already saving
        
        bool success = false; // Flag to track success
        try
        {
            _isSaving = true;
            ShowMessage("Saving router configuration...", false);
            
            // Validate configuration before saving
            if (_config == null)
            {
                ShowMessage("Error: Router configuration is null", true);
                return false;
            }
            
            // Ensure unique deployment names
            var duplicateNames = _config.ModelDeployments
                .GroupBy(d => d.DeploymentName)
                .Where(g => g.Count() > 1)
                .Select(g => g.Key)
                .ToList();
                
            if (duplicateNames.Any())
            {
                ShowMessage($"Error: Duplicate deployment names found: {string.Join(", ", duplicateNames)}", true);
                return false;
            }

            // Save the configuration
            success = await RouterService.UpdateRouterConfigAsync(_config);
            
            if (success)
            {
                ShowMessage("Router configuration saved successfully", false);
                await ReloadConfiguration(); // Refresh data
            }
            else
            {
                ShowMessage("Failed to save router configuration", true);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving router configuration");
            ShowMessage($"Error saving configuration: {ex.Message}", true);
            success = false;
        }
        finally
        {
            _isSaving = false;
            StateHasChanged(); // Update UI regardless of success/failure
        }
        return success; // Return the success status
    }
    
    private async Task ToggleRouterEnabled()
    {
        try
        {
            // Toggle the router enabled state
            bool newState = !_isEnabled;
            ShowMessage($"Updating router state to {(newState ? "enabled" : "disabled")}...", false);
            StateHasChanged();
            
            // Update the router state
            bool success = await RouterOptionsService.SetRouterEnabledAsync(newState);
            
            if (success)
            {
                _isEnabled = newState;
                ShowMessage($"Router {(_isEnabled ? "enabled" : "disabled")} successfully", false);
                
                // If enabling, initialize the router to ensure it's properly set up
                if (_isEnabled)
                {
                    await RouterService.InitializeRouterAsync();
                }
            }
            else
            {
                ShowMessage("Failed to save router state", true);
                Logger.LogError("Failed to save router state");
            }
        }
        catch (Exception ex)
        {
            // Revert the UI state on error
            ShowMessage("Error toggling router state: " + ex.Message, true);
            Logger.LogError(ex, "Failed to toggle router state");
        }
    }
    
    // Model Deployment methods
    private void AddNewDeploymentAsync()
    {
        _editingDeployment = new ModelDeployment
        {
            Id = Guid.NewGuid(),
            IsEnabled = true,
            HealthCheckEnabled = true,
            Weight = 1
        };
        _showDeploymentModal = true;
        StateHasChanged();
    }
    
    private void EditDeploymentAsync(ModelDeployment deployment)
    {
        _editingDeployment = new ModelDeployment
        {
            Id = deployment.Id,
            ModelName = deployment.ModelName,
            ProviderName = deployment.ProviderName,
            Weight = deployment.Weight,
            HealthCheckEnabled = deployment.HealthCheckEnabled,
            IsEnabled = deployment.IsEnabled
        };
        _showDeploymentModal = true;
        StateHasChanged();
    }
    
    private async Task SaveDeploymentAsync()
    {
        try
        {
            // Validate the deployment
            if (string.IsNullOrWhiteSpace(_editingDeployment.DeploymentName))
            {
                ShowMessage("Deployment name cannot be empty", true);
                return;
            }
            
            if (string.IsNullOrWhiteSpace(_editingDeployment.ModelName))
            {
                ShowMessage("Model name cannot be empty", true);
                return;
            }
            
            if (string.IsNullOrWhiteSpace(_editingDeployment.ProviderName))
            {
                ShowMessage("Provider name cannot be empty", true);
                return;
            }
            
            // Generate ID if this is a new deployment
            if (_editingDeployment.Id == Guid.Empty)
            {
                _editingDeployment.Id = Guid.NewGuid();
            }
            
            var existingIndex = _config.ModelDeployments.FindIndex(d => d.Id == _editingDeployment.Id);
            
            if (existingIndex >= 0)
            {
                _config.ModelDeployments[existingIndex] = _editingDeployment;
            }
            else
            {
                _config.ModelDeployments.Add(_editingDeployment);
            }
            
            // Save the updated configuration to the database and check result
            bool success = await SaveConfigurationAsync();
            
            if (success)
            {
                _showDeploymentModal = false;
                // StateHasChanged is called within SaveConfigurationAsync on success
            }
            else
            {
                // Rely on the status message set by SaveConfigurationAsync
                StateHasChanged(); // Ensure UI reflects status message change
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Error saving deployment: {ex.Message}", true);
            Logger.LogError(ex, "Error saving model deployment");
            StateHasChanged();
        }
    }
    
    private async Task DeleteDeploymentAsync(ModelDeployment deployment)
    {
        try
        {
            // Store the ID in case 'deployment' object becomes invalid after removal
            var deploymentId = deployment.Id;
            var deploymentName = deployment.DeploymentName;
            
            // Check if this deployment is used in any fallback configurations
            bool usedInFallbacks = false;
            if (_config.FallbackConfigurations != null)
            {
                foreach (var fallback in _config.FallbackConfigurations)
                {
                    if (fallback.PrimaryModelDeploymentId == deploymentId.ToString() ||
                        fallback.FallbackModelDeploymentIds.Contains(deploymentId.ToString()))
                    {
                        usedInFallbacks = true;
                        break;
                    }
                }
            }
            
            if (usedInFallbacks)
            {
                ShowMessage($"Cannot delete '{deploymentName}' because it's used in fallback configurations", true);
                return;
            }
            
            // Remove the deployment
            _config.ModelDeployments.RemoveAll(d => d.Id == deploymentId);
            
            // Save the updated configuration to the database and check result
            bool success = await SaveConfigurationAsync();

            // StateHasChanged is called within SaveConfigurationAsync on success/failure
        }
        catch (Exception ex)
        {
            ShowMessage($"Error deleting deployment: {ex.Message}", true);
            Logger.LogError(ex, "Error deleting model deployment");
            StateHasChanged();
        }
    }
    
    // Fallback Configuration methods
    private void AddFallbackConfigAsync()
    {
        _editingFallback = new FallbackConfiguration
        {
            Id = Guid.NewGuid(),
            FallbackModelDeploymentIds = new List<string>()
        };
        _selectedFallbackModelId = string.Empty;
        _showFallbackModal = true;
        StateHasChanged();
    }
    
    private void EditFallbackAsync(FallbackConfiguration fallback)
    {
        _editingFallback = new FallbackConfiguration
        {
            Id = fallback.Id,
            PrimaryModelDeploymentId = fallback.PrimaryModelDeploymentId,
            FallbackModelDeploymentIds = new List<string>(fallback.FallbackModelDeploymentIds)
        };
        _selectedFallbackModelId = string.Empty;
        _showFallbackModal = true;
        StateHasChanged();
    }
    
    private async Task SaveFallbackAsync()
    {
        try
        {
            // Validate the fallback configuration
            if (string.IsNullOrEmpty(_editingFallback.PrimaryModelDeploymentId))
            {
                ShowMessage("Primary model must be selected", true);
                return;
            }
            
            if (_editingFallback.FallbackModelDeploymentIds == null || 
                !_editingFallback.FallbackModelDeploymentIds.Any())
            {
                ShowMessage("At least one fallback model must be selected", true);
                return;
            }
            
            if (_config.FallbackConfigurations == null)
            {
                _config.FallbackConfigurations = new List<FallbackConfiguration>();
            }
            
            var existingIndex = _config.FallbackConfigurations.FindIndex(f => f.Id == _editingFallback.Id);
            
            if (existingIndex >= 0)
            {
                _config.FallbackConfigurations[existingIndex] = _editingFallback;
            }
            else
            {
                _config.FallbackConfigurations.Add(_editingFallback);
            }
            
            // Save the updated configuration to the database and check result
            bool success = await SaveConfigurationAsync();

            if (success)
            {
                _showFallbackModal = false;
                // StateHasChanged is called within SaveConfigurationAsync on success
            }
            else
            {
                // Rely on the status message set by SaveConfigurationAsync
                StateHasChanged(); // Ensure UI reflects status message change
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Error saving fallback configuration: {ex.Message}", true);
            Logger.LogError(ex, "Error saving fallback configuration");
            StateHasChanged();
        }
    }
    
    private async Task DeleteFallbackAsync(FallbackConfiguration fallback)
    {
        try
        {
            var fallbackId = fallback.Id;
            _config.FallbackConfigurations?.RemoveAll(f => f.Id == fallbackId);
            
            // Save the updated configuration to the database and check result
            bool success = await SaveConfigurationAsync();

            // StateHasChanged is called within SaveConfigurationAsync on success/failure
        }
        catch (Exception ex)
        {
            ShowMessage($"Error deleting fallback configuration: {ex.Message}", true);
            Logger.LogError(ex, "Error deleting fallback configuration");
            StateHasChanged();
        }
    }
    
    private void AddFallbackModelAsync()
    {
        if (!string.IsNullOrEmpty(_selectedFallbackModelId) && 
            !_editingFallback.FallbackModelDeploymentIds.Contains(_selectedFallbackModelId))
        {
            _editingFallback.FallbackModelDeploymentIds.Add(_selectedFallbackModelId);
            _selectedFallbackModelId = string.Empty;
            StateHasChanged();
        }
    }
    
    private void RemoveFallbackModelAsync(string modelId)
    {
        _editingFallback.FallbackModelDeploymentIds.Remove(modelId);
        StateHasChanged();
    }
    
    private void CloseDeploymentModal()
    {
        _showDeploymentModal = false;
        StateHasChanged();
    }
    
    private void CloseFallbackModal()
    {
        _showFallbackModal = false;
        StateHasChanged();
    }
    
    private string GetModelDisplayName(string modelId)
    {
        var model = _config.ModelDeployments.FirstOrDefault(m => m.Id.ToString() == modelId);
        return model != null ? $"{model.ModelName} ({model.ProviderName})" : "Unknown Model";
    }
    
    private void ShowMessage(string message, bool isError)
    {
        Snackbar.Add(message, isError ? Severity.Error : Severity.Success);
        StateHasChanged();
    }
    
    private async Task LoadProvidersAndMappingsAsync()
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            // Load providers
            _availableProviders = await dbContext.ProviderCredentials.ToListAsync();
            
            // Load model mappings
            _availableModelMappings = await dbContext.ModelProviderMappings.ToListAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading providers and mappings");
            ShowMessage("Failed to load providers and mappings: " + ex.Message, true);
        }
    }
}