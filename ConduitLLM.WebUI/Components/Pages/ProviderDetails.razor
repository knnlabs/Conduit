@page "/providers/{ProviderId:int}/details"
@attribute [Authorize(Policy = "MasterKeyPolicy")]
@using ConduitLLM.Configuration.DTOs
@inject IAdminApiClient AdminApiClient
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Provider Details - @(provider?.ProviderName ?? "Loading") - Conduit</PageTitle>

<PageHeader Title="@($"{provider?.ProviderName ?? "Loading"} Provider Details")" 
            Description="Manage provider configuration, models, and capabilities"
            Icon="@GetProviderIcon()">
    <Statistics>
        <div class="stat-item">
            <i class="fa fa-sitemap me-2 text-primary"></i>
            <span class="small">@totalModels Total Models</span>
        </div>
        <div class="stat-item mt-2">
            <i class="fa fa-vector-square me-2 text-dark"></i>
            <span class="small">@embeddingModels Embeddings</span>
        </div>
        <div class="stat-item mt-2">
            <i class="fa fa-check-circle me-2 @(provider?.IsEnabled == true ? "text-success" : "text-danger")"></i>
            <span class="small">@(provider?.IsEnabled == true ? "Enabled" : "Disabled")</span>
        </div>
    </Statistics>
</PageHeader>

@if (isLoading)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <div class="mt-2">Loading provider details...</div>
    </div>
}
else if (provider == null)
{
    <div class="text-center py-5">
        <i class="fa fa-exclamation-triangle fa-3x text-warning mb-3"></i>
        <h3>Provider Not Found</h3>
        <p class="text-muted">The requested provider could not be found.</p>
        <a href="/llm-providers" class="btn btn-primary">
            <i class="fa fa-arrow-left me-2"></i>Back to Providers
        </a>
    </div>
}
else
{
    <div class="row g-4">
        <!-- Provider Overview -->
        <div class="col-12">
            <div class="modern-card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="@GetProviderIcon() me-2"></i>
                        Provider Overview
                    </h5>
                    <div class="d-flex gap-2">
                        <a href="/llm-providers" class="modern-btn modern-btn-outline-secondary modern-btn-sm">
                            <i class="fa fa-arrow-left me-1"></i>Back to Providers
                        </a>
                        <button class="modern-btn modern-btn-outline-primary modern-btn-sm" @onclick="RefreshProvider">
                            <i class="fa fa-refresh me-1"></i>Refresh
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row g-4">
                        <div class="col-md-6">
                            <div class="d-flex align-items-center p-3 bg-light rounded">
                                <div class="me-3">
                                    <i class="@GetProviderIcon() fa-2x text-primary"></i>
                                </div>
                                <div>
                                    <h6 class="mb-1">@provider.ProviderName</h6>
                                    <small class="text-muted">@provider.ApiBase</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="d-flex align-items-center p-3 bg-light rounded">
                                <div class="me-3">
                                    @if (provider.IsEnabled)
                                    {
                                        <i class="fa fa-check-circle fa-2x text-success"></i>
                                    }
                                    else
                                    {
                                        <i class="fa fa-times-circle fa-2x text-danger"></i>
                                    }
                                </div>
                                <div>
                                    <h6 class="mb-1">Status</h6>
                                    <small class="text-muted">
                                        @(provider.IsEnabled ? "Enabled and operational" : "Disabled or misconfigured")
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Navigation Tabs -->
        <div class="col-12">
            <div class="modern-card">
                <div class="card-header border-bottom-0 pb-0">
                    <ul class="nav nav-tabs card-header-tabs" id="providerTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="models-tab" data-bs-toggle="tab" data-bs-target="#models" type="button" role="tab">
                                <i class="fa fa-sitemap me-2"></i>Model Mappings
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="embeddings-tab" data-bs-toggle="tab" data-bs-target="#embeddings" type="button" role="tab">
                                <i class="fa fa-vector-square me-2"></i>Embeddings Configuration
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="analytics-tab" data-bs-toggle="tab" data-bs-target="#analytics" type="button" role="tab">
                                <i class="fa fa-chart-bar me-2"></i>Analytics
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="health-tab" data-bs-toggle="tab" data-bs-target="#health" type="button" role="tab">
                                <i class="fa fa-heartbeat me-2"></i>Health & Monitoring
                            </button>
                        </li>
                    </ul>
                </div>
                <div class="card-body">
                    <div class="tab-content" id="providerTabsContent">
                        <!-- Model Mappings Tab -->
                        <div class="tab-pane fade show active" id="models" role="tabpanel">
                            <h6 class="text-muted mb-3">Model Mappings for @provider.ProviderName</h6>
                            @if (modelMappings.Any())
                            {
                                <div class="table-responsive">
                                    <table class="table table-hover modern-table">
                                        <thead>
                                            <tr>
                                                <th>Model Alias</th>
                                                <th>Model Path</th>
                                                <th>Capabilities</th>
                                                <th>Status</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var mapping in modelMappings)
                                            {
                                                <tr>
                                                    <td>
                                                        <div class="d-flex align-items-center">
                                                            <i class="fa fa-sitemap me-2 text-primary"></i>
                                                            <strong>@mapping.ModelId</strong>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <code class="text-muted">@mapping.ProviderModelId</code>
                                                    </td>
                                                    <td>
                                                        <div class="d-flex flex-wrap gap-1">
                                                            @foreach (var capability in GetModelCapabilities(mapping))
                                                            {
                                                                <span class="badge @GetCapabilityBadgeClass(capability.Key)">
                                                                    <i class="@GetCapabilityIcon(capability.Key) me-1"></i>@capability.Key
                                                                </span>
                                                            }
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <span class="badge @(mapping.IsEnabled ? "bg-success" : "bg-secondary")">
                                                            @(mapping.IsEnabled ? "Enabled" : "Disabled")
                                                        </span>
                                                    </td>
                                                    <td>
                                                        <div class="btn-group btn-group-sm">
                                                            <button class="btn btn-outline-primary" @onclick="() => EditMapping(mapping.Id)">
                                                                <i class="fa fa-edit"></i>
                                                            </button>
                                                            <button class="btn btn-outline-danger" @onclick="() => DeleteMapping(mapping.Id)">
                                                                <i class="fa fa-trash"></i>
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-4">
                                    <i class="fa fa-sitemap fa-2x text-muted mb-3"></i>
                                    <div class="text-muted">No model mappings configured</div>
                                    <a href="/model-mappings" class="btn btn-outline-primary mt-2">
                                        <i class="fa fa-plus me-1"></i>Add Model Mapping
                                    </a>
                                </div>
                            }
                        </div>

                        <!-- Embeddings Configuration Tab -->
                        <div class="tab-pane fade" id="embeddings" role="tabpanel">
                            <EmbeddingProviderConfiguration Provider="@provider" OnConfigurationChanged="@OnEmbeddingConfigurationChanged" />
                        </div>

                        <!-- Analytics Tab -->
                        <div class="tab-pane fade" id="analytics" role="tabpanel">
                            <h6 class="text-muted mb-3">Provider Analytics</h6>
                            <div class="row g-4">
                                <div class="col-md-3">
                                    <StatCard 
                                        Label="Requests (24h)"
                                        Value="@providerAnalytics.Requests24h.ToString("N0")"
                                        SubText="Last 24 hours"
                                        IconClass="fa fa-chart-line"
                                        Color="StatCard.StatCardColor.Primary" />
                                </div>
                                <div class="col-md-3">
                                    <StatCard 
                                        Label="Success Rate"
                                        Value="@($"{providerAnalytics.SuccessRate:F1}%")"
                                        SubText="Request success"
                                        IconClass="fa fa-check-circle"
                                        Color="@(providerAnalytics.SuccessRate >= 95 ? StatCard.StatCardColor.Success : StatCard.StatCardColor.Warning)" />
                                </div>
                                <div class="col-md-3">
                                    <StatCard 
                                        Label="Avg Latency"
                                        Value="@($"{providerAnalytics.AverageLatency:F0}ms")"
                                        SubText="Response time"
                                        IconClass="fa fa-tachometer-alt"
                                        Color="StatCard.StatCardColor.Info" />
                                </div>
                                <div class="col-md-3">
                                    <StatCard 
                                        Label="Total Cost"
                                        Value="@providerAnalytics.TotalCost.ToString("F2")"
                                        SubText="Last 24 hours"
                                        IconClass="fa fa-dollar-sign"
                                        Color="StatCard.StatCardColor.Success"
                                        IsCurrency="true" />
                                </div>
                            </div>
                        </div>

                        <!-- Health & Monitoring Tab -->
                        <div class="tab-pane fade" id="health" role="tabpanel">
                            <h6 class="text-muted mb-3">Health & Monitoring</h6>
                            <div class="row g-4">
                                <div class="col-md-6">
                                    <div class="modern-card">
                                        <div class="card-header">
                                            <h6 class="mb-0">Connection Status</h6>
                                        </div>
                                        <div class="card-body">
                                            <div class="d-flex align-items-center">
                                                <div class="me-3">
                                                    @if (healthStatus.IsHealthy)
                                                    {
                                                        <i class="fa fa-check-circle fa-2x text-success"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="fa fa-exclamation-triangle fa-2x text-warning"></i>
                                                    }
                                                </div>
                                                <div>
                                                    <h6 class="mb-1">@healthStatus.Status</h6>
                                                    <small class="text-muted">
                                                        Last checked: @healthStatus.LastChecked.ToString("yyyy-MM-dd HH:mm:ss")
                                                    </small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="modern-card">
                                        <div class="card-header">
                                            <h6 class="mb-0">Response Time</h6>
                                        </div>
                                        <div class="card-body">
                                            <div class="d-flex align-items-center">
                                                <div class="me-3">
                                                    <i class="fa fa-clock fa-2x text-info"></i>
                                                </div>
                                                <div>
                                                    <h6 class="mb-1">@healthStatus.ResponseTime ms</h6>
                                                    <small class="text-muted">Average response time</small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int ProviderId { get; set; }

    private bool isLoading = true;
    private ProviderCredentialDto? provider;
    private List<ModelProviderMappingDto> modelMappings = new();
    private int totalModels = 0;
    private int embeddingModels = 0;
    
    private ProviderAnalytics providerAnalytics = new();
    private ProviderHealth healthStatus = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadProviderDetails();
    }

    private async Task LoadProviderDetails()
    {
        isLoading = true;
        try
        {
            // Load provider details
            var providers = await AdminApiClient.GetAllProviderCredentialsAsync();
            provider = providers.FirstOrDefault(p => p.Id == ProviderId);

            if (provider != null)
            {
                // Load model mappings
                var allMappings = await AdminApiClient.GetAllModelProviderMappingsAsync();
                modelMappings = allMappings.Where(m => m.ProviderId == ProviderId.ToString()).ToList();
                
                // Calculate statistics
                totalModels = modelMappings.Count;
                embeddingModels = modelMappings.Count(m => m.SupportsEmbeddings);

                // Load analytics and health data
                await LoadProviderAnalytics();
                await LoadProviderHealth();
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load provider details: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadProviderAnalytics()
    {
        // TODO: Load real analytics data
        var random = new Random();
        providerAnalytics = new ProviderAnalytics
        {
            Requests24h = random.Next(100, 5000),
            SuccessRate = 95 + random.NextDouble() * 5,
            AverageLatency = random.Next(50, 300),
            TotalCost = (decimal)(random.NextDouble() * 50 + 5)
        };
    }

    private async Task LoadProviderHealth()
    {
        // TODO: Load real health data
        var random = new Random();
        healthStatus = new ProviderHealth
        {
            IsHealthy = random.NextDouble() > 0.1, // 90% healthy
            Status = random.NextDouble() > 0.1 ? "Healthy" : "Connection Issues",
            LastChecked = DateTime.UtcNow.AddMinutes(-random.Next(1, 30)),
            ResponseTime = random.Next(50, 500)
        };
    }

    private async Task RefreshProvider()
    {
        await LoadProviderDetails();
        ToastService.ShowSuccess("Provider details refreshed");
    }

    private async Task OnEmbeddingConfigurationChanged()
    {
        // Refresh the page data when embedding configuration changes
        await LoadProviderDetails();
    }

    private Dictionary<string, string> GetModelCapabilities(ModelProviderMappingDto mapping)
    {
        var capabilities = new Dictionary<string, string>();

        if (mapping.SupportsImageGeneration)
            capabilities.Add("Image Gen", "Generate images from text prompts");
        if (mapping.SupportsVideoGeneration)
            capabilities.Add("Video Gen", "Generate videos from text prompts");
        if (mapping.SupportsVision)
            capabilities.Add("Vision", "Analyze and understand images");
        if (mapping.SupportsAudioTranscription)
            capabilities.Add("Transcription", "Convert speech to text");
        if (mapping.SupportsTextToSpeech)
            capabilities.Add("TTS", "Convert text to speech");
        if (mapping.SupportsRealtimeAudio)
            capabilities.Add("Realtime", "Real-time audio processing");
        if (mapping.SupportsEmbeddings)
            capabilities.Add("Embeddings", "Generate text embeddings");

        return capabilities;
    }

    private string GetCapabilityBadgeClass(string capability)
    {
        return capability switch
        {
            "Image Gen" => "bg-purple text-white",
            "Video Gen" => "bg-danger text-white",
            "Vision" => "bg-info text-white",
            "Transcription" => "bg-primary text-white",
            "TTS" => "bg-success text-white",
            "Realtime" => "bg-warning text-dark",
            "Embeddings" => "bg-dark text-white",
            _ => "bg-light text-dark"
        };
    }

    private string GetCapabilityIcon(string capability)
    {
        return capability switch
        {
            "Image Gen" => "fa fa-image",
            "Video Gen" => "fa fa-video-camera",
            "Vision" => "fa fa-eye",
            "Transcription" => "fa fa-microphone",
            "TTS" => "fa fa-volume-up",
            "Realtime" => "fa fa-bolt",
            "Embeddings" => "fa fa-vector-square",
            _ => "fa fa-question"
        };
    }

    private string GetProviderIcon()
    {
        return provider?.ProviderName.ToLower() switch
        {
            "openai" => "fa fa-brain",
            "anthropic" => "fa fa-robot",
            "cohere" => "fa fa-network-wired",
            "huggingface" => "fa fa-smile",
            "bedrock" => "fa fa-aws",
            "azure" => "fa fa-cloud",
            "google" => "fa fa-google",
            _ => "fa fa-server"
        };
    }

    private async Task EditMapping(int mappingId)
    {
        NavigationManager.NavigateTo($"/model-mappings?edit={mappingId}");
    }

    private async Task DeleteMapping(int mappingId)
    {
        // TODO: Implement delete confirmation and logic
        ToastService.ShowInfo("Delete functionality coming soon");
    }
}

@* Data Models *@
@code {
    public class ProviderAnalytics
    {
        public int Requests24h { get; set; }
        public double SuccessRate { get; set; }
        public double AverageLatency { get; set; }
        public decimal TotalCost { get; set; }
    }

    public class ProviderHealth
    {
        public bool IsHealthy { get; set; }
        public string Status { get; set; } = string.Empty;
        public DateTime LastChecked { get; set; }
        public int ResponseTime { get; set; }
    }
}