@page "/blazor-diagnostics"
@attribute [Authorize(Policy = "MasterKeyPolicy")]
@using Microsoft.JSInterop
@inject IJSRuntime JS

<h3>Blazor Diagnostics</h3>

<div class="alert alert-info">
    <h4>Connection State</h4>
    <p>Render Mode: @(OperatingSystem.IsBrowser() ? "WebAssembly" : "Server")</p>
    <p>Render Count: @_renderCount</p>
    <p>Last Render: @_lastRender.ToString("HH:mm:ss.fff")</p>
</div>

<div class="alert alert-warning">
    <h4>Interactivity Test</h4>
    <button class="btn btn-primary" @onclick="TestClick">Test Click (Count: @_clickCount)</button>
    <button class="btn btn-secondary" @onclick="async () => await TestJsInterop()">Test JS Interop</button>
    <p>JS Interop Result: @_jsResult</p>
</div>

<div class="alert alert-success">
    <h4>Event Handler Tests</h4>
    <input type="text" @bind="_inputValue" @bind:event="oninput" placeholder="Type to test binding" />
    <p>Input value: @_inputValue</p>
    
    <div @onmouseover="OnMouseOver" @onmouseout="OnMouseOut" style="padding: 20px; background: @(_mouseOver ? "yellow" : "lightgray")">
        Hover over me (Mouse over: @_mouseOver)
    </div>
</div>

<div class="alert alert-danger">
    <h4>Circuit Information</h4>
    <button class="btn btn-warning" @onclick="CheckBlazorState">Check Blazor State</button>
    <pre>@_blazorState</pre>
</div>

@code {
    private int _renderCount = 0;
    private DateTime _lastRender = DateTime.Now;
    private int _clickCount = 0;
    private string _jsResult = "Not tested";
    private string _inputValue = "";
    private bool _mouseOver = false;
    private string _blazorState = "Not checked";

    protected override void OnInitialized()
    {
        Console.WriteLine("BlazorDiagnostics: OnInitialized called");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        _renderCount++;
        _lastRender = DateTime.Now;
        
        if (firstRender)
        {
            Console.WriteLine("BlazorDiagnostics: First render completed");
        }
    }

    private void TestClick()
    {
        _clickCount++;
        Console.WriteLine($"BlazorDiagnostics: Button clicked, count = {_clickCount}");
        StateHasChanged();
    }

    private async Task TestJsInterop()
    {
        try
        {
            _jsResult = await JS.InvokeAsync<string>("eval", "return 'JS Interop working! Blazor version: ' + (window.Blazor ? 'Loaded' : 'Not loaded')");
        }
        catch (Exception ex)
        {
            _jsResult = $"Error: {ex.Message}";
        }
    }

    private void OnMouseOver()
    {
        _mouseOver = true;
    }

    private void OnMouseOut()
    {
        _mouseOver = false;
    }

    private async Task CheckBlazorState()
    {
        try
        {
            _blazorState = await JS.InvokeAsync<string>("eval", @"
                return JSON.stringify({
                    blazorLoaded: typeof Blazor !== 'undefined',
                    blazorStarted: window._blazorStarted || false,
                    signalRState: window.Blazor && window.Blazor._internal ? 'Available' : 'Not available',
                    documentState: document.readyState,
                    scripts: Array.from(document.scripts).map(s => s.src).filter(s => s.includes('blazor'))
                }, null, 2)
            ");
        }
        catch (Exception ex)
        {
            _blazorState = $"Error checking state: {ex.Message}";
        }
    }
}