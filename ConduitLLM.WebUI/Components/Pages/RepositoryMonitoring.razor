@page "/repository-monitoring"
@using ConduitLLM.WebUI.Services
@using System.Net.Http.Json
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<RepositoryMonitoring> Logger

<PageTitle>Repository Pattern Monitoring</PageTitle>

<h3>Repository Pattern Monitoring</h3>

@if (_loading)
{
    <div class="d-flex flex-column align-items-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading...</p>
    </div>
}
else if (_error)
{
    <div class="alert alert-danger my-2" role="alert">
        Error loading data: @_errorMessage
    </div>
}
else
{
    <div class="row">
        <div class="col-12 col-sm-6 col-md-3 mb-4">
            <div class="card h-100">
                <div class="card-header">
                    <h6 class="mb-0">Repository Pattern Status</h6>
                </div>
                <div class="card-body">
                    <span class="badge @(_config.IsEnabled ? "bg-success" : "bg-danger")">
                        @(_config.IsEnabled ? "Enabled" : "Disabled")
                    </span>
                </div>
            </div>
        </div>
        
        <div class="col-12 col-sm-6 col-md-3 mb-4">
            <div class="card h-100">
                <div class="card-header">
                    <h6 class="mb-0">Detailed Logging</h6>
                </div>
                <div class="card-body">
                    <span class="badge @(_config.DetailedLoggingEnabled ? "bg-success" : "bg-secondary")">
                        @(_config.DetailedLoggingEnabled ? "Enabled" : "Disabled")
                    </span>
                </div>
            </div>
        </div>
        
        <div class="col-12 col-sm-6 col-md-3 mb-4">
            <div class="card h-100">
                <div class="card-header">
                    <h6 class="mb-0">Performance Tracking</h6>
                </div>
                <div class="card-body">
                    <span class="badge @(_config.TrackPerformanceMetrics ? "bg-success" : "bg-secondary")">
                        @(_config.TrackPerformanceMetrics ? "Enabled" : "Disabled")
                    </span>
                </div>
            </div>
        </div>
        
        <div class="col-12 col-sm-6 col-md-3 mb-4">
            <div class="card h-100">
                <div class="card-header">
                    <h6 class="mb-0">Parallel Verification</h6>
                </div>
                <div class="card-body">
                    <span class="badge @(_config.ParallelVerificationEnabled ? "bg-success" : "bg-secondary")">
                        @(_config.ParallelVerificationEnabled ? "Enabled" : "Disabled")
                    </span>
                </div>
            </div>
        </div>
    </div>

    <hr class="my-4" />
    
    <div class="row">
        <div class="col-12 mb-4">
            <div class="d-flex align-items-center">
                <h5 class="mb-0">Repository Operation Metrics</h5>
                <button type="button" class="btn btn-outline-primary ms-3" @onclick="ReloadMetrics">
                    <i class="fa fa-refresh me-1"></i>
                    Refresh
                </button>
                <button type="button" class="btn btn-outline-warning ms-2" @onclick="ClearMetrics" disabled="@(!_config.TrackPerformanceMetrics)">
                    <i class="fa fa-eraser me-1"></i>
                    Clear Metrics
                </button>
            </div>
        </div>
        
        @if (!_config.TrackPerformanceMetrics)
        {
            <div class="col-12">
                <div class="alert alert-warning my-2" role="alert">
                    Performance metrics tracking is disabled. Enable it in the configuration to see metrics.
                </div>
            </div>
        }
        else if (_metrics.Count == 0)
        {
            <div class="col-12">
                <div class="alert alert-info my-2" role="alert">
                    No metrics available yet. Use the application to generate some repository operations.
                </div>
            </div>
        }
        else
        {
            <div class="col-12">
                <div class="card p-4">
                    <div class="table-responsive">
                        <table class="table table-sm table-hover">
                            <thead>
                                <tr>
                                    <th>Operation</th>
                                    <th>Count</th>
                                    <th>Average (ms)</th>
                                    <th>Min (ms)</th>
                                    <th>Max (ms)</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in _metrics.Values)
                                {
                                    <tr>
                                        <td data-label="Operation">@item.OperationName</td>
                                        <td data-label="Count">@item.Count</td>
                                        <td data-label="Average (ms)">@Math.Round(item.AverageMs, 2)</td>
                                        <td data-label="Min (ms)">@Math.Round(item.MinMs, 2)</td>
                                        <td data-label="Max (ms)">@Math.Round(item.MaxMs, 2)</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private bool _loading = true;
    private bool _error = false;
    private string _errorMessage = string.Empty;
    private ConfigInfo _config = new();
    private Dictionary<string, MetricsInfo> _metrics = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            _loading = true;
            _error = false;
            
            var client = HttpClientFactory.CreateClient("ApiClient");
            
            // Load configuration
            var configResponse = await client.GetFromJsonAsync<ConfigInfo>("api/repository-monitoring/config");
            if (configResponse != null)
            {
                _config = configResponse;
            }
            
            // Load metrics if enabled
            if (_config.TrackPerformanceMetrics)
            {
                try
                {
                    var metricsResponse = await client.GetFromJsonAsync<Dictionary<string, MetricsInfo>>("api/repository-monitoring/metrics");
                    if (metricsResponse != null)
                    {
                        _metrics = metricsResponse;
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "Error loading metrics");
                    // Don't set error state, just show empty metrics
                    _metrics = new Dictionary<string, MetricsInfo>();
                }
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
            Logger.LogError(ex, "Error loading repository monitoring data");
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task ReloadMetrics()
    {
        if (!_config.TrackPerformanceMetrics)
        {
            return;
        }
        
        try
        {
            var client = HttpClientFactory.CreateClient("ApiClient");
            var metricsResponse = await client.GetFromJsonAsync<Dictionary<string, MetricsInfo>>("api/repository-monitoring/metrics");
            if (metricsResponse != null)
            {
                _metrics = metricsResponse;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error reloading metrics");
        }
    }

    private async Task ClearMetrics()
    {
        if (!_config.TrackPerformanceMetrics)
        {
            return;
        }
        
        try
        {
            var client = HttpClientFactory.CreateClient("ApiClient");
            await client.PostAsync("api/repository-monitoring/metrics/clear", null);
            _metrics = new Dictionary<string, MetricsInfo>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error clearing metrics");
        }
    }

    private class ConfigInfo
    {
        public bool IsEnabled { get; set; }
        public bool DetailedLoggingEnabled { get; set; }
        public bool TrackPerformanceMetrics { get; set; }
        public bool ParallelVerificationEnabled { get; set; }
    }

    private class MetricsInfo
    {
        public string OperationName { get; set; } = string.Empty;
        public double AverageMs { get; set; }
        public double MinMs { get; set; }
        public double MaxMs { get; set; }
        public int Count { get; set; }
    }
}