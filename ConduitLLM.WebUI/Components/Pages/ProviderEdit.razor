@page "/configuration/provider/edit/{id?}"
@using System.Text.Json
@using Microsoft.Extensions.Logging
@using ConduitLLM.Configuration
@using ConduitLLM.Configuration.DTOs
@using ConduitLLM.Configuration.Entities
@using ConduitLLM.WebUI.Services
@using ConduitLLM.WebUI.Interfaces
@using ConduitLLM.WebUI.DTOs
@using ProviderCredentialModel = ConduitLLM.Configuration.Entities.ProviderCredential
@using ProviderCredentialDto = ConduitLLM.Configuration.DTOs.ProviderCredentialDto
@using CreateProviderCredentialDto = ConduitLLM.Configuration.DTOs.CreateProviderCredentialDto
@using UpdateProviderCredentialDto = ConduitLLM.Configuration.DTOs.UpdateProviderCredentialDto
@using ProviderConnectionTestResultDto = ConduitLLM.Configuration.DTOs.ProviderConnectionTestResultDto
@inject ConduitLLM.WebUI.Interfaces.IProviderCredentialService ProviderCredentialService
@inject IGlobalSettingService GlobalSettingService
@inject NavigationManager NavigationManager
@inject ConfigurationChangeNotifier ConfigNotifier
@inject ILogger<ProviderEdit> _logger
@inject IToastService ToastService
@rendermode InteractiveServer

<PageTitle>@(Id.HasValue ? "Edit Provider" : "Add Provider") - ConduitLLM</PageTitle>

<div class="container container-xxl mt-4">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="provider-edit-header bg-gradient-primary text-white rounded-4 p-4 mb-4">
                <div class="row align-items-center">
                    <div class="col">
                        <h1 class="h3 mb-2">
                            <i class="fa fa-@(Id.HasValue ? "edit" : "plus-circle") me-3"></i>
                            @(Id.HasValue ? "Edit Provider Configuration" : "Add New Provider")
                        </h1>
                        <p class="mb-0 opacity-90">
                            @(Id.HasValue ? "Update your provider settings and API credentials" : "Configure a new LLM provider to use with Conduit")
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (provider == null)
    {
        <div class="alert alert-danger border-0 shadow-sm">
            <i class="fa fa-exclamation-circle me-2"></i>
            Provider not found or error loading.
        </div>
    }
    else
    {
        <EditForm EditContext="editContext" OnValidSubmit="HandleValidSubmit" FormName="ProviderForm"> 
            <DataAnnotationsValidator />
            @* Keep ValidationSummary for other potential errors *@
            <ValidationSummary />

            @* Removed inline error display - using toast notifications instead *@

            <div class="row">
                <div class="col-12 col-lg-6">
                    <div class="card shadow-sm border-0 mb-4">
                        <div class="card-header bg-light border-0">
                            <h5 class="mb-0">
                                <i class="fa fa-cog me-2 text-primary"></i>Provider Settings
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="mb-4">
                                <label for="providerName" class="form-label fw-semibold">
                                    <i class="fa fa-server me-2"></i>Provider Name
                                </label>
                                <select id="providerName" class="form-select shadow-sm" 
                                        @bind="provider.ProviderName" 
                                        disabled="@Id.HasValue">
                                    <option value="">-- Select Provider --</option>
                                    @foreach (var name in _supportedProviders)
                                    {
                                        <option value="@name">@name</option>
                                    }
                                </select>
                                <ValidationMessage For="@(() => provider.ProviderName)" />
                                @if (Id.HasValue)
                                {
                                    <small class="text-muted mt-1">
                                        <i class="fa fa-info-circle me-1"></i>
                                        Provider name cannot be changed after creation
                                    </small>
                                }
                            </div>

                            @* Conditionally hide ApiBase for OpenRouter *@
                            @if (provider.ProviderName != "OpenRouter")
                            {
                                <div class="mb-4">
                                    <label for="apiBase" class="form-label fw-semibold">
                                        <i class="fa fa-link me-2"></i>API Base URL
                                        @if (provider.ProviderName == "OpenAI Compatible")
                                        {
                                            <span class="text-danger">*</span>
                                        }
                                    </label>
                                    <input type="text" class="form-control shadow-sm" id="apiBase" 
                                           @bind="provider.ApiBase" 
                                           placeholder="https://api.example.com" />
                                    <small class="text-muted mt-1">
                                        @if (provider.ProviderName == "OpenAI Compatible")
                                        {
                                            <i class="fa fa-info-circle me-1"></i>
                                            <text>Required - Enter the base URL of your OpenAI-compatible API endpoint</text>
                                        }
                                        else
                                        {
                                            <text>Optional - leave empty to use the default endpoint</text>
                                        }
                                    </small>
                                    <ValidationMessage For="@(() => provider.ApiBase)" />
                                </div>
                            }

                            <div class="mb-4">
                                <label for="apiKey" class="form-label fw-semibold">
                                    <i class="fa fa-key me-2"></i>API Key
                                </label>
                                <input type="password" class="form-control shadow-sm" id="apiKey" 
                                       @bind="provider.ApiKey" 
                                       placeholder="@(originalApiKey?.Length > 0 ? "••••••••" : "sk-...")" />
                                <small class="text-muted mt-1">
                                    <i class="fa fa-shield-alt me-1"></i>
                                    Existing keys are not displayed for security. Leave empty to keep the current key.
                                </small>
                                <ValidationMessage For="@(() => provider.ApiKey)" />
                            </div>
                            
                            @if (!string.IsNullOrEmpty(provider.ProviderName) && 
                                  (ConduitLLM.WebUI.Models.ProviderApiInfo.GetApiKeyUrl(provider.ProviderName) != null || 
                                   ConduitLLM.WebUI.Models.ProviderApiInfo.GetDocumentationUrl(provider.ProviderName) != null))
                            {
                                <div class="alert alert-info border-0 shadow-sm">
                                    <h6 class="alert-heading mb-3">
                                        <i class="fa fa-info-circle me-2"></i>@provider.ProviderName Resources
                                    </h6>
                                    <div class="d-flex flex-column gap-2">
                                        @if (ConduitLLM.WebUI.Models.ProviderApiInfo.GetApiKeyUrl(provider.ProviderName) != null)
                                        {
                                            <a href="@ConduitLLM.WebUI.Models.ProviderApiInfo.GetApiKeyUrl(provider.ProviderName)" 
                                               target="_blank" 
                                               class="btn btn-sm btn-outline-info">
                                                <i class="fa fa-external-link-alt me-2"></i>
                                                Get API Key
                                            </a>
                                        }
                                        @if (ConduitLLM.WebUI.Models.ProviderApiInfo.GetDocumentationUrl(provider.ProviderName) != null)
                                        {
                                            <a href="@ConduitLLM.WebUI.Models.ProviderApiInfo.GetDocumentationUrl(provider.ProviderName)" 
                                               target="_blank" 
                                               class="btn btn-sm btn-outline-info">
                                                <i class="fa fa-book me-2"></i>
                                                View Documentation
                                            </a>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <div class="col-12 col-lg-6">
                    @if (!string.IsNullOrEmpty(provider.ProviderName) && !string.IsNullOrEmpty(provider.ApiKey))
                    {
                        <div class="card shadow-sm border-0 mb-4">
                            <div class="card-header bg-light border-0">
                                <h5 class="mb-0">
                                    <i class="fa fa-plug me-2 text-success"></i>Connection Test
                                </h5>
                            </div>
                            <div class="card-body">
                                @if (showConnectionStatus)
                                {
                                    <div class="alert @(connectionStatus?.IsOnline ?? false ? "alert-success" : "alert-danger") border-0 shadow-sm mb-3">
                                        @if (connectionStatus?.IsOnline ?? false)
                                        {
                                            <div class="d-flex align-items-center">
                                                <i class="fa fa-check-circle me-3 fa-2x"></i>
                                                <div>
                                                    <h6 class="mb-1">Connected Successfully!</h6>
                                                    <p class="mb-0">@connectionStatusMessage</p>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="d-flex align-items-center">
                                                <i class="fa fa-exclamation-circle me-3 fa-2x"></i>
                                                <div>
                                                    <h6 class="mb-1">Connection Failed</h6>
                                                    <p class="mb-0">@connectionStatusMessage</p>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                    
                                    <small class="text-muted d-block mb-3">
                                        <i class="fa fa-clock me-1"></i>
                                        Last tested: @(connectionStatus != null ? connectionStatus.LastCheckedUtc.ToLocalTime().ToString("g") : "")
                                    </small>
                                }
                                
                                <button 
                                    type="button"
                                    class="btn btn-primary shadow-sm w-100"
                                    @onclick="TestConnection" 
                                    disabled="@isTestingConnection">
                                    @if (isTestingConnection)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        <span>Testing Connection...</span>
                                    }
                                    else
                                    {
                                        <i class="fa fa-bolt me-2"></i>
                                        <span>Test Connection</span>
                                    }
                                </button>
                                
                                <small class="text-muted d-block mt-2 text-center">
                                    Verifies your API key and connection settings
                                </small>
                            </div>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(provider.ProviderName))
                    {
                        <div class="card shadow-sm border-0 mb-4">
                            <div class="card-header bg-light border-0">
                                <h5 class="mb-0">
                                    <i class="fa fa-plug me-2 text-muted"></i>Connection Test
                                </h5>
                            </div>
                            <div class="card-body text-center py-5">
                                <i class="fa fa-key fa-3x text-muted mb-3"></i>
                                <p class="text-muted">Enter an API key to test the connection</p>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="card shadow-sm border-0 mt-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <button 
                            type="button"
                            class="btn btn-outline-secondary shadow-sm"
                            @onclick="Cancel" 
                            disabled="@isSaving">
                            <i class="fa fa-arrow-left me-2"></i>
                            Back to Configuration
                        </button>
                        
                        <button 
                            type="submit" 
                            class="btn btn-primary btn-lg shadow-sm px-5"
                            disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Saving...</span>
                            }
                            else
                            {
                                <i class="fa fa-save me-2"></i>
                                <span>@(Id.HasValue ? "Update Provider" : "Create Provider")</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
        </EditForm>
    }
</div>

<style>
    .provider-edit-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
    }
    
    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        transition: all 0.2s ease;
    }
    
    .btn-primary:hover {
        transform: translateY(-1px);
        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4) !important;
    }
    
    .card {
        transition: all 0.2s ease;
    }
    
    .form-control:focus, .form-select:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }
    
    .alert-info {
        background-color: rgba(102, 126, 234, 0.1);
        border: 1px solid rgba(102, 126, 234, 0.2);
        color: #5a5fc8;
    }
    
    .btn-outline-info {
        color: #667eea;
        border-color: #667eea;
    }
    
    .btn-outline-info:hover {
        background-color: #667eea;
        border-color: #667eea;
        color: white;
    }
    
    .bg-gradient-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
    }
</style>

@code {
    [Parameter]
    public int? Id { get; set; }
    
    // This is needed to properly handle string route parameters
    [SupplyParameterFromQuery(Name = "id")]
    public string? IdParam
    {
        get => Id?.ToString();
        set
        {
            if (int.TryParse(value, out var parsed))
                Id = parsed;
        }
    }

    private ProviderCredentialDto provider = new ProviderCredentialDto { ProviderName = "" };
    private bool isLoading = true;
    private bool isSaving = false;
    private bool isTestingConnection = false;
    private ProviderStatus? connectionStatus = null;
    private string connectionStatusMessage = "";
    private bool showConnectionStatus = false;
    private string? originalApiKey;
    private EditContext editContext = null!;
    private readonly string[] _supportedProviders = { "OpenAI", "OpenAI Compatible", "Anthropic", "Cohere", "Gemini", "Fireworks", "OpenRouter", "Cerebras", "AWS Bedrock", "SageMaker", "VertexAI", "HuggingFace", "Groq", "Mistral" };

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(provider);
        
        if (Id.HasValue)
        {
            isLoading = true;
            StateHasChanged();
            
            try
            {
                // Use ProviderCredentialService to get provider details
                var existingProvider = await ProviderCredentialService.GetByIdAsync(Id.Value);
                
                if (existingProvider != null)
                {
                    // Use the DTO directly
                    provider = existingProvider;
                    
                    // Keep track of the original API key existence
                    if (!string.IsNullOrEmpty(existingProvider.ApiKey))
                    {
                        originalApiKey = "PLACEHOLDER"; // Just indicate it exists
                    }
                }
                else
                {
                    NavigationManager.NavigateTo("/configuration");
                    return;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error loading provider");
                ToastService.ShowError($"Error loading provider: {ex.Message}");
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
        else
        {
            // Initialize a new DTO for adding
            provider = new ProviderCredentialDto { ProviderName = "" }; 
            isLoading = false;
        }
        
        editContext = new EditContext(provider);
    }

    private async Task HandleValidSubmit()
    {
        isSaving = true;
        StateHasChanged();
        
        try 
        {
            // Validate API Base URL for OpenAI Compatible providers
            if (provider.ProviderName == "OpenAI Compatible" && string.IsNullOrWhiteSpace(provider.ApiBase))
            {
                ToastService.ShowError("API Base URL is required for OpenAI Compatible providers.");
                isSaving = false;
                StateHasChanged();
                return;
            }
            if (Id.HasValue) // Edit
            {
                // Create a DTO for update
                var updateDto = new UpdateProviderCredentialDto
                {
                    Id = Id.Value,
                    ApiBase = string.IsNullOrWhiteSpace(provider.ApiBase) ? null : provider.ApiBase,
                    IsEnabled = true
                };
                
                // Only update API key if provided (not empty)
                if (!string.IsNullOrWhiteSpace(provider.ApiKey))
                {
                    updateDto.ApiKey = provider.ApiKey;
                }
                // If originalApiKey was null (meaning no key existed before), and provider.ApiKey is blank, set it to null.
                else if (string.IsNullOrWhiteSpace(provider.ApiKey) && originalApiKey == null)
                {
                    updateDto.ApiKey = "[REMOVE]"; // Special value to remove the key
                }
                // Otherwise, don't include the API key in the update (keep existing)
                
                // Update via ProviderCredentialService
                var updateResult = await ProviderCredentialService.UpdateAsync(Id.Value, updateDto);
                
                if (updateResult == null)
                {
                    throw new Exception($"Failed to update provider {provider.ProviderName}");
                }
                
                ToastService.ShowSuccess($"Provider '{provider.ProviderName}' updated successfully!");
            }
            else // Add
            {
                // Create a DTO for creation
                var createDto = new CreateProviderCredentialDto
                {
                    ProviderName = provider.ProviderName,
                    ApiBase = string.IsNullOrWhiteSpace(provider.ApiBase) ? null : provider.ApiBase,
                    ApiKey = string.IsNullOrWhiteSpace(provider.ApiKey) ? null : provider.ApiKey,
                    IsEnabled = true
                };
                
                // Create via ProviderCredentialService
                var createResult = await ProviderCredentialService.CreateAsync(createDto);
                
                if (createResult == null)
                {
                    throw new Exception($"Failed to create provider {provider.ProviderName}");
                }
                
                ToastService.ShowSuccess($"Provider '{provider.ProviderName}' created successfully!");
            }
            
            // Notify the Conduit HTTP proxy about configuration changes
            try
            {
                // Get the proxy base URL from global settings via service
                var proxyUrlSetting = await GlobalSettingService.GetSettingAsync("ProxyBaseUrl");
                string proxyUrl = proxyUrlSetting ?? "http://localhost:5000";
                
                bool notificationSuccess = await ConfigNotifier.NotifyConfigurationChangedAsync(proxyUrl);
                if (!notificationSuccess)
                {
                    _logger.LogWarning("Failed to notify proxy server about configuration changes. The server may need to be restarted.");
                    ToastService.ShowWarning("Configuration saved, but failed to notify proxy server. The server may need to be restarted.");
                    // We still proceed with navigation even if notification fails
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error notifying proxy server about configuration changes");
                // We still proceed with navigation even if notification fails
            }
            
            NavigationManager.NavigateTo("/configuration"); // Redirect back to the list
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error saving provider configuration");
            ToastService.ShowError($"Error saving provider: {ex.Message}");
        }
        finally
        {
            isSaving = false; // Reset saving flag
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/configuration");
    }

    private async Task TestConnection()
    {
        if (string.IsNullOrWhiteSpace(provider.ApiKey))
        {
            ToastService.ShowError("API key is required to test the connection");
            return;
        }

        isTestingConnection = true;
        showConnectionStatus = false;
        connectionStatus = null;
        StateHasChanged();

        try
        {
            // Test the connection using the appropriate method based on whether the provider is saved
            ProviderConnectionTestResultDto? testResult;
            if (Id.HasValue)
            {
                // For existing providers, use the ID-based test
                testResult = await ProviderCredentialService.TestConnectionAsync(provider.ProviderName);
            }
            else
            {
                // For new providers, use the credentials-based test
                testResult = await ProviderCredentialService.TestProviderConnectionWithCredentialsAsync(provider);
            }
            
            if (testResult != null && testResult.Success)
            {
                connectionStatus = new ProviderStatus
                {
                    Status = ProviderStatus.StatusType.Online,
                    StatusMessage = testResult.Message,
                    LastCheckedUtc = testResult.Timestamp,
                    IsOnline = true
                };
                connectionStatusMessage = "Connection successful! API key is valid and the service is reachable.";
                ToastService.ShowSuccess("Connection test successful! Provider is online.");
            }
            else
            {
                connectionStatus = new ProviderStatus
                {
                    Status = ProviderStatus.StatusType.Offline,
                    StatusMessage = testResult?.ErrorDetails ?? "Connection test failed",
                    LastCheckedUtc = testResult?.Timestamp ?? DateTime.UtcNow,
                    IsOnline = false
                };
                connectionStatusMessage = $"Connection failed: {connectionStatus.StatusMessage}";
                ToastService.ShowError($"Connection test failed: {connectionStatus.StatusMessage}");
            }
            showConnectionStatus = true;
        }
        finally
        {
            isTestingConnection = false;
            StateHasChanged();
        }
    }

    private void EditProvider(int id)
    {
        NavigationManager.NavigateTo($"/configuration/provider/edit/{id}");
    }

    private string GetProviderDescription(string providerName)
    {
        return providerName switch
        {
            "OpenAI" => "Provides access to GPT models from OpenAI.",
            "OpenAI Compatible" => "Provides access to any service with an OpenAI-compatible API.",
            "Anthropic" => "Provides access to Claude models from Anthropic.",
            "Cohere" => "Provides access to language models from Cohere.",
            "Gemini" => "Provides access to Gemini models from Google.",
            "Fireworks" => "Provides access to a variety of open-source and first-party models.",
            "OpenRouter" => "Provides unified API access to many LLM providers.",
            "Cerebras" => "Provides access to Cerebras Slimpajama models.",
            "AWS Bedrock" => "Provides access to foundation models via Amazon Bedrock.",
            "SageMaker" => "Provides access to hosted LLMs via AWS SageMaker.",
            "VertexAI" => "Provides access to Google Vertex AI models.",
            "HuggingFace" => "Provides access to HuggingFace Hub models.",
            "Groq" => "Provides ultra-fast inference via Groq.",
            "Mistral" => "Provides access to Mistral AI models.",
            _ => "Provides access to language models."
        };
    }
}