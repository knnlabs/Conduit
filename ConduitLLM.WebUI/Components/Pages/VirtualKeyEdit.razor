@page "/virtualkeys/edit/{id?}"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Logging
@using ConduitLLM.WebUI.Services
@using ConduitLLM.WebUI.Components
@using ConduitLLM.Configuration
@using ConduitLLM.Configuration.Entities
@using ConduitLLM.Configuration.DTOs.VirtualKey
@inject IDbContextFactory<ConfigurationDbContext> DbContextFactory
@inject NavigationManager NavigationManager
@inject ILogger<VirtualKeyEdit> Logger
@inject ConfigurationChangeNotifier ConfigChangeNotifier
@inject VirtualKeyService VirtualKeyService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<h1>@(Id.HasValue ? "Edit Virtual Key" : "Create Virtual Key")</h1>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else if (request == null && Id.HasValue)
{
    <p class="text-danger">Virtual key not found or error loading.</p>
}
else if (showCreatedKey)
{
    <div class="alert alert-success">
        <h4 class="alert-heading">Virtual Key Created Successfully!</h4>
        <p>Your new virtual key has been created. Please save this key as it will only be shown once:</p>
        <div class="input-group mb-3">
            <input type="text" readonly class="form-control bg-light" value="@createdKey" id="newKeyInput" />
            <button class="btn btn-outline-secondary" type="button" @onclick="CopyKeyToClipboard">
                <i class="bi bi-clipboard"></i> Copy
            </button>
        </div>
        <p class="mb-0">This key can be used to authenticate API requests. For security reasons, we only show this key once and store a secure hash.</p>
    </div>
    
    <div class="alert alert-warning">
        <p><i class="bi bi-exclamation-triangle-fill me-2"></i> Make sure to securely store this key. You won't be able to retrieve it again.</p>
    </div>
    
    <div class="mt-4">
        <button class="btn btn-primary" @onclick="ReturnToList">Return to Virtual Keys List</button>
    </div>
}
else
{
    <EditForm Model="@request" OnValidSubmit="HandleValidSubmit" FormName="VirtualKeyForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        <div class="row">
            <div class="col-md-6">
                <div class="card shadow-sm mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Key Details</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="keyName" class="form-label">Key Name:</label>
                            <InputText id="keyName" @bind-Value="request!.KeyName" class="form-control" />
                            <ValidationMessage For="@(() => request!.KeyName)" />
                            <div class="form-text">A friendly name to identify this key</div>
                        </div>

                        <div class="mb-3">
                            <label for="allowedModels" class="form-label">
                                Allowed Models (Optional): 
                                <span class="ms-1 text-muted" style="cursor: pointer;" data-bs-toggle="tooltip" title="Select specific models this key can access. Leave empty to allow all models. More restrictive keys are more secure.">
                                    <i class="bi bi-info-circle-fill"></i>
                                </span>
                                @if (availableModels != null && availableModels.Count > 0)
                                {
                                    <span class="badge bg-primary rounded-pill ms-2">
                                        @selectedModels.Count selected
                                    </span>
                                }
                            </label>
                            
                            <!-- Search and action buttons -->
                            <div class="input-group mb-2">
                                <input type="text" class="form-control" placeholder="Search models..." 
                                       @bind="modelSearchText" @bind:event="oninput" />
                                <button class="btn btn-outline-secondary" type="button" @onclick="() => SelectAllModels()">
                                    <i class="bi bi-check-all"></i> Select All
                                </button>
                                <button class="btn btn-outline-secondary" type="button" @onclick="() => ClearModelSelection()">
                                    <i class="bi bi-x-lg"></i> Clear All
                                </button>
                            </div>
                            
                            <div class="form-control" style="height: auto; max-height: 250px; overflow-y: auto; padding: 0;">
                                @if (availableModels == null || availableModels.Count == 0)
                                {
                                    <div class="p-3 text-muted">Loading models...</div>
                                }
                                else
                                {
                                    var filteredModels = FilterModels();
                                    var groupedModels = filteredModels
                                        .GroupBy(m => m.ProviderName)
                                        .OrderBy(g => g.Key)
                                        .ToList();
                                    
                                    if (groupedModels.Count == 0)
                                    {
                                        <div class="p-3 text-muted">No models match your search.</div>
                                    }
                                    else
                                    {
                                        @foreach (var group in groupedModels)
                                        {
                                            <div class="provider-group">
                                                <div class="provider-header p-2 bg-light border-bottom">
                                                    <strong>@group.Key</strong>
                                                    <span class="badge bg-secondary rounded-pill float-end">
                                                        @group.Count() model@(group.Count() != 1 ? "s" : "")
                                                    </span>
                                                </div>
                                                <div class="px-2 py-1">
                                                    @foreach (var model in group.OrderBy(m => m.ModelAlias))
                                                    {
                                                        <div class="form-check py-1">
                                                            <input class="form-check-input" type="checkbox" 
                                                                   id="model_@(model.ProviderModelId)" 
                                                                   checked="@selectedModels.Contains(model.ModelAlias)"
                                                                   @onchange="e => ToggleModelSelection(model.ModelAlias, (bool)e.Value!)" />
                                                            <label class="form-check-label d-block text-truncate" for="model_@(model.ProviderModelId)" 
                                                                  title="@model.ModelAlias">
                                                                @model.ModelAlias
                                                            </label>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                    }
                                }
                            </div>
                            <div class="form-text mt-1">
                                Specify which models this key can access, or leave empty to allow all models.
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card shadow-sm mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Rate Limits</h5>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3" role="alert">
                            <i class="bi bi-info-circle-fill me-2"></i> 
                            Rate limits help prevent abuse and manage API load. Set to 0 for no limit.
                        </div>
                        
                        <div class="mb-3">
                            <label for="rateLimitRpm" class="form-label">
                                Requests Per Minute (RPM):
                                <span class="ms-1 text-muted" style="cursor: pointer;" data-bs-toggle="tooltip" title="Maximum number of requests allowed per minute for this key. Set to 0 for no limit.">
                                    <i class="bi bi-info-circle-fill"></i>
                                </span>
                            </label>
                            <InputNumber id="rateLimitRpm" @bind-Value="request!.RateLimitRpm" class="form-control" />
                            <ValidationMessage For="@(() => request!.RateLimitRpm)" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="rateLimitRpd" class="form-label">
                                Requests Per Day (RPD):
                                <span class="ms-1 text-muted" style="cursor: pointer;" data-bs-toggle="tooltip" title="Maximum number of requests allowed per day for this key. Set to 0 for no limit.">
                                    <i class="bi bi-info-circle-fill"></i>
                                </span>
                            </label>
                            <InputNumber id="rateLimitRpd" @bind-Value="request!.RateLimitRpd" class="form-control" />
                            <ValidationMessage For="@(() => request!.RateLimitRpd)" />
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-md-6">
                <div class="card shadow-sm mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Budget Settings</h5>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info mb-3" role="alert">
                            <i class="bi bi-info-circle-fill me-2"></i> 
                            Set a budget limit for this key to control costs. The budget can reset on a schedule you define.
                        </div>
                        
                        <div class="mb-3">
                            <label for="maxBudget" class="form-label">
                                Max Budget ($):
                                <span class="ms-1 text-muted" style="cursor: pointer;" data-bs-toggle="tooltip" title="Maximum amount in USD this key can spend. Set to 0 for no budget limit.">
                                    <i class="bi bi-info-circle-fill"></i>
                                </span>
                            </label>
                            <InputNumber id="maxBudget" @bind-Value="request!.MaxBudget" class="form-control" />
                            <ValidationMessage For="@(() => request!.MaxBudget)" />
                            <div class="form-text">Set to 0 for no budget limit</div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="budgetDuration" class="form-label">
                                Budget Reset Schedule:
                                <span class="ms-1 text-muted" style="cursor: pointer;" data-bs-toggle="tooltip" title="How often the budget should reset. Select 'Never' if you want a fixed budget without reset.">
                                    <i class="bi bi-info-circle-fill"></i>
                                </span>
                            </label>
                            <InputSelect id="budgetDuration" @bind-Value="request!.BudgetDuration" class="form-control">
                                <option value="">Never (Fixed Budget)</option>
                                <option value="Daily">Daily</option>
                                <option value="Weekly">Weekly</option>
                                <option value="Monthly">Monthly</option>
                                <option value="Quarterly">Quarterly</option>
                                <option value="Yearly">Yearly</option>
                            </InputSelect>
                            <div class="form-text">How often the budget resets</div>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(request!.BudgetDuration))
                        {
                            <div class="mb-3">
                                <label for="budgetStartDate" class="form-label">Budget Start Date:</label>
                                <InputDate id="budgetStartDate" @bind-Value="budgetStartDate" class="form-control" />
                                <div class="form-text">The date from which budget cycles are calculated</div>
                            </div>
                        }
                        
                        @if (Id.HasValue && request?.MaxBudget.HasValue == true && request.MaxBudget > 0)
                        {
                            <div class="mb-3">
                                <label class="form-label">Current Budget Usage:</label>
                                <div class="d-flex align-items-center mb-2">
                                    <div class="progress flex-grow-1" style="height: 20px;">
                                        @{
                                            var percentage = (int)(request.MaxBudget > 0 
                                                ? Math.Min(100, (currentSpend / request.MaxBudget.Value) * 100) 
                                                : 0);
                                            var progressClass = percentage < 60 
                                                ? "bg-success" 
                                                : (percentage < 85 ? "bg-warning" : "bg-danger");
                                        }
                                        <div class="progress-bar @progressClass" role="progressbar" 
                                             style="width: @(percentage)%;" 
                                             aria-valuenow="@percentage" aria-valuemin="0" aria-valuemax="100">
                                            @percentage%
                                        </div>
                                    </div>
                                    <button type="button" class="btn btn-sm btn-outline-secondary ms-2" @onclick="ResetCurrentSpend">
                                        <i class="bi bi-arrow-counterclockwise"></i>
                                        Reset
                                    </button>
                                </div>
                                <div class="d-flex justify-content-between text-muted">
                                    <span>$@(currentSpend.ToString("0.000000"))</span>
                                    <span>of $@(request.MaxBudget?.ToString("0.000000"))</span>
                                </div>
                                @if (!string.IsNullOrEmpty(request!.BudgetDuration) && budgetStartDate.HasValue)
                                {
                                    <div class="mt-2 text-muted">
                                        <i class="bi bi-calendar-event me-1"></i>
                                        Next reset: @(GetNextBudgetResetDate(request.BudgetDuration, budgetStartDate))
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
                
                <div class="card shadow-sm mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Key Details</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="description" class="form-label">Description (Optional):</label>
                            <InputTextArea id="description" @bind-Value="description" class="form-control" rows="3" />
                            <div class="form-text">A description of what this key is used for</div>
                        </div>

                        <div class="mb-3">
                            <label for="expirationDate" class="form-label">
                                Expiration Date (Optional):
                                <span class="ms-1 text-muted" style="cursor: pointer;" data-bs-toggle="tooltip" title="Date when this key will expire. Leave empty for a non-expiring key.">
                                    <i class="bi bi-info-circle-fill"></i>
                                </span>
                            </label>
                            <InputDate id="expirationDate" @bind-Value="request!.ExpiresAt" class="form-control" />
                            <div class="form-text">Leave empty for a key that never expires</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row mt-3">
            <div class="col-12">
                <button type="submit" class="btn btn-primary" disabled="@isSaving">
                    @if (isSaving)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-1">Saving...</span>
                    }
                    else
                    {
                        <span>@(Id.HasValue ? "Update Key" : "Create Key")</span>
                    }
                </button>
                <button type="button" class="btn btn-outline-secondary ms-2" @onclick="Cancel">Cancel</button>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int? Id { get; set; }
    
    private bool isLoading = true;
    private bool isSaving = false;
    private string? errorMessage;
    private UpdateVirtualKeyRequestDto? request;
    private List<ModelMappingViewModel>? availableModels;
    private HashSet<string> selectedModels = new();
    private string modelSearchText = "";
    private decimal currentSpend = 0;
    private bool showCreatedKey = false;
    private string createdKey = "";
    private string? description; // Field to hold description since UpdateVirtualKeyRequestDto doesn't have it
    private DateTime? budgetStartDate; // Field to hold budget start date

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadAvailableModelsAsync();
            
            if (Id.HasValue)
            {
                await LoadVirtualKey();
            }
            else
            {
                // Create a new request
                request = new UpdateVirtualKeyRequestDto
                {
                    KeyName = "",
                    MaxBudget = 0,
                    BudgetDuration = "",
                    ExpiresAt = null,
                    AllowedModels = "",
                    RateLimitRpm = 0,
                    RateLimitRpd = 0
                };
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
            Logger.LogError(ex, "Error initializing VirtualKeyEdit component");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task LoadVirtualKey()
    {
        if (!Id.HasValue) return;
        
        try
        {
            var key = await VirtualKeyService.GetVirtualKeyInfoAsync(Id.Value);
            if (key == null)
            {
                return;
            }
            
            // Initialize the request from the existing key
            request = new UpdateVirtualKeyRequestDto
            {
                KeyName = key.KeyName,
                MaxBudget = key.MaxBudget,
                BudgetDuration = key.BudgetDuration,
                ExpiresAt = key.ExpiresAt,
                AllowedModels = key.AllowedModels,
                RateLimitRpm = key.RateLimitRpm,
                RateLimitRpd = key.RateLimitRpd
            };
            
            description = key.Metadata; // Use metadata for description 
            budgetStartDate = key.BudgetStartDate; // Store the budget start date separately
            
            // Parse allowed models
            if (!string.IsNullOrEmpty(key.AllowedModels))
            {
                selectedModels = new HashSet<string>(key.AllowedModels.Split(',', StringSplitOptions.RemoveEmptyEntries));
            }
            
            currentSpend = key.CurrentSpend;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading virtual key: {ex.Message}";
            Logger.LogError(ex, "Error loading virtual key with ID {KeyId}", Id);
        }
    }
    
    private async Task LoadAvailableModelsAsync()
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            // Load model mappings from the consolidated context
            availableModels = await dbContext.ModelProviderMappings
                .Include(m => m.ProviderCredential)
                .Select(m => new ModelMappingViewModel
                {
                    ModelAlias = m.ModelAlias,
                    ProviderName = m.ProviderCredential.ProviderName,
                    ProviderModelId = m.ProviderModelName
                })
                .ToListAsync();
                
            if (Id.HasValue && !string.IsNullOrEmpty(request?.AllowedModels))
            {
                selectedModels = new HashSet<string>(
                    request.AllowedModels.Split(',', StringSplitOptions.RemoveEmptyEntries));
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading available models");
            errorMessage = "Failed to load available models. See logs for details.";
        }
    }
    
    private List<ModelMappingViewModel> FilterModels()
    {
        if (availableModels == null) return new List<ModelMappingViewModel>();
        
        if (string.IsNullOrWhiteSpace(modelSearchText))
            return availableModels;
            
        return availableModels
            .Where(m => 
                m.ModelAlias.Contains(modelSearchText, StringComparison.OrdinalIgnoreCase) ||
                m.ProviderName.Contains(modelSearchText, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }
    
    private void ToggleModelSelection(string modelKey, bool isSelected)
    {
        if (isSelected)
            selectedModels.Add(modelKey);
        else
            selectedModels.Remove(modelKey);
    }
    
    private void SelectAllModels()
    {
        if (availableModels == null) return;
        
        var filteredModels = FilterModels();
        foreach (var model in filteredModels)
        {
            selectedModels.Add(model.ModelAlias);
        }
    }
    
    private void ClearModelSelection()
    {
        if (modelSearchText.Length > 0)
        {
            // If there's a search filter, only clear the filtered items
            var filteredModelKeys = FilterModels()
                .Select(m => m.ModelAlias)
                .ToList();
                
            foreach (var key in filteredModelKeys)
            {
                selectedModels.Remove(key);
            }
        }
        else
        {
            // Clear all selections
            selectedModels.Clear();
        }
    }
    
    private async Task HandleValidSubmit()
    {
        if (request == null) return;
        
        try
        {
            isSaving = true;
            
            // Update the allowed models from the selection
            request.AllowedModels = string.Join(",", selectedModels);
            
            if (Id.HasValue)
            {
                // Update an existing key
                // Also set the metadata field to store the description
                request.Metadata = description;
                
                var result = await VirtualKeyService.UpdateVirtualKeyAsync(Id.Value, request);
                if (result)
                {
                    NavigationManager.NavigateTo("/virtualkeys");
                }
                else
                {
                    errorMessage = "Failed to update the virtual key";
                }
            }
            else
            {
                // Create a new key
                var createRequest = new CreateVirtualKeyRequestDto
                {
                    KeyName = request.KeyName ?? "",
                    AllowedModels = request.AllowedModels,
                    MaxBudget = request.MaxBudget,
                    BudgetDuration = request.BudgetDuration,
                    ExpiresAt = request.ExpiresAt,
                    Metadata = description,
                    RateLimitRpm = request.RateLimitRpm,
                    RateLimitRpd = request.RateLimitRpd
                };
                
                var response = await VirtualKeyService.GenerateVirtualKeyAsync(createRequest);
                if (response != null)
                {
                    createdKey = response.VirtualKey;
                    showCreatedKey = true;
                }
                else
                {
                    errorMessage = "Failed to create the virtual key";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Error saving virtual key");
        }
        finally
        {
            isSaving = false;
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/virtualkeys");
    }
    
    private void ReturnToList()
    {
        NavigationManager.NavigateTo("/virtualkeys");
    }

    private async Task ResetCurrentSpend()
    {
        if (!Id.HasValue) return;
        
        try
        {
            var success = await VirtualKeyService.ResetSpendAsync(Id.Value);
            if (success)
            {
                currentSpend = 0;
                StateHasChanged();
            }
            else
            {
                errorMessage = "Failed to reset spend. The key may have been deleted.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error resetting spend: {ex.Message}";
            Logger.LogError(ex, "Error resetting spend for virtual key with ID {KeyId}", Id);
        }
    }
    
    private async Task CopyKeyToClipboard()
    {
        if (string.IsNullOrEmpty(createdKey)) return;
        
        try
        {
            await JSRuntime.InvokeAsync<object>("navigator.clipboard.writeText", createdKey);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error copying key to clipboard");
        }
    }
    
    // View model for model mappings
    private class ModelMappingViewModel
    {
        public string ModelAlias { get; set; } = string.Empty;
        public string ProviderName { get; set; } = string.Empty;
        public string ProviderModelId { get; set; } = string.Empty;
    }

    private string GetNextBudgetResetDate(string budgetDuration, DateTime? budgetStartDate)
    {
        if (string.IsNullOrEmpty(budgetDuration) || !budgetStartDate.HasValue)
            return "N/A";

        DateTime start = budgetStartDate.Value;
        DateTime now = DateTime.UtcNow;
        DateTime nextReset;

        switch (budgetDuration.ToLowerInvariant())
        {
            case "daily":
                nextReset = now.Date.AddDays(1);
                break;
            case "weekly":
                // Calculate days until next week starts from the original start day
                int daysUntilNextWeek = ((int)start.DayOfWeek - (int)now.DayOfWeek + 7) % 7;
                if (daysUntilNextWeek == 0) daysUntilNextWeek = 7; // If today is the reset day, move to next week
                nextReset = now.Date.AddDays(daysUntilNextWeek);
                break;
            case "monthly":
                // Calculate next month with same day
                int day = Math.Min(start.Day, DateTime.DaysInMonth(now.Year, now.Month));
                if (now.Day < day)
                    nextReset = new DateTime(now.Year, now.Month, day);
                else
                    nextReset = new DateTime(
                        now.Month == 12 ? now.Year + 1 : now.Year,
                        now.Month == 12 ? 1 : now.Month + 1,
                        Math.Min(start.Day, DateTime.DaysInMonth(
                            now.Month == 12 ? now.Year + 1 : now.Year,
                            now.Month == 12 ? 1 : now.Month + 1)));
                break;
            case "quarterly":
                // Calculate the current quarter
                int currentQuarter = (now.Month - 1) / 3;
                // Calculate the next quarter's first month
                int nextQuarterMonth = (currentQuarter + 1) * 3 + 1;
                int nextQuarterYear = now.Year;
                if (nextQuarterMonth > 12)
                {
                    nextQuarterMonth -= 12;
                    nextQuarterYear += 1;
                }
                nextReset = new DateTime(
                    nextQuarterYear,
                    nextQuarterMonth,
                    Math.Min(start.Day, DateTime.DaysInMonth(nextQuarterYear, nextQuarterMonth)));
                break;
            case "yearly":
                // Calculate next yearly reset
                if (now.Month < start.Month || (now.Month == start.Month && now.Day < start.Day))
                    nextReset = new DateTime(now.Year, start.Month, Math.Min(start.Day, DateTime.DaysInMonth(now.Year, start.Month)));
                else
                    nextReset = new DateTime(now.Year + 1, start.Month, Math.Min(start.Day, DateTime.DaysInMonth(now.Year + 1, start.Month)));
                break;
            default:
                return "N/A";
        }

        return nextReset.ToString("yyyy-MM-dd");
    }
}
