@page "/virtualkeys/edit/{id?}"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Logging
@using ConduitLLM.WebUI.Services
@using ConduitLLM.WebUI.Components
@using ConduitLLM.Configuration
@using ConduitLLM.Configuration.Entities
@using ConduitLLM.Configuration.DTOs.VirtualKey
@inject IDbContextFactory<ConfigurationDbContext> DbContextFactory
@inject NavigationManager NavigationManager
@inject ILogger<VirtualKeyEdit> Logger
@inject ConfigurationChangeNotifier ConfigChangeNotifier
@inject ConduitLLM.WebUI.Interfaces.IVirtualKeyService VirtualKeyService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<style>
    .form-section {
        margin-bottom: 2rem;
    }
    .model-list {
        max-height: 250px;
        overflow-y: auto;
        border: 1px solid #ddd;
        border-radius: 4px;
    }
    .badge {
        font-size: 0.85em;
    }
    .model-provider-group {
        background-color: #f8f9fa;
        padding: 0.5rem;
        font-weight: 500;
    }
</style>

<h3 class="mb-4">@(Id.HasValue ? "Edit Virtual Key" : "Create Virtual Key")</h3>

@if (isLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (request == null && Id.HasValue)
{
    <div class="alert alert-danger" role="alert">Virtual key not found or error loading.</div>
}
else if (showCreatedKey)
{
    <div class="alert alert-success mb-4" role="alert">
        <h5 class="mb-2">Virtual Key Created Successfully!</h5>
        <p>Your new virtual key has been created. Please save this key as it will only be shown once:</p>
        <div class="d-flex align-items-center mt-3 mb-3">
            <input type="text" readonly value="@createdKey" class="form-control flex-grow-1 me-2" id="newKeyInput" />
            <button class="btn btn-sm btn-secondary" @onclick="async () => await CopyKeyToClipboard()"><i class="fa fa-copy"></i></button>
        </div>
        <p>This key can be used to authenticate API requests. For security reasons, we only show this key once and store a secure hash.</p>
    </div>
    
    <div class="alert alert-warning mb-4" role="alert">
        <div class="d-flex">
            <i class="fa fa-exclamation-triangle me-2"></i>
            <span>Make sure to securely store this key. You won't be able to retrieve it again.</span>
        </div>
    </div>
    
    <div class="mt-4">
        <button type="button" class="btn btn-primary" @onclick="ReturnToList">Return to Virtual Keys List</button>
    </div>
}
else
{
    <EditForm Model="@request" OnValidSubmit="HandleValidSubmit" FormName="VirtualKeyForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mb-4" role="alert">@errorMessage</div>
        }

        <div class="row">
            <div class="col-12 col-md-6">
                <div class="card shadow-sm p-4 mb-4">
                    <h6 class="mb-3">Key Details</h6>
                    
                    <div class="mb-4">
                        <label for="keyName" class="form-label">Key Name</label>
                        <input type="text" class="form-control" id="keyName" @bind="request!.KeyName" />
                        <div class="form-text">A friendly name to identify this key</div>
                    </div>

                    <div class="mb-4">
                        <div class="d-flex align-center mb-2">
                            <span class="me-2">Allowed Models (Optional):</span>
                            <span title="Select specific models this key can access. Leave empty to allow all models. More restrictive keys are more secure.">
                                <i class="fa fa-info-circle small"></i>
                            </span>
                            @if (availableModels != null && availableModels.Count > 0)
                            {
                                <span class="badge bg-primary ms-2">@selectedModels.Count selected</span>
                            }
                        </div>
                        
                        <div class="d-flex mb-2">
                            <input type="text" class="form-control flex-grow-1 me-2" placeholder="Search models..." @bind="modelSearchText" @bind:event="oninput" />
                            <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="SelectAllModels">
                                <i class="fa fa-check-square-o small me-1"></i>
                                Select All
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-danger ms-2" @onclick="ClearModelSelection">
                                <i class="fa fa-times small me-1"></i>
                                Clear All
                            </button>
                        </div>
                        
                        <div class="border p-0" style="height: 250px; overflow-y: auto;">
                            @if (availableModels == null)
                            {
                                <div class="spinner-border text-primary m-3" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            }
                            else if (availableModels.Count == 0)
                            {
                                <p class="p-3 text-secondary">No models available. Please add model mappings to the database.</p>
                            }
                            else
                            {
                                var filteredModels = FilterModels();
                                var groupedModels = filteredModels
                                    .GroupBy(m => m.ProviderName)
                                    .OrderBy(g => g.Key)
                                    .ToList();
                                
                                if (groupedModels.Count == 0)
                                {
                                    <p class="p-3 text-secondary">No models match your search.</p>
                                }
                                else
                                {
                                    @foreach (var group in groupedModels)
                                    {
                                        <div>
                                            <div class="p-2 d-flex justify-content-between bg-light fw-medium">
                                                <span>@group.Key</span>
                                                <span class="badge bg-secondary">
                                                    @group.Count() model@(group.Count() != 1 ? "s" : "")
                                                </span>
                                            </div>
                                            <div class="p-2">
                                                @foreach (var model in group.OrderBy(m => m.ModelAlias))
                                                {
                                                    <div class="form-check py-1">
                                                        <input class="form-check-input" type="checkbox" 
                                                               checked="@selectedModels.Contains(model.ModelAlias)"
                                                               @onchange="@(e => ToggleModelSelection(model.ModelAlias, (bool)e.Value!))" 
                                                               id="model_@model.ModelAlias.Replace(".", "_")" />
                                                        <label class="form-check-label" for="model_@model.ModelAlias.Replace(".", "_")">
                                                            @model.ModelAlias
                                                        </label>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }
                                }
                            }
                        </div>
                        <div class="form-text mt-1">
                            Specify which models this key can access, or leave empty to allow all models.
                        </div>
                    </div>
                </div>
                
                <div class="card shadow-sm p-4 mb-4">
                    <h6 class="mb-3">Rate Limits</h6>
                    
                    <div class="alert alert-info mb-4" role="alert">
                        Rate limits help prevent abuse and manage API load. Set to 0 for no limit.
                    </div>
                    
                    <div class="mb-4">
                        <div class="d-flex align-center mb-2">
                            <span>Requests Per Minute (RPM):</span>
                            <span class="ms-2" title="Maximum number of requests allowed per minute for this key. Set to 0 for no limit.">
                                <i class="fa fa-info-circle small"></i>
                            </span>
                        </div>
                        <input type="number" class="form-control" @bind="request!.RateLimitRpm" min="0" />
                    </div>
                    
                    <div class="mb-3">
                        <div class="d-flex align-center mb-2">
                            <span>Requests Per Day (RPD):</span>
                            <span class="ms-2" title="Maximum number of requests allowed per day for this key. Set to 0 for no limit.">
                                <i class="fa fa-info-circle small"></i>
                            </span>
                        </div>
                        <input type="number" class="form-control" @bind="request!.RateLimitRpd" min="0" />
                    </div>
                </div>
            </div>
            
            <div class="col-12 col-md-6">
                <div class="card shadow-sm p-4 mb-4">
                    <h6 class="mb-3">Budget Settings</h6>
                    
                    <div class="alert alert-info mb-4" role="alert">
                        Set a budget limit for this key to control costs. The budget can reset on a schedule you define.
                    </div>
                    
                    <div class="mb-4">
                        <div class="d-flex align-center mb-2">
                            <span>Max Budget ($):</span>
                            <span class="ms-2" title="Maximum amount in USD this key can spend. Set to 0 for no budget limit.">
                                <i class="fa fa-info-circle small"></i>
                            </span>
                        </div>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <input type="number" class="form-control" @bind="request!.MaxBudget" min="0" step="0.01" placeholder="Enter budget amount" />
                        </div>
                        <div class="form-text">Set to 0 for no budget limit</div>
                    </div>
                    
                    <div class="mb-4">
                        <div class="d-flex align-center mb-2">
                            <span>Budget Reset Schedule:</span>
                            <span class="ms-2" title="How often the budget should reset. Select 'Never' if you want a fixed budget without reset.">
                                <i class="fa fa-info-circle small"></i>
                            </span>
                        </div>
                        <select class="form-select mb-2" @bind="request!.BudgetDuration">
                            <option value="">Never (Fixed Budget)</option>
                            <option value="Daily">Daily</option>
                            <option value="Weekly">Weekly</option>
                            <option value="Monthly">Monthly</option>
                            <option value="Quarterly">Quarterly</option>
                            <option value="Yearly">Yearly</option>
                        </select>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(request!.BudgetDuration))
                    {
                        <div class="mb-4">
                            <label for="budgetStartDate" class="form-label">Budget Start Date</label>
                            <input type="date" class="form-control" id="budgetStartDate" @bind="budgetStartDate" @bind:format="yyyy-MM-dd" />
                            <div class="form-text">The date from which budget cycles are calculated</div>
                        </div>
                    }
                    
                    @if (Id.HasValue && request?.MaxBudget.HasValue == true && request.MaxBudget > 0)
                    {
                        <div class="mb-3">
                            <p class="mb-2">Current Budget Usage:</p>
                            <div class="d-flex align-items-center mb-2">
                                @{
                                    var percentage = (int)(request.MaxBudget > 0 
                                        ? Math.Min(100, (currentSpend / request.MaxBudget.Value) * 100) 
                                        : 0);
                                    var progressClass = percentage < 60 
                                        ? "bg-success" 
                                        : (percentage < 85 ? "bg-warning" : "bg-danger");
                                }
                                <div class="progress flex-grow-1 me-2" style="height: 10px;">
                                    <div class="progress-bar @progressClass" role="progressbar" style="width: @percentage%" aria-valuenow="@percentage" aria-valuemin="0" aria-valuemax="100">
                                        <span class="visually-hidden">@percentage%</span>
                                    </div>
                                </div>
                                <small class="text-secondary">@percentage%</small>
                                <button type="button" class="btn btn-sm btn-outline-secondary ms-2" @onclick="ResetCurrentSpend">
                                    <i class="fa fa-refresh"></i>
                                </button>
                            </div>
                            <div class="d-flex justify-content-between">
                                <small class="text-secondary">$@(currentSpend.ToString("0.000000"))</small>
                                <small class="text-secondary">of $@(request.MaxBudget?.ToString("0.000000"))</small>
                            </div>
                            @if (!string.IsNullOrEmpty(request!.BudgetDuration) && budgetStartDate.HasValue)
                            {
                                <div class="mt-2 d-flex align-items-center text-secondary small">
                                    <i class="fa fa-calendar me-1"></i>
                                    Next reset: @(GetNextBudgetResetDate(request.BudgetDuration, budgetStartDate))
                                </div>
                            }
                        </div>
                    }
                </div>
                
                <div class="card shadow-sm p-4 mb-4">
                    <h6 class="mb-3">Limits</h6>
                    
                    <div class="mb-4">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="setMaxSpend" @bind="_setMaxSpend" />
                            <label class="form-check-label" for="setMaxSpend">Set Max Spend</label>
                        </div>
                        @if (_setMaxSpend)
                        {
                            <div class="mt-2">
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input type="number" class="form-control" @bind="request!.MaxBudget" min="0" step="0.01" />
                                </div>
                                <div class="form-text">Set to 0 for no budget limit</div>
                            </div>
                        }
                    </div>
                </div>
                
                <div class="card shadow-sm p-4 mb-4">
                    <h6 class="mb-3">Key Details</h6>
                    
                    <div class="mb-4">
                        <label for="description" class="form-label">Description (Optional)</label>
                        <textarea class="form-control" id="description" rows="3" @bind="description"></textarea>
                        <div class="form-text">A description of what this key is used for</div>
                    </div>
                    
                    <div class="mb-3">
                        <div class="d-flex align-items-center mb-2">
                            <span>Expiration Date (Optional):</span>
                            <span class="ms-2" title="Date when this key will expire. Leave empty for a non-expiring key.">
                                <i class="fa fa-info-circle small"></i>
                            </span>
                        </div>
                        <input type="date" class="form-control" id="expirationDate" @bind="request!.ExpiresAt" @bind:format="yyyy-MM-dd" />
                        <div class="form-text">Leave empty for a key that never expires</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="d-flex gap-2 mt-4">
            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    <span>Saving...</span>
                }
                else
                {
                    <i class="fa fa-@(Id.HasValue ? "save" : "plus") me-1"></i>
                    <span>@(Id.HasValue ? "Update Key" : "Create Key")</span>
                }
            </button>
            <button type="button" class="btn btn-outline-secondary" @onclick="Cancel">
                Cancel
            </button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int? Id { get; set; }
    
    private bool isLoading = true;
    private bool isSaving = false;
    private string? errorMessage;
    private UpdateVirtualKeyRequestDto? request;
    private List<ModelMappingViewModel>? availableModels;
    private HashSet<string> selectedModels = new();
    private string modelSearchText = "";
    private decimal currentSpend = 0;
    private bool showCreatedKey = false;
    private string createdKey = "";
    private string? description; // Field to hold description since UpdateVirtualKeyRequestDto doesn't have it
    private DateTime? budgetStartDate; // Field to hold budget start date
    private bool _setMaxSpend = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadAvailableModelsAsync();
            
            if (Id.HasValue)
            {
                await LoadVirtualKey();
            }
            else
            {
                // Create a new request
                request = new UpdateVirtualKeyRequestDto
                {
                    KeyName = "",
                    MaxBudget = 0,
                    BudgetDuration = "",
                    ExpiresAt = null,
                    AllowedModels = "",
                    RateLimitRpm = 0,
                    RateLimitRpd = 0
                };
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
            Logger.LogError(ex, "Error initializing VirtualKeyEdit component");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task LoadVirtualKey()
    {
        if (!Id.HasValue) return;
        
        try
        {
            var key = await VirtualKeyService.GetVirtualKeyInfoAsync(Id.Value);
            if (key == null)
            {
                return;
            }
            
            // Initialize the request from the existing key
            request = new UpdateVirtualKeyRequestDto
            {
                KeyName = key.KeyName,
                MaxBudget = key.MaxBudget,
                BudgetDuration = key.BudgetDuration,
                ExpiresAt = key.ExpiresAt,
                AllowedModels = key.AllowedModels,
                RateLimitRpm = key.RateLimitRpm,
                RateLimitRpd = key.RateLimitRpd
            };
            
            description = key.Metadata; // Use metadata for description 
            budgetStartDate = key.BudgetStartDate; // Store the budget start date separately
            
            // Parse allowed models
            if (!string.IsNullOrEmpty(key.AllowedModels))
            {
                selectedModels = new HashSet<string>(key.AllowedModels.Split(',', StringSplitOptions.RemoveEmptyEntries));
            }
            
            currentSpend = key.CurrentSpend;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading virtual key: {ex.Message}";
            Logger.LogError(ex, "Error loading virtual key with ID {KeyId}", Id);
        }
    }
    
    private async Task LoadAvailableModelsAsync()
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            // Load model mappings from the consolidated context
            var query = dbContext.ModelProviderMappings
                .Include(m => m.ProviderCredential);
            
            // Log the SQL query for troubleshooting
            var queryString = query.ToQueryString();
            Logger.LogInformation("Models query: {Query}", queryString);
            
            availableModels = await query
                .Select(m => new ModelMappingViewModel
                {
                    ModelAlias = m.ModelAlias,
                    ProviderName = m.ProviderCredential.ProviderName,
                    ProviderModelId = m.ProviderModelName
                })
                .ToListAsync();
            
            Logger.LogInformation("Loaded {Count} models from database", availableModels.Count);
            
            if (Id.HasValue && !string.IsNullOrEmpty(request?.AllowedModels))
            {
                selectedModels = new HashSet<string>(
                    request.AllowedModels.Split(',', StringSplitOptions.RemoveEmptyEntries));
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading available models");
            errorMessage = "Failed to load model mappings. Please check database configuration.";
            
            // Initialize to empty list instead of null to avoid spinner
            availableModels = new List<ModelMappingViewModel>();
        }
    }
    
    private List<ModelMappingViewModel> FilterModels()
    {
        if (availableModels == null) return new List<ModelMappingViewModel>();
        
        if (string.IsNullOrWhiteSpace(modelSearchText))
            return availableModels;
            
        return availableModels
            .Where(m => 
                m.ModelAlias.Contains(modelSearchText, StringComparison.OrdinalIgnoreCase) ||
                m.ProviderName.Contains(modelSearchText, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }
    
    private void ToggleModelSelection(string modelKey, bool isSelected)
    {
        if (isSelected)
            selectedModels.Add(modelKey);
        else
            selectedModels.Remove(modelKey);
    }
    
    private void SelectAllModels()
    {
        if (availableModels == null) return;
        
        var filteredModels = FilterModels();
        foreach (var model in filteredModels)
        {
            selectedModels.Add(model.ModelAlias);
        }
    }
    
    private void ClearModelSelection()
    {
        if (modelSearchText.Length > 0)
        {
            // If there's a search filter, only clear the filtered items
            var filteredModelKeys = FilterModels()
                .Select(m => m.ModelAlias)
                .ToList();
                
            foreach (var key in filteredModelKeys)
            {
                selectedModels.Remove(key);
            }
        }
        else
        {
            // Clear all selections
            selectedModels.Clear();
        }
    }
    
    private async Task HandleValidSubmit()
    {
        if (request == null) return;
        
        try
        {
            isSaving = true;
            
            // Update the allowed models from the selection
            request.AllowedModels = string.Join(",", selectedModels);
            
            if (Id.HasValue)
            {
                // Update an existing key
                // Also set the metadata field to store the description
                request.Metadata = description;
                
                var result = await VirtualKeyService.UpdateVirtualKeyAsync(Id.Value, request);
                if (result)
                {
                    NavigationManager.NavigateTo("/virtualkeys");
                }
                else
                {
                    errorMessage = "Failed to update the virtual key";
                }
            }
            else
            {
                // Create a new key
                var createRequest = new CreateVirtualKeyRequestDto
                {
                    KeyName = request.KeyName ?? "",
                    AllowedModels = request.AllowedModels,
                    MaxBudget = request.MaxBudget,
                    BudgetDuration = request.BudgetDuration,
                    ExpiresAt = request.ExpiresAt,
                    Metadata = description,
                    RateLimitRpm = request.RateLimitRpm,
                    RateLimitRpd = request.RateLimitRpd
                };
                
                var response = await VirtualKeyService.GenerateVirtualKeyAsync(createRequest);
                if (response != null)
                {
                    createdKey = response.VirtualKey;
                    showCreatedKey = true;
                }
                else
                {
                    errorMessage = "Failed to create the virtual key";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Error saving virtual key");
        }
        finally
        {
            isSaving = false;
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/virtualkeys");
    }
    
    private void ReturnToList()
    {
        NavigationManager.NavigateTo("/virtualkeys");
    }

    private async Task ResetCurrentSpend()
    {
        if (!Id.HasValue) return;
        
        try
        {
            var success = await VirtualKeyService.ResetSpendAsync(Id.Value);
            if (success)
            {
                currentSpend = 0;
                StateHasChanged();
            }
            else
            {
                errorMessage = "Failed to reset spend. The key may have been deleted.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error resetting spend: {ex.Message}";
            Logger.LogError(ex, "Error resetting spend for virtual key with ID {KeyId}", Id);
        }
    }
    
    private async Task CopyKeyToClipboard()
    {
        if (string.IsNullOrEmpty(createdKey)) return;
        
        try
        {
            // Use our new copyToClipboard utility function instead
            await JSRuntime.InvokeVoidAsync("copyToClipboard", createdKey);
            
            // Provide user feedback
            await JSRuntime.InvokeVoidAsync("alert", "Key copied to clipboard!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error copying key to clipboard");
            await JSRuntime.InvokeVoidAsync("alert", "Failed to copy key: " + ex.Message);
        }
    }
    
    // View model for model mappings
    private class ModelMappingViewModel
    {
        public string ModelAlias { get; set; } = string.Empty;
        public string ProviderName { get; set; } = string.Empty;
        public string ProviderModelId { get; set; } = string.Empty;
    }

    private string GetNextBudgetResetDate(string budgetDuration, DateTime? budgetStartDate)
    {
        if (string.IsNullOrEmpty(budgetDuration) || !budgetStartDate.HasValue)
            return "N/A";

        DateTime start = budgetStartDate.Value;
        DateTime now = DateTime.UtcNow;
        DateTime nextReset;

        switch (budgetDuration.ToLowerInvariant())
        {
            case "daily":
                nextReset = now.Date.AddDays(1);
                break;
            case "weekly":
                // Calculate days until next week starts from the original start day
                int daysUntilNextWeek = ((int)start.DayOfWeek - (int)now.DayOfWeek + 7) % 7;
                if (daysUntilNextWeek == 0) daysUntilNextWeek = 7; // If today is the reset day, move to next week
                nextReset = now.Date.AddDays(daysUntilNextWeek);
                break;
            case "monthly":
                // Calculate next month with same day
                int day = Math.Min(start.Day, DateTime.DaysInMonth(now.Year, now.Month));
                if (now.Day < day)
                    nextReset = new DateTime(now.Year, now.Month, day);
                else
                    nextReset = new DateTime(
                        now.Month == 12 ? now.Year + 1 : now.Year,
                        now.Month == 12 ? 1 : now.Month + 1,
                        Math.Min(start.Day, DateTime.DaysInMonth(
                            now.Month == 12 ? now.Year + 1 : now.Year,
                            now.Month == 12 ? 1 : now.Month + 1)));
                break;
            case "quarterly":
                // Calculate the current quarter
                int currentQuarter = (now.Month - 1) / 3;
                // Calculate the next quarter's first month
                int nextQuarterMonth = (currentQuarter + 1) * 3 + 1;
                int nextQuarterYear = now.Year;
                if (nextQuarterMonth > 12)
                {
                    nextQuarterMonth -= 12;
                    nextQuarterYear += 1;
                }
                nextReset = new DateTime(
                    nextQuarterYear,
                    nextQuarterMonth,
                    Math.Min(start.Day, DateTime.DaysInMonth(nextQuarterYear, nextQuarterMonth)));
                break;
            case "yearly":
                // Calculate next yearly reset
                if (now.Month < start.Month || (now.Month == start.Month && now.Day < start.Day))
                    nextReset = new DateTime(now.Year, start.Month, Math.Min(start.Day, DateTime.DaysInMonth(now.Year, start.Month)));
                else
                    nextReset = new DateTime(now.Year + 1, start.Month, Math.Min(start.Day, DateTime.DaysInMonth(now.Year + 1, start.Month)));
                break;
            default:
                return "N/A";
        }

        return nextReset.ToString("yyyy-MM-dd");
    }
}
