@page "/model-costs"
@using ConduitLLM.Configuration.Entities
@using ConduitLLM.Configuration.Services
@using Microsoft.Extensions.Logging
@inject IModelCostService ModelCostService
@inject IJSRuntime JSRuntime
@inject ILogger<ModelCosts> Logger
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Model Cost Management</PageTitle>

<h2 class="mb-4">Model Cost Management</h2>

<div class="alert alert-info mb-4">
    <div>
        <p>Model costs are used to calculate usage spending for virtual keys and enforce budgets.</p>
        <p>The <strong>ModelIdPattern</strong> supports wildcards (e.g., "openai/gpt-4*" or "*-embedding*") for matching multiple models with a single cost entry.</p>
    </div>
</div>

<div class="card mb-4 shadow-sm">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Model Costs</h5>
        <div class="btn-toolbar">
            <button class="btn btn-outline-primary btn-sm me-2" @onclick="RefreshModelCosts">
                <i class="fa fa-refresh me-1"></i> Refresh
            </button>
            <button class="btn btn-outline-primary btn-sm me-2" @onclick="ClearCache">
                <i class="fa fa-broom me-1"></i> Clear Cache
            </button>
            <button class="btn btn-primary btn-sm" @onclick="() => ShowAddEditModal()">
                <i class="fa fa-plus me-1"></i> Add New Model Cost
            </button>
        </div>
    </div>
    <div class="card-body">
        @if (isLoading)
        {
            <div class="d-flex flex-column align-items-center py-4">
                <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-4">Loading model costs...</p>
            </div>
        }
        else if (modelCosts == null || !modelCosts.Any())
        {
            <div class="alert alert-info my-2">
                No model costs defined yet. Click 'Add New Model Cost' to create one.
            </div>
        }
        else
        {
            <div class="table-responsive mt-4">
                <table class="table table-hover table-striped">
                    <thead>
                        <tr>
                            <th>Model ID Pattern</th>
                            <th>Input Token Cost ($)</th>
                            <th>Output Token Cost ($)</th>
                            <th>Embedding Token Cost ($)</th>
                            <th>Image Cost ($)</th>
                            <th>Created</th>
                            <th>Updated</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var cost in modelCosts.OrderBy(c => c.ModelIdPattern))
                        {
                            <tr>
                                <td>@cost.ModelIdPattern</td>
                                <td>@FormatCost(cost.InputTokenCost)</td>
                                <td>@FormatCost(cost.OutputTokenCost)</td>
                                <td>@FormatCost(cost.EmbeddingTokenCost)</td>
                                <td>@FormatCost(cost.ImageCostPerImage)</td>
                                <td><small>@cost.CreatedAt.ToString("g")</small></td>
                                <td><small>@cost.UpdatedAt.ToString("g")</small></td>
                                <td>
                                    <div class="btn-group btn-group-sm">
                                        <button class="btn btn-outline-primary" @onclick="() => ShowAddEditModal(cost)" title="Edit">
                                            <i class="fa fa-edit"></i>
                                        </button>
                                        <button class="btn btn-outline-danger" @onclick="() => ShowDeleteConfirmation(cost)" title="Delete">
                                            <i class="fa fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

<div class="modal @(showAddEditModal ? "show" : "")" style="display: @(showAddEditModal ? "block" : "none")">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    @(editingModelCost.Id == 0 ? "Add New Model Cost" : "Edit Model Cost")
                </h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="mb-3">
                        <label for="modelIdPattern" class="form-label">Model ID Pattern</label>
                        <input type="text" class="form-control" id="modelIdPattern" @bind="editingModelCost.ModelIdPattern" required />
                        <div class="form-text">Examples: 'openai/gpt-4o' (exact match), 'anthropic/claude-3*' (wildcard), '*-embedding*' (multi-wildcard)</div>
                    </div>
                        
                    <div class="mb-3">
                        <label for="inputTokenCost" class="form-label">Input Token Cost ($ per 1000 tokens)</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <input type="number" class="form-control" id="inputTokenCost" @bind="inputTokenCostPerThousand" min="0" step="0.01" required />
                        </div>
                        <div class="form-text">Cost in USD per 1,000 input tokens</div>
                    </div>
                           
                    <div class="mb-3">
                        <label for="outputTokenCost" class="form-label">Output Token Cost ($ per 1000 tokens)</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <input type="number" class="form-control" id="outputTokenCost" @bind="outputTokenCostPerThousand" min="0" step="0.01" required />
                        </div>
                        <div class="form-text">Cost in USD per 1,000 output tokens</div>
                    </div>
                           
                    <div class="mb-3">
                        <label for="embeddingTokenCost" class="form-label">Embedding Token Cost ($ per 1000 tokens)</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <input type="number" class="form-control" id="embeddingTokenCost" @bind="embeddingTokenCostPerThousand" min="0" step="0.01" />
                        </div>
                        <div class="form-text">Cost in USD per 1,000 embedding tokens (leave empty if not applicable)</div>
                    </div>
                           
                    <div class="mb-3">
                        <label for="imageCost" class="form-label">Image Cost ($ per image)</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <input type="number" class="form-control" id="imageCost" @bind="editingModelCost.ImageCostPerImage" min="0" step="0.01" />
                        </div>
                        <div class="form-text">Cost in USD per generated image (leave empty if not applicable)</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="HandleAddEditSubmit" disabled="@isSaving">
                    @if (isSaving)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Saving...</span>
                    }
                    else
                    {
                        <span>Save</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal @(showDeleteConfirmation ? "show" : "")" style="display: @(showDeleteConfirmation ? "block" : "none")">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the model cost for <strong>@deletingModelCost?.ModelIdPattern</strong>?</p>
                <p class="text-danger mt-2">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteModelCost" disabled="@isSaving">
                    @if (isSaving)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Deleting...</span>
                    }
                    else
                    {
                        <span>Delete</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<ModelCost>? modelCosts;
    private bool isLoading = true;
    private bool isSaving = false;
    
    // Add/Edit modal variables
    private bool showAddEditModal = false;
    private ModelCost editingModelCost = new();
    
    // Delete confirmation modal variables
    private bool showDeleteConfirmation = false;
    private ModelCost? deletingModelCost;
    
    // Cost display as per 1000 tokens for better UX
    private decimal inputTokenCostPerThousand;
    private decimal outputTokenCostPerThousand;
    private decimal? embeddingTokenCostPerThousand;

    // Dialog options for standard modal dialogs
    private Dictionary<string, object> dialogOptions = new() { 
        { "class", "modal-dialog modal-sm" },
        { "role", "dialog" }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadModelCostsAsync();
    }

    private async Task LoadModelCostsAsync()
    {
        isLoading = true;

        try
        {
            modelCosts = await ModelCostService.ListModelCostsAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading model costs: {ex.Message}");
            Logger.LogError(ex, "Error loading model costs");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshModelCosts()
    {
        await LoadModelCostsAsync();
    }

    private async Task ClearCache()
    {
        try
        {
            ModelCostService.ClearCache();
            await JSRuntime.InvokeVoidAsync("alert", "Model cost cache cleared successfully");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error clearing cache: {ex.Message}");
            Logger.LogError(ex, "Error clearing model cost cache");
        }
    }

    private void ShowAddEditModal(ModelCost? modelCost = null)
    {
        if (modelCost != null)
        {
            // Editing existing cost
            editingModelCost = new ModelCost
            {
                Id = modelCost.Id,
                ModelIdPattern = modelCost.ModelIdPattern,
                InputTokenCost = modelCost.InputTokenCost,
                OutputTokenCost = modelCost.OutputTokenCost,
                EmbeddingTokenCost = modelCost.EmbeddingTokenCost,
                ImageCostPerImage = modelCost.ImageCostPerImage,
                CreatedAt = modelCost.CreatedAt,
                UpdatedAt = modelCost.UpdatedAt
            };
            
            // Convert from per-token to per-thousand tokens for better UX
            inputTokenCostPerThousand = editingModelCost.InputTokenCost * 1000;
            outputTokenCostPerThousand = editingModelCost.OutputTokenCost * 1000;
            embeddingTokenCostPerThousand = editingModelCost.EmbeddingTokenCost.HasValue 
                                            ? editingModelCost.EmbeddingTokenCost * 1000 
                                            : null;
        }
        else
        {
            // Adding new cost
            editingModelCost = new ModelCost
            {
                ModelIdPattern = "",
                InputTokenCost = 0,
                OutputTokenCost = 0
            };
            
            inputTokenCostPerThousand = 0;
            outputTokenCostPerThousand = 0;
            embeddingTokenCostPerThousand = null;
        }
        
        showAddEditModal = true;
    }

    private void ShowDeleteConfirmation(ModelCost modelCost)
    {
        deletingModelCost = modelCost;
        showDeleteConfirmation = true;
    }

    private void CloseModal()
    {
        showAddEditModal = false;
        showDeleteConfirmation = false;
        editingModelCost = new();
        deletingModelCost = null;
    }

    private async Task HandleAddEditSubmit()
    {
        isSaving = true;
        
        try
        {
            // Convert from per-thousand tokens back to per-token
            editingModelCost.InputTokenCost = inputTokenCostPerThousand / 1000;
            editingModelCost.OutputTokenCost = outputTokenCostPerThousand / 1000;
            editingModelCost.EmbeddingTokenCost = embeddingTokenCostPerThousand.HasValue 
                                                ? embeddingTokenCostPerThousand.Value / 1000 
                                                : null;
            
            if (editingModelCost.Id == 0)
            {
                // Creating new cost
                await ModelCostService.AddModelCostAsync(editingModelCost);
                await JSRuntime.InvokeVoidAsync("alert", $"Model cost for '{editingModelCost.ModelIdPattern}' added successfully");
            }
            else
            {
                // Updating existing cost
                var result = await ModelCostService.UpdateModelCostAsync(editingModelCost);
                if (result)
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"Model cost for '{editingModelCost.ModelIdPattern}' updated successfully");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Failed to update model cost. It may have been deleted.");
                }
            }
            
            // Close modal and refresh list
            CloseModal();
            await LoadModelCostsAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving model cost: {ex.Message}");
            Logger.LogError(ex, "Error saving model cost: {Error}", ex.Message);
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteModelCost()
    {
        if (deletingModelCost == null) return;
        
        isSaving = true;
        
        try
        {
            var result = await ModelCostService.DeleteModelCostAsync(deletingModelCost.Id);
            if (result)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Model cost for '{deletingModelCost.ModelIdPattern}' deleted successfully");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to delete model cost. It may have already been removed.");
            }
            
            // Close modal and refresh list
            CloseModal();
            await LoadModelCostsAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error deleting model cost: {ex.Message}");
            Logger.LogError(ex, "Error deleting model cost: {Error}", ex.Message);
        }
        finally
        {
            isSaving = false;
        }
    }

    private string FormatCost(decimal? cost)
    {
        if (!cost.HasValue || cost.Value == 0) return "—";
        
        // Multiply by 1000 to show per 1000 tokens
        var perThousand = cost.Value * 1000;
        
        // Format with appropriate number of decimal places
        if (perThousand < 0.01m)
        {
            return $"${perThousand:F6}/1K";
        }
        else if (perThousand < 0.1m)
        {
            return $"${perThousand:F4}/1K";
        }
        else
        {
            return $"${perThousand:F2}/1K";
        }
    }
}