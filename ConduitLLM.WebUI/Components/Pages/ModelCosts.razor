@page "/model-costs"
@using ConduitLLM.Configuration.Entities
@using ConduitLLM.Configuration.Services
@using Microsoft.Extensions.Logging
@inject IModelCostService ModelCostService
@inject ILogger<ModelCosts> Logger
@rendermode InteractiveServer
@inject ISnackbar Snackbar

<PageTitle>Model Cost Management</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Model Cost Management</MudText>

<MudAlert Severity="Severity.Info" Class="mb-4" Variant="Variant.Outlined">
    <div>
        <MudText>Model costs are used to calculate usage spending for virtual keys and enforce budgets.</MudText>
        <MudText>The <strong>ModelIdPattern</strong> supports wildcards (e.g., "openai/gpt-4*" or "*-embedding*") for matching multiple models with a single cost entry.</MudText>
    </div>
</MudAlert>

<MudCard Elevation="2" Class="mb-6">
    <MudCardHeader>
        <MudText Typo="Typo.h6">Model Costs</MudText>
        <MudToolBar DisableGutters="true">
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" 
                     OnClick="RefreshModelCosts" StartIcon="@Icons.Material.Filled.Refresh" Class="mr-2">
                Refresh
            </MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" 
                     OnClick="ClearCache" StartIcon="@Icons.Material.Filled.CleaningServices" Class="mr-2">
                Clear Cache
            </MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" 
                     OnClick="() => ShowAddEditModal()" StartIcon="@Icons.Material.Filled.Add">
                Add New Model Cost
            </MudButton>
        </MudToolBar>
    </MudCardHeader>
    <MudCardContent>
        @if (isLoading)
        {
            <div class="d-flex flex-column align-center py-4">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
                <MudText Typo="Typo.body1" Class="mt-4">Loading model costs...</MudText>
            </div>
        }
        else if (modelCosts == null || !modelCosts.Any())
        {
            <MudAlert Severity="Severity.Normal" Class="my-2">
                No model costs defined yet. Click 'Add New Model Cost' to create one.
            </MudAlert>
        }
        else
        {
            <MudTable Items="@modelCosts.OrderBy(c => c.ModelIdPattern)" Hover="true" Striped="true" 
                     Dense="true" Bordered="false" Class="mt-4">
                <HeaderContent>
                    <MudTh>Model ID Pattern</MudTh>
                    <MudTh>Input Token Cost ($)</MudTh>
                    <MudTh>Output Token Cost ($)</MudTh>
                    <MudTh>Embedding Token Cost ($)</MudTh>
                    <MudTh>Image Cost ($)</MudTh>
                    <MudTh>Created</MudTh>
                    <MudTh>Updated</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Model ID Pattern">@context.ModelIdPattern</MudTd>
                    <MudTd DataLabel="Input Token Cost">@FormatCost(context.InputTokenCost)</MudTd>
                    <MudTd DataLabel="Output Token Cost">@FormatCost(context.OutputTokenCost)</MudTd>
                    <MudTd DataLabel="Embedding Token Cost">@FormatCost(context.EmbeddingTokenCost)</MudTd>
                    <MudTd DataLabel="Image Cost">@FormatCost(context.ImageCostPerImage)</MudTd>
                    <MudTd DataLabel="Created"><MudText Typo="Typo.caption">@context.CreatedAt.ToString("g")</MudText></MudTd>
                    <MudTd DataLabel="Updated"><MudText Typo="Typo.caption">@context.UpdatedAt.ToString("g")</MudText></MudTd>
                    <MudTd DataLabel="Actions">
                        <MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" 
                                         OnClick="() => ShowAddEditModal(context)" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" 
                                         OnClick="() => ShowDeleteConfirmation(context)" />
                        </MudButtonGroup>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </MudCardContent>
</MudCard>

<MudDialog @bind-Visible="showAddEditModal" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            @(editingModelCost.Id == 0 ? "Add New Model Cost" : "Edit Model Cost")
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@editingModelCost" @ref="form" @bind-IsValid="@isFormValid">
            <MudTextField T="string" Label="Model ID Pattern" Required="true"
                        @bind-Value="editingModelCost.ModelIdPattern" HelperText="Examples: 'openai/gpt-4o' (exact match), 'anthropic/claude-3*' (wildcard), '*-embedding*' (multi-wildcard)"
                        Immediate="true" Margin="Margin.Dense" Variant="Variant.Outlined" Class="mt-3" />
                        
            <MudNumericField T="decimal" Label="Input Token Cost ($ per 1000 tokens)" Required="true"
                           @bind-Value="inputTokenCostPerThousand" Min="0" Step="0.01m"
                           HelperText="Cost in USD per 1,000 input tokens"
                           Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney"
                           Immediate="true" Margin="Margin.Dense" Class="mt-3" Variant="Variant.Outlined" />
                           
            <MudNumericField T="decimal" Label="Output Token Cost ($ per 1000 tokens)" Required="true"
                           @bind-Value="outputTokenCostPerThousand" Min="0" Step="0.01m"
                           HelperText="Cost in USD per 1,000 output tokens"
                           Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney"
                           Immediate="true" Margin="Margin.Dense" Class="mt-3" Variant="Variant.Outlined" />
                           
            <MudNumericField T="decimal?" Label="Embedding Token Cost ($ per 1000 tokens)"
                           @bind-Value="embeddingTokenCostPerThousand" Min="0" Step="0.01m"
                           HelperText="Cost in USD per 1,000 embedding tokens (leave empty if not applicable)"
                           Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney"
                           Immediate="true" Margin="Margin.Dense" Class="mt-3" Variant="Variant.Outlined" />
                           
            <MudNumericField T="decimal?" Label="Image Cost ($ per image)"
                           @bind-Value="editingModelCost.ImageCostPerImage" Min="0" Step="0.01m"
                           HelperText="Cost in USD per generated image (leave empty if not applicable)"
                           Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney"
                           Immediate="true" Margin="Margin.Dense" Class="mt-3" Variant="Variant.Outlined" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" OnClick="CloseModal" Color="Color.Dark">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleAddEditSubmit" 
                 Disabled="@(!isFormValid || isSaving)">
            @if (isSaving)
            {
                <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate="true" />
                <MudText>Saving...</MudText>
            }
            else
            {
                <MudText>Save</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-Visible="showDeleteConfirmation" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">Confirm Delete</MudText>
    </TitleContent>
    <DialogContent>
        <MudText>Are you sure you want to delete the model cost for <strong>@deletingModelCost?.ModelIdPattern</strong>?</MudText>
        <MudText Color="Color.Error" Class="mt-2">This action cannot be undone.</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" OnClick="CloseModal" Color="Color.Dark">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="DeleteModelCost" 
                 Disabled="@isSaving">
            @if (isSaving)
            {
                <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate="true" />
                <MudText>Deleting...</MudText>
            }
            else
            {
                <MudText>Delete</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<ModelCost>? modelCosts;
    private bool isLoading = true;
    private bool isSaving = false;
    
    // Add/Edit modal variables
    private bool showAddEditModal = false;
    private ModelCost editingModelCost = new();
    private MudForm form = new();
    private bool isFormValid;
    
    // Delete confirmation modal variables
    private bool showDeleteConfirmation = false;
    private ModelCost? deletingModelCost;
    
    // Cost display as per 1000 tokens for better UX
    private decimal inputTokenCostPerThousand;
    private decimal outputTokenCostPerThousand;
    private decimal? embeddingTokenCostPerThousand;

    // Dialog options
    private DialogOptions dialogOptions = new() { 
        // CloseOnEscapeKey property removed in MudBlazor v8.6.0
        MaxWidth = MaxWidth.Small,
        FullWidth = true
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadModelCostsAsync();
    }

    private async Task LoadModelCostsAsync()
    {
        isLoading = true;

        try
        {
            modelCosts = await ModelCostService.ListModelCostsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading model costs: {ex.Message}", Severity.Error);
            Logger.LogError(ex, "Error loading model costs");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshModelCosts()
    {
        await LoadModelCostsAsync();
    }

    private void ClearCache()
    {
        try
        {
            ModelCostService.ClearCache();
            Snackbar.Add("Model cost cache cleared successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error clearing cache: {ex.Message}", Severity.Error);
            Logger.LogError(ex, "Error clearing model cost cache");
        }
    }

    private void ShowAddEditModal(ModelCost? modelCost = null)
    {
        if (modelCost != null)
        {
            // Editing existing cost
            editingModelCost = new ModelCost
            {
                Id = modelCost.Id,
                ModelIdPattern = modelCost.ModelIdPattern,
                InputTokenCost = modelCost.InputTokenCost,
                OutputTokenCost = modelCost.OutputTokenCost,
                EmbeddingTokenCost = modelCost.EmbeddingTokenCost,
                ImageCostPerImage = modelCost.ImageCostPerImage,
                CreatedAt = modelCost.CreatedAt,
                UpdatedAt = modelCost.UpdatedAt
            };
            
            // Convert from per-token to per-thousand tokens for better UX
            inputTokenCostPerThousand = editingModelCost.InputTokenCost * 1000;
            outputTokenCostPerThousand = editingModelCost.OutputTokenCost * 1000;
            embeddingTokenCostPerThousand = editingModelCost.EmbeddingTokenCost.HasValue 
                                            ? editingModelCost.EmbeddingTokenCost * 1000 
                                            : null;
        }
        else
        {
            // Adding new cost
            editingModelCost = new ModelCost
            {
                ModelIdPattern = "",
                InputTokenCost = 0,
                OutputTokenCost = 0
            };
            
            inputTokenCostPerThousand = 0;
            outputTokenCostPerThousand = 0;
            embeddingTokenCostPerThousand = null;
        }
        
        showAddEditModal = true;
    }

    private void ShowDeleteConfirmation(ModelCost modelCost)
    {
        deletingModelCost = modelCost;
        showDeleteConfirmation = true;
    }

    private void CloseModal()
    {
        showAddEditModal = false;
        showDeleteConfirmation = false;
        editingModelCost = new();
        deletingModelCost = null;
    }

    private async Task HandleAddEditSubmit()
    {
        isSaving = true;
        
        try
        {
            // Convert from per-thousand tokens back to per-token
            editingModelCost.InputTokenCost = inputTokenCostPerThousand / 1000;
            editingModelCost.OutputTokenCost = outputTokenCostPerThousand / 1000;
            editingModelCost.EmbeddingTokenCost = embeddingTokenCostPerThousand.HasValue 
                                                ? embeddingTokenCostPerThousand.Value / 1000 
                                                : null;
            
            if (editingModelCost.Id == 0)
            {
                // Creating new cost
                await ModelCostService.AddModelCostAsync(editingModelCost);
                Snackbar.Add($"Model cost for '{editingModelCost.ModelIdPattern}' added successfully", Severity.Success);
            }
            else
            {
                // Updating existing cost
                var result = await ModelCostService.UpdateModelCostAsync(editingModelCost);
                if (result)
                {
                    Snackbar.Add($"Model cost for '{editingModelCost.ModelIdPattern}' updated successfully", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Failed to update model cost. It may have been deleted.", Severity.Error);
                }
            }
            
            // Close modal and refresh list
            CloseModal();
            await LoadModelCostsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving model cost: {ex.Message}", Severity.Error);
            Logger.LogError(ex, "Error saving model cost: {Error}", ex.Message);
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteModelCost()
    {
        if (deletingModelCost == null) return;
        
        isSaving = true;
        
        try
        {
            var result = await ModelCostService.DeleteModelCostAsync(deletingModelCost.Id);
            if (result)
            {
                Snackbar.Add($"Model cost for '{deletingModelCost.ModelIdPattern}' deleted successfully", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to delete model cost. It may have already been removed.", Severity.Error);
            }
            
            // Close modal and refresh list
            CloseModal();
            await LoadModelCostsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting model cost: {ex.Message}", Severity.Error);
            Logger.LogError(ex, "Error deleting model cost: {Error}", ex.Message);
        }
        finally
        {
            isSaving = false;
        }
    }

    private string FormatCost(decimal? cost)
    {
        if (!cost.HasValue || cost.Value == 0) return "—";
        
        // Multiply by 1000 to show per 1000 tokens
        var perThousand = cost.Value * 1000;
        
        // Format with appropriate number of decimal places
        if (perThousand < 0.01m)
        {
            return $"${perThousand:F6}/1K";
        }
        else if (perThousand < 0.1m)
        {
            return $"${perThousand:F4}/1K";
        }
        else
        {
            return $"${perThousand:F2}/1K";
        }
    }
}