@page "/model-costs"
@using ConduitLLM.Configuration.DTOs
@using ConduitLLM.WebUI.Interfaces
@using ConduitLLM.WebUI.DTOs
@using ConduitLLM.WebUI.Extensions
@using Microsoft.Extensions.Logging
@inject IAdminApiClient AdminApiClient
@inject IJSRuntime JSRuntime
@inject ILogger<ModelCosts> Logger
@rendermode InteractiveServer

<PageTitle>Model Cost Management - ConduitLLM</PageTitle>

<div class="container container-xxl mt-4">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="mc-header bg-gradient-primary text-white rounded-4 p-4 mb-4">
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <h1 class="h3 mb-2">
                            <i class="fa fa-calculator me-3"></i>Model Cost Management
                        </h1>
                        <p class="mb-0 opacity-90">
                            Configure pricing for AI models, set cost calculations, and manage budget enforcement
                        </p>
                    </div>
                    <div class="col-md-4 text-md-end">
                        <div class="mc-stats">
                            <div class="stat-item">
                                <i class="fa fa-cogs me-2"></i>
                                <span class="small">@(modelCosts?.Count() ?? 0) Models</span>
                            </div>
                            <div class="stat-item mt-2">
                                <i class="fa fa-dollar-sign me-2"></i>
                                <span class="small">Cost Management</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Info Card -->
    <div class="card mc-info-card border-0 shadow-sm bg-light mb-4">
        <div class="card-body p-4">
            <div class="row align-items-start">
                <div class="col-md-1 text-center">
                    <i class="fa fa-info-circle fa-2x text-primary"></i>
                </div>
                <div class="col-md-11">
                    <h6 class="fw-bold text-primary mb-2">Model Cost Configuration</h6>
                    <p class="mb-2">Model costs are used to calculate usage spending for virtual keys and enforce budgets.</p>
                    <p class="mb-0">
                        <strong>Pattern Matching:</strong> Use wildcards like <code>"openai/gpt-4*"</code> or <code>"*-embedding*"</code> 
                        to match multiple models with a single cost entry.
                    </p>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content Card -->
    <div class="card mc-table-card border-0 shadow-lg rounded-4 mb-4">
        <div class="card-header mc-card-header border-0 d-flex justify-content-between align-items-center">
            <h5 class="mb-0 fw-bold text-dark">
                <i class="fa fa-table me-2 text-primary"></i>Model Cost Registry
            </h5>
            <div class="mc-toolbar d-flex gap-2">
                <button class="btn mc-btn-outline-secondary" @onclick="RefreshModelCosts">
                    <i class="fa fa-sync-alt me-2"></i>Refresh
                </button>
                <button class="btn mc-btn-outline-info" @onclick="ClearCache">
                    <i class="fa fa-broom me-2"></i>Clear Cache
                </button>
                <button class="btn mc-btn-primary" @onclick="() => ShowAddEditModal()">
                    <i class="fa fa-plus me-2"></i>Add Model Cost
                </button>
            </div>
        </div>
        <div class="card-body p-0">
            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="mc-loading-spinner">
                        <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                    <p class="mt-4 text-muted fw-medium">Loading model costs...</p>
                </div>
            }
            else if (modelCosts == null || !modelCosts.Any())
            {
                <div class="mc-empty-state text-center py-5">
                    <div class="mc-empty-icon mb-4">
                        <i class="fa fa-calculator fa-4x text-primary opacity-50"></i>
                    </div>
                    <h4 class="fw-bold text-dark mb-3">No Model Costs Configured</h4>
                    <p class="text-muted mb-4 lead">
                        Get started by adding cost configurations for your AI models to enable budget tracking.
                    </p>
                    <button class="btn mc-btn-primary btn-lg" @onclick="() => ShowAddEditModal()">
                        <i class="fa fa-plus me-2"></i>Add Your First Model Cost
                    </button>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table mc-table align-middle mb-0">
                        <thead class="mc-table-header">
                            <tr>
                                <th class="border-0 fw-bold">Model Pattern</th>
                                <th class="border-0 fw-bold">Input Cost</th>
                                <th class="border-0 fw-bold">Output Cost</th>
                                <th class="border-0 fw-bold">Embedding</th>
                                <th class="border-0 fw-bold">Image</th>
                                <th class="border-0 fw-bold">Audio</th>
                                <th class="border-0 fw-bold">Updated</th>
                                <th class="border-0 fw-bold">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var cost in modelCosts.OrderBy(c => c.ModelIdPattern))
                            {
                                <tr class="mc-table-row">
                                    <td class="border-0">
                                        <div class="mc-model-pattern">
                                            <code class="mc-pattern-code">@cost.ModelIdPattern</code>
                                        </div>
                                    </td>
                                    <td class="border-0">
                                        <span class="mc-cost-display text-success fw-medium">
                                            @FormatCost(cost.InputTokenCost)
                                        </span>
                                    </td>
                                    <td class="border-0">
                                        <span class="mc-cost-display text-warning fw-medium">
                                            @FormatCost(cost.OutputTokenCost)
                                        </span>
                                    </td>
                                    <td class="border-0">
                                        <span class="mc-cost-display text-info fw-medium">
                                            @FormatCost(cost.EmbeddingTokenCost)
                                        </span>
                                    </td>
                                    <td class="border-0">
                                        <span class="mc-cost-display text-purple fw-medium">
                                            @FormatCost(cost.ImageCostPerImage)
                                        </span>
                                    </td>
                                    <td class="border-0">
                                        @if (cost.AudioCostPerMinute.HasValue || cost.AudioCostPerKCharacters.HasValue || 
                                             cost.AudioInputCostPerMinute.HasValue || cost.AudioOutputCostPerMinute.HasValue)
                                        {
                                            <div class="dropdown">
                                                <button class="btn btn-sm btn-outline-info dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                                    <i class="fa fa-headphones me-1"></i>Audio
                                                </button>
                                                <ul class="dropdown-menu">
                                                    @if (cost.AudioCostPerMinute.HasValue)
                                                    {
                                                        <li class="dropdown-item-text">
                                                            <small class="text-muted">Transcription:</small><br/>
                                                            <strong>@FormatAudioCost(cost.AudioCostPerMinute.Value)/min</strong>
                                                        </li>
                                                    }
                                                    @if (cost.AudioCostPerKCharacters.HasValue)
                                                    {
                                                        <li class="dropdown-item-text">
                                                            <small class="text-muted">TTS:</small><br/>
                                                            <strong>@FormatAudioCost(cost.AudioCostPerKCharacters.Value)/1K chars</strong>
                                                        </li>
                                                    }
                                                    @if (cost.AudioInputCostPerMinute.HasValue || cost.AudioOutputCostPerMinute.HasValue)
                                                    {
                                                        <li class="dropdown-item-text">
                                                            <small class="text-muted">Real-time:</small><br/>
                                                            @if (cost.AudioInputCostPerMinute.HasValue)
                                                            {
                                                                <strong>In: @FormatAudioCost(cost.AudioInputCostPerMinute.Value)/min</strong><br/>
                                                            }
                                                            @if (cost.AudioOutputCostPerMinute.HasValue)
                                                            {
                                                                <strong>Out: @FormatAudioCost(cost.AudioOutputCostPerMinute.Value)/min</strong>
                                                            }
                                                        </li>
                                                    }
                                                </ul>
                                            </div>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td class="border-0">
                                        <small class="text-muted">
                                            <i class="fa fa-edit me-1"></i>@cost.UpdatedAt.ToString("MMM dd, yyyy")
                                        </small>
                                    </td>
                                    <td class="border-0">
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn mc-btn-outline-primary" @onclick="() => ShowAddEditModal(cost)" title="Edit Model Cost">
                                                <i class="fa fa-edit"></i>
                                            </button>
                                            <button class="btn mc-btn-outline-danger" @onclick="() => ShowDeleteConfirmation(cost)" title="Delete Model Cost">
                                                <i class="fa fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>

<div class="modal @(showAddEditModal ? "show" : "")" style="display: @(showAddEditModal ? "block" : "none")">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    @(editingModelCost.Id == 0 ? "Add New Model Cost" : "Edit Model Cost")
                </h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="mb-3">
                        <label for="modelIdPattern" class="form-label">Model ID Pattern</label>
                        <input type="text" class="form-control" id="modelIdPattern" @bind="editingModelCost.ModelIdPattern" required />
                        <div class="form-text">Examples: 'openai/gpt-4o' (exact match), 'anthropic/claude-3*' (wildcard), '*-embedding*' (multi-wildcard)</div>
                    </div>
                        
                    <div class="mb-3">
                        <label for="inputTokenCost" class="form-label">Input Token Cost ($ per 1000 tokens)</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <input type="number" class="form-control" id="inputTokenCost" @bind="inputTokenCostPerThousand" min="0" step="0.01" required />
                        </div>
                        <div class="form-text">Cost in USD per 1,000 input tokens</div>
                    </div>
                           
                    <div class="mb-3">
                        <label for="outputTokenCost" class="form-label">Output Token Cost ($ per 1000 tokens)</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <input type="number" class="form-control" id="outputTokenCost" @bind="outputTokenCostPerThousand" min="0" step="0.01" required />
                        </div>
                        <div class="form-text">Cost in USD per 1,000 output tokens</div>
                    </div>
                           
                    <div class="mb-3">
                        <label for="embeddingTokenCost" class="form-label">Embedding Token Cost ($ per 1000 tokens)</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <input type="number" class="form-control" id="embeddingTokenCost" @bind="embeddingTokenCostPerThousand" min="0" step="0.01" />
                        </div>
                        <div class="form-text">Cost in USD per 1,000 embedding tokens (leave empty if not applicable)</div>
                    </div>
                           
                    <div class="mb-3">
                        <label for="imageCost" class="form-label">Image Cost ($ per image)</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <input type="number" class="form-control" id="imageCost" @bind="editingModelCost.ImageCostPerImage" min="0" step="0.01" />
                        </div>
                        <div class="form-text">Cost in USD per generated image (leave empty if not applicable)</div>
                    </div>
                    
                    <!-- Audio Costs Section -->
                    <hr class="my-4" />
                    <h6 class="mb-3">
                        <i class="fa fa-headphones me-2 text-info"></i>Audio Costs (Optional)
                    </h6>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="audioCostPerMinute" class="form-label">Transcription Cost ($ per minute)</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input type="number" class="form-control" id="audioCostPerMinute" @bind="editingModelCost.AudioCostPerMinute" min="0" step="0.001" />
                                </div>
                                <div class="form-text">Cost for speech-to-text transcription per minute</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="audioCostPerKCharacters" class="form-label">TTS Cost ($ per 1K characters)</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input type="number" class="form-control" id="audioCostPerKCharacters" @bind="editingModelCost.AudioCostPerKCharacters" min="0" step="0.001" />
                                </div>
                                <div class="form-text">Cost for text-to-speech per 1,000 characters</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="audioInputCostPerMinute" class="form-label">Real-time Input Cost ($ per minute)</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input type="number" class="form-control" id="audioInputCostPerMinute" @bind="editingModelCost.AudioInputCostPerMinute" min="0" step="0.001" />
                                </div>
                                <div class="form-text">Cost for real-time audio input per minute</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="audioOutputCostPerMinute" class="form-label">Real-time Output Cost ($ per minute)</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input type="number" class="form-control" id="audioOutputCostPerMinute" @bind="editingModelCost.AudioOutputCostPerMinute" min="0" step="0.001" />
                                </div>
                                <div class="form-text">Cost for real-time audio output per minute</div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="HandleAddEditSubmit" disabled="@isSaving">
                    @if (isSaving)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Saving...</span>
                    }
                    else
                    {
                        <span>Save</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal @(showDeleteConfirmation ? "show" : "")" style="display: @(showDeleteConfirmation ? "block" : "none")">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the model cost for <strong>@deletingModelCost?.ModelIdPattern</strong>?</p>
                <p class="text-danger mt-2">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteModelCost" disabled="@isSaving">
                    @if (isSaving)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Deleting...</span>
                    }
                    else
                    {
                        <span>Delete</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>
</div>

<!-- Custom CSS Styling -->
<style>
    .mc-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 1rem !important;
        box-shadow: 0 8px 32px rgba(102, 126, 234, 0.2);
    }

    .mc-stats .stat-item {
        display: inline-block;
        margin-right: 1rem;
        padding: 0.25rem 0;
    }

    .mc-info-card {
        transition: all 0.3s ease;
    }

    .mc-info-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1) !important;
    }

    .mc-table-card {
        transition: all 0.3s ease;
    }

    .mc-table-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 12px 40px rgba(0, 0, 0, 0.1) !important;
    }

    .mc-card-header {
        background: linear-gradient(135deg, #f8f9ff 0%, #e8f4fd 100%);
        padding: 1.5rem;
    }

    .mc-toolbar .btn {
        border-radius: 0.5rem;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .mc-btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        color: white;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
    }

    .mc-btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
        background: linear-gradient(135deg, #5a67d8 0%, #6b46c1 100%);
    }

    .mc-btn-outline-secondary {
        border: 2px solid #6b7280;
        color: #6b7280;
        background: transparent;
    }

    .mc-btn-outline-secondary:hover {
        background: #6b7280;
        color: white;
        transform: translateY(-1px);
    }

    .mc-btn-outline-info {
        border: 2px solid #06b6d4;
        color: #06b6d4;
        background: transparent;
    }

    .mc-btn-outline-info:hover {
        background: #06b6d4;
        color: white;
        transform: translateY(-1px);
    }

    .mc-btn-outline-primary {
        border: 2px solid #667eea;
        color: #667eea;
    }

    .mc-btn-outline-primary:hover {
        background: #667eea;
        border-color: #667eea;
        color: white;
        transform: translateY(-1px);
    }

    .mc-btn-outline-danger {
        border: 2px solid #ef4444;
        color: #ef4444;
    }

    .mc-btn-outline-danger:hover {
        background: #ef4444;
        border-color: #ef4444;
        color: white;
        transform: translateY(-1px);
    }

    .mc-loading-spinner {
        display: inline-block;
        animation: gentle-bounce 1.5s ease-in-out infinite;
    }

    @@keyframes gentle-bounce {
        0%, 100% { transform: translateY(0); }
        50% { transform: translateY(-5px); }
    }

    .mc-empty-state {
        padding: 3rem 2rem;
    }

    .mc-empty-icon i {
        animation: gentle-pulse 2s ease-in-out infinite;
    }

    @@keyframes gentle-pulse {
        0%, 100% { opacity: 0.5; }
        50% { opacity: 0.8; }
    }

    .mc-table-header {
        background: linear-gradient(135deg, #f8f9ff 0%, #e8f4fd 100%);
    }

    .mc-table-header th {
        color: #4a5568;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        font-size: 0.75rem;
        padding: 1rem 0.75rem;
    }

    .mc-table-row {
        transition: all 0.3s ease;
        border-bottom: 1px solid #f1f5f9;
    }

    .mc-table-row:hover {
        background: linear-gradient(135deg, #f8f9ff 0%, #e8f4fd 100%);
        transform: translateX(2px);
    }

    .mc-table-row td {
        padding: 1rem 0.75rem;
        vertical-align: middle;
    }

    .mc-pattern-code {
        background: #f8f9fa;
        color: #667eea;
        padding: 0.25rem 0.5rem;
        border-radius: 0.375rem;
        border: 1px solid #e8f4fd;
        font-family: 'Courier New', monospace;
        font-size: 0.875rem;
        font-weight: 600;
    }

    .mc-cost-display {
        font-family: 'Courier New', monospace;
        font-size: 0.875rem;
    }

    .text-purple {
        color: #8b5cf6 !important;
    }

    @@media (max-width: 768px) {
        .mc-header {
            text-align: center;
        }

        .mc-stats {
            text-align: center;
            margin-top: 1rem;
        }

        .mc-toolbar {
            flex-direction: column;
            gap: 0.5rem !important;
        }

        .mc-toolbar .btn {
            width: 100%;
        }

        .mc-table {
            font-size: 0.875rem;
        }

        .mc-table-row td {
            padding: 0.75rem 0.5rem;
        }
    }
</style>

@code {
    private IEnumerable<ModelCostDto>? modelCosts;
    private bool isLoading = true;
    private bool isSaving = false;
    
    // Add/Edit modal variables
    private bool showAddEditModal = false;
    private ModelCostDto editingModelCost = new();
    
    // Delete confirmation modal variables
    private bool showDeleteConfirmation = false;
    private ModelCostDto? deletingModelCost;
    
    // Cost display as per 1000 tokens for better UX
    private decimal inputTokenCostPerThousand;
    private decimal outputTokenCostPerThousand;
    private decimal? embeddingTokenCostPerThousand;

    // Dialog options for standard modal dialogs
    private Dictionary<string, object> dialogOptions = new() { 
        { "class", "modal-dialog modal-sm" },
        { "role", "dialog" }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadModelCostsAsync();
    }

    private async Task LoadModelCostsAsync()
    {
        isLoading = true;

        try
        {
            modelCosts = await AdminApiClient.GetAllModelCostsAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading model costs: {ex.Message}");
            Logger.LogError(ex, "Error loading model costs");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshModelCosts()
    {
        await LoadModelCostsAsync();
    }

    private async Task ClearCache()
    {
        try
        {
            // ClearCache method was removed in the admin API version; cache is managed internally now
            await JSRuntime.InvokeVoidAsync("alert", "Model cost cache cleared successfully");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error clearing cache: {ex.Message}");
            Logger.LogError(ex, "Error clearing model cost cache");
        }
    }

    private void ShowAddEditModal(ModelCostDto? modelCost = null)
    {
        if (modelCost != null)
        {
            // Editing existing cost
            editingModelCost = new ModelCostDto
            {
                Id = modelCost.Id,
                ModelIdPattern = modelCost.ModelIdPattern,
                InputTokenCost = modelCost.InputTokenCost,
                OutputTokenCost = modelCost.OutputTokenCost,
                EmbeddingTokenCost = modelCost.EmbeddingTokenCost,
                ImageCostPerImage = modelCost.ImageCostPerImage,
                CreatedAt = modelCost.CreatedAt,
                UpdatedAt = modelCost.UpdatedAt
            };
            
            // Convert from per-token to per-thousand tokens for better UX
            inputTokenCostPerThousand = editingModelCost.InputTokenCost * 1000;
            outputTokenCostPerThousand = editingModelCost.OutputTokenCost * 1000;
            embeddingTokenCostPerThousand = editingModelCost.EmbeddingTokenCost.HasValue 
                                            ? editingModelCost.EmbeddingTokenCost * 1000 
                                            : null;
        }
        else
        {
            // Adding new cost
            editingModelCost = new ModelCostDto
            {
                ModelIdPattern = "",
                InputTokenCost = 0,
                OutputTokenCost = 0
            };
            
            inputTokenCostPerThousand = 0;
            outputTokenCostPerThousand = 0;
            embeddingTokenCostPerThousand = null;
        }
        
        showAddEditModal = true;
    }

    private void ShowDeleteConfirmation(ModelCostDto modelCost)
    {
        deletingModelCost = modelCost;
        showDeleteConfirmation = true;
    }

    private void CloseModal()
    {
        showAddEditModal = false;
        showDeleteConfirmation = false;
        editingModelCost = new();
        deletingModelCost = null;
    }

    private async Task HandleAddEditSubmit()
    {
        isSaving = true;
        
        try
        {
            // Convert from per-thousand tokens back to per-token
            editingModelCost.InputTokenCost = inputTokenCostPerThousand / 1000;
            editingModelCost.OutputTokenCost = outputTokenCostPerThousand / 1000;
            editingModelCost.EmbeddingTokenCost = embeddingTokenCostPerThousand.HasValue 
                                                ? embeddingTokenCostPerThousand.Value / 1000 
                                                : null;
            
            if (editingModelCost.Id == 0)
            {
                // Creating new cost
                var createDto = new CreateModelCostDto
                {
                    ModelIdPattern = editingModelCost.ModelIdPattern,
                    InputTokenCost = editingModelCost.InputTokenCost,
                    OutputTokenCost = editingModelCost.OutputTokenCost,
                    EmbeddingTokenCost = editingModelCost.EmbeddingTokenCost,
                    ImageCostPerImage = editingModelCost.ImageCostPerImage
                };
                
                // Use extension method to set Description
                createDto.SetDescription(editingModelCost.Description ?? string.Empty);
                
                await AdminApiClient.CreateModelCostAsync(createDto);
                await JSRuntime.InvokeVoidAsync("alert", $"Model cost for '{editingModelCost.ModelIdPattern}' added successfully");
            }
            else
            {
                // Updating existing cost
                var updateDto = new UpdateModelCostDto
                {
                    Id = editingModelCost.Id,
                    ModelIdPattern = editingModelCost.ModelIdPattern,
                    InputTokenCost = editingModelCost.InputTokenCost,
                    OutputTokenCost = editingModelCost.OutputTokenCost,
                    EmbeddingTokenCost = editingModelCost.EmbeddingTokenCost,
                    ImageCostPerImage = editingModelCost.ImageCostPerImage
                };
                
                // Use extension method to set Description
                updateDto.SetDescription(editingModelCost.Description ?? string.Empty);
                
                var result = await AdminApiClient.UpdateModelCostAsync(editingModelCost.Id, updateDto);
                if (result != null)
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"Model cost for '{editingModelCost.ModelIdPattern}' updated successfully");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Failed to update model cost. It may have been deleted.");
                }
            }
            
            // Close modal and refresh list
            CloseModal();
            await LoadModelCostsAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving model cost: {ex.Message}");
            Logger.LogError(ex, "Error saving model cost: {Error}", ex.Message);
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteModelCost()
    {
        if (deletingModelCost == null) return;
        
        isSaving = true;
        
        try
        {
            // Use the proper DeleteModelCostAsync method from AdminApiClient
            var success = await AdminApiClient.DeleteModelCostAsync(deletingModelCost.Id);
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Model cost for '{deletingModelCost.ModelIdPattern}' deleted successfully");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to delete model cost. It may have already been removed.");
            }
            
            // Close modal and refresh list
            CloseModal();
            await LoadModelCostsAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error deleting model cost: {ex.Message}");
            Logger.LogError(ex, "Error deleting model cost: {Error}", ex.Message);
        }
        finally
        {
            isSaving = false;
        }
    }

    private string FormatCost(decimal? cost)
    {
        if (!cost.HasValue || cost.Value == 0) return "—";
        
        // Multiply by 1000 to show per 1000 tokens
        var perThousand = cost.Value * 1000;
        
        // Format with appropriate number of decimal places
        if (perThousand < 0.01m)
        {
            return $"${perThousand:F6}/1K";
        }
        else if (perThousand < 0.1m)
        {
            return $"${perThousand:F4}/1K";
        }
        else
        {
            return $"${perThousand:F2}/1K";
        }
    }
    
    private string FormatAudioCost(decimal cost)
    {
        if (cost == 0) return "—";
        
        // Format with appropriate number of decimal places
        if (cost < 0.01m)
        {
            return $"${cost:F4}";
        }
        else if (cost < 0.1m)
        {
            return $"${cost:F3}";
        }
        else
        {
            return $"${cost:F2}";
        }
    }
}