@page "/provider-health"
@using System.Text.Json
@using System.Text
@using ConduitLLM.Configuration.Entities
@using ConduitLLM.Configuration.DTOs
@using ConduitLLM.WebUI.Services
@using ConduitLLM.WebUI.Models
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject ConduitLLM.WebUI.Interfaces.IProviderHealthService ProviderHealthService
@inject ConduitLLM.WebUI.Interfaces.IProviderStatusService ProviderStatusService
@inject IJSRuntime JSRuntime
@inject ILogger<ProviderHealth> Logger
@inject NotificationService NotificationService
@rendermode InteractiveServer

<PageTitle>Provider Health Dashboard</PageTitle>

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1>Provider Health Dashboard</h1>
        <a href="/provider-health/config" class="btn btn-outline-primary">
            <i class="bi bi-gear"></i> Configuration
        </a>
    </div>
    
    @if (_loading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading provider health data...</p>
        </div>
    }
    else
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <div>
                        <h2>Provider Status</h2>
                    </div>
                    <div>
                        <div class="input-group">
                            <select class="form-select" @bind="_timeRangeSelection">
                                <option value="24h">Last 24 hours</option>
                                <option value="7d">Last 7 days</option>
                                <option value="30d">Last 30 days</option>
                            </select>
                            <button class="btn btn-primary" @onclick="RefreshDataAsync">
                                <i class="bi bi-arrow-clockwise"></i> Refresh
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="row">
                    @foreach (var status in _latestStatuses)
                    {
                        <div class="col-md-4 mb-3">
                            <div class="card h-100">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0">@status.Key</h5>
                                    @if (status.Value.Status == ConduitLLM.WebUI.Models.ProviderStatus.StatusType.Online)
                                    {
                                        <span class="badge bg-success">Online</span>
                                    }
                                    else if (status.Value.Status == ConduitLLM.WebUI.Models.ProviderStatus.StatusType.Offline)
                                    {
                                        <span class="badge bg-danger">Offline</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">Unknown</span>
                                    }
                                </div>
                                <div class="card-body">
                                    <div class="mb-2">
                                        <strong>Status:</strong> @status.Value.StatusMessage
                                    </div>
                                    <div class="mb-2">
                                        <strong>Response Time:</strong> @status.Value.ResponseTimeMs.ToString("F2") ms
                                    </div>
                                    <div class="mb-2">
                                        <strong>Last Checked:</strong> @status.Value.LastCheckedUtc.ToLocalTime()
                                    </div>
                                    @if (status.Value.Status == ConduitLLM.WebUI.Models.ProviderStatus.StatusType.Offline && !string.IsNullOrEmpty(status.Value.ErrorCategory))
                                    {
                                        <div class="mb-2">
                                            <strong>Error Category:</strong> @status.Value.ErrorCategory
                                        </div>
                                    }
                                </div>
                                <div class="card-footer">
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowProviderDetailsAsync(status.Key)">
                                        View Details
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card h-100">
                    <div class="card-header">
                        <h3>Uptime</h3>
                    </div>
                    <div class="card-body">
                        <div id="uptimeChart" style="height: 300px;"></div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card h-100">
                    <div class="card-header">
                        <h3>Response Time</h3>
                    </div>
                    <div class="card-body">
                        <div id="responseTimeChart" style="height: 300px;"></div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card h-100">
                    <div class="card-header">
                        <h3>Errors by Provider</h3>
                    </div>
                    <div class="card-body">
                        <div id="errorCountChart" style="height: 300px;"></div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card h-100">
                    <div class="card-header">
                        <h3>Error Categories</h3>
                    </div>
                    <div class="card-body">
                        <div id="errorCategoryChart" style="height: 300px;"></div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Provider Details Modal -->
        <div class="modal fade @_modalCssClass" id="providerDetailsModal" tabindex="-1" aria-labelledby="providerDetailsModalLabel" aria-hidden="@(!_showModal)">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="providerDetailsModalLabel">Provider Details: @_selectedProvider</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        @if (_loadingDetails)
                        {
                            <div class="text-center">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <p class="mt-2">Loading provider details...</p>
                            </div>
                        }
                        else if (_providerHistory.Count == 0)
                        {
                            <div class="alert alert-info">
                                No history data available for this provider.
                            </div>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>Timestamp</th>
                                            <th>Status</th>
                                            <th>Response Time</th>
                                            <th>Error Category</th>
                                            <th>Message</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var record in _providerHistory)
                                        {
                                            <tr>
                                                <td>@record.TimestampUtc.ToLocalTime()</td>
                                                <td>
                                                    @if (record.Status == ConduitLLM.Configuration.Entities.ProviderHealthRecord.StatusType.Online)
                                                    {
                                                        <span class="badge bg-success">Online</span>
                                                    }
                                                    else if (record.Status == ConduitLLM.Configuration.Entities.ProviderHealthRecord.StatusType.Offline)
                                                    {
                                                        <span class="badge bg-danger">Offline</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-secondary">Unknown</span>
                                                    }
                                                </td>
                                                <td>@record.ResponseTimeMs.ToString("F2") ms</td>
                                                <td>@(record.ErrorCategory ?? "-")</td>
                                                <td>@record.StatusMessage</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                            
                            <div class="d-flex justify-content-center mt-3">
                                <button class="btn btn-primary" @onclick="() => DownloadProviderHistoryAsync(_selectedProvider)">
                                    <i class="bi bi-download"></i> Download History
                                </button>
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool _loading = true;
    private bool _loadingDetails = false;
    private bool _showModal = false;
    private string _modalCssClass => _showModal ? "show d-block" : "d-none";
    private string _selectedProvider = string.Empty;
    private string _timeRangeSelection = "24h";
    private Dictionary<string, ProviderStatus> _latestStatuses = new();
    private List<ProviderHealthRecord> _providerHistory = new();
    private Dictionary<string, double> _uptime = new();
    private Dictionary<string, double> _responseTimes = new();
    private Dictionary<string, int> _errorCounts = new();
    private Dictionary<string, Dictionary<string, int>> _errorCategories = new();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RenderChartsAsync();
        }
    }
    
    private async Task LoadDataAsync()
    {
        try
        {
            _loading = true;
            StateHasChanged();
            
            // Convert selected time range to DateTime
            DateTime since = GetSinceDate();
            
            // Refresh latest status
            _latestStatuses = await ProviderStatusService.CheckAllProvidersStatusAsync();
            
            // Get health records to calculate analytics
            var healthRecords = await ProviderHealthService.GetHealthRecordsAsync();
            
            // Calculate uptime percentages
            _uptime = CalculateUptimePercentages(healthRecords, since);
            
            // Calculate average response times
            _responseTimes = CalculateAverageResponseTimes(healthRecords, since);
            
            // Calculate error counts
            _errorCounts = CalculateErrorCounts(healthRecords, since);
            
            // Calculate error categories
            _errorCategories = CalculateErrorCategories(healthRecords, since);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading provider health data");
            NotificationService.AddNotification(WebUI.Models.NotificationType.Error, "Error loading provider health data: " + ex.Message);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }
    
    private async Task RefreshDataAsync()
    {
        await LoadDataAsync();
        await RenderChartsAsync();
    }
    
    private DateTime GetSinceDate()
    {
        return _timeRangeSelection switch
        {
            "24h" => DateTime.UtcNow.AddHours(-24),
            "7d" => DateTime.UtcNow.AddDays(-7),
            "30d" => DateTime.UtcNow.AddDays(-30),
            _ => DateTime.UtcNow.AddHours(-24)
        };
    }
    
    // Calculate uptime percentages from health records
    private Dictionary<string, double> CalculateUptimePercentages(IEnumerable<ProviderHealthRecordDto> records, DateTime since)
    {
        return records
            .Where(r => r.TimestampUtc >= since)
            .GroupBy(r => r.ProviderName)
            .ToDictionary(
                g => g.Key,
                g => 
                {
                    int total = g.Count();
                    int online = g.Count(r => r.IsOnline);
                    return total > 0 ? (double)online / total * 100 : 0;
                }
            );
    }
    
    // Calculate average response times from health records
    private Dictionary<string, double> CalculateAverageResponseTimes(IEnumerable<ProviderHealthRecordDto> records, DateTime since)
    {
        return records
            .Where(r => r.TimestampUtc >= since && r.ResponseTimeMs > 0)
            .GroupBy(r => r.ProviderName)
            .ToDictionary(
                g => g.Key,
                g => g.Average(r => r.ResponseTimeMs)
            );
    }
    
    // Calculate error counts from health records
    private Dictionary<string, int> CalculateErrorCounts(IEnumerable<ProviderHealthRecordDto> records, DateTime since)
    {
        return records
            .Where(r => r.TimestampUtc >= since && !r.IsOnline)
            .GroupBy(r => r.ProviderName)
            .ToDictionary(
                g => g.Key,
                g => g.Count()
            );
    }
    
    // Calculate error categories from health records
    private Dictionary<string, Dictionary<string, int>> CalculateErrorCategories(IEnumerable<ProviderHealthRecordDto> records, DateTime since)
    {
        return records
            .Where(r => r.TimestampUtc >= since && !r.IsOnline && !string.IsNullOrEmpty(r.ErrorCategory))
            .GroupBy(r => r.ProviderName)
            .ToDictionary(
                g => g.Key,
                g => g.GroupBy(r => r.ErrorCategory ?? "Unknown")
                    .ToDictionary(
                        c => c.Key,
                        c => c.Count()
                    )
            );
    }
    
    private async Task RenderChartsAsync()
    {
        try
        {
            // Uptime chart
            var uptimeLabels = _uptime.Keys.ToArray();
            var uptimeData = _uptime.Values.ToArray();
            
            await JSRuntime.InvokeVoidAsync("renderBarChart", "uptimeChart", uptimeLabels, uptimeData, "Uptime %", "Provider", "Uptime (%)", "horizontal");
            
            // Response time chart
            var responseTimeLabels = _responseTimes.Keys.ToArray();
            var responseTimeData = _responseTimes.Values.ToArray();
            
            await JSRuntime.InvokeVoidAsync("renderBarChart", "responseTimeChart", responseTimeLabels, responseTimeData, "Average Response Time (ms)", "Provider", "Response Time (ms)", "horizontal");
            
            // Error count chart
            var errorCountLabels = _errorCounts.Keys.ToArray();
            var errorCountData = _errorCounts.Values.ToArray();
            
            await JSRuntime.InvokeVoidAsync("renderBarChart", "errorCountChart", errorCountLabels, errorCountData, "Error Count", "Provider", "Errors", "horizontal");
            
            // Error category chart
            await RenderErrorCategoryChartAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error rendering charts");
        }
    }
    
    private async Task RenderErrorCategoryChartAsync()
    {
        try
        {
            // Prepare data for chart.js
            var allCategories = new HashSet<string>();
            var providerNames = new List<string>();
            var datasets = new List<object>();
            
            foreach (var pair in _errorCategories)
            {
                if (pair.Value.Count > 0)
                {
                    providerNames.Add(pair.Key);
                    foreach (var category in pair.Value.Keys)
                    {
                        allCategories.Add(category);
                    }
                }
            }
            
            // Convert to arrays for chart.js
            var categories = allCategories.ToArray();
            var colors = new[] { "#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF", "#FF9F40" };
            
            int colorIndex = 0;
            foreach (var category in categories)
            {
                var data = new List<int>();
                foreach (var provider in providerNames)
                {
                    if (_errorCategories.TryGetValue(provider, out var categoryDict) && 
                        categoryDict.TryGetValue(category, out var count))
                    {
                        data.Add(count);
                    }
                    else
                    {
                        data.Add(0);
                    }
                }
                
                datasets.Add(new
                {
                    label = category,
                    data = data.ToArray(),
                    backgroundColor = colors[colorIndex % colors.Length]
                });
                
                colorIndex++;
            }
            
            // Render with chart.js
            var chartData = JsonSerializer.Serialize(new
            {
                labels = providerNames.ToArray(),
                datasets
            });
            
            await JSRuntime.InvokeVoidAsync("renderStackedBarChart", "errorCategoryChart", chartData, "Error Categories by Provider", "Provider", "Errors");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error rendering error category chart");
        }
    }
    
    private async Task ShowProviderDetailsAsync(string providerName)
    {
        try
        {
            _selectedProvider = providerName;
            _loadingDetails = true;
            _showModal = true;
            StateHasChanged();
            
            // Get provider history
            var healthRecords = await ProviderHealthService.GetHealthRecordsAsync(providerName);
            
            // Filter by date range and limit to 100 records
            DateTime since = GetSinceDate();
            _providerHistory = healthRecords
                .Where(r => r.TimestampUtc >= since)
                .OrderByDescending(r => r.TimestampUtc)
                .Take(100)
                .Select(dto => new ProviderHealthRecord {
                    Id = dto.Id,
                    ProviderName = dto.ProviderName,
                    IsOnline = dto.IsOnline,
                    Status = (ProviderHealthRecord.StatusType)dto.Status,
                    StatusMessage = dto.StatusMessage,
                    ErrorCategory = dto.ErrorCategory,
                    ErrorDetails = dto.ErrorDetails,
                    ResponseTimeMs = dto.ResponseTimeMs,
                    EndpointUrl = dto.EndpointUrl,
                    TimestampUtc = dto.TimestampUtc
                })
                .ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading provider details for {ProviderName}", providerName);
            NotificationService.AddNotification(WebUI.Models.NotificationType.Error, $"Error loading details for {providerName}: {ex.Message}");
        }
        finally
        {
            _loadingDetails = false;
            StateHasChanged();
        }
    }
    
    private void CloseModal()
    {
        _showModal = false;
        StateHasChanged();
    }
    
    private async Task DownloadProviderHistoryAsync(string providerName)
    {
        try
        {
            var healthRecords = await ProviderHealthService.GetHealthRecordsAsync(providerName);
            
            // Filter by date range and limit to 10000 records
            var history = healthRecords
                .Where(r => r.TimestampUtc >= GetSinceDate())
                .OrderByDescending(r => r.TimestampUtc)
                .Take(10000)
                .Select(dto => new ProviderHealthRecord {
                    Id = dto.Id,
                    ProviderName = dto.ProviderName,
                    IsOnline = dto.IsOnline,
                    Status = (ProviderHealthRecord.StatusType)dto.Status,
                    StatusMessage = dto.StatusMessage,
                    ErrorCategory = dto.ErrorCategory,
                    ErrorDetails = dto.ErrorDetails,
                    ResponseTimeMs = dto.ResponseTimeMs,
                    EndpointUrl = dto.EndpointUrl,
                    TimestampUtc = dto.TimestampUtc
                })
                .ToList();
            
            // Convert to CSV
            var csv = new StringBuilder();
            csv.AppendLine("Timestamp,IsOnline,ResponseTimeMs,ErrorCategory,StatusMessage,EndpointUrl");
            
            foreach (var record in history)
            {
                string errorCategory = record.ErrorCategory ?? string.Empty;
                string statusMsg = record.StatusMessage ?? string.Empty;
                string endpoint = record.EndpointUrl ?? string.Empty;
                
                // Clean up strings for CSV format
                errorCategory = errorCategory.Replace(",", ";");
                statusMsg = statusMsg.Replace(",", ";").Replace("\"", "'").Replace("\n", " ");
                endpoint = endpoint.Replace(",", ";");
                
                // Build CSV line
                string csvLine = $"{record.TimestampUtc:yyyy-MM-dd HH:mm:ss},{record.IsOnline},{record.ResponseTimeMs},{errorCategory},{statusMsg},{endpoint}";
                csv.AppendLine(csvLine);
            }
            
            // Trigger download
            await JSRuntime.InvokeVoidAsync("downloadFile", $"{providerName}_history_{DateTime.Now:yyyyMMdd}.csv", "text/csv", csv.ToString());
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error downloading provider history for {ProviderName}", providerName);
            NotificationService.AddNotification(WebUI.Models.NotificationType.Error, $"Error downloading history for {providerName}: {ex.Message}");
        }
    }
}