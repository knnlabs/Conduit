@page "/chat"
@using Microsoft.Extensions.Options
@using ConduitLLM.Core.Models
@using ConduitLLM.Configuration
@using ConduitLLM.Configuration.DTOs
@using Microsoft.AspNetCore.Components.Rendering
@using ConduitLLM.WebUI.Components.Shared
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Text
@using System.Net.Http
@using System.Net.Http.Headers
@inject ConduitLLM.WebUI.Interfaces.IModelProviderMappingService ModelProviderMappingService
@inject ConduitLLM.WebUI.Interfaces.IAdminApiClient AdminApiClient
@inject IOptions<ConduitSettings> ConduitSettingsOptions
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="container container-xxl mt-4">
    <h4 class="mb-4">Chat Playground</h4>

    @if (modelMappings == null || !modelMappings.Any())
    {
        <div class="alert alert-warning">
            No models configured. Please add models in the <a href="/configuration">Configuration</a> page.
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-12 col-md-8">
                <div class="card p-4 mb-4">
                    <div class="form-group mb-4">
                        <label for="systemPrompt">System Prompt (Optional)</label>
                        <textarea id="systemPrompt" 
                                  class="form-control" 
                                  rows="3" 
                                  @bind="systemPrompt"></textarea>
                        <div class="form-text">
                            Instructions that define the AI's behavior for the entire conversation (e.g., 'You are a helpful assistant', 'Respond as a SQL expert')
                        </div>
                    </div>
                    
                    <div class="form-group mb-4">
                        <label for="userMessage">User Message</label>
                        <textarea id="userMessage" 
                                  class="form-control" 
                                  rows="5" 
                                  placeholder="Enter your message here..." 
                                  @bind="userMessage"></textarea>
                    </div>
                    
                    <div class="d-flex mb-4">
                        <button type="button" 
                                class="btn btn-primary me-2" 
                                @onclick="SendRequest" 
                                disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Sending...</span>
                            }
                            else
                            {
                                <i class="fa fa-paper-plane me-2"></i>
                                <span>Send Request</span>
                            }
                        </button>
                        
                        <button type="button" 
                                class="btn btn-outline-secondary" 
                                @onclick="ClearChat" 
                                disabled="@isLoading">
                            <i class="fa fa-trash me-2"></i>
                            Clear
                        </button>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-4">
                            @errorMessage
                        </div>
                    }
                    
                    <!-- Chat History Display -->
                    <div class="card bg-light mt-4 p-4" style="max-height: 500px; overflow-y: auto;">
                        @if (!chatHistory.Any() && !isLoading)
                        {
                            <p class="text-muted text-center">
                                Chat history will appear here.
                            </p>
                        }
                        @foreach (var message in chatHistory)
                        {
                            <div class="card mb-3 p-3 @GetMessageClass(message.Role)">
                                <h6 class="text-capitalize mb-2">
                                    @message.Role
                                </h6>
                                <hr class="my-1" />
                                @RenderMessageContent(message.Content ?? string.Empty)
                            </div>
                        }
                        @if (isLoading && _streamResponse)
                        {
                            <div class="card mb-3 p-3 assistant-message">
                                <h6 class="text-capitalize mb-2">
                                    Assistant
                                </h6>
                                <hr class="my-1" />
                                <div class="spinner-border spinner-border-sm" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        }
                        @if (isLoading && !_streamResponse)
                        {
                            <div class="card mb-3 p-3 assistant-message">
                                <h6 class="text-capitalize mb-2">
                                    Assistant
                                </h6>
                                <hr class="my-1" />
                                <p class="text-muted">
                                    Waiting for response... 
                                    <span class="spinner-border spinner-border-sm ms-2" role="status" aria-hidden="true"></span>
                                </p>
                            </div>
                        }
                    </div>
                </div>
            </div>
            
            <div class="col-12 col-md-4">
                <div class="card p-4">
                    <h6 class="mb-4">Parameters</h6>
                    
                    <div class="form-group mb-4">
                        <label for="modelSelect">Model</label>
                        <select id="modelSelect" 
                                class="form-select" 
                                @bind="selectedModelAlias">
                            @foreach (var mapping in modelMappings)
                            {
                                <option value="@mapping.ModelId">@mapping.ModelId</option>
                            }
                        </select>
                    </div>
                    
                    <div class="form-group mb-4">
                        <label for="apiKey">API Key (Optional)</label>
                        <input type="text" 
                               id="apiKey" 
                               class="form-control" 
                               @bind="apiKey" />
                        <div class="form-text">Overrides key from configuration for this request.</div>
                    </div>
                    
                    <div class="form-check form-switch mb-2">
                        <input class="form-check-input" 
                               type="checkbox" 
                               id="streamResponse" 
                               @bind="_streamResponse" />
                        <label class="form-check-label" for="streamResponse">Stream Response</label>
                        <div class="form-text">Stream the response word-by-word, like ChatGPT.</div>
                    </div>
                    
                    <div class="form-check form-switch mb-2">
                        <input class="form-check-input" 
                               type="checkbox" 
                               id="showRawMessage" 
                               @bind="_showRawMessage" />
                        <label class="form-check-label" for="showRawMessage">Show Raw Message</label>
                    </div>
                    
                    <div class="form-check form-switch mb-2">
                        <input class="form-check-input" 
                               type="checkbox" 
                               id="appendFunctionResult" 
                               @bind="_appendFunctionResult" />
                        <label class="form-check-label" for="appendFunctionResult">Append Function Result</label>
                        <div class="form-text">Append the result of successful function calls to the chat history.</div>
                    </div>
                    
                    <div class="form-check form-switch mb-4">
                        <input class="form-check-input" 
                               type="checkbox" 
                               id="executeFunctions" 
                               @bind="_executeFunctions" />
                        <label class="form-check-label" for="executeFunctions">Execute Functions</label>
                    </div>
                    
                    <div class="mb-4">
                        <label for="temperatureSlider" class="form-label">Temperature: @temperature</label>
                        <input type="range" 
                               class="form-range" 
                               id="temperatureSlider" 
                               min="0" max="1" step="0.01" 
                               @bind-value="temperature" 
                               @bind-value:event="oninput" />
                    </div>
                    
                    <div class="mb-4">
                        <label for="topPSlider" class="form-label">Top P: @topP</label>
                        <input type="range" 
                               class="form-range" 
                               id="topPSlider" 
                               min="0" max="1" step="0.01" 
                               @bind-value="topP" 
                               @bind-value:event="oninput" />
                    </div>
                    
                    <div class="form-group mb-4">
                        <label for="stopSequences">Stop Sequences (Optional)</label>
                        <input type="text" 
                               id="stopSequences" 
                               class="form-control" 
                               @bind="stopSequences" />
                        <div class="form-text">Comma-separated list of sequences to stop generation.</div>
                    </div>
                    
                    <div class="form-check form-switch mb-4">
                        <input class="form-check-input" 
                               type="checkbox" 
                               id="autoScroll" 
                               @bind="_autoScroll" />
                        <label class="form-check-label" for="autoScroll">Auto Scroll</label>
                        <div class="form-text">Automatically scroll to the bottom when new messages arrive.</div>
                    </div>
                    
                    <button type="button" 
                            class="btn btn-danger mt-2" 
                            @onclick="ClearChat">
                        <i class="fa fa-trash me-2"></i>
                        Clear Chat
                    </button>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .user-message {
        background-color: #e3f2fd;
        border-left: 4px solid #2196f3;
    }
    
    .assistant-message {
        background-color: #f3e5f5;
        border-left: 4px solid #9c27b0;
    }
    
    .system-message {
        background-color: #e8f5e9;
        border-left: 4px solid #4caf50;
    }
</style>

@code {
    private ConduitSettings settings => ConduitSettingsOptions.Value;
    private List<ModelProviderMappingDto> modelMappings = new();
    private string selectedModelAlias = "";
    private string systemPrompt = "";
    private string userMessage = "";
    private string apiKey = "";
    private string stopSequences = "";
    private double temperature = 0.7;
    private double topP = 1.0;
    private bool _streamResponse = true;
    private bool isLoading = false;
    private string errorMessage = "";
    private string _proxyBaseUrl = "";
    private List<Message> chatHistory = new();
    private string? streamedResponse = null;
    private bool _autoScroll = true;
    private bool _showRawMessage = false;
    private bool _appendFunctionResult = false;
    private bool _executeFunctions = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadProxyUrlAsync();
        await LoadModelMappingsAsync();
        // No need to call StateHasChanged here, Blazor handles it after OnInitializedAsync
    }

    private async Task LoadModelMappingsAsync()
    {
        try
        {
            // Use ModelProviderMappingService from Admin API
            var mappings = await ModelProviderMappingService.GetAllAsync();
            modelMappings = mappings.ToList();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading model mappings: {ex.Message}");
            errorMessage = $"Error loading model mappings: {ex.Message}";
            modelMappings = new List<ModelProviderMappingDto>();
        }
    }

    private async Task LoadProxyUrlAsync()
    {
        try 
        {
            await Task.Run(() => {
                // Read the base URL from environment variable, fallback to localhost or docker container
                _proxyBaseUrl = Environment.GetEnvironmentVariable("CONDUIT_API_BASE_URL") ?? 
                               (Environment.GetEnvironmentVariable("DOTNET_RUNNING_IN_CONTAINER") == "true" ? 
                                "http://api:8080" : "http://localhost:5000");
                
                Console.WriteLine($"[Chat Component] Using API base URL: {_proxyBaseUrl}");
            });
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading proxy URL: {ex.Message}");
            errorMessage = $"Error loading proxy URL: {ex.Message}";
            _proxyBaseUrl = "";
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task SendRequest()
    {
        if (string.IsNullOrWhiteSpace(userMessage) || string.IsNullOrWhiteSpace(selectedModelAlias))
        {
            errorMessage = "Please select a model and enter a user message.";
            return;
        }

        isLoading = true;
        errorMessage = "";
        
        try
        {
            // Add user message to chat history
            var userChatMessage = new Message { Role = "user", Content = userMessage };
            chatHistory.Add(userChatMessage);
            
            // Add system message if provided
            var messages = new List<Message>();
            if (!string.IsNullOrWhiteSpace(systemPrompt))
            {
                messages.Add(new Message { Role = "system", Content = systemPrompt });
            }
            messages.Add(userChatMessage);
            
            // Reset user message input
            var temp = userMessage;
            userMessage = "";
            
            // Convert messages to array for request
            var messagesArray = messages.ToArray();
            
            // Create request payload
            var chatRequest = new ChatCompletionRequest
            {
                Model = selectedModelAlias,
                Messages = messagesArray.ToList(), // Convert array to list
                Temperature = temperature, 
                TopP = topP, 
                Stop = !string.IsNullOrEmpty(stopSequences) ? 
                    stopSequences.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).ToList() : null,
                Stream = _streamResponse
            };

            var httpClient = new HttpClient();
            var requestUri = $"{_proxyBaseUrl}/v1/chat/completions";
            
            // Add API key if provided
            if (!string.IsNullOrEmpty(apiKey))
            {
                httpClient.DefaultRequestHeaders.Authorization = 
                    new AuthenticationHeaderValue("Bearer", apiKey);
            }
            
            // Convert to JSON
            var jsonRequest = JsonSerializer.Serialize(chatRequest, new JsonSerializerOptions 
            { 
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
            });
            
            var content = new StringContent(jsonRequest, Encoding.UTF8, "application/json");
            
            if (_streamResponse)
            {
                // Handle streaming response
                streamedResponse = ""; // Reset the streamed response
                var response = await httpClient.PostAsync(requestUri, content);
                
                if (!response.IsSuccessStatusCode)
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    ProcessErrorResponse(response.StatusCode, errorContent);
                    return;
                }
                
                using var stream = await response.Content.ReadAsStreamAsync();
                using var reader = new StreamReader(stream);
                
                // Add assistant message to chat history
                chatHistory.Add(new Message { Role = "assistant", Content = "" });
                
                // Read the SSE stream
                while (!reader.EndOfStream)
                {
                    var line = await reader.ReadLineAsync();
                    if (string.IsNullOrEmpty(line) || !line.StartsWith("data: "))
                        continue;
                        
                    var jsonData = line.Substring(6); // Remove "data: " prefix
                    
                    if (jsonData == "[DONE]")
                        break;
                        
                    try
                    {
                        var streamResponse = JsonSerializer.Deserialize<ChatCompletionChunk>(jsonData);
                        ProcessStreamResponse(streamResponse);
                    }
                    catch (Exception ex)
                    {
                        Console.Error.WriteLine($"Error parsing stream response: {ex}");
                    }
                }
                
                // Final message is complete
                if (!string.IsNullOrEmpty(streamedResponse))
                {
                    // Update the last message (assistant) with complete content
                    var lastMessage = chatHistory.LastOrDefault();
                    if (lastMessage != null && lastMessage.Role == "assistant")
                    {
                        lastMessage.Content = streamedResponse;
                    }
                }
            }
            else
            {
                // Handle non-streaming response
                var response = await httpClient.PostAsync(requestUri, content);
                var responseContent = await response.Content.ReadAsStringAsync();
                
                if (!response.IsSuccessStatusCode)
                {
                    ProcessErrorResponse(response.StatusCode, responseContent);
                    return;
                }

                try
                {
                    var chatResponse = JsonSerializer.Deserialize<ChatCompletionResponse>(
                        responseContent, 
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
                    );
                    
                    if (chatResponse?.Choices != null && chatResponse.Choices.Count > 0)
                    {
                        var assistantMessage = chatResponse.Choices[0].Message;
                        chatHistory.Add(new Message
                        {
                            Role = assistantMessage.Role,
                            Content = assistantMessage.Content
                        });
                    }
                    else
                    {
                        errorMessage = "No response content received.";
                        return;
                    }
                }
                catch (Exception ex)
                {
                    errorMessage = $"Error parsing response: {ex.Message}";
                    Console.Error.WriteLine(ex.ToString());
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Request failed: {ex.Message}";
            Console.Error.WriteLine(ex.ToString());
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private void ProcessStreamResponse(ChatCompletionChunk? streamResponse)
    {
        if (streamResponse?.Choices == null || streamResponse.Choices.Count == 0)
            return;
            
        var choice = streamResponse.Choices[0];
        var delta = choice.Delta;
        
        if (delta == null)
            return;
            
        // If there's content, append it
        if (!string.IsNullOrEmpty(delta.Content))
        {
            streamedResponse += delta.Content;
            
            // Update the last message in chat history
            var lastMessage = chatHistory.LastOrDefault();
            if (lastMessage != null && lastMessage.Role == "assistant")
            {
                lastMessage.Content = streamedResponse;
                StateHasChanged();
            }
        }
    }
    
    private void ProcessErrorResponse(System.Net.HttpStatusCode statusCode, string content)
    {
        try
        {
            var errorJson = JsonSerializer.Deserialize<JsonElement>(content);
            
            if (errorJson.TryGetProperty("error", out var errorProp))
            {
                if (errorProp.TryGetProperty("message", out var messageProp))
                {
                    errorMessage = messageProp.GetString() ?? "Unknown error";
                }
                else
                {
                    errorMessage = errorProp.ToString();
                }
            }
            else
            {
                errorMessage = $"API Error: {statusCode}";
            }
        }
        catch
        {
            errorMessage = $"API Error: {statusCode}";
        }
    }
    
    private string[]? ParseStopSequences(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return null;
            
        return input.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
    }
    
    private void ClearChat()
    {
        chatHistory.Clear();
        streamedResponse = null;
        errorMessage = "";
    }
    
    private string GetMessageClass(string role)
    {
        return role switch
        {
            "user" => "user-message",
            "assistant" => "assistant-message",
            "system" => "system-message",
            _ => ""
        };
    }
    
    private RenderFragment RenderMessageContent(object content) => builder =>
    {
        // Handle null content
        if (content == null)
        {
            builder.OpenElement(0, "pre");
            builder.AddAttribute(1, "style", "white-space: pre-wrap; word-wrap: break-word; margin-bottom: 0;");
            builder.AddContent(2, string.Empty);
            builder.CloseElement();
            return;
        }

        try
        {
            if (content is string strContent)
            {
                // Display plain string content
                builder.OpenElement(0, "pre");
                builder.AddAttribute(1, "style", "white-space: pre-wrap; word-wrap: break-word; margin-bottom: 0;");
                builder.AddContent(2, strContent);
                builder.CloseElement();
                return;
            }
            
            // Try to handle content as JsonElement
            if (content is JsonElement jsonElement)
            {
                if (jsonElement.ValueKind == JsonValueKind.String)
                {
                    // It's a plain string inside a JsonElement
                    builder.OpenElement(0, "pre");
                    builder.AddAttribute(1, "style", "white-space: pre-wrap; word-wrap: break-word; margin-bottom: 0;");
                    builder.AddContent(2, jsonElement.GetString());
                    builder.CloseElement();
                    return;
                }
                else if (jsonElement.ValueKind == JsonValueKind.Array)
                {
                    // It's an array of content parts
                    foreach (var element in jsonElement.EnumerateArray())
                    {
                        RenderContentPart(builder, element);
                    }
                    return;
                }
            }
            
            // Try to serialize and deserialize as content parts
            var json = JsonSerializer.Serialize(content);
            using var doc = JsonDocument.Parse(json);
            var root = doc.RootElement;
            
            if (root.ValueKind == JsonValueKind.Array)
            {
                // It's an array - render each part
                foreach (var element in root.EnumerateArray())
                {
                    RenderContentPart(builder, element);
                }
                return;
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error rendering content: {ex.Message}");
        }
        
        // Fallback - just render the string representation
        builder.OpenElement(0, "pre");
        builder.AddAttribute(1, "style", "white-space: pre-wrap; word-wrap: break-word; margin-bottom: 0;");
        builder.AddContent(2, content.ToString());
        builder.CloseElement();
    };
    
    /// <summary>
    /// Renders a single content part based on its type (text or image)
    /// </summary>
    private void RenderContentPart(RenderTreeBuilder builder, JsonElement element)
    {
        try
        {
            if (element.TryGetProperty("type", out var typeElement))
            {
                var type = typeElement.GetString();
                
                if (type == "text" && element.TryGetProperty("text", out var textElement))
                {
                    // Text content part
                    builder.OpenElement(0, "div");
                    builder.AddAttribute(1, "class", "mb-2");
                    builder.OpenElement(2, "pre");
                    builder.AddAttribute(3, "style", "white-space: pre-wrap; word-wrap: break-word; margin-bottom: 0;");
                    builder.AddContent(4, textElement.GetString());
                    builder.CloseElement(); // Close pre
                    builder.CloseElement(); // Close div
                }
                else if (type == "image_url" && element.TryGetProperty("image_url", out var imageUrlElement))
                {
                    // Image content part
                    if (imageUrlElement.TryGetProperty("url", out var urlElement))
                    {
                        var url = urlElement.GetString();
                        if (!string.IsNullOrEmpty(url))
                        {
                            builder.OpenElement(0, "div");
                            builder.AddAttribute(1, "class", "my-3");
                            
                            // Image element
                            builder.OpenElement(2, "img");
                            builder.AddAttribute(3, "src", url);
                            builder.AddAttribute(4, "class", "mud-elevation-1 rounded");
                            builder.AddAttribute(5, "style", "max-width: 100%; max-height: 400px;");
                            builder.AddAttribute(6, "alt", "AI generated image");
                            builder.CloseElement(); // Close img
                            
                            builder.CloseElement(); // Close div
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error rendering content part: {ex.Message}");
        }
    }
}