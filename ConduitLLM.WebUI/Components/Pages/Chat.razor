@page "/chat"
@using Microsoft.Extensions.Options
@using ConduitLLM.Core.Models
@using ConduitLLM.Configuration
@using ConduitLLM.Configuration.DTOs
@using Microsoft.AspNetCore.Components.Rendering
@using ConduitLLM.WebUI.Components.Shared
@using System.Text.Json
@using System.Text.Json.Serialization
@inject ConduitLLM.WebUI.Interfaces.IAdminApiClient AdminApiClient
@inject ConduitLLM.WebUI.Interfaces.IConduitApiClient ConduitApiClient
@inject IOptions<ConduitSettings> ConduitSettingsOptions
@inject IJSRuntime JSRuntime
@inject IToastService ToastService
@rendermode InteractiveServer

<PageTitle>Chat Playground - ConduitLLM</PageTitle>

<div class="container container-xxl">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="chat-header bg-gradient-primary text-white rounded-4 p-4 mb-4">
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <h1 class="h3 mb-2">
                            <i class="fa fa-comments me-3"></i>Chat Playground
                        </h1>
                        <p class="mb-0 opacity-90">
                            Test your LLM integrations with real-time conversations across multiple providers
                        </p>
                    </div>
                    <div class="col-md-4 text-md-end">
                        <div class="chat-stats">
                            <div class="stat-item">
                                <i class="fa fa-robot me-2"></i>
                                <span class="small">@modelMappings.Count Models Available</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (modelMappings == null || !modelMappings.Any())
    {
        <div class="alert alert-warning shadow-sm border-0">
            <div class="d-flex align-items-center">
                <i class="fa fa-exclamation-triangle fa-2x me-3"></i>
                <div>
                    <h6 class="alert-heading mb-1">No Models Configured</h6>
                    <p class="mb-0">Please add models in the <a href="/configuration" class="alert-link">Configuration</a> page to start chatting.</p>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-12 col-lg-8">
                <!-- Chat Interface Card -->
                <div class="card shadow-sm border-0 mb-4">
                    <div class="card-header bg-light border-0">
                        <h5 class="mb-0">
                            <i class="fa fa-keyboard me-2"></i>Conversation
                        </h5>
                    </div>
                    <div class="card-body">
                        <!-- System Prompt -->
                        <div class="form-group mb-4">
                            <label for="systemPrompt" class="form-label fw-semibold">
                                <i class="fa fa-cog me-2"></i>System Prompt (Optional)
                            </label>
                            <textarea id="systemPrompt" 
                                      class="form-control" 
                                      rows="3" 
                                      placeholder="e.g., 'You are a helpful assistant', 'Respond as a SQL expert'"
                                      @bind="systemPrompt"></textarea>
                            <div class="form-text">
                                Instructions that define the AI's behavior for the entire conversation
                            </div>
                        </div>
                        
                        <!-- User Message -->
                        <div class="form-group mb-4">
                            <label for="userMessage" class="form-label fw-semibold">
                                <i class="fa fa-user me-2"></i>Your Message
                            </label>
                            <textarea id="userMessage" 
                                      class="form-control" 
                                      rows="4" 
                                      placeholder="Type your message here..." 
                                      @bind="userMessage"></textarea>
                        </div>
                        
                        <!-- Action Buttons -->
                        <div class="d-flex gap-2 mb-4">
                            <button type="button" 
                                    class="btn btn-primary btn-lg" 
                                    @onclick="SendRequest" 
                                    disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Sending...</span>
                                }
                                else
                                {
                                    <i class="fa fa-paper-plane me-2"></i>
                                    <span>Send Message</span>
                                }
                            </button>
                            
                            <button type="button" 
                                    class="btn btn-outline-danger" 
                                    @onclick="ClearChat" 
                                    disabled="@isLoading">
                                <i class="fa fa-trash me-2"></i>
                                Clear Chat
                            </button>
                        </div>
                        
                    </div>
                </div>

                <!-- Chat History Card -->
                <div class="card shadow-sm border-0">
                    <div class="card-header bg-light border-0">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">
                                <i class="fa fa-history me-2"></i>Chat History
                            </h5>
                            <span class="badge bg-secondary">@chatHistory.Count messages</span>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div style="height: 500px;">
                            <ChatHistory Messages="chatHistory" 
                                         IsLoading="isLoading" 
                                         StreamingMessage="streamedResponse"
                                         ShowRawMessage="_showRawMessage"
                                         AutoScroll="_autoScroll"
                                         OnDeleteMessage="DeleteMessage"
                                         OnRegenerateMessage="RegenerateMessage" />
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-12 col-lg-4">
                <!-- Model Settings Card -->
                <div class="card shadow-sm border-0 mb-4">
                    <div class="card-header bg-light border-0">
                        <h6 class="mb-0">
                            <i class="fa fa-sliders-h me-2"></i>Model Settings
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="form-group mb-3">
                            <label for="modelSelect" class="form-label fw-semibold">
                                <i class="fa fa-robot me-2"></i>Model
                            </label>
                            <select id="modelSelect" 
                                    class="form-select" 
                                    @bind="selectedModelAlias">
                                @foreach (var mapping in modelMappings)
                                {
                                    <option value="@mapping.ModelId">@mapping.ModelId</option>
                                }
                            </select>
                        </div>
                        
                        <div class="form-group mb-3">
                            <label for="apiKey" class="form-label fw-semibold">
                                <i class="fa fa-key me-2"></i>API Key (Optional)
                            </label>
                            <input type="password" 
                                   id="apiKey" 
                                   class="form-control" 
                                   placeholder="Override default key"
                                   @bind="apiKey" />
                            <div class="form-text">Overrides the configured key for testing</div>
                        </div>
                    </div>
                </div>

                <!-- Response Settings Card -->
                <div class="card shadow-sm border-0 mb-4">
                    <div class="card-header bg-light border-0">
                        <h6 class="mb-0">
                            <i class="fa fa-cogs me-2"></i>Response Settings
                        </h6>
                    </div>
                    <div class="card-body">
                        <!-- Temperature -->
                        <div class="mb-3">
                            <label for="temperatureSlider" class="form-label fw-semibold">
                                <i class="fa fa-thermometer-half me-2"></i>Temperature: 
                                <span class="badge bg-primary">@temperature.ToString("F2")</span>
                            </label>
                            <input type="range" 
                                   class="form-range" 
                                   id="temperatureSlider" 
                                   min="0" max="1" step="0.01" 
                                   @bind-value="temperature" 
                                   @bind-value:event="oninput" />
                            <div class="form-text">Controls randomness (0 = deterministic, 1 = creative)</div>
                        </div>
                        
                        <!-- Top P -->
                        <div class="mb-3">
                            <label for="topPSlider" class="form-label fw-semibold">
                                <i class="fa fa-filter me-2"></i>Top P: 
                                <span class="badge bg-success">@topP.ToString("F2")</span>
                            </label>
                            <input type="range" 
                                   class="form-range" 
                                   id="topPSlider" 
                                   min="0" max="1" step="0.01" 
                                   @bind-value="topP" 
                                   @bind-value:event="oninput" />
                            <div class="form-text">Nucleus sampling (lower = more focused)</div>
                        </div>
                        
                        <!-- Stop Sequences -->
                        <div class="form-group mb-3">
                            <label for="stopSequences" class="form-label fw-semibold">
                                <i class="fa fa-stop-circle me-2"></i>Stop Sequences
                            </label>
                            <input type="text" 
                                   id="stopSequences" 
                                   class="form-control" 
                                   placeholder="e.g., \n, END, STOP"
                                   @bind="stopSequences" />
                            <div class="form-text">Comma-separated sequences to stop generation</div>
                        </div>
                    </div>
                </div>

                <!-- Advanced Options Card -->
                <div class="card shadow-sm border-0 mb-4">
                    <div class="card-header bg-light border-0">
                        <h6 class="mb-0">
                            <i class="fa fa-wrench me-2"></i>Options
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="form-check form-switch mb-3">
                            <input class="form-check-input" 
                                   type="checkbox" 
                                   id="streamResponse" 
                                   @bind="_streamResponse" />
                            <label class="form-check-label fw-semibold" for="streamResponse">
                                <i class="fa fa-stream me-2"></i>Stream Response
                            </label>
                            <div class="form-text">Real-time streaming like ChatGPT</div>
                        </div>
                        
                        <div class="form-check form-switch mb-3">
                            <input class="form-check-input" 
                                   type="checkbox" 
                                   id="showRawMessage" 
                                   @bind="_showRawMessage" />
                            <label class="form-check-label fw-semibold" for="showRawMessage">
                                <i class="fa fa-code me-2"></i>Show Raw Message
                            </label>
                            <div class="form-text">Display raw JSON response data</div>
                        </div>
                        
                        <div class="form-check form-switch mb-3">
                            <input class="form-check-input" 
                                   type="checkbox" 
                                   id="autoScroll" 
                                   @bind="_autoScroll" />
                            <label class="form-check-label fw-semibold" for="autoScroll">
                                <i class="fa fa-arrows-alt-v me-2"></i>Auto Scroll
                            </label>
                            <div class="form-text">Auto-scroll to newest messages</div>
                        </div>
                    </div>
                </div>

                <!-- Function Options Card -->
                <div class="card shadow-sm border-0">
                    <div class="card-header bg-light border-0">
                        <h6 class="mb-0">
                            <i class="fa fa-function me-2"></i>Function Calling
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="form-check form-switch mb-3">
                            <input class="form-check-input" 
                                   type="checkbox" 
                                   id="executeFunctions" 
                                   @bind="_executeFunctions" />
                            <label class="form-check-label fw-semibold" for="executeFunctions">
                                <i class="fa fa-play me-2"></i>Execute Functions
                            </label>
                            <div class="form-text">Allow function/tool execution</div>
                        </div>
                        
                        <div class="form-check form-switch mb-0">
                            <input class="form-check-input" 
                                   type="checkbox" 
                                   id="appendFunctionResult" 
                                   @bind="_appendFunctionResult" />
                            <label class="form-check-label fw-semibold" for="appendFunctionResult">
                                <i class="fa fa-plus me-2"></i>Append Results
                            </label>
                            <div class="form-text">Add function results to chat history</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .chat-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
    }
    
    .chat-stats .stat-item {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 20px;
        padding: 0.5rem 1rem;
        display: inline-block;
    }
    
    
    .card {
        transition: all 0.2s ease;
    }
    
    .card:hover {
        transform: translateY(-1px);
    }
    
    .form-range::-webkit-slider-thumb {
        background: #667eea;
        border: none;
        box-shadow: 0 2px 6px rgba(102, 126, 234, 0.3);
    }
    
    .form-range::-moz-range-thumb {
        background: #667eea;
        border: none;
        box-shadow: 0 2px 6px rgba(102, 126, 234, 0.3);
    }
    
    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
    }
    
    .btn-primary:hover {
        transform: translateY(-1px);
        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
    }
    
    .badge {
        font-size: 0.7rem;
        padding: 0.3rem 0.6rem;
    }
    
    .bg-gradient-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
    }
</style>

@code {
    private ConduitSettings settings => ConduitSettingsOptions.Value;
    private List<ModelProviderMappingDto> modelMappings = new();
    private string selectedModelAlias = "";
    private string systemPrompt = "";
    private string userMessage = "";
    private string apiKey = "";
    private string stopSequences = "";
    private double temperature = 0.7;
    private double topP = 1.0;
    private bool _streamResponse = true;
    private bool isLoading = false;
    private List<Message> chatHistory = new();
    private string? streamedResponse = null;
    private bool _autoScroll = true;
    private bool _showRawMessage = false;
    private bool _appendFunctionResult = false;
    private bool _executeFunctions = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadModelMappingsAsync();
        // No need to call StateHasChanged here, Blazor handles it after OnInitializedAsync
    }

    private async Task LoadModelMappingsAsync()
    {
        try
        {
            // Use AdminApiClient directly
            var mappings = await AdminApiClient.GetAllModelProviderMappingsAsync();
            modelMappings = mappings.ToList();
            
            // Select the first model by default if no model is selected
            if (string.IsNullOrEmpty(selectedModelAlias) && modelMappings.Any())
            {
                selectedModelAlias = modelMappings.First().ModelId;
                Console.WriteLine($"[Chat Component] Auto-selected first model: {selectedModelAlias}");
            }
            
            Console.WriteLine($"[Chat Component] Loaded {modelMappings.Count} model mappings");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading model mappings: {ex.Message}");
            ToastService.ShowError($"Error loading model mappings: {ex.Message}");
            modelMappings = new List<ModelProviderMappingDto>();
        }
    }


    private async Task SendRequest()
    {
        Console.WriteLine($"[Chat Component] SendRequest called. Model: '{selectedModelAlias}', Message: '{userMessage}'");
        
        if (string.IsNullOrWhiteSpace(userMessage) || string.IsNullOrWhiteSpace(selectedModelAlias))
        {
            ToastService.ShowError("Please select a model and enter a user message.");
            Console.WriteLine($"[Chat Component] Validation failed. Model empty: {string.IsNullOrWhiteSpace(selectedModelAlias)}, Message empty: {string.IsNullOrWhiteSpace(userMessage)}");
            return;
        }

        isLoading = true;
        
        try
        {
            // Add user message to chat history
            var userChatMessage = new Message { Role = "user", Content = userMessage, Timestamp = DateTime.Now };
            chatHistory.Add(userChatMessage);
            
            // Add system message if provided
            var messages = new List<Message>();
            if (!string.IsNullOrWhiteSpace(systemPrompt))
            {
                messages.Add(new Message { Role = "system", Content = systemPrompt });
            }
            messages.Add(userChatMessage);
            
            // Reset user message input
            userMessage = "";
            
            // Create request payload
            var chatRequest = new ChatCompletionRequest
            {
                Model = selectedModelAlias,
                Messages = messages,
                Temperature = temperature, 
                TopP = topP, 
                Stop = !string.IsNullOrEmpty(stopSequences) ? 
                    stopSequences.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).ToList() : null,
                Stream = _streamResponse
            };

            if (_streamResponse)
            {
                // Handle streaming response using server-side service
                streamedResponse = ""; // Reset the streamed response
                
                // Add assistant message to chat history
                chatHistory.Add(new Message { Role = "assistant", Content = "", Timestamp = DateTime.Now });
                
                await foreach (var chunk in ConduitApiClient.CreateStreamingChatCompletionAsync(chatRequest))
                {
                    ProcessStreamResponse(chunk);
                }
                
                // Final message is complete
                if (!string.IsNullOrEmpty(streamedResponse))
                {
                    // Update the last message (assistant) with complete content
                    var lastMessage = chatHistory.LastOrDefault();
                    if (lastMessage != null && lastMessage.Role == "assistant")
                    {
                        lastMessage.Content = streamedResponse;
                    }
                }
            }
            else
            {
                // Handle non-streaming response using server-side service
                var chatResponse = await ConduitApiClient.CreateChatCompletionAsync(chatRequest);
                
                if (chatResponse?.Choices != null && chatResponse.Choices.Count > 0)
                {
                    var assistantMessage = chatResponse.Choices[0].Message;
                    chatHistory.Add(new Message
                    {
                        Role = assistantMessage.Role,
                        Content = assistantMessage.Content,
                        Timestamp = DateTime.Now
                    });
                }
                else
                {
                    ToastService.ShowError("No response content received.");
                    return;
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Request failed: {ex.Message}");
            Console.Error.WriteLine(ex.ToString());
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private void ProcessStreamResponse(ChatCompletionChunk? streamResponse)
    {
        if (streamResponse?.Choices == null || streamResponse.Choices.Count == 0)
            return;
            
        var choice = streamResponse.Choices[0];
        var delta = choice.Delta;
        
        if (delta == null)
            return;
            
        // If there's content, append it
        if (!string.IsNullOrEmpty(delta.Content))
        {
            streamedResponse += delta.Content;
            
            // Update the last message in chat history
            var lastMessage = chatHistory.LastOrDefault();
            if (lastMessage != null && lastMessage.Role == "assistant")
            {
                lastMessage.Content = streamedResponse;
                StateHasChanged();
            }
        }
    }
    
    
    private string[]? ParseStopSequences(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return null;
            
        return input.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
    }
    
    private void ClearChat()
    {
        chatHistory.Clear();
        streamedResponse = null;
    }
    
    private Task DeleteMessage(int index)
    {
        if (index >= 0 && index < chatHistory.Count)
        {
            chatHistory.RemoveAt(index);
            StateHasChanged();
        }
        return Task.CompletedTask;
    }
    
    private async Task RegenerateMessage(int index)
    {
        if (index >= 0 && index < chatHistory.Count && chatHistory[index].Role == "assistant")
        {
            // Remove this message and all messages after it
            chatHistory.RemoveRange(index, chatHistory.Count - index);
            
            // Find the last user message
            var lastUserMessage = chatHistory.LastOrDefault(m => m.Role == "user");
            if (lastUserMessage != null)
            {
                // Temporarily store the user message content
                var tempUserMessage = lastUserMessage.Content?.ToString() ?? "";
                
                // Set the userMessage field to the last user message
                userMessage = tempUserMessage;
                
                // Trigger a new request
                await SendRequest();
            }
        }
    }
}