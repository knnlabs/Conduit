@page "/searchable-dropdown-demo"
@using ConduitLLM.Configuration
@using ConfigDTO = ConduitLLM.Configuration.DTOs
@rendermode InteractiveServer

<PageTitle>Searchable Dropdown Demo</PageTitle>

<h3>Searchable Dropdown Component Demo</h3>

<div class="row mt-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Basic Searchable Dropdown</h5>
            </div>
            <div class="card-body">
                <p class="text-muted">A simple searchable dropdown with string items.</p>
                
                <label class="form-label">Select a Framework:</label>
                <SearchableDropdown TItem="string"
                                    Items="@frameworks"
                                    @bind-SelectedValue="@selectedFramework"
                                    Placeholder="Choose a framework..."
                                    SearchPlaceholder="Search frameworks..." />
                
                @if (!string.IsNullOrEmpty(selectedFramework))
                {
                    <div class="alert alert-info mt-3">
                        You selected: <strong>@selectedFramework</strong>
                    </div>
                }
            </div>
        </div>
    </div>
    
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Model Searchable Dropdown</h5>
            </div>
            <div class="card-body">
                <p class="text-muted">A specialized dropdown for AI models with cost information.</p>
                
                <label class="form-label">Select an AI Model:</label>
                <ModelSearchableDropdown 
                    Models="@sampleModels"
                    @bind-SelectedModelId="@selectedModel"
                    ProviderName="OpenAI"
                    ModelCosts="@sampleCosts"
                    Placeholder="Choose a model..." />
                
                @if (!string.IsNullOrEmpty(selectedModel))
                {
                    <div class="alert alert-success mt-3">
                        You selected: <strong>@selectedModel</strong>
                        @{
                            var cost = sampleCosts.FirstOrDefault(c => c.ModelIdPattern == selectedModel);
                            if (cost != null)
                            {
                                var inputCostPerMillion = cost.InputTokenCost * 1_000_000;
                                var outputCostPerMillion = cost.OutputTokenCost * 1_000_000;
                                <br />
                                <small>
                                    Input: $@inputCostPerMillion/M tokens, 
                                    Output: $@outputCostPerMillion/M tokens
                                </small>
                            }
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Advanced Example with Custom Objects</h5>
            </div>
            <div class="card-body">
                <p class="text-muted">Demonstrating custom search filters and descriptions.</p>
                
                <label class="form-label">Select a Product:</label>
                <SearchableDropdown TItem="Product"
                                    Items="@products"
                                    @bind-SelectedValue="@selectedProductId"
                                    ValueSelector="@(p => p.Id.ToString())"
                                    DisplaySelector="@(p => p.Name)"
                                    DescriptionSelector="@(p => $"{p.Category} - ${p.Price:F2}")"
                                    Placeholder="Choose a product..."
                                    SearchPlaceholder="Search by name, category, or price..."
                                    CustomSearchFilter="@SearchProducts" />
                
                @if (!string.IsNullOrEmpty(selectedProductId))
                {
                    var product = products.FirstOrDefault(p => p.Id.ToString() == selectedProductId);
                    if (product != null)
                    {
                        <div class="alert alert-primary mt-3">
                            <h6>Selected Product:</h6>
                            <strong>@product.Name</strong><br />
                            Category: @product.Category<br />
                            Price: $@product.Price
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string selectedFramework = "";
    private string selectedModel = "";
    private string selectedProductId = "";
    
    private List<string> frameworks = new()
    {
        "ASP.NET Core", "Blazor", "React", "Angular", "Vue.js", 
        "Svelte", "Next.js", "Nuxt.js", "Express.js", "Django",
        "Flask", "Ruby on Rails", "Laravel", "Spring Boot"
    };
    
    private List<string> sampleModels = new()
    {
        "gpt-4o", "gpt-4o-mini", "gpt-4-turbo", "gpt-3.5-turbo",
        "gpt-4-vision-preview", "text-embedding-3-small", "text-embedding-3-large",
        "dall-e-3", "dall-e-2", "whisper-1", "tts-1", "tts-1-hd"
    };
    
    private List<ConfigDTO.ModelCostDto> sampleCosts = new()
    {
        new() { ModelIdPattern = "gpt-4o", InputTokenCost = 0.0000025M, OutputTokenCost = 0.00001M },
        new() { ModelIdPattern = "gpt-4o-mini", InputTokenCost = 0.00000015M, OutputTokenCost = 0.0000006M },
        new() { ModelIdPattern = "gpt-4-turbo", InputTokenCost = 0.00001M, OutputTokenCost = 0.00003M },
        new() { ModelIdPattern = "gpt-3.5-turbo", InputTokenCost = 0.0000005M, OutputTokenCost = 0.0000015M },
        new() { ModelIdPattern = "text-embedding-3-small", InputTokenCost = 0.00000002M, OutputTokenCost = 0M },
        new() { ModelIdPattern = "text-embedding-3-large", InputTokenCost = 0.00000013M, OutputTokenCost = 0M },
        new() { ModelIdPattern = "whisper-1", InputTokenCost = 0M, OutputTokenCost = 0M }
    };
    
    private List<Product> products = new()
    {
        new() { Id = 1, Name = "MacBook Pro 16\"", Category = "Laptops", Price = 2499.99M },
        new() { Id = 2, Name = "iPhone 15 Pro", Category = "Smartphones", Price = 999.99M },
        new() { Id = 3, Name = "AirPods Pro", Category = "Audio", Price = 249.99M },
        new() { Id = 4, Name = "iPad Pro 12.9\"", Category = "Tablets", Price = 1099.99M },
        new() { Id = 5, Name = "Apple Watch Ultra", Category = "Wearables", Price = 799.99M },
        new() { Id = 6, Name = "Magic Keyboard", Category = "Accessories", Price = 349.99M },
        new() { Id = 7, Name = "Studio Display", Category = "Monitors", Price = 1599.99M },
        new() { Id = 8, Name = "Mac Mini M2", Category = "Desktops", Price = 599.99M }
    };
    
    private bool SearchProducts(Product product, string searchTerm)
    {
        var searchLower = searchTerm.ToLowerInvariant();
        
        // Search in name
        if (product.Name.ToLowerInvariant().Contains(searchLower))
            return true;
            
        // Search in category
        if (product.Category.ToLowerInvariant().Contains(searchLower))
            return true;
            
        // Search in price
        if (product.Price.ToString("F2").Contains(searchLower))
            return true;
            
        return false;
    }
    
    private class Product
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Category { get; set; } = "";
        public decimal Price { get; set; }
    }
}