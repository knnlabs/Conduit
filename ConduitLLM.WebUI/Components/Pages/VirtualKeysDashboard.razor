@page "/virtualkeys/dashboard"
@using ConduitLLM.WebUI.Data
@using ConduitLLM.WebUI.Services
// Fully qualify VirtualKeyDto to avoid ambiguity
@using VirtualKeyDto = ConduitLLM.Configuration.DTOs.VirtualKey.VirtualKeyDto
@using ConduitLLM.Configuration.Constants
@using ConduitLLM.Core.Interfaces
@using ConduitLLM.WebUI.Interfaces
@using ConduitLLM.WebUI.DTOs
@using Microsoft.EntityFrameworkCore
@using System.Globalization
@inject ConduitLLM.WebUI.Interfaces.IVirtualKeyService VirtualKeyService
@inject ConduitLLM.WebUI.Interfaces.IRequestLogService RequestLogService
@inject NavigationManager NavigationManager
@inject ILogger<VirtualKeysDashboard> Logger
@rendermode InteractiveServer

<h3 class="mb-4">Virtual Keys Dashboard</h3>

<p class="mb-4">
    Monitor your virtual key usage, spending patterns, and budget allocation across all your keys.
</p>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mb-4" role="alert">@errorMessage</div>
}

@if (isLoading)
{
    <div class="d-flex flex-column align-items-center p-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-4">Loading dashboard data...</p>
    </div>
}
else
{
    <div class="row">
        <div class="col-12 col-sm-6 col-md-3 mb-4">
            <div class="card shadow-sm h-100">
                <div class="card-body p-4 d-flex flex-column align-items-center">
                    <h3>@totalKeys</h3>
                    <p class="text-secondary">Total Keys</p>
                </div>
            </div>
        </div>
        <div class="col-12 col-sm-6 col-md-3 mb-4">
            <div class="card shadow-sm h-100">
                <div class="card-body p-4 d-flex flex-column align-items-center">
                    <h3>@activeKeys</h3>
                    <p class="text-secondary">Active Keys</p>
                </div>
            </div>
        </div>
        <div class="col-12 col-sm-6 col-md-3 mb-4">
            <div class="card shadow-sm h-100">
                <div class="card-body p-4 d-flex flex-column align-items-center">
                    <h3>$@totalSpend.ToString("N2")</h3>
                    <p class="text-secondary">Total Spend</p>
                </div>
            </div>
        </div>
        <div class="col-12 col-sm-6 col-md-3 mb-4">
            <div class="card shadow-sm h-100">
                <div class="card-body p-4 d-flex flex-column align-items-center">
                    <h3>@totalRequests</h3>
                    <p class="text-secondary">Total Requests</p>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12 col-lg-8 mb-4">
            <div class="card shadow-sm">
                <div class="card-header d-flex justify-content-between align-items-center p-3">
                    <h6 class="mb-0">Spending by Key</h6>
                    <div>
                        <label for="timeRange" class="form-label visually-hidden">Time Range</label>
                        <select id="timeRange" class="form-select form-select-sm" style="min-width: 150px;" @bind="timeRange">
                            <option value="7">Last 7 Days</option>
                            <option value="30">Last 30 Days</option>
                            <option value="90">Last 90 Days</option>
                            <option value="365">Last Year</option>
                        </select>
                    </div>
                </div>
                <div class="card-body p-4">
                    <div style="position: relative; height:300px; width:100%">
                        <!-- This div will be used for the chart -->
                        <canvas id="spendingChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12 col-lg-4 mb-4">
            <div class="card shadow-sm">
                <div class="card-body p-4">
                    <h6 class="mb-4">Keys Approaching Budget Limits</h6>
                    
                    @if (highUsageKeys.Count == 0)
                    {
                        <div class="d-flex flex-column align-items-center p-4">
                            <i class="fa fa-check-circle text-success fa-2x"></i>
                            <p class="mt-2">No keys approaching budget limits</p>
                        </div>
                    }
                    else
                    {
                        <ul class="list-group list-group-flush">
                            @foreach (var key in highUsageKeys)
                            {
                                <li class="list-group-item p-2">
                                    <a href="@($"/virtualkeys/edit/{key.Id}")" class="text-decoration-none">
                                        <div style="width: 100%;">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span class="fw-medium">@key.KeyName</span>
                                                <small>@GetBudgetUsagePercentage(key)%</small>
                                            </div>
                                            <div class="progress my-1" style="height: 4px;">
                                                <div class="progress-bar @GetBudgetProgressColorClass(key)" 
                                                     role="progressbar" 
                                                     style="width: @GetBudgetUsagePercentage(key)%" 
                                                     aria-valuenow="@GetBudgetUsagePercentage(key)" 
                                                     aria-valuemin="0" 
                                                     aria-valuemax="100"></div>
                                            </div>
                                            <small class="text-secondary">
                                                $@key.CurrentSpend.ToString("N2") of $@key.MaxBudget?.ToString("N2")
                                            </small>
                                        </div>
                                    </a>
                                </li>
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="card shadow-sm mt-4">
        <div class="card-header d-flex justify-content-between align-items-center p-3">
            <h6 class="mb-0">Key Usage Overview</h6>
            <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="RefreshData">
                <i class="fa fa-refresh me-1"></i>
                Refresh
            </button>
        </div>
        
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Key Name</th>
                        <th>Status</th>
                        <th>Budget</th>
                        <th>Requests</th>
                        <th>Avg Response</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in virtualKeys.OrderByDescending(k => k.CurrentSpend))
                    {
                        <tr style="cursor: pointer" @onclick="() => SelectKey(item.Id)">
                            <td data-label="Key Name">@item.KeyName</td>
                            <td data-label="Status">
                                @if (item.IsEnabled)
                                {
                                    <span class="badge bg-success">Active</span>
                                }
                                else
                                {
                                    <span class="badge bg-danger">Disabled</span>
                                }
                                @if (item.ExpiresAt.HasValue && item.ExpiresAt.Value < DateTime.UtcNow)
                                {
                                    <span class="badge bg-secondary ms-1">Expired</span>
                                }
                            </td>
                            <td data-label="Budget">
                                @if (item.MaxBudget.HasValue)
                                {
                                    <div>
                                        <div class="d-flex justify-content-between">
                                            <small>$@item.CurrentSpend.ToString("N2")</small>
                                            <small>$@item.MaxBudget.Value.ToString("N2")</small>
                                        </div>
                                        <div class="progress my-1" style="height: 4px;">
                                            <div class="progress-bar @GetBudgetProgressColorClass(item)" 
                                                role="progressbar" 
                                                style="width: @GetBudgetUsagePercentage(item)%" 
                                                aria-valuenow="@GetBudgetUsagePercentage(item)" 
                                                aria-valuemin="0" 
                                                aria-valuemax="100"></div>
                                        </div>
                                        <small class="text-secondary">@(item.BudgetDuration ?? "Total")</small>
                                    </div>
                                }
                                else
                                {
                                    <span>No limit</span>
                                }
                            </td>
                            <td data-label="Requests">
                                @{
                                    var keySummary = keySummaries.FirstOrDefault(k => k.VirtualKeyId == item.Id);
                                }
                                @if (keySummary != null)
                                {
                                    <div>
                                        <div>@(keySummary.TotalRequests)</div>
                                        <small class="text-secondary">@(keySummary.RecentRequests) in last 24h</small>
                                    </div>
                                }
                                else
                                {
                                    <span>No data</span>
                                }
                            </td>
                            <td data-label="Avg Response">
                                @{
                                    var summary = keySummaries.FirstOrDefault(k => k.VirtualKeyId == item.Id);
                                }
                                @if (summary != null && summary.TotalRequests > 0)
                                {
                                    <span>@summary.AverageResponseTime.ToString("N0")ms</span>
                                }
                                else
                                {
                                    <span>-</span>
                                }
                            </td>
                            <td data-label="Actions">
                                <div class="btn-group" role="group">
                                    <button type="button" class="btn btn-sm btn-outline-primary" @onclick="@((MouseEventArgs e) => { NavigateToEdit(item.Id); return Task.CompletedTask; })">Edit</button>
                                    <button type="button" class="btn btn-sm btn-outline-info" @onclick="@((MouseEventArgs e) => { ViewDetails(item.Id); return Task.CompletedTask; })">Details</button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    @if (selectedKeyId > 0)
    {
        <VirtualKeyUsageDetails KeyId="@selectedKeyId" />
    }
}

@code {
    private bool isLoading = true;
    private string? errorMessage;
    private List<VirtualKeyDto> virtualKeys = new();
    private List<VirtualKeyDto> highUsageKeys = new();
    private List<KeyAggregateSummary> keySummaries = new();
    private int selectedKeyId = 0;
    private int timeRange = 30;
    
    // Dashboard stats
    private int totalKeys = 0;
    private int activeKeys = 0;
    private decimal totalSpend = 0;
    private int totalRequests = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        isLoading = true;
        errorMessage = null;
        
        try
        {
            // Load all virtual keys
            virtualKeys = await VirtualKeyService.ListVirtualKeysAsync();
            
            // Calculate dashboard stats
            totalKeys = virtualKeys.Count;
            activeKeys = virtualKeys.Count(k => k.IsEnabled && 
                                             (!k.ExpiresAt.HasValue || k.ExpiresAt.Value > DateTime.UtcNow));
            totalSpend = virtualKeys.Sum(k => k.CurrentSpend);
            
            // Find keys approaching their budget limit
            highUsageKeys = virtualKeys
                .Where(k => k.MaxBudget.HasValue && 
                           k.IsEnabled && 
                           (k.CurrentSpend / k.MaxBudget.Value) >= VirtualKeyConstants.BudgetWarningThresholds.Low / 100m)
                .OrderByDescending(k => k.CurrentSpend / k.MaxBudget!.Value)
                .ToList();
                
            // Load usage summaries for all keys
            keySummaries = await RequestLogService.GetAllKeysUsageSummaryAsync() ?? new List<KeyAggregateSummary>();
            totalRequests = keySummaries?.Sum(k => k.TotalRequests) ?? 0;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading dashboard data: {ex.Message}";
            Logger.LogError(ex, "Error loading virtual keys dashboard data");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshData()
    {
        await LoadDataAsync();
    }

    private void SelectKey(int keyId)
    {
        if (selectedKeyId == keyId)
        {
            selectedKeyId = 0; // Toggle off
        }
        else
        {
            selectedKeyId = keyId;
        }
    }

    private void NavigateToEdit(int keyId)
    {
        NavigationManager.NavigateTo($"/virtualkeys/edit/{keyId}");
    }

    private void ViewDetails(int keyId)
    {
        selectedKeyId = keyId;
    }

    private string GetBudgetProgressColorClass(VirtualKeyDto key)
    {
        if (!key.MaxBudget.HasValue || key.MaxBudget.Value == 0)
            return "bg-secondary";
            
        var percentage = (key.CurrentSpend / key.MaxBudget.Value) * 100;
        
        if (percentage >= VirtualKeyConstants.BudgetWarningThresholds.High)
            return "bg-danger";
        if (percentage >= VirtualKeyConstants.BudgetWarningThresholds.Medium)
            return "bg-warning";
        if (percentage >= VirtualKeyConstants.BudgetWarningThresholds.Low)
            return "bg-info";
            
        return "bg-success";
    }
    
    private int GetBudgetUsagePercentage(VirtualKeyDto key)
    {
        if (!key.MaxBudget.HasValue || key.MaxBudget.Value == 0)
            return 0;
            
        var percentage = (key.CurrentSpend / key.MaxBudget.Value) * 100;
        return (int)Math.Min(100, percentage);
    }
}