@page "/virtualkeys/dashboard"
@using ConduitLLM.WebUI.Data
@using ConduitLLM.WebUI.Services
@using ConduitLLM.Configuration.DTOs.VirtualKey
@using ConduitLLM.Configuration.Constants
@using ConduitLLM.Core.Interfaces
@using Microsoft.EntityFrameworkCore
@using System.Globalization
@inject IVirtualKeyService VirtualKeyService
@inject RequestLogService RequestLogService
@inject NavigationManager NavigationManager
@inject ILogger<VirtualKeysDashboard> Logger
@rendermode InteractiveServer

<MudText Typo="Typo.h3" Class="mb-4">Virtual Keys Dashboard</MudText>

<MudText Typo="Typo.body1" Class="mb-4">
    Monitor your virtual key usage, spending patterns, and budget allocation across all your keys.
</MudText>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <MudAlert Severity="Severity.Error" Class="mb-4">@errorMessage</MudAlert>
}

@if (isLoading)
{
    <div class="d-flex flex-column align-center pa-4">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        <MudText Class="mt-4">Loading dashboard data...</MudText>
    </div>
}
else
{
    <MudGrid>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="2" Class="pa-4 mud-height-full">
                <div class="d-flex flex-column align-center">
                    <MudText Typo="Typo.h3">@totalKeys</MudText>
                    <MudText Typo="Typo.subtitle1" Color="Color.Secondary">Total Keys</MudText>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="2" Class="pa-4 mud-height-full">
                <div class="d-flex flex-column align-center">
                    <MudText Typo="Typo.h3">@activeKeys</MudText>
                    <MudText Typo="Typo.subtitle1" Color="Color.Secondary">Active Keys</MudText>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="2" Class="pa-4 mud-height-full">
                <div class="d-flex flex-column align-center">
                    <MudText Typo="Typo.h3">$@totalSpend.ToString("N2")</MudText>
                    <MudText Typo="Typo.subtitle1" Color="Color.Secondary">Total Spend</MudText>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="2" Class="pa-4 mud-height-full">
                <div class="d-flex flex-column align-center">
                    <MudText Typo="Typo.h3">@totalRequests</MudText>
                    <MudText Typo="Typo.subtitle1" Color="Color.Secondary">Total Requests</MudText>
                </div>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <MudGrid Class="mt-4">
        <MudItem xs="12" lg="8">
            <MudPaper Elevation="2" Class="mb-4">
                <div class="d-flex justify-space-between align-center pa-4">
                    <MudText Typo="Typo.h6">Spending by Key</MudText>
                    <MudSelect T="int" 
                               @bind-Value="timeRange"
                               Label="Time Range"
                               Variant="Variant.Outlined"
                               Dense="true"
                               Style="min-width: 150px;">
                        <MudSelectItem Value="7">Last 7 Days</MudSelectItem>
                        <MudSelectItem Value="30">Last 30 Days</MudSelectItem>
                        <MudSelectItem Value="90">Last 90 Days</MudSelectItem>
                        <MudSelectItem Value="365">Last Year</MudSelectItem>
                    </MudSelect>
                </div>
                <div class="pa-4">
                    <div style="position: relative; height:300px; width:100%">
                        <!-- This div will be used for the chart -->
                        <canvas id="spendingChart"></canvas>
                    </div>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" lg="4">
            <MudPaper Elevation="2" Class="mb-4">
                <div class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-4">Keys Approaching Budget Limits</MudText>
                    
                    @if (highUsageKeys.Count == 0)
                    {
                        <div class="d-flex flex-column align-center pa-4">
                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Large" />
                            <MudText Class="mt-2">No keys approaching budget limits</MudText>
                        </div>
                    }
                    else
                    {
                        <MudList T="VirtualKeyDto" Clickable="true" Dense="true">
                            @foreach (var key in highUsageKeys)
                            {
                                <MudListItem T="string" Href="@($"/virtualkeys/edit/{key.Id}")">
                                    <div style="width: 100%;">
                                        <div class="d-flex justify-space-between align-center">
                                            <MudText Typo="Typo.subtitle2">@key.KeyName</MudText>
                                            <MudText Typo="Typo.caption">@GetBudgetUsagePercentage(key)%</MudText>
                                        </div>
                                        <MudProgressLinear Color="@GetBudgetProgressColor(key)" 
                                                          Value="@GetBudgetUsagePercentage(key)" 
                                                          Style="height: 4px;" 
                                                          Class="my-1" />
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                                            $@key.CurrentSpend.ToString("N2") of $@key.MaxBudget?.ToString("N2")
                                        </MudText>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    }
                </div>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <MudPaper Elevation="2" Class="mt-4">
        <div class="d-flex justify-space-between align-center pa-4">
            <MudText Typo="Typo.h6">Key Usage Overview</MudText>
            <MudButton 
                Variant="Variant.Outlined" 
                Size="Size.Small" 
                Color="Color.Secondary" 
                StartIcon="@Icons.Material.Filled.Refresh" 
                OnClick="RefreshData">
                Refresh
            </MudButton>
        </div>
        
        <MudTable T="VirtualKeyDto" Items="@virtualKeys.OrderByDescending(k => k.CurrentSpend)" 
                  Hover="true" 
                  Breakpoint="Breakpoint.Sm" 
                  RowClassFunc="@((VirtualKeyDto item, int index) => "cursor-pointer")"
                  OnRowClick="@((TableRowClickEventArgs<VirtualKeyDto> e) => SelectKey(e.Item?.Id ?? 0))">
            <HeaderContent>
                <MudTh>Key Name</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Budget</MudTh>
                <MudTh>Requests</MudTh>
                <MudTh>Avg Response</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Key Name">@context.KeyName</MudTd>
                <MudTd DataLabel="Status">
                    @if (context.IsEnabled)
                    {
                        <MudChip T="string" Size="Size.Small" Color="Color.Success" Label="true">Active</MudChip>
                    }
                    else
                    {
                        <MudChip T="string" Size="Size.Small" Color="Color.Error" Label="true">Disabled</MudChip>
                    }
                    @if (context.ExpiresAt.HasValue && context.ExpiresAt.Value < DateTime.UtcNow)
                    {
                        <MudChip T="string" Size="Size.Small" Color="Color.Default" Label="true" Class="ml-1">Expired</MudChip>
                    }
                </MudTd>
                <MudTd DataLabel="Budget">
                    @{
                        var keySummary = keySummaries.FirstOrDefault(k => k.VirtualKeyId == context.Id);
                    }
                    @if (context.MaxBudget.HasValue)
                    {
                        <div>
                            <div class="d-flex justify-space-between">
                                <MudText Typo="Typo.caption">$@context.CurrentSpend.ToString("N2")</MudText>
                                <MudText Typo="Typo.caption">$@context.MaxBudget.Value.ToString("N2")</MudText>
                            </div>
                            <MudProgressLinear 
                                Color="@GetBudgetProgressColor(context)" 
                                Value="@GetBudgetUsagePercentage(context)" 
                                Class="my-1" 
                                Style="height: 4px;" />
                            <MudText Typo="Typo.caption" Color="Color.Secondary">@(context.BudgetDuration ?? "Total")</MudText>
                        </div>
                    }
                    else
                    {
                        <MudText>No limit</MudText>
                    }
                </MudTd>
                <MudTd DataLabel="Requests">
                    @if (GetKeySummary(context.Id) != null)
                    {
                        var summary = GetKeySummary(context.Id);
                        <div>
                            <MudText>@(summary?.TotalRequests ?? 0)</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Secondary">@(summary?.RecentRequests ?? 0) in last 24h</MudText>
                        </div>
                    }
                    else
                    {
                        <MudText>No data</MudText>
                    }
                </MudTd>
                <MudTd DataLabel="Avg Response">
                    @{
                        var summary = GetKeySummary(context.Id);
                    }
                    @if (summary != null && summary.TotalRequests > 0)
                    {
                        <MudText>@summary.AverageResponseTime.ToString("N0")ms</MudText>
                    }
                    else
                    {
                        <MudText>-</MudText>
                    }
                </MudTd>
                <MudTd DataLabel="Actions">
                    <MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
                        <MudButton Color="Color.Primary" OnClick="@(_ => NavigateToEdit(context.Id))">Edit</MudButton>
                        <MudButton Color="Color.Info" OnClick="@(_ => ViewDetails(context.Id))">Details</MudButton>
                    </MudButtonGroup>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>

    @if (selectedKeyId > 0)
    {
        <VirtualKeyUsageDetails KeyId="@selectedKeyId" />
    }
}

@code {
    private bool isLoading = true;
    private string? errorMessage;
    private List<VirtualKeyDto> virtualKeys = new();
    private List<VirtualKeyDto> highUsageKeys = new();
    private List<KeyAggregateSummary> keySummaries = new();
    private int selectedKeyId = 0;
    private int timeRange = 30;
    
    // Dashboard stats
    private int totalKeys = 0;
    private int activeKeys = 0;
    private decimal totalSpend = 0;
    private int totalRequests = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        isLoading = true;
        errorMessage = null;
        
        try
        {
            // Load all virtual keys
            virtualKeys = await VirtualKeyService.ListVirtualKeysAsync();
            
            // Calculate dashboard stats
            totalKeys = virtualKeys.Count;
            activeKeys = virtualKeys.Count(k => k.IsEnabled && 
                                             (!k.ExpiresAt.HasValue || k.ExpiresAt.Value > DateTime.UtcNow));
            totalSpend = virtualKeys.Sum(k => k.CurrentSpend);
            
            // Find keys approaching their budget limit
            highUsageKeys = virtualKeys
                .Where(k => k.MaxBudget.HasValue && 
                           k.IsEnabled && 
                           (k.CurrentSpend / k.MaxBudget.Value) >= VirtualKeyConstants.BudgetWarningThresholds.Low / 100m)
                .OrderByDescending(k => k.CurrentSpend / k.MaxBudget!.Value)
                .ToList();
                
            // Load usage summaries for all keys
            keySummaries = await RequestLogService.GetAllKeysUsageSummaryAsync() ?? new List<KeyAggregateSummary>();
            totalRequests = keySummaries?.Sum(k => k.TotalRequests) ?? 0;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading dashboard data: {ex.Message}";
            Logger.LogError(ex, "Error loading virtual keys dashboard data");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshData()
    {
        await LoadDataAsync();
    }

    private void SelectKey(int keyId)
    {
        if (selectedKeyId == keyId)
        {
            selectedKeyId = 0; // Toggle off
        }
        else
        {
            selectedKeyId = keyId;
        }
    }

    private void NavigateToEdit(int keyId)
    {
        NavigationManager.NavigateTo($"/virtualkeys/edit/{keyId}");
    }

    private void ViewDetails(int keyId)
    {
        selectedKeyId = keyId;
    }

    private string GetBudgetProgressClass(VirtualKeyDto key)
    {
        if (!key.MaxBudget.HasValue || key.MaxBudget.Value == 0)
            return "bg-secondary";
            
        var percentage = (key.CurrentSpend / key.MaxBudget.Value) * 100;
        
        if (percentage >= VirtualKeyConstants.BudgetWarningThresholds.High)
            return "bg-danger";
        if (percentage >= VirtualKeyConstants.BudgetWarningThresholds.Medium)
            return "bg-warning";
        if (percentage >= VirtualKeyConstants.BudgetWarningThresholds.Low)
            return "bg-info";
            
        return "bg-success";
    }
    
    private Color GetBudgetProgressColor(VirtualKeyDto key)
    {
        if (!key.MaxBudget.HasValue || key.MaxBudget.Value == 0)
            return Color.Default;
            
        var percentage = (key.CurrentSpend / key.MaxBudget.Value) * 100;
        
        if (percentage >= VirtualKeyConstants.BudgetWarningThresholds.High)
            return Color.Error;
        if (percentage >= VirtualKeyConstants.BudgetWarningThresholds.Medium)
            return Color.Warning;
        if (percentage >= VirtualKeyConstants.BudgetWarningThresholds.Low)
            return Color.Info;
            
        return Color.Success;
    }
    
    private KeyAggregateSummary? GetKeySummary(int keyId)
    {
        return keySummaries.FirstOrDefault(k => k.VirtualKeyId == keyId);
    }

    private int GetBudgetUsagePercentage(VirtualKeyDto key)
    {
        if (!key.MaxBudget.HasValue || key.MaxBudget.Value == 0)
            return 0;
            
        var percentage = (key.CurrentSpend / key.MaxBudget.Value) * 100;
        return (int)Math.Min(100, percentage);
    }
}
