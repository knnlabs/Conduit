@page "/virtualkeys/dashboard"
@attribute [Authorize(Policy = "MasterKeyPolicy")]
@using ConduitLLM.WebUI.Services
@using ConduitLLM.WebUI.Models
@using VirtualKeyDto = ConduitLLM.Configuration.DTOs.VirtualKey.VirtualKeyDto
@using ConduitLLM.Configuration.Constants
@using ConduitLLM.WebUI.Interfaces
@using ConduitLLM.WebUI.DTOs
@using System.Globalization
@using Microsoft.JSInterop
@inject ConduitLLM.WebUI.Interfaces.IVirtualKeyService VirtualKeyService
@inject IAdminApiClient AdminApiClient
@inject NavigationManager NavigationManager
@inject ILogger<VirtualKeysDashboard> Logger
@inject IToastService ToastService
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Virtual Keys Dashboard - ConduitLLM</PageTitle>

<!-- SpendNotificationListener for real-time updates -->
@if (!string.IsNullOrEmpty(masterVirtualKey))
{
    <SpendNotificationListener 
        VirtualKey="@masterVirtualKey"
        OnSpendUpdate="HandleSpendUpdate"
        OnBudgetAlert="HandleBudgetAlert"
        OnSpendSummary="HandleSpendSummary"
        OnUnusualSpending="HandleUnusualSpending"
        OnConnectionStateChanged="HandleConnectionStateChanged"
        DebugMode="false"
        AutoConnect="true" />
}

<div class="container container-xxl">
    <!-- Header Section -->
    <PageHeader Title="Virtual Keys Dashboard" 
                Description="Monitor usage patterns, spending analytics, and budget allocation across all your virtual keys"
                Icon="fa-chart-bar">
        <Statistics>
            <div class="stat-item">
                <i class="fa fa-key me-2"></i>
                <span class="small">@totalKeys Total Keys</span>
            </div>
            <div class="stat-item mt-2">
                <i class="fa fa-dollar-sign me-2"></i>
                <span class="small">$@totalSpend.ToString("N2") Total Spend</span>
            </div>
            <div class="stat-item mt-2">
                <i class="@GetConnectionIcon() me-2"></i>
                <span class="small @GetConnectionTextClass()">@connectionStatus</span>
            </div>
        </Statistics>
    </PageHeader>


    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="vkd-loading-spinner">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <p class="mt-3 text-muted fw-medium">Loading dashboard data...</p>
        </div>
    }
    else
    {
        <!-- Statistics Cards -->
        <div class="row mb-4">
            <div class="col-12 col-sm-6 col-lg-3 mb-4">
                <div class="card modern-card vkd-stat-card h-100">
                    <div class="card-body modern-card-body p-4 text-center">
                        <div class="vkd-stat-icon mb-3">
                            <i class="fa fa-key text-primary fa-2x"></i>
                        </div>
                        <h3 class="vkd-stat-number text-dark mb-2">@totalKeys</h3>
                        <p class="vkd-stat-label text-muted mb-0">Total Keys</p>
                    </div>
                </div>
            </div>
            <div class="col-12 col-sm-6 col-lg-3 mb-4">
                <div class="card modern-card vkd-stat-card h-100">
                    <div class="card-body modern-card-body p-4 text-center">
                        <div class="vkd-stat-icon mb-3">
                            <i class="fa fa-check-circle text-success fa-2x"></i>
                        </div>
                        <h3 class="vkd-stat-number text-dark mb-2">@activeKeys</h3>
                        <p class="vkd-stat-label text-muted mb-0">Active Keys</p>
                    </div>
                </div>
            </div>
            <div class="col-12 col-sm-6 col-lg-3 mb-4">
                <div class="card modern-card vkd-stat-card h-100">
                    <div class="card-body modern-card-body p-4 text-center">
                        <div class="vkd-stat-icon mb-3">
                            <i class="fa fa-dollar-sign text-warning fa-2x"></i>
                        </div>
                        <h3 class="vkd-stat-number text-dark mb-2 @(hasSpendUpdate ? "vkd-update-animation" : "")">$@totalSpend.ToString("N2")</h3>
                        <p class="vkd-stat-label text-muted mb-0">Total Spend</p>
                    </div>
                </div>
            </div>
            <div class="col-12 col-sm-6 col-lg-3 mb-4">
                <div class="card modern-card vkd-stat-card h-100">
                    <div class="card-body modern-card-body p-4 text-center">
                        <div class="vkd-stat-icon mb-3">
                            <i class="fa fa-activity text-info fa-2x"></i>
                        </div>
                        <h3 class="vkd-stat-number text-dark mb-2">@totalRequests</h3>
                        <p class="vkd-stat-label text-muted mb-0">Total Requests</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts and Analytics -->
        <div class="row">
            <div class="col-12 col-lg-8 mb-4">
                <div class="card vkd-chart-card border-0 shadow-lg rounded-4">
                    <div class="card-header vkd-card-header border-0 d-flex justify-content-between align-items-center">
                        <h5 class="mb-0 fw-bold text-dark">
                            <i class="fa fa-chart-line me-2 text-primary"></i>Spending Analytics
                        </h5>
                        <div>
                            <label for="timeRange" class="form-label visually-hidden">Time Range</label>
                            <select id="timeRange" class="form-select vkd-time-select" @bind="timeRange">
                                <option value="7">Last 7 Days</option>
                                <option value="30">Last 30 Days</option>
                                <option value="90">Last 90 Days</option>
                                <option value="365">Last Year</option>
                            </select>
                        </div>
                    </div>
                    <div class="card-body p-4">
                        <div class="vkd-chart-container">
                            <canvas id="spendingChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-12 col-lg-4 mb-4">
                <div class="card vkd-budget-card border-0 shadow-lg rounded-4">
                    <div class="card-header vkd-card-header border-0">
                        <h5 class="mb-0 fw-bold text-dark">
                            <i class="fa fa-exclamation-triangle me-2 text-warning"></i>Budget Alerts
                        </h5>
                    </div>
                    <div class="card-body p-4">
                        @if (highUsageKeys.Count == 0)
                        {
                            <div class="vkd-empty-budget text-center py-4">
                                <div class="vkd-empty-icon mb-3">
                                    <i class="fa fa-check-circle text-success fa-3x opacity-75"></i>
                                </div>
                                <h6 class="text-dark mb-2">All Clear!</h6>
                                <p class="text-muted small mb-0">No keys approaching budget limits</p>
                            </div>
                        }
                        else
                        {
                            <div class="vkd-budget-list">
                                @foreach (var key in highUsageKeys)
                                {
                                    <div class="vkd-budget-item mb-3">
                                        <a href="@($"/virtualkeys/edit/{key.Id}")" class="text-decoration-none">
                                            <div class="vkd-budget-content p-3 rounded-2">
                                                <div class="d-flex justify-content-between align-items-center mb-2">
                                                    <span class="fw-medium text-dark">@key.KeyName</span>
                                                    <span class="badge vkd-budget-badge">@GetBudgetUsagePercentage(key)%</span>
                                                </div>
                                                <div class="progress vkd-budget-progress mb-2">
                                                    <div class="progress-bar @GetBudgetProgressColorClass(key)" 
                                                         role="progressbar" 
                                                         style="width: @GetBudgetUsagePercentage(key)%" 
                                                         aria-valuenow="@GetBudgetUsagePercentage(key)" 
                                                         aria-valuemin="0" 
                                                         aria-valuemax="100"></div>
                                                </div>
                                                <div class="d-flex justify-content-between">
                                                    <small class="text-muted">
                                                        <i class="fa fa-dollar-sign me-1"></i>$@key.CurrentSpend.ToString("N2")
                                                    </small>
                                                    <small class="text-muted">
                                                        Limit: $@key.MaxBudget?.ToString("N2")
                                                    </small>
                                                </div>
                                            </div>
                                        </a>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Usage Overview Table -->
        <div class="card vkd-table-card border-0 shadow-lg rounded-4 mt-4">
            <div class="card-header vkd-card-header border-0 d-flex justify-content-between align-items-center">
                <h5 class="mb-0 fw-bold text-dark">
                    <i class="fa fa-table me-2 text-primary"></i>Key Usage Overview
                </h5>
                <button type="button" class="btn vkd-btn-outline-primary" @onclick="RefreshData">
                    <i class="fa fa-sync-alt me-2"></i>Refresh
                </button>
            </div>
            
            <div class="table-responsive">
                <table class="table vkd-table align-middle">
                    <thead class="vkd-table-header">
                        <tr>
                            <th class="border-0 fw-bold">Key Name</th>
                            <th class="border-0 fw-bold">Status</th>
                            <th class="border-0 fw-bold">Budget</th>
                            <th class="border-0 fw-bold">Requests</th>
                            <th class="border-0 fw-bold">Avg Response</th>
                            <th class="border-0 fw-bold">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in virtualKeys.OrderByDescending(k => k.CurrentSpend))
                        {
                            <tr class="vkd-table-row" @onclick="() => SelectKey(item.Id)">
                                <td class="border-0" data-label="Key Name">
                                    <div class="vkd-key-name">
                                        <strong class="text-dark">@item.KeyName</strong>
                                    </div>
                                </td>
                                <td class="border-0" data-label="Status">
                                    @if (item.IsEnabled)
                                    {
                                        <span class="badge vkd-badge-success">
                                            <i class="fa fa-check me-1"></i>Active
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge vkd-badge-danger">
                                            <i class="fa fa-times me-1"></i>Disabled
                                        </span>
                                    }
                                    @if (item.ExpiresAt.HasValue && item.ExpiresAt.Value < DateTime.UtcNow)
                                    {
                                        <span class="badge vkd-badge-secondary ms-1">
                                            <i class="fa fa-clock me-1"></i>Expired
                                        </span>
                                    }
                                </td>
                                <td class="border-0" data-label="Budget">
                                    @if (item.MaxBudget.HasValue)
                                    {
                                        <div class="vkd-budget-display">
                                            <div class="d-flex justify-content-between mb-1">
                                                <small class="fw-medium text-dark">$@item.CurrentSpend.ToString("N2")</small>
                                                <small class="text-muted">$@item.MaxBudget.Value.ToString("N2")</small>
                                            </div>
                                            <div class="progress vkd-progress">
                                                <div class="progress-bar @GetBudgetProgressColorClass(item)" 
                                                    role="progressbar" 
                                                    style="width: @GetBudgetUsagePercentage(item)%" 
                                                    aria-valuenow="@GetBudgetUsagePercentage(item)" 
                                                    aria-valuemin="0" 
                                                    aria-valuemax="100"></div>
                                            </div>
                                            <small class="text-muted">@(item.BudgetDuration ?? "Total")</small>
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="text-muted">
                                            <i class="fa fa-infinity me-1"></i>No limit
                                        </span>
                                    }
                                </td>
                                <td class="border-0" data-label="Requests">
                                    @{
                                        var keySummary = keySummaries.FirstOrDefault(k => k.VirtualKeyId == item.Id);
                                    }
                                    @if (keySummary != null)
                                    {
                                        <div class="vkd-requests-display">
                                            <div class="fw-medium text-dark">@(keySummary.TotalRequests)</div>
                                            <small class="text-muted">
                                                <i class="fa fa-clock me-1"></i>@(keySummary.RecentRequests) last 24h
                                            </small>
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="text-muted">No data</span>
                                    }
                                </td>
                                <td class="border-0" data-label="Avg Response">
                                    @{
                                        var summary = keySummaries.FirstOrDefault(k => k.VirtualKeyId == item.Id);
                                    }
                                    @if (summary != null && summary.TotalRequests > 0)
                                    {
                                        <span class="vkd-response-time text-info fw-medium">
                                            <i class="fa fa-tachometer-alt me-1"></i>@summary.AverageResponseTime.ToString("N0")ms
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td class="border-0" data-label="Actions">
                                    <div class="btn-group btn-group-sm">
                                        <button type="button" class="btn vkd-btn-outline-primary" @onclick="@((MouseEventArgs e) => { NavigateToEdit(item.Id); return Task.CompletedTask; })" title="Edit Key">
                                            <i class="fa fa-edit"></i>
                                        </button>
                                        <button type="button" class="btn vkd-btn-outline-info" @onclick="@((MouseEventArgs e) => { ViewDetails(item.Id); return Task.CompletedTask; })" title="View Details">
                                            <i class="fa fa-info-circle"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        @if (selectedKeyId > 0)
        {
            <VirtualKeyUsageDetails KeyId="@selectedKeyId" />
        }
    }
</div>

<!-- Custom CSS Styling -->
<style>

    .vkd-stat-card {
        transition: all 0.3s ease;
        background: linear-gradient(135deg, #ffffff 0%, #f8f9ff 100%);
    }

    .vkd-stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 40px rgba(0, 0, 0, 0.1) !important;
    }

    .vkd-stat-icon {
        transition: all 0.3s ease;
    }

    .vkd-stat-card:hover .vkd-stat-icon {
        transform: scale(1.1);
    }

    .vkd-stat-number {
        font-size: 2rem;
        font-weight: 700;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .vkd-stat-label {
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        font-size: 0.875rem;
    }

    .vkd-chart-card,
    .vkd-budget-card,
    .vkd-table-card {
        transition: all 0.3s ease;
    }

    .vkd-chart-card:hover,
    .vkd-budget-card:hover,
    .vkd-table-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 12px 40px rgba(0, 0, 0, 0.1) !important;
    }

    .vkd-card-header {
        background: linear-gradient(135deg, #f8f9ff 0%, #e8f4fd 100%);
        padding: 1.5rem;
    }

    .vkd-chart-container {
        position: relative;
        height: 300px;
        width: 100%;
    }

    .vkd-time-select {
        border-radius: 0.75rem;
        border: 2px solid #e8f4fd;
        padding: 0.5rem 1rem;
        min-width: 150px;
        transition: all 0.3s ease;
    }

    .vkd-time-select:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }

    .vkd-empty-budget {
        padding: 2rem 1rem;
    }

    .vkd-empty-icon i {
        animation: gentle-pulse 2s ease-in-out infinite;
    }

    @@keyframes gentle-pulse {
        0%, 100% { opacity: 0.75; }
        50% { opacity: 1; }
    }

    .vkd-budget-item {
        transition: all 0.3s ease;
    }

    .vkd-budget-content {
        background: linear-gradient(135deg, #f8f9ff 0%, #e8f4fd 100%);
        border: 1px solid #e8f4fd;
        transition: all 0.3s ease;
    }

    .vkd-budget-content:hover {
        background: linear-gradient(135deg, #e8f4fd 0%, #dbeafe 100%);
        border-color: #667eea;
        transform: translateX(5px);
    }

    .vkd-budget-badge {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 0.25rem 0.75rem;
        border-radius: 1rem;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .vkd-budget-progress {
        height: 6px;
        border-radius: 0.5rem;
        background-color: #f1f5f9;
        overflow: hidden;
    }

    .vkd-budget-progress .progress-bar {
        border-radius: 0.5rem;
        transition: width 0.6s ease;
    }

    .vkd-table-header {
        background: linear-gradient(135deg, #f8f9ff 0%, #e8f4fd 100%);
    }

    .vkd-table-header th {
        color: #4a5568;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        font-size: 0.75rem;
        padding: 1rem 0.75rem;
    }

    .vkd-table-row {
        transition: all 0.3s ease;
        border-bottom: 1px solid #f1f5f9;
        cursor: pointer;
    }

    .vkd-table-row:hover {
        background: linear-gradient(135deg, #f8f9ff 0%, #e8f4fd 100%);
        transform: translateX(2px);
    }

    .vkd-table-row td {
        padding: 1rem 0.75rem;
        vertical-align: middle;
    }

    .vkd-badge-success {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        color: white;
        padding: 0.4rem 0.8rem;
        border-radius: 0.5rem;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .vkd-badge-danger {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        color: white;
        padding: 0.4rem 0.8rem;
        border-radius: 0.5rem;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .vkd-badge-secondary {
        background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
        color: white;
        padding: 0.4rem 0.8rem;
        border-radius: 0.5rem;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .vkd-progress {
        height: 6px;
        border-radius: 0.5rem;
        background-color: #f1f5f9;
        overflow: hidden;
    }

    .vkd-progress .progress-bar {
        border-radius: 0.5rem;
        transition: width 0.6s ease;
    }

    .vkd-btn-outline-primary {
        border: 2px solid #667eea;
        color: #667eea;
        border-radius: 0.5rem;
        transition: all 0.3s ease;
        font-weight: 600;
    }

    .vkd-btn-outline-primary:hover {
        background: #667eea;
        border-color: #667eea;
        color: white;
        transform: translateY(-1px);
    }

    .vkd-btn-outline-info {
        border: 2px solid #06b6d4;
        color: #06b6d4;
        border-radius: 0.5rem;
        transition: all 0.3s ease;
    }

    .vkd-btn-outline-info:hover {
        background: #06b6d4;
        border-color: #06b6d4;
        color: white;
        transform: translateY(-1px);
    }

    .vkd-loading-spinner {
        display: inline-block;
        animation: gentle-bounce 1.5s ease-in-out infinite;
    }

    @@keyframes gentle-bounce {
        0%, 100% { transform: translateY(0); }
        50% { transform: translateY(-5px); }
    }

    /* Real-time update animations */
    .vkd-update-animation {
        animation: value-update 0.6s ease-out;
    }

    @@keyframes value-update {
        0% {
            transform: scale(1);
            color: #667eea;
        }
        50% {
            transform: scale(1.1);
            color: #764ba2;
        }
        100% {
            transform: scale(1);
            color: inherit;
        }
    }

    .vkd-connection-status {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .text-connected { color: #10b981; }
    .text-connecting { color: #f59e0b; }
    .text-disconnected { color: #ef4444; }
    .text-reconnecting { color: #3b82f6; }

    /* Toast notification styles */
    .budget-alert-toast {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1050;
        min-width: 300px;
        max-width: 500px;
        animation: slide-in 0.3s ease-out;
    }

    @@keyframes slide-in {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    /* Real-time activity indicator */
    .realtime-activity-indicator {
        display: inline-flex;
        align-items: center;
        gap: 0.25rem;
        margin-left: 1rem;
        padding: 0.25rem 0.75rem;
        background: rgba(102, 126, 234, 0.1);
        border-radius: 1rem;
        font-size: 0.75rem;
    }

    .activity-dot {
        width: 8px;
        height: 8px;
        background: #10b981;
        border-radius: 50%;
        box-shadow: 0 0 0 2px rgba(16, 185, 129, 0.2);
    }

    .activity-text {
        color: #10b981;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    @@keyframes pulse {
        0% {
            box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.4);
        }
        70% {
            box-shadow: 0 0 0 10px rgba(16, 185, 129, 0);
        }
        100% {
            box-shadow: 0 0 0 0 rgba(16, 185, 129, 0);
        }
    }

    @@media (max-width: 768px) {
        .vkd-header {
            text-align: center;
        }

        .vkd-stats {
            text-align: center;
            margin-top: 1rem;
        }

        .vkd-stat-number {
            font-size: 1.5rem;
        }

        .vkd-table {
            font-size: 0.875rem;
        }
    }
</style>

@code {
    private bool isLoading = true;
    private List<VirtualKeyDto> virtualKeys = new();
    private List<VirtualKeyDto> highUsageKeys = new();
    private List<KeyAggregateSummary> keySummaries = new();
    private int selectedKeyId = 0;
    private int timeRange = 30;
    
    // Dashboard stats
    private int totalKeys = 0;
    private int activeKeys = 0;
    private decimal totalSpend = 0;
    private int totalRequests = 0;
    
    // Real-time updates
    private string masterVirtualKey = string.Empty;
    private string connectionStatus = "Disconnected";
    private bool hasSpendUpdate = false;
    private IJSObjectReference? chartModule;

    protected override async Task OnInitializedAsync()
    {
        // Get master virtual key from somewhere (e.g., configuration or auth context)
        // For now, we'll use a placeholder - in production, this should come from auth
        masterVirtualKey = "master-key"; // TODO: Get from auth context
        
        await LoadDataAsync();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize chart module for real-time updates
            chartModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/charts.js");
        }
    }

    private async Task LoadDataAsync()
    {
        isLoading = true;
        
        try
        {
            // Load all virtual keys
            virtualKeys = await VirtualKeyService.ListVirtualKeysAsync();
            
            // Calculate dashboard stats
            totalKeys = virtualKeys.Count;
            activeKeys = virtualKeys.Count(k => k.IsEnabled && 
                                             (!k.ExpiresAt.HasValue || k.ExpiresAt.Value > DateTime.UtcNow));
            totalSpend = virtualKeys.Sum(k => k.CurrentSpend);
            
            // Find keys approaching their budget limit
            highUsageKeys = virtualKeys
                .Where(k => k.MaxBudget.HasValue && 
                           k.MaxBudget.Value > 0 &&
                           k.IsEnabled && 
                           (k.CurrentSpend / k.MaxBudget.Value) >= VirtualKeyConstants.BudgetWarningThresholds.Low / 100m)
                .OrderByDescending(k => k.CurrentSpend / k.MaxBudget!.Value)
                .ToList();
                
            // Load usage summaries for all keys
            var usageStats = await AdminApiClient.GetVirtualKeyUsageStatisticsAsync();
            keySummaries = usageStats?.Select(s => new KeyAggregateSummary
            {
                VirtualKeyId = s.VirtualKeyId,
                KeyName = s.VirtualKeyName,
                TotalRequests = s.TotalRequests,
                TotalCost = s.TotalCost,
                TotalInputTokens = s.TotalInputTokens,
                TotalOutputTokens = s.TotalOutputTokens,
                AverageResponseTime = s.AverageResponseTimeMs,
                RecentRequests = s.LastDayRequests,
                CurrentSpend = s.Cost,
                LastUsed = s.LastUsedAt,
                IsActive = true // Default to active
            }).ToList() ?? new List<KeyAggregateSummary>();
            totalRequests = keySummaries?.Sum(k => k.TotalRequests) ?? 0;
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading dashboard data: {ex.Message}");
            Logger.LogError(ex, "Error loading virtual keys dashboard data");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshData()
    {
        await LoadDataAsync();
    }

    private void SelectKey(int keyId)
    {
        if (selectedKeyId == keyId)
        {
            selectedKeyId = 0; // Toggle off
        }
        else
        {
            selectedKeyId = keyId;
        }
    }

    private void NavigateToEdit(int keyId)
    {
        NavigationManager.NavigateTo($"/virtualkeys/edit/{keyId}");
    }

    private void ViewDetails(int keyId)
    {
        selectedKeyId = keyId;
    }

    private string GetBudgetProgressColorClass(VirtualKeyDto key)
    {
        if (!key.MaxBudget.HasValue || key.MaxBudget.Value <= 0)
            return "bg-secondary";
            
        var percentage = (key.CurrentSpend / key.MaxBudget.Value) * 100;
        
        if (percentage >= VirtualKeyConstants.BudgetWarningThresholds.High)
            return "bg-danger";
        if (percentage >= VirtualKeyConstants.BudgetWarningThresholds.Medium)
            return "bg-warning";
        if (percentage >= VirtualKeyConstants.BudgetWarningThresholds.Low)
            return "bg-info";
            
        return "bg-success";
    }
    
    private int GetBudgetUsagePercentage(VirtualKeyDto key)
    {
        if (!key.MaxBudget.HasValue || key.MaxBudget.Value <= 0)
            return 0;
            
        var percentage = (key.CurrentSpend / key.MaxBudget.Value) * 100;
        return (int)Math.Min(100, percentage);
    }
    
    // Real-time event handlers
    private async Task HandleSpendUpdate(SpendUpdateNotification notification)
    {
        try
        {
            // Update total spend with animation
            hasSpendUpdate = true;
            totalSpend += notification.NewSpend;
            
            // Update specific virtual key if we can identify it
            // In a real implementation, the notification would include the virtual key ID
            // For now, we'll update the UI and trigger animations
            
            StateHasChanged();
            
            // Reset animation after delay
            await Task.Delay(600);
            hasSpendUpdate = false;
            StateHasChanged();
            
            // Update chart if visible
            if (chartModule != null)
            {
                await chartModule.InvokeVoidAsync("updateChartData", "spendingChart", notification);
            }
            
            Logger.LogInformation("Received spend update: ${NewSpend} (Total: ${TotalSpend})", 
                notification.NewSpend, notification.TotalSpend);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling spend update");
        }
    }
    
    private async Task HandleBudgetAlert(BudgetAlertNotification alert)
    {
        try
        {
            // Show toast notification
            var toastType = alert.Severity switch
            {
                "critical" => "error",
                "warning" => "warning",
                _ => "info"
            };
            
            switch (toastType)
            {
                case "error":
                    ToastService.ShowError(alert.Message);
                    break;
                case "warning":
                    ToastService.ShowWarning(alert.Message);
                    break;
                default:
                    ToastService.ShowInfo(alert.Message);
                    break;
            }
            
            // Refresh high usage keys list
            await RefreshHighUsageKeys();
            
            Logger.LogWarning("Budget alert received: {Message} ({Severity})", 
                alert.Message, alert.Severity);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling budget alert");
        }
    }
    
    private async Task HandleSpendSummary(SpendSummaryNotification summary)
    {
        try
        {
            // Update dashboard with summary data
            Logger.LogInformation("Received spend summary for {PeriodType}: ${TotalSpend}", 
                summary.PeriodType, summary.TotalSpend);
                
            // Could update specific UI elements based on the summary
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling spend summary");
        }
    }
    
    private async Task HandleUnusualSpending(UnusualSpendingNotification notification)
    {
        try
        {
            // Show warning toast
            var message = $"Unusual spending detected: {notification.PatternType}. " +
                         $"Current spend is {notification.PercentageIncrease:F0}% higher than average.";
            
            ToastService.ShowWarning(message);
            
            // Log recommendations
            foreach (var recommendation in notification.Recommendations)
            {
                Logger.LogInformation("Spending recommendation: {Recommendation}", recommendation);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling unusual spending notification");
        }
    }
    
    private void HandleConnectionStateChanged(SpendNotificationListener.ConnectionState state)
    {
        connectionStatus = state switch
        {
            SpendNotificationListener.ConnectionState.Connected => "Connected",
            SpendNotificationListener.ConnectionState.Connecting => "Connecting...",
            SpendNotificationListener.ConnectionState.Reconnecting => "Reconnecting...",
            SpendNotificationListener.ConnectionState.Failed => "Connection Failed",
            _ => "Disconnected"
        };
        
        StateHasChanged();
    }
    
    private async Task RefreshHighUsageKeys()
    {
        try
        {
            // Reload virtual keys to get updated spend data
            virtualKeys = await VirtualKeyService.ListVirtualKeysAsync();
            
            // Recalculate high usage keys
            highUsageKeys = virtualKeys
                .Where(k => k.MaxBudget.HasValue && 
                           k.MaxBudget.Value > 0 &&
                           k.IsEnabled && 
                           (k.CurrentSpend / k.MaxBudget.Value) >= VirtualKeyConstants.BudgetWarningThresholds.Low / 100m)
                .OrderByDescending(k => k.CurrentSpend / k.MaxBudget!.Value)
                .ToList();
                
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing high usage keys");
        }
    }
    
    private string GetConnectionIcon()
    {
        return connectionStatus switch
        {
            "Connected" => "fa fa-check-circle",
            "Connecting..." => "fa fa-spinner fa-spin",
            "Reconnecting..." => "fa fa-sync-alt fa-spin",
            "Connection Failed" => "fa fa-exclamation-triangle",
            _ => "fa fa-times-circle"
        };
    }
    
    private string GetConnectionTextClass()
    {
        return connectionStatus switch
        {
            "Connected" => "text-connected",
            "Connecting..." => "text-connecting",
            "Reconnecting..." => "text-reconnecting",
            "Connection Failed" => "text-disconnected",
            _ => "text-disconnected"
        };
    }
}