@page "/virtualkeys"
@using ConduitLLM.WebUI.Services
@using ConduitLLM.WebUI.Interfaces
@using ConduitLLM.Configuration.DTOs.VirtualKey
@using Microsoft.EntityFrameworkCore 
@using Microsoft.JSInterop 
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject ConduitLLM.WebUI.Interfaces.IAdminApiClient AdminApiClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime 
@inject ILogger<VirtualKeys> Logger
@* @rendermode InteractiveServer *@

<div class="container container-xxl">
    <h3 class="mb-2">Virtual Keys Management</h3>
    
    <p class="mb-4">
        Virtual keys allow external applications to access ConduitLLM's API with controlled permissions and spending limits.
    </p>
    
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger my-2" role="alert">@errorMessage</div>
    }
    
    <div class="card p-4 mb-4 shadow-sm">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h5 class="mb-0">Virtual Keys</h5>
            <a href="/virtualkeys/edit" class="btn btn-primary">
                <i class="fa fa-plus me-1"></i>
                Add Key
            </a>
        </div>
        
        @if (virtualKeys == null)
        {
            <div class="d-flex justify-content-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (!virtualKeys.Any())
        {
            <div class="alert alert-info mb-4" role="alert">
                <p>No virtual keys configured yet. Add a key to enable API access with controlled permissions.</p>
            </div>
            
            <div class="card mb-4">
                <div class="card-header">
                    <h6 class="mb-0">About Virtual Keys</h6>
                </div>
                <div class="card-body">
                    <p>Virtual keys let you:</p>
                    <ul class="list-group mb-3">
                        <li class="list-group-item"><i class="fa fa-check me-2"></i> Grant API access to third-party applications without sharing your provider credentials</li>
                        <li class="list-group-item"><i class="fa fa-check me-2"></i> Set spending limits to control costs</li>
                        <li class="list-group-item"><i class="fa fa-check me-2"></i> Restrict access to specific models</li>
                        <li class="list-group-item"><i class="fa fa-check me-2"></i> Set expiration dates for temporary access</li>
                    </ul>
                    <a href="/virtualkeys/edit" class="btn btn-primary mt-3">
                        <i class="fa fa-plus me-1"></i>
                        Create Your First Key
                    </a>
                </div>
            </div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Status</th>
                            <th>Budget</th>
                            <th>Models</th>
                            <th>Created</th>
                            <th>Expires</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in virtualKeys)
                        {
                            <tr>
                                <td data-label="Name">@item.KeyName</td>
                                <td data-label="Status">
                                    @if (item.IsEnabled)
                                    {
                                        <span class="badge bg-success">Active</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger">Disabled</span>
                                    }
                                    @if (item.ExpiresAt.HasValue && item.ExpiresAt.Value < DateTime.UtcNow)
                                    {
                                        <span class="badge bg-secondary ms-1">Expired</span>
                                    }
                                </td>
                                <td data-label="Budget">
                                    @if (item.MaxBudget.HasValue)
                                    {
                                        <div>
                                            $@item.CurrentSpend.ToString("F2") / $@item.MaxBudget.Value.ToString("F2")
                                            @{
                                                var percentage = item.MaxBudget.Value > 0 
                                                    ? Math.Min((double)(item.CurrentSpend / item.MaxBudget.Value) * 100, 100.0) 
                                                    : 0.0;
                                                var progressClass = percentage switch {
                                                    > 90.0 => "bg-danger",
                                                    > 70.0 => "bg-warning",
                                                    _ => "bg-success"
                                                };
                                            }
                                            <div class="progress my-1" style="height: 6px;">
                                                <div class="progress-bar @progressClass" role="progressbar" style="width: @percentage%" 
                                                     aria-valuenow="@percentage" aria-valuemin="0" aria-valuemax="100"></div>
                                            </div>
                                            <small class="text-muted">@(item.BudgetDuration ?? "Total")</small>
                                        </div>
                                    }
                                    else
                                    {
                                        <span>No limit</span>
                                    }
                                </td>
                                <td data-label="Models">
                                    @if (string.IsNullOrEmpty(item.AllowedModels))
                                    {
                                        <span>All models</span>
                                    }
                                    else
                                    {
                                        <span title="@item.AllowedModels">
                                            @(item.AllowedModels.Length > 15 
                                                ? item.AllowedModels.Substring(0, 12) + "..." 
                                                : item.AllowedModels)
                                        </span>
                                    }
                                </td>
                                <td data-label="Created">@item.CreatedAt.ToLocalTime().ToString("g")</td>
                                <td data-label="Expires">
                                    @if (item.ExpiresAt.HasValue)
                                    {
                                        @item.ExpiresAt.Value.ToLocalTime().ToString("g")
                                    }
                                    else
                                    {
                                        <span>Never</span>
                                    }
                                </td>
                                <td data-label="Actions">
                                    <div class="btn-group" role="group">
                                        <a href="/virtualkeys/edit/@item.Id" class="btn btn-sm btn-outline-primary">Edit</a>
                                        <button type="button" class="btn btn-sm btn-outline-warning" @onclick="() => ResetKeySpend(item.Id, item.KeyName)">Reset spend</button>
                                        <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => DeleteVirtualKey(item.Id, item.KeyName)">Delete</button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@code {
    private List<VirtualKeyDto>? virtualKeys;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            errorMessage = null;
            virtualKeys = (await AdminApiClient.GetAllVirtualKeysAsync()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading virtual keys: {ex.Message}";
            Logger.LogError(ex, "Error loading virtual keys");
        }
    }

    private void AddVirtualKey()
    {
        NavigationManager.NavigateTo("/virtualkeys/edit");
    }

    private void EditVirtualKey(int id)
    {
        NavigationManager.NavigateTo($"/virtualkeys/edit/{id}");
    }

    private async Task DeleteVirtualKey(int id, string keyName)
    {
        try
        {
            errorMessage = null; 
            
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"Are you sure you want to delete the virtual key '{keyName}'? This cannot be undone.");
                
            if (!confirmed) return;

            var success = await AdminApiClient.DeleteVirtualKeyAsync(id);
            if (success)
            {
                await LoadDataAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Virtual key '{keyName}' deleted successfully");
            }
            else
            {
                errorMessage = $"Could not delete key with ID {id}. The key may have been already deleted.";
                await JSRuntime.InvokeVoidAsync("alert", "Failed to delete virtual key");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting virtual key: {ex.Message}";
            Logger.LogError(ex, "Error deleting virtual key with ID {KeyId}", id);
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while deleting the virtual key");
        }
    }

    private async Task ResetKeySpend(int id, string keyName)
    {
        try
        {
            errorMessage = null; 
            
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"Are you sure you want to reset the spend for virtual key '{keyName}'? This will set the current spend to zero.");
                
            if (!confirmed) return;

            var success = await AdminApiClient.ResetVirtualKeySpendAsync(id);
            if (success)
            {
                await LoadDataAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Spend for key '{keyName}' reset successfully");
            }
            else
            {
                errorMessage = $"Could not reset spend for key with ID {id}. The key may not exist.";
                await JSRuntime.InvokeVoidAsync("alert", "Failed to reset key spend");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error resetting spend: {ex.Message}";
            Logger.LogError(ex, "Error resetting spend for virtual key with ID {KeyId}", id);
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while resetting key spend");
        }
    }
}