@page "/virtualkeys"
@using ConduitLLM.WebUI.Data
@using ConduitLLM.WebUI.Services
@using ConduitLLM.Configuration.DTOs.VirtualKey
@using Microsoft.EntityFrameworkCore 
@using Microsoft.JSInterop 
@using ConduitLLM.Core.Interfaces
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject IVirtualKeyService VirtualKeyService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime 
@inject ILogger<VirtualKeys> Logger
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h3" Class="mb-2">Virtual Keys Management</MudText>
    
    <MudText Typo="Typo.body1" Class="mb-4">
        Virtual keys allow external applications to access ConduitLLM's API with controlled permissions and spending limits.
    </MudText>
    
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" Class="my-2">@errorMessage</MudAlert>
    }
    
    <MudPaper Class="pa-4 mb-4" Elevation="2">
        <div class="d-flex justify-space-between align-center mb-3">
            <MudText Typo="Typo.h5">Virtual Keys</MudText>
            <MudButton Variant="Variant.Filled" 
                     Color="Color.Primary" 
                     StartIcon="@Icons.Material.Filled.Add" 
                     OnClick="AddVirtualKey">
                Add Key
            </MudButton>
        </div>
        
        @if (virtualKeys == null)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        }
        else if (!virtualKeys.Any())
        {
            <MudAlert Severity="Severity.Info" Class="mb-4">
                <MudText>No virtual keys configured yet. Add a key to enable API access with controlled permissions.</MudText>
            </MudAlert>
            
            <MudCard Class="mb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">About Virtual Keys</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>Virtual keys let you:</MudText>
                    <MudList T="string" Clickable="true" Dense="true">
                        <MudListItem T="string" Icon="@Icons.Material.Filled.Check" Text="Grant API access to third-party applications without sharing your provider credentials" />
                        <MudListItem T="string" Icon="@Icons.Material.Filled.Check" Text="Set spending limits to control costs" />
                        <MudListItem T="string" Icon="@Icons.Material.Filled.Check" Text="Restrict access to specific models" />
                        <MudListItem T="string" Icon="@Icons.Material.Filled.Check" Text="Set expiration dates for temporary access" />
                    </MudList>
                    <MudButton Variant="Variant.Filled" 
                             Color="Color.Primary" 
                             StartIcon="@Icons.Material.Filled.Add" 
                             Class="mt-3" 
                             OnClick="AddVirtualKey">
                        Create Your First Key
                    </MudButton>
                </MudCardContent>
            </MudCard>
        }
        else
        {
            <MudTable Items="@virtualKeys" Hover="true" Breakpoint="Breakpoint.Sm">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Budget</MudTh>
                    <MudTh>Models</MudTh>
                    <MudTh>Created</MudTh>
                    <MudTh>Expires</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">@context.KeyName</MudTd>
                    <MudTd DataLabel="Status">
                        @if (context.IsEnabled)
                        {
                            <MudChip T="string" Label="true" Color="Color.Success" Size="Size.Small">Active</MudChip>
                        }
                        else
                        {
                            <MudChip T="string" Label="true" Color="Color.Error" Size="Size.Small">Disabled</MudChip>
                        }
                        @if (context.ExpiresAt.HasValue && context.ExpiresAt.Value < DateTime.UtcNow)
                        {
                            <MudChip T="string" Label="true" Color="Color.Default" Size="Size.Small" Class="ml-1">Expired</MudChip>
                        }
                    </MudTd>
                    <MudTd DataLabel="Budget">
                        @if (context.MaxBudget.HasValue)
                        {
                            <div>
                                $@context.CurrentSpend.ToString("F2") / $@context.MaxBudget.Value.ToString("F2")
                                @{
                                    var percentage = context.MaxBudget.Value > 0 
                                        ? Math.Min((double)(context.CurrentSpend / context.MaxBudget.Value) * 100, 100.0) 
                                        : 0.0;
                                    var progressColor = percentage switch {
                                        > 90.0 => Color.Error,
                                        > 70.0 => Color.Warning,
                                        _ => Color.Success
                                    };
                                }
                                <MudProgressLinear Color="@progressColor" Value="@percentage" Class="my-1" />
                                <MudText Typo="Typo.caption">@(context.BudgetDuration ?? "Total")</MudText>
                            </div>
                        }
                        else
                        {
                            <MudText>No limit</MudText>
                        }
                    </MudTd>
                    <MudTd DataLabel="Models">
                        @if (string.IsNullOrEmpty(context.AllowedModels))
                        {
                            <MudText>All models</MudText>
                        }
                        else
                        {
                            <MudTooltip Text="@context.AllowedModels">
                                <MudText>
                                    @(context.AllowedModels.Length > 15 
                                        ? context.AllowedModels.Substring(0, 12) + "..." 
                                        : context.AllowedModels)
                                </MudText>
                            </MudTooltip>
                        }
                    </MudTd>
                    <MudTd DataLabel="Created">@context.CreatedAt.ToLocalTime().ToString("g")</MudTd>
                    <MudTd DataLabel="Expires">
                        @if (context.ExpiresAt.HasValue)
                        {
                            @context.ExpiresAt.Value.ToLocalTime().ToString("g")
                        }
                        else
                        {
                            <MudText>Never</MudText>
                        }
                    </MudTd>
                    <MudTd DataLabel="Actions">
                        <MudButtonGroup Variant="Variant.Outlined" Size="Size.Small">
                            <MudButton Color="Color.Primary" OnClick="() => EditVirtualKey(context.Id)">Edit</MudButton>
                            <MudButton Color="Color.Warning" OnClick="() => ResetKeySpend(context.Id, context.KeyName)">Reset spend</MudButton>
                            <MudButton Color="Color.Error" OnClick="() => DeleteVirtualKey(context.Id, context.KeyName)">Delete</MudButton>
                        </MudButtonGroup>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </MudPaper>
</MudContainer>

@code {
    private List<VirtualKeyDto>? virtualKeys;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            errorMessage = null;
            virtualKeys = await VirtualKeyService.ListVirtualKeysAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading virtual keys: {ex.Message}";
            Logger.LogError(ex, "Error loading virtual keys");
        }
    }

    private void AddVirtualKey()
    {
        NavigationManager.NavigateTo("/virtualkeys/edit");
    }

    private void EditVirtualKey(int id)
    {
        NavigationManager.NavigateTo($"/virtualkeys/edit/{id}");
    }

    private async Task DeleteVirtualKey(int id, string keyName)
    {
        try
        {
            errorMessage = null; 
            
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"Are you sure you want to delete the virtual key '{keyName}'? This cannot be undone.");
                
            if (!confirmed) return;

            var success = await VirtualKeyService.DeleteVirtualKeyAsync(id);
            if (success)
            {
                await LoadDataAsync();
                Snackbar.Add($"Virtual key '{keyName}' deleted successfully", Severity.Success);
            }
            else
            {
                errorMessage = $"Could not delete key with ID {id}. The key may have been already deleted.";
                Snackbar.Add("Failed to delete virtual key", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting virtual key: {ex.Message}";
            Logger.LogError(ex, "Error deleting virtual key with ID {KeyId}", id);
            Snackbar.Add("An error occurred while deleting the virtual key", Severity.Error);
        }
    }

    private async Task ResetKeySpend(int id, string keyName)
    {
        try
        {
            errorMessage = null; 
            
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"Are you sure you want to reset the spend for virtual key '{keyName}'? This will set the current spend to zero.");
                
            if (!confirmed) return;

            var success = await VirtualKeyService.ResetSpendAsync(id);
            if (success)
            {
                await LoadDataAsync();
                Snackbar.Add($"Spend for key '{keyName}' reset successfully", Severity.Success);
            }
            else
            {
                errorMessage = $"Could not reset spend for key with ID {id}. The key may not exist.";
                Snackbar.Add("Failed to reset key spend", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error resetting spend: {ex.Message}";
            Logger.LogError(ex, "Error resetting spend for virtual key with ID {KeyId}", id);
            Snackbar.Add("An error occurred while resetting key spend", Severity.Error);
        }
    }
}