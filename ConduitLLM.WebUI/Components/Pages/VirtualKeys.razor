@page "/virtualkeys"
@using ConduitLLM.WebUI.Services
@using ConduitLLM.WebUI.Interfaces
@using ConduitLLM.Configuration.DTOs.VirtualKey
@using Microsoft.EntityFrameworkCore 
@using Microsoft.JSInterop 
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject ConduitLLM.WebUI.Interfaces.IAdminApiClient AdminApiClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime 
@inject ILogger<VirtualKeys> Logger
@rendermode InteractiveServer

<PageTitle>Virtual Keys - ConduitLLM</PageTitle>

<div class="container container-xxl mt-4">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="vk-header bg-gradient-primary text-white rounded-4 p-4 mb-4">
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <h1 class="h3 mb-2">
                            <i class="fa fa-key me-3"></i>Virtual Keys Management
                        </h1>
                        <p class="mb-0 opacity-90">
                            Create and manage secure API keys with controlled permissions and spending limits
                        </p>
                    </div>
                    <div class="col-md-4 text-md-end">
                        <div class="vk-stats">
                            <div class="stat-item">
                                <i class="fa fa-key me-2"></i>
                                <span class="small">@(virtualKeys?.Count ?? 0) Keys</span>
                            </div>
                            <div class="stat-item mt-2">
                                <i class="fa fa-check-circle me-2"></i>
                                <span class="small">@(virtualKeys?.Count(k => k.IsEnabled) ?? 0) Active</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger my-2" role="alert">@errorMessage</div>
    }
    
    <!-- Main Content Card -->
    <div class="card vk-card shadow-lg border-0 rounded-4">
        <div class="card-header vk-card-header d-flex justify-content-between align-items-center border-0 bg-white">
            <h5 class="mb-0 fw-bold text-dark">
                <i class="fa fa-list me-2 text-primary"></i>Virtual Keys
            </h5>
            <a href="/virtualkeys/edit" class="btn vk-btn-primary">
                <i class="fa fa-plus me-2"></i>Add Key
            </a>
        </div>
        <div class="card-body p-4">
            @if (virtualKeys == null)
            {
                <div class="text-center py-5">
                    <div class="vk-loading-spinner">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                    <p class="mt-3 text-muted fw-medium">Loading virtual keys...</p>
                </div>
            }
            else if (!virtualKeys.Any())
            {
                <div class="vk-empty-state text-center py-5">
                    <div class="vk-empty-icon mb-4">
                        <i class="fa fa-key fa-4x text-primary opacity-75"></i>
                    </div>
                    <h4 class="fw-bold text-dark mb-3">No Virtual Keys Found</h4>
                    <p class="text-muted mb-4 lead">
                        Get started by creating your first virtual key to manage API access and spending limits.
                    </p>
                    
                    <div class="vk-info-card card border-0 shadow-sm bg-light mb-4">
                        <div class="card-header bg-gradient-light border-0">
                            <h6 class="mb-0 fw-bold text-primary">
                                <i class="fa fa-lightbulb me-2"></i>About Virtual Keys
                            </h6>
                        </div>
                        <div class="card-body">
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <div class="vk-feature d-flex align-items-start">
                                        <i class="fa fa-shield-alt text-success me-3 mt-1"></i>
                                        <div>
                                            <strong>Secure API Access</strong>
                                            <p class="small text-muted mb-0">Grant third-party applications access without sharing provider credentials</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="vk-feature d-flex align-items-start">
                                        <i class="fa fa-dollar-sign text-warning me-3 mt-1"></i>
                                        <div>
                                            <strong>Cost Control</strong>
                                            <p class="small text-muted mb-0">Set spending limits to manage and control API usage costs</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="vk-feature d-flex align-items-start">
                                        <i class="fa fa-filter text-info me-3 mt-1"></i>
                                        <div>
                                            <strong>Model Restrictions</strong>
                                            <p class="small text-muted mb-0">Restrict access to specific AI models and capabilities</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="vk-feature d-flex align-items-start">
                                        <i class="fa fa-clock text-danger me-3 mt-1"></i>
                                        <div>
                                            <strong>Expiration Control</strong>
                                            <p class="small text-muted mb-0">Set expiration dates for temporary or time-limited access</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <a href="/virtualkeys/edit" class="btn vk-btn-primary btn-lg">
                        <i class="fa fa-plus me-2"></i>Create Your First Key
                    </a>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table vk-table table-hover align-middle">
                        <thead class="vk-table-header">
                            <tr>
                                <th class="border-0 fw-bold">Name</th>
                                <th class="border-0 fw-bold">Status</th>
                                <th class="border-0 fw-bold">Budget</th>
                                <th class="border-0 fw-bold">Models</th>
                                <th class="border-0 fw-bold">Created</th>
                                <th class="border-0 fw-bold">Expires</th>
                                <th class="border-0 fw-bold">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in virtualKeys)
                            {
                                <tr class="vk-table-row">
                                    <td class="border-0" data-label="Name">
                                        <div class="vk-key-name">
                                            <strong class="text-dark">@item.KeyName</strong>
                                        </div>
                                    </td>
                                    <td class="border-0" data-label="Status">
                                        @if (item.IsEnabled)
                                        {
                                            <span class="badge vk-badge-success">
                                                <i class="fa fa-check me-1"></i>Active
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge vk-badge-danger">
                                                <i class="fa fa-times me-1"></i>Disabled
                                            </span>
                                        }
                                        @if (item.ExpiresAt.HasValue && item.ExpiresAt.Value < DateTime.UtcNow)
                                        {
                                            <span class="badge vk-badge-secondary ms-1">
                                                <i class="fa fa-clock me-1"></i>Expired
                                            </span>
                                        }
                                    </td>
                                    <td class="border-0" data-label="Budget">
                                        @if (item.MaxBudget.HasValue)
                                        {
                                            <div class="vk-budget-display">
                                                <div class="mb-1">
                                                    <span class="fw-medium text-dark">$@item.CurrentSpend.ToString("F2")</span>
                                                    <span class="text-muted"> / $@item.MaxBudget.Value.ToString("F2")</span>
                                                </div>
                                                @{
                                                    var percentage = item.MaxBudget.Value > 0 
                                                        ? Math.Min((double)(item.CurrentSpend / item.MaxBudget.Value) * 100, 100.0) 
                                                        : 0.0;
                                                    var progressClass = percentage switch {
                                                        > 90.0 => "bg-danger",
                                                        > 70.0 => "bg-warning",
                                                        _ => "bg-success"
                                                    };
                                                }
                                                <div class="progress vk-progress my-1">
                                                    <div class="progress-bar @progressClass" role="progressbar" style="width: @percentage%" 
                                                         aria-valuenow="@percentage" aria-valuemin="0" aria-valuemax="100"></div>
                                                </div>
                                                <small class="text-muted">@(item.BudgetDuration ?? "Total")</small>
                                            </div>
                                        }
                                        else
                                        {
                                            <span class="text-muted">
                                                <i class="fa fa-infinity me-1"></i>No limit
                                            </span>
                                        }
                                    </td>
                                    <td class="border-0" data-label="Models">
                                        @if (string.IsNullOrEmpty(item.AllowedModels))
                                        {
                                            <span class="text-muted">
                                                <i class="fa fa-globe me-1"></i>All models
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="vk-models-text" title="@item.AllowedModels">
                                                <i class="fa fa-filter me-1 text-info"></i>
                                                @(item.AllowedModels.Length > 15 
                                                    ? item.AllowedModels.Substring(0, 12) + "..." 
                                                    : item.AllowedModels)
                                            </span>
                                        }
                                    </td>
                                    <td class="border-0" data-label="Created">
                                        <small class="text-muted">
                                            <i class="fa fa-calendar me-1"></i>@item.CreatedAt.ToLocalTime().ToString("MMM dd, yyyy")
                                        </small>
                                    </td>
                                    <td class="border-0" data-label="Expires">
                                        @if (item.ExpiresAt.HasValue)
                                        {
                                            <small class="text-muted">
                                                <i class="fa fa-clock me-1"></i>@item.ExpiresAt.Value.ToLocalTime().ToString("MMM dd, yyyy")
                                            </small>
                                        }
                                        else
                                        {
                                            <small class="text-muted">
                                                <i class="fa fa-infinity me-1"></i>Never
                                            </small>
                                        }
                                    </td>
                                    <td class="border-0" data-label="Actions">
                                        <div class="btn-group btn-group-sm">
                                            <a href="/virtualkeys/edit/@item.Id" class="btn vk-btn-outline-primary" title="Edit Key">
                                                <i class="fa fa-edit"></i>
                                            </a>
                                            <button type="button" class="btn vk-btn-outline-warning" @onclick="() => ResetKeySpend(item.Id, item.KeyName)" title="Reset Spend">
                                                <i class="fa fa-undo"></i>
                                            </button>
                                            <button type="button" class="btn vk-btn-outline-danger" @onclick="() => DeleteVirtualKey(item.Id, item.KeyName)" title="Delete Key">
                                                <i class="fa fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<!-- Custom CSS Styling -->
<style>
    .vk-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 1rem !important;
        box-shadow: 0 8px 32px rgba(102, 126, 234, 0.2);
    }

    .vk-stats .stat-item {
        display: inline-block;
        margin-right: 1rem;
        padding: 0.25rem 0;
    }

    .vk-card {
        border-radius: 1rem !important;
        overflow: hidden;
        transition: all 0.3s ease;
    }

    .vk-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 12px 40px rgba(0, 0, 0, 0.1) !important;
    }

    .vk-card-header {
        background: linear-gradient(135deg, #f8f9ff 0%, #e8f4fd 100%);
        padding: 1.5rem;
    }

    .vk-btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        border-radius: 0.75rem;
        padding: 0.75rem 1.5rem;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
    }

    .vk-btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
        background: linear-gradient(135deg, #5a67d8 0%, #6b46c1 100%);
    }

    .vk-btn-outline-primary {
        border: 2px solid #667eea;
        color: #667eea;
        border-radius: 0.5rem;
        transition: all 0.3s ease;
    }

    .vk-btn-outline-primary:hover {
        background: #667eea;
        border-color: #667eea;
        color: white;
        transform: translateY(-1px);
    }

    .vk-btn-outline-warning {
        border: 2px solid #f59e0b;
        color: #f59e0b;
        border-radius: 0.5rem;
        transition: all 0.3s ease;
    }

    .vk-btn-outline-warning:hover {
        background: #f59e0b;
        border-color: #f59e0b;
        color: white;
        transform: translateY(-1px);
    }

    .vk-btn-outline-danger {
        border: 2px solid #ef4444;
        color: #ef4444;
        border-radius: 0.5rem;
        transition: all 0.3s ease;
    }

    .vk-btn-outline-danger:hover {
        background: #ef4444;
        border-color: #ef4444;
        color: white;
        transform: translateY(-1px);
    }

    .vk-empty-state {
        padding: 3rem 2rem;
    }

    .vk-empty-icon i {
        animation: gentle-pulse 2s ease-in-out infinite;
    }

    @@keyframes gentle-pulse {
        0%, 100% { opacity: 0.5; }
        50% { opacity: 0.8; }
    }

    .vk-info-card {
        margin: 2rem auto;
        max-width: 600px;
    }

    .vk-feature {
        padding: 0.75rem;
        border-radius: 0.5rem;
        transition: all 0.3s ease;
    }

    .vk-feature:hover {
        background-color: rgba(102, 126, 234, 0.05);
    }

    .vk-table-header {
        background: linear-gradient(135deg, #f8f9ff 0%, #e8f4fd 100%);
    }

    .vk-table-header th {
        color: #4a5568;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        font-size: 0.75rem;
        padding: 1rem 0.75rem;
    }

    .vk-table-row {
        transition: all 0.3s ease;
        border-bottom: 1px solid #f1f5f9;
    }

    .vk-table-row:hover {
        background: linear-gradient(135deg, #f8f9ff 0%, #e8f4fd 100%);
        transform: translateX(2px);
    }

    .vk-table-row td {
        padding: 1rem 0.75rem;
        vertical-align: middle;
    }

    .vk-badge-success {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        color: white;
        padding: 0.4rem 0.8rem;
        border-radius: 0.5rem;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .vk-badge-danger {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        color: white;
        padding: 0.4rem 0.8rem;
        border-radius: 0.5rem;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .vk-badge-secondary {
        background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
        color: white;
        padding: 0.4rem 0.8rem;
        border-radius: 0.5rem;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .vk-progress {
        height: 8px;
        border-radius: 0.5rem;
        background-color: #f1f5f9;
        overflow: hidden;
    }

    .vk-progress .progress-bar {
        border-radius: 0.5rem;
        transition: width 0.6s ease;
    }

    .vk-budget-display {
        min-width: 120px;
    }

    .vk-loading-spinner {
        display: inline-block;
        animation: gentle-bounce 1.5s ease-in-out infinite;
    }

    @@keyframes gentle-bounce {
        0%, 100% { transform: translateY(0); }
        50% { transform: translateY(-5px); }
    }

    .bg-gradient-light {
        background: linear-gradient(135deg, #f8f9ff 0%, #e8f4fd 100%);
    }

    @@media (max-width: 768px) {
        .vk-header {
            text-align: center;
        }

        .vk-stats {
            text-align: center;
            margin-top: 1rem;
        }

        .vk-table {
            font-size: 0.875rem;
        }
    }
</style>

@code {
    private List<VirtualKeyDto>? virtualKeys;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            errorMessage = null;
            virtualKeys = (await AdminApiClient.GetAllVirtualKeysAsync()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading virtual keys: {ex.Message}";
            Logger.LogError(ex, "Error loading virtual keys");
        }
    }

    private void AddVirtualKey()
    {
        NavigationManager.NavigateTo("/virtualkeys/edit");
    }

    private void EditVirtualKey(int id)
    {
        NavigationManager.NavigateTo($"/virtualkeys/edit/{id}");
    }

    private async Task DeleteVirtualKey(int id, string keyName)
    {
        try
        {
            errorMessage = null; 
            
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"Are you sure you want to delete the virtual key '{keyName}'? This cannot be undone.");
                
            if (!confirmed) return;

            var success = await AdminApiClient.DeleteVirtualKeyAsync(id);
            if (success)
            {
                await LoadDataAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Virtual key '{keyName}' deleted successfully");
            }
            else
            {
                errorMessage = $"Could not delete key with ID {id}. The key may have been already deleted.";
                await JSRuntime.InvokeVoidAsync("alert", "Failed to delete virtual key");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting virtual key: {ex.Message}";
            Logger.LogError(ex, "Error deleting virtual key with ID {KeyId}", id);
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while deleting the virtual key");
        }
    }

    private async Task ResetKeySpend(int id, string keyName)
    {
        try
        {
            errorMessage = null; 
            
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"Are you sure you want to reset the spend for virtual key '{keyName}'? This will set the current spend to zero.");
                
            if (!confirmed) return;

            var success = await AdminApiClient.ResetVirtualKeySpendAsync(id);
            if (success)
            {
                await LoadDataAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Spend for key '{keyName}' reset successfully");
            }
            else
            {
                errorMessage = $"Could not reset spend for key with ID {id}. The key may not exist.";
                await JSRuntime.InvokeVoidAsync("alert", "Failed to reset key spend");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error resetting spend: {ex.Message}";
            Logger.LogError(ex, "Error resetting spend for virtual key with ID {KeyId}", id);
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while resetting key spend");
        }
    }
}