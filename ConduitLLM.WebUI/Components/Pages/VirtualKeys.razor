@page "/virtualkeys"
@using ConduitLLM.WebUI.Services
@using ConduitLLM.WebUI.Interfaces
@using ConduitLLM.Configuration.DTOs.VirtualKey
@using Microsoft.EntityFrameworkCore 
@using Microsoft.JSInterop 
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject ConduitLLM.WebUI.Interfaces.IAdminApiClient AdminApiClient
@inject ConduitLLM.WebUI.Interfaces.IConduitApiClient ConduitApiClient
@inject ConduitLLM.WebUI.Interfaces.IGlobalSettingService GlobalSettingService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime 
@inject ILogger<VirtualKeys> Logger
@inject IToastService ToastService
@rendermode InteractiveServer

<PageTitle>Virtual Keys - ConduitLLM</PageTitle>

<div class="container container-xxl">
    <!-- Header Section -->
    <PageHeader Title="Virtual Keys Management" 
                Description="Create and manage secure API keys with controlled permissions and spending limits"
                Icon="fa-key">
        <Statistics>
            <div class="stat-item">
                <i class="fa fa-key me-2"></i>
                <span class="small">@(virtualKeys?.Count ?? 0) Keys</span>
            </div>
            <div class="stat-item mt-2">
                <i class="fa fa-check-circle me-2"></i>
                <span class="small">@(virtualKeys?.Count(k => k.IsEnabled) ?? 0) Active</span>
            </div>
        </Statistics>
    </PageHeader>
    
    <!-- WebUI Key Status Card -->
    <div class="card modern-card mb-4">
        <div class="card-header modern-card-header">
            <h5 class="mb-0 fw-bold text-dark">
                <i class="fa fa-server me-2 text-primary"></i>WebUI Authentication Status
            </h5>
        </div>
        <div class="card-body modern-card-body">
            @if (isCheckingWebUIKey)
            {
                <div class="d-flex align-items-center">
                    <div class="spinner-border spinner-border-sm text-primary me-3" role="status">
                        <span class="visually-hidden">Checking...</span>
                    </div>
                    <span>Checking WebUI virtual key status...</span>
                </div>
            }
            else if (webUIKeyIsValid == true)
            {
                <div class="alert alert-success mb-0">
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <h6 class="alert-heading">
                                <i class="fa fa-check-circle me-2"></i>WebUI Key is Valid
                            </h6>
                            <p class="mb-0">@webUIKeyStatus</p>
                        </div>
                        <button type="button" class="btn btn-sm btn-warning" 
                                @onclick="RegenerateWebUIKey" 
                                disabled="@isRegeneratingWebUIKey">
                            <i class="fa fa-refresh me-2"></i>Regenerate Anyway
                        </button>
                    </div>
                </div>
            }
            else if (webUIKeyIsValid == false)
            {
                <div class="alert alert-danger">
                    <h6 class="alert-heading">
                        <i class="fa fa-exclamation-circle me-2"></i>WebUI Key Problem Detected
                    </h6>
                    <p>@(webUIKeyStatus ?? "The WebUI authentication key is not configured correctly.")</p>
                    @if (!string.IsNullOrEmpty(webUIKeyError))
                    {
                        <div class="mt-2 p-2 bg-dark text-light rounded">
                            <small><strong>Error Details:</strong> @webUIKeyError</small>
                        </div>
                    }
                    <hr>
                    <div class="d-flex justify-content-between align-items-center">
                        <p class="mb-0">Click the button to automatically fix this issue:</p>
                        <button type="button" class="btn btn-primary" 
                                @onclick="RegenerateWebUIKey" 
                                disabled="@isRegeneratingWebUIKey">
                            @if (isRegeneratingWebUIKey)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>Regenerating...</span>
                            }
                            else
                            {
                                <i class="fa fa-wrench me-2"></i>
                                <span>Fix WebUI Authentication</span>
                            }
                        </button>
                    </div>
                </div>
            }
            else
            {
                <div class="alert alert-warning mb-0">
                    <h6 class="alert-heading">
                        <i class="fa fa-question-circle me-2"></i>Unable to Check Status
                    </h6>
                    <p class="mb-0">Could not determine WebUI key status. You may need to regenerate it.</p>
                </div>
            }
        </div>
    </div>
    
    <!-- Main Content Card -->
    <div class="card modern-card">
        <div class="card-header modern-card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0 fw-bold text-dark">
                <i class="fa fa-list me-2 text-primary"></i>Virtual Keys
            </h5>
            <a href="/virtualkeys/edit" class="btn btn-primary modern-btn modern-btn-primary">
                <i class="fa fa-plus me-2"></i>Add Key
            </a>
        </div>
        <div class="card-body modern-card-body">
            @if (virtualKeys == null)
            {
                <LoadingSpinner Message="Loading virtual keys..." />
            }
            else if (!virtualKeys.Any())
            {
                <EmptyState Title="No Virtual Keys Found"
                            Description="Get started by creating your first virtual key to manage API access and spending limits."
                            Icon="fa-key"
                            IconOpacity="opacity-75">
                    <ActionTemplate>
                        <a href="/virtualkeys/edit" class="btn btn-primary modern-btn modern-btn-primary btn-lg">
                            <i class="fa fa-plus me-2"></i>Create Your First Key
                        </a>
                    </ActionTemplate>
                    <AdditionalContent>
                        <div class="card modern-card mb-4">
                            <div class="card-header modern-card-header">
                                <h6 class="mb-0 fw-bold text-primary">
                                    <i class="fa fa-lightbulb me-2"></i>About Virtual Keys
                                </h6>
                            </div>
                            <div class="card-body modern-card-body">
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <div class="modern-feature d-flex align-items-start">
                                            <i class="fa fa-shield-alt text-success me-3 mt-1"></i>
                                            <div>
                                                <strong>Secure API Access</strong>
                                                <p class="small text-muted mb-0">Grant third-party applications access without sharing provider credentials</p>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="modern-feature d-flex align-items-start">
                                            <i class="fa fa-dollar-sign text-warning me-3 mt-1"></i>
                                            <div>
                                                <strong>Cost Control</strong>
                                                <p class="small text-muted mb-0">Set spending limits to manage and control API usage costs</p>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="modern-feature d-flex align-items-start">
                                            <i class="fa fa-filter text-info me-3 mt-1"></i>
                                            <div>
                                                <strong>Model Restrictions</strong>
                                                <p class="small text-muted mb-0">Restrict access to specific AI models and capabilities</p>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="modern-feature d-flex align-items-start">
                                            <i class="fa fa-clock text-danger me-3 mt-1"></i>
                                            <div>
                                                <strong>Expiration Control</strong>
                                                <p class="small text-muted mb-0">Set expiration dates for temporary or time-limited access</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </AdditionalContent>
                </EmptyState>
            }
            else
            {
                <div class="table-responsive modern-table-container">
                    <table class="table modern-table table-hover align-middle">
                        <thead class="modern-table-header">
                            <tr>
                                <th class="border-0 fw-bold">Name</th>
                                <th class="border-0 fw-bold">Status</th>
                                <th class="border-0 fw-bold">Budget</th>
                                <th class="border-0 fw-bold">Models</th>
                                <th class="border-0 fw-bold">Created</th>
                                <th class="border-0 fw-bold">Expires</th>
                                <th class="border-0 fw-bold">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in virtualKeys)
                            {
                                <tr class="modern-table-row">
                                    <td class="border-0" data-label="Name">
                                        <div class="vk-key-name">
                                            <strong class="text-dark">@item.KeyName</strong>
                                        </div>
                                    </td>
                                    <td class="border-0" data-label="Status">
                                        @if (item.IsEnabled)
                                        {
                                            <span class="badge modern-badge modern-badge-success">
                                                <i class="fa fa-check me-1"></i>Active
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge modern-badge modern-badge-danger">
                                                <i class="fa fa-times me-1"></i>Disabled
                                            </span>
                                        }
                                        @if (item.ExpiresAt.HasValue && item.ExpiresAt.Value < DateTime.UtcNow)
                                        {
                                            <span class="badge bg-secondary ms-1">
                                                <i class="fa fa-clock me-1"></i>Expired
                                            </span>
                                        }
                                    </td>
                                    <td class="border-0" data-label="Budget">
                                        @if (item.MaxBudget.HasValue)
                                        {
                                            <div class="vk-budget-display">
                                                <div class="mb-1">
                                                    <span class="fw-medium text-dark">$@item.CurrentSpend.ToString("F2")</span>
                                                    <span class="text-muted"> / $@item.MaxBudget.Value.ToString("F2")</span>
                                                </div>
                                                @{
                                                    var percentage = item.MaxBudget.Value > 0 
                                                        ? Math.Min((double)(item.CurrentSpend / item.MaxBudget.Value) * 100, 100.0) 
                                                        : 0.0;
                                                    var progressClass = percentage switch {
                                                        > 90.0 => "bg-danger",
                                                        > 70.0 => "bg-warning",
                                                        _ => "bg-success"
                                                    };
                                                }
                                                <div class="progress modern-progress my-1">
                                                    <div class="progress-bar modern-progress-bar @progressClass" role="progressbar" style="width: @percentage%" 
                                                         aria-valuenow="@percentage" aria-valuemin="0" aria-valuemax="100"></div>
                                                </div>
                                                <small class="text-muted">@(item.BudgetDuration ?? "Total")</small>
                                            </div>
                                        }
                                        else
                                        {
                                            <span class="text-muted">
                                                <i class="fa fa-infinity me-1"></i>No limit
                                            </span>
                                        }
                                    </td>
                                    <td class="border-0" data-label="Models">
                                        @if (string.IsNullOrEmpty(item.AllowedModels))
                                        {
                                            <span class="text-muted">
                                                <i class="fa fa-globe me-1"></i>All models
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="vk-models-text" title="@item.AllowedModels">
                                                <i class="fa fa-filter me-1 text-info"></i>
                                                @(item.AllowedModels.Length > 15 
                                                    ? item.AllowedModels.Substring(0, 12) + "..." 
                                                    : item.AllowedModels)
                                            </span>
                                        }
                                    </td>
                                    <td class="border-0" data-label="Created">
                                        <small class="text-muted">
                                            <i class="fa fa-calendar me-1"></i>@item.CreatedAt.ToLocalTime().ToString("MMM dd, yyyy")
                                        </small>
                                    </td>
                                    <td class="border-0" data-label="Expires">
                                        @if (item.ExpiresAt.HasValue)
                                        {
                                            <small class="text-muted">
                                                <i class="fa fa-clock me-1"></i>@item.ExpiresAt.Value.ToLocalTime().ToString("MMM dd, yyyy")
                                            </small>
                                        }
                                        else
                                        {
                                            <small class="text-muted">
                                                <i class="fa fa-infinity me-1"></i>Never
                                            </small>
                                        }
                                    </td>
                                    <td class="border-0" data-label="Actions">
                                        <div class="btn-group btn-group-sm">
                                            <a href="/virtualkeys/edit/@item.Id" class="btn btn-outline-primary" title="Edit Key">
                                                <i class="fa fa-edit"></i>
                                            </a>
                                            <button type="button" class="btn btn-outline-warning" @onclick="() => ResetKeySpend(item.Id, item.KeyName)" title="Reset Spend">
                                                <i class="fa fa-undo"></i>
                                            </button>
                                            <button type="button" class="btn btn-outline-danger" @onclick="() => DeleteVirtualKey(item.Id, item.KeyName)" title="Delete Key">
                                                <i class="fa fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<!-- Page-specific styles -->
<style>
    /* Keep only truly page-specific styles */
    .vk-key-name {
        font-weight: 600;
    }

    .vk-budget-display {
        min-width: 120px;
    }

    .vk-models-text {
        max-width: 150px;
        display: inline-block;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
</style>

@code {
    private List<VirtualKeyDto>? virtualKeys;
    private bool isCheckingWebUIKey = false;
    private bool isRegeneratingWebUIKey = false;
    private string? webUIKeyStatus = null;
    private bool? webUIKeyIsValid = null;
    private string? webUIKeyError = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
        await CheckWebUIKeyStatus();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            virtualKeys = (await AdminApiClient.GetAllVirtualKeysAsync()).ToList();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading virtual keys: {ex.Message}", "Load Error");
            Logger.LogError(ex, "Error loading virtual keys");
        }
    }

    private void AddVirtualKey()
    {
        NavigationManager.NavigateTo("/virtualkeys/edit");
    }

    private void EditVirtualKey(int id)
    {
        NavigationManager.NavigateTo($"/virtualkeys/edit/{id}");
    }

    private async Task DeleteVirtualKey(int id, string keyName)
    {
        try
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"Are you sure you want to delete the virtual key '{keyName}'? This cannot be undone.");
                
            if (!confirmed) return;

            var success = await AdminApiClient.DeleteVirtualKeyAsync(id);
            if (success)
            {
                await LoadDataAsync();
                ToastService.ShowSuccess($"Virtual key '{keyName}' deleted successfully", "Key Deleted");
            }
            else
            {
                ToastService.ShowError($"Could not delete key with ID {id}. The key may have been already deleted.", "Delete Failed");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error deleting virtual key: {ex.Message}", "Delete Error");
            Logger.LogError(ex, "Error deleting virtual key with ID {KeyId}", id);
        }
    }

    private async Task ResetKeySpend(int id, string keyName)
    {
        try
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"Are you sure you want to reset the spend for virtual key '{keyName}'? This will set the current spend to zero.");
                
            if (!confirmed) return;

            var success = await AdminApiClient.ResetVirtualKeySpendAsync(id);
            if (success)
            {
                await LoadDataAsync();
                ToastService.ShowSuccess($"Spend for key '{keyName}' reset successfully", "Spend Reset");
            }
            else
            {
                ToastService.ShowError($"Could not reset spend for key with ID {id}. The key may not exist.", "Reset Failed");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error resetting spend: {ex.Message}", "Reset Error");
            Logger.LogError(ex, "Error resetting spend for virtual key with ID {KeyId}", id);
        }
    }

    private async Task CheckWebUIKeyStatus()
    {
        isCheckingWebUIKey = true;
        webUIKeyIsValid = null;
        webUIKeyStatus = null;
        webUIKeyError = null;
        StateHasChanged();

        try
        {
            // Step 1: Check if WebUI virtual key exists in global settings
            var storedKey = await GlobalSettingService.GetSettingAsync("WebUI_VirtualKey");
            var storedKeyId = await GlobalSettingService.GetSettingAsync("WebUI_VirtualKeyId");
            
            if (string.IsNullOrEmpty(storedKey))
            {
                webUIKeyIsValid = false;
                webUIKeyStatus = "No WebUI virtual key found in settings.";
                return;
            }

            // Step 2: Try to validate the key by making a test API call
            try
            {
                // Use the ConduitApiClient to test the key
                var models = await ConduitApiClient.GetAvailableModelsAsync();
                
                // If we get here without exception, the key is valid
                webUIKeyIsValid = true;
                
                // Try to find the key details in our virtual keys list
                if (!string.IsNullOrEmpty(storedKeyId) && int.TryParse(storedKeyId, out var keyId))
                {
                    var keyInfo = virtualKeys?.FirstOrDefault(k => k.Id == keyId);
                    if (keyInfo != null)
                    {
                        webUIKeyStatus = $"WebUI is using virtual key '{keyInfo.KeyName}' (ID: {keyId}). API connectivity verified.";
                    }
                    else
                    {
                        webUIKeyStatus = $"WebUI virtual key is working (ID: {keyId}), but key details not found in list. API connectivity verified.";
                    }
                }
                else
                {
                    webUIKeyStatus = "WebUI virtual key is configured and working. API connectivity verified.";
                }
            }
            catch (Exception apiEx)
            {
                webUIKeyIsValid = false;
                webUIKeyStatus = "WebUI virtual key exists but failed API validation.";
                webUIKeyError = apiEx.Message;
                Logger.LogError(apiEx, "WebUI key validation failed");
            }
        }
        catch (Exception ex)
        {
            webUIKeyIsValid = null;
            webUIKeyStatus = "Error checking WebUI key status.";
            webUIKeyError = ex.Message;
            Logger.LogError(ex, "Error checking WebUI key status");
        }
        finally
        {
            isCheckingWebUIKey = false;
            StateHasChanged();
        }
    }

    private async Task RegenerateWebUIKey()
    {
        isRegeneratingWebUIKey = true;
        StateHasChanged();

        try
        {
            // Step 1: Delete any existing "WebUI Internal Key" virtual keys
            ToastService.ShowInfo("Step 1/4: Cleaning up old WebUI keys...");
            
            var allKeys = await AdminApiClient.GetAllVirtualKeysAsync();
            var webUIKeys = allKeys.Where(k => k.KeyName == "WebUI Internal Key" || 
                                              k.KeyName == "WebUI Internal Key (Regenerated)").ToList();
            
            foreach (var oldKey in webUIKeys)
            {
                try
                {
                    await AdminApiClient.DeleteVirtualKeyAsync(oldKey.Id);
                    Logger.LogInformation("Deleted old WebUI key: {KeyName} (ID: {KeyId})", oldKey.KeyName, oldKey.Id);
                }
                catch (Exception deleteEx)
                {
                    Logger.LogWarning(deleteEx, "Failed to delete old WebUI key {KeyId}", oldKey.Id);
                }
            }

            // Step 2: Create a new virtual key
            ToastService.ShowInfo("Step 2/4: Creating new WebUI virtual key...");
            
            var createRequest = new CreateVirtualKeyRequestDto
            {
                KeyName = "WebUI Internal Key (Regenerated)",
                AllowedModels = null, // Allow all models
                MaxBudget = null, // No budget limit
                BudgetDuration = null,
                ExpiresAt = null, // Never expires
                Metadata = $"{{\"purpose\": \"Internal WebUI authentication\", \"regenerated\": \"{DateTime.UtcNow:yyyy-MM-ddTHH:mm:ssZ}\"}}",
                RateLimitRpm = null, // No rate limit
                RateLimitRpd = null
            };
            
            var newKeyResponse = await AdminApiClient.GenerateVirtualKeyAsync(createRequest);
            
            if (newKeyResponse == null || string.IsNullOrEmpty(newKeyResponse.VirtualKey))
            {
                throw new InvalidOperationException("Failed to create new WebUI virtual key - no response received");
            }

            Logger.LogInformation("Created new WebUI virtual key with ID: {KeyId}", newKeyResponse.KeyInfo.Id);

            // Step 3: Store the new key in global settings
            ToastService.ShowInfo("Step 3/4: Updating WebUI configuration...");
            
            await GlobalSettingService.SetSettingAsync("WebUI_VirtualKey", newKeyResponse.VirtualKey);
            await GlobalSettingService.SetSettingAsync("WebUI_VirtualKeyId", newKeyResponse.KeyInfo.Id.ToString());
            
            Logger.LogInformation("Updated global settings with new WebUI virtual key");

            // Step 4: Verify the new key works
            ToastService.ShowInfo("Step 4/4: Verifying new key...");
            
            // Clear any cached key in ConduitApiClient by making a test call
            try
            {
                var models = await ConduitApiClient.GetAvailableModelsAsync();
                Logger.LogInformation("Successfully verified new WebUI key - retrieved {Count} models", models?.Count() ?? 0);
                
                // Success!
                ToastService.ShowSuccess("WebUI authentication key regenerated successfully! The WebUI can now connect to the API.", "Success");
                
                // Reload the data and check status again
                await LoadDataAsync();
                await CheckWebUIKeyStatus();
            }
            catch (Exception verifyEx)
            {
                Logger.LogError(verifyEx, "Failed to verify new WebUI key");
                ToastService.ShowError($"Key was created but verification failed: {verifyEx.Message}. You may need to restart the WebUI.", "Verification Failed");
                
                // Still reload to show the new state
                await LoadDataAsync();
                await CheckWebUIKeyStatus();
            }
        }
        catch (Exception ex)
        {
            webUIKeyError = ex.Message;
            Logger.LogError(ex, "Failed to regenerate WebUI key");
            ToastService.ShowError($"Failed to regenerate WebUI key: {ex.Message}", "Regeneration Failed");
            
            // Check status again to update the UI
            await CheckWebUIKeyStatus();
        }
        finally
        {
            isRegeneratingWebUIKey = false;
            StateHasChanged();
        }
    }
}