@page "/audio-providers/edit"
@page "/audio-providers/edit/{id:int}"
@attribute [Authorize(Policy = "MasterKeyPolicy")]
@using System.Text.Json
@using ConduitLLM.Configuration
@using ConfigDTOs = ConduitLLM.Configuration.DTOs
@using AudioDTOs = ConduitLLM.Configuration.DTOs.Audio
@using ConduitLLM.WebUI.Services
@using ConduitLLM.WebUI.Interfaces
@using Microsoft.Extensions.Logging
@using ConduitLLM.WebUI.Components.Shared

@inject NavigationManager NavigationManager
@inject ILogger<AudioProviderEdit> Logger
@inject IAdminApiClient AdminApiClient
@inject IToastService ToastService
@rendermode InteractiveServer

<PageTitle>@(Id.HasValue ? "Edit" : "Configure") Audio Provider - ConduitLLM</PageTitle>

<div class="container container-xxl">
    <!-- Header Section -->
    <PageHeader Title="@PageTitle" 
                Description="Configure audio capabilities for your LLM provider"
                Icon="fa-headphones">
        <Statistics>
            <div class="stat-item">
                <i class="fa fa-server me-2"></i>
                <span class="small">@(currentAudioProvider.ProviderName ?? "New Configuration")</span>
            </div>
        </Statistics>
    </PageHeader>

    <div class="row">
        <div class="col-lg-8">
            <div class="card modern-card mb-4">
                <div class="card-header modern-card-header">
                    <h5 class="mb-0">
                        <i class="fa fa-cog me-2 text-info"></i>Provider Configuration
                    </h5>
                </div>
                <div class="card-body modern-card-body">
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <EditForm Model="@currentAudioProvider" OnValidSubmit="@SaveAudioProvider">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="modern-form-group mb-4">
                                <label for="audioProviderSelect" class="modern-form-label">LLM Provider<span class="text-danger">*</span></label>
                                <select class="form-select modern-form-select" id="audioProviderSelect" 
                                        @bind="currentAudioProvider.ProviderCredentialId"
                                        disabled="@(Id.HasValue)">
                                    <option value="0">-- Select Provider --</option>
                                    @if (providerCredentials != null)
                                    {
                                        @foreach (var provider in providerCredentials.OrderBy(p => p.ProviderName))
                                        {
                                            <option value="@provider.Id">@provider.ProviderName</option>
                                        }
                                    }
                                </select>
                                <small class="form-text text-muted">Select the LLM provider to configure audio capabilities for</small>
                            </div>

                            <!-- Transcription Settings -->
                            <div class="border rounded p-4 mb-4">
                                <h6 class="mb-3"><i class="fa fa-microphone me-2"></i>Transcription Settings</h6>
                                <div class="form-check mb-3">
                                    <input class="form-check-input" type="checkbox" id="transcriptionEnabled" 
                                           @bind="currentAudioProvider.TranscriptionEnabled" />
                                    <label class="form-check-label" for="transcriptionEnabled">
                                        Enable Transcription
                                    </label>
                                </div>
                                <div class="modern-form-group">
                                    <label for="transcriptionModel" class="modern-form-label">Default Transcription Model</label>
                                    <input type="text" class="form-control modern-form-control" id="transcriptionModel" 
                                           @bind="currentAudioProvider.DefaultTranscriptionModel"
                                           placeholder="e.g., whisper-1"
                                           disabled="@(!currentAudioProvider.TranscriptionEnabled)" />
                                    <small class="form-text text-muted">The model to use for audio transcription</small>
                                </div>
                            </div>

                            <!-- Text-to-Speech Settings -->
                            <div class="border rounded p-4 mb-4">
                                <h6 class="mb-3"><i class="fa fa-volume-up me-2"></i>Text-to-Speech Settings</h6>
                                <div class="form-check mb-3">
                                    <input class="form-check-input" type="checkbox" id="ttsEnabled" 
                                           @bind="currentAudioProvider.TextToSpeechEnabled" />
                                    <label class="form-check-label" for="ttsEnabled">
                                        Enable Text-to-Speech
                                    </label>
                                </div>
                                <div class="modern-form-group mb-3">
                                    <label for="ttsModel">Default TTS Model</label>
                                    <input type="text" class="form-control" id="ttsModel" 
                                           @bind="currentAudioProvider.DefaultTTSModel"
                                           placeholder="e.g., tts-1"
                                           disabled="@(!currentAudioProvider.TextToSpeechEnabled)" />
                                    <small class="form-text text-muted">The model to use for text-to-speech generation</small>
                                </div>
                                <div class="modern-form-group">
                                    <label for="ttsVoice">Default TTS Voice</label>
                                    <input type="text" class="form-control" id="ttsVoice" 
                                           @bind="currentAudioProvider.DefaultTTSVoice"
                                           placeholder="e.g., alloy"
                                           disabled="@(!currentAudioProvider.TextToSpeechEnabled)" />
                                    <small class="form-text text-muted">The default voice to use for TTS</small>
                                </div>
                            </div>

                            <!-- Real-time Audio Settings -->
                            <div class="border rounded p-4 mb-4">
                                <h6 class="mb-3"><i class="fa fa-podcast me-2"></i>Real-time Audio Settings</h6>
                                <div class="form-check mb-3">
                                    <input class="form-check-input" type="checkbox" id="realtimeEnabled" 
                                           @bind="currentAudioProvider.RealtimeEnabled" />
                                    <label class="form-check-label" for="realtimeEnabled">
                                        Enable Real-time Audio
                                    </label>
                                </div>
                                <div class="modern-form-group mb-3">
                                    <label for="realtimeModel">Default Real-time Model</label>
                                    <input type="text" class="form-control" id="realtimeModel" 
                                           @bind="currentAudioProvider.DefaultRealtimeModel"
                                           placeholder="e.g., gpt-4-realtime"
                                           disabled="@(!currentAudioProvider.RealtimeEnabled)" />
                                    <small class="form-text text-muted">The model to use for real-time audio processing</small>
                                </div>
                                <div class="modern-form-group">
                                    <label for="realtimeEndpoint">WebSocket Endpoint</label>
                                    <input type="text" class="form-control" id="realtimeEndpoint" 
                                           @bind="currentAudioProvider.RealtimeEndpoint"
                                           placeholder="e.g., wss://api.openai.com/v1/realtime"
                                           disabled="@(!currentAudioProvider.RealtimeEnabled)" />
                                    <small class="form-text text-muted">The WebSocket endpoint for real-time audio streaming</small>
                                </div>
                            </div>

                            <!-- Routing Priority -->
                            <div class="modern-form-group mb-4">
                                <label for="routingPriority">Routing Priority</label>
                                <input type="number" class="form-control" id="routingPriority" 
                                       @bind="currentAudioProvider.RoutingPriority"
                                       min="1" max="1000" />
                                <small class="form-text text-muted">Higher priority providers are preferred when routing audio requests (1-1000)</small>
                            </div>

                            <div class="d-flex justify-content-end">
                                <button type="button" class="btn btn-outline-secondary modern-btn modern-btn-secondary me-2" @onclick="Cancel">
                                    <i class="fa fa-times me-1"></i>Cancel
                                </button>
                                <button type="submit" class="btn btn-primary modern-btn modern-btn-primary" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    }
                                    else
                                    {
                                        <i class="fa fa-save me-1"></i>
                                    }
                                    Save Configuration
                                </button>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>

        <!-- Help Panel -->
        <div class="col-lg-4">
            <div class="card modern-card">
                <div class="card-header modern-card-header">
                    <h5 class="mb-0">
                        <i class="fa fa-info-circle me-2 text-info"></i>Configuration Help
                    </h5>
                </div>
                <div class="card-body modern-card-body">
                    <div class="mb-4">
                        <h6 class="text-muted mb-3">Audio Capabilities</h6>
                        <p class="small text-muted">
                            Configure which audio features this provider supports. Not all providers support all capabilities.
                        </p>
                    </div>

                    <div class="mb-4">
                        <h6 class="text-muted mb-2"><i class="fa fa-microphone me-2"></i>Transcription</h6>
                        <p class="small text-muted">
                            Convert audio files to text. Common models include OpenAI's whisper-1.
                        </p>
                    </div>

                    <div class="mb-4">
                        <h6 class="text-muted mb-2"><i class="fa fa-volume-up me-2"></i>Text-to-Speech</h6>
                        <p class="small text-muted">
                            Generate natural-sounding audio from text. Supports multiple voices and models.
                        </p>
                    </div>

                    <div class="mb-4">
                        <h6 class="text-muted mb-2"><i class="fa fa-podcast me-2"></i>Real-time Audio</h6>
                        <p class="small text-muted">
                            Enable live audio streaming for real-time conversations via WebSocket.
                        </p>
                    </div>

                    <div class="alert alert-info">
                        <i class="fa fa-lightbulb me-2"></i>
                        <strong>Tip:</strong> Start by enabling only the capabilities you need. You can always add more later.
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int? Id { get; set; }
    
    private AudioDTOs.AudioProviderConfigDto currentAudioProvider = new();
    private List<ConfigDTOs.ProviderCredentialDto> providerCredentials = new();
    private bool isLoading = true;
    private bool isSaving = false;
    
    private string PageTitle => Id.HasValue ? "Edit Audio Provider" : "Configure Audio Provider";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadProvidersAsync();
            
            if (Id.HasValue)
            {
                await LoadAudioProviderAsync(Id.Value);
            }
            else
            {
                currentAudioProvider = new AudioDTOs.AudioProviderConfigDto
                {
                    RoutingPriority = 100
                };
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing audio provider edit page");
            ToastService.ShowError("Failed to load configuration");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadProvidersAsync()
    {
        try
        {
            var providers = await AdminApiClient.GetAllProviderCredentialsAsync();
            providerCredentials = providers.ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading provider credentials");
            providerCredentials = new List<ConfigDTOs.ProviderCredentialDto>();
        }
    }

    private async Task LoadAudioProviderAsync(int id)
    {
        try
        {
            var audioProvider = await AdminApiClient.GetAudioProviderAsync(id);
            if (audioProvider != null)
            {
                currentAudioProvider = audioProvider;
                
                // Set the provider name for display
                var provider = providerCredentials.FirstOrDefault(p => p.Id == audioProvider.ProviderCredentialId);
                if (provider != null)
                {
                    currentAudioProvider.ProviderName = provider.ProviderName;
                }
            }
            else
            {
                ToastService.ShowError("Audio provider not found");
                NavigationManager.NavigateTo("/audio-providers");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading audio provider");
            ToastService.ShowError($"Error loading audio provider: {ex.Message}");
            NavigationManager.NavigateTo("/audio-providers");
        }
    }

    private async Task SaveAudioProvider()
    {
        if (currentAudioProvider.ProviderCredentialId == 0)
        {
            ToastService.ShowError("Please select a provider");
            return;
        }

        isSaving = true;
        try
        {
            if (Id.HasValue)
            {
                // Update existing
                var updatedAudioProvider = await AdminApiClient.UpdateAudioProviderAsync(Id.Value, currentAudioProvider);
                if (updatedAudioProvider != null)
                {
                    ToastService.ShowSuccess("Audio provider configuration updated successfully");
                    NavigationManager.NavigateTo("/audio-providers");
                }
                else
                {
                    ToastService.ShowError("Failed to update audio provider configuration");
                }
            }
            else
            {
                // Create new
                var newAudioProvider = await AdminApiClient.CreateAudioProviderAsync(currentAudioProvider);
                if (newAudioProvider != null)
                {
                    ToastService.ShowSuccess("Audio provider configuration created successfully");
                    NavigationManager.NavigateTo("/audio-providers");
                }
                else
                {
                    ToastService.ShowError("Failed to create audio provider configuration");
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error saving audio provider: {ex.Message}");
            Logger.LogError(ex, "Error saving audio provider");
        }
        finally
        {
            isSaving = false;
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/audio-providers");
    }
}

<!-- Page-specific styles removed - using design system -->