@page "/login"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.ComponentModel.DataAnnotations
@using System.Security.Cryptography
@using System.Text
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavigationManager
@inject ConduitLLM.WebUI.Interfaces.IGlobalSettingService GlobalSettingService
@inject IHttpContextAccessor HttpContextAccessor
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@inject ILogger<Login> Logger

<PageTitle>Login - ConduitLLM</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-10">
    <MudCard Elevation="3">
        <MudCardHeader Class="primary darken-1 py-4">
            <CardHeaderContent>
                <MudText Typo="Typo.h5" Color="Color.Surface">ConduitLLM Admin Login</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent Class="pa-6">
            <form method="post" action="/account/login">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <MudAlert Severity="Severity.Error" Class="mb-4" Variant="Variant.Filled">
                        @errorMessage
                    </MudAlert>
                }

                @* Add hidden field for returnUrl *@
                <input type="hidden" name="returnUrl" value="@returnUrl" />
                
                @* Add hidden field for Antiforgery token *@
                @if (!string.IsNullOrEmpty(requestToken) && !string.IsNullOrEmpty(requestTokenFormFieldName))
                {
                    <input type="hidden" name="@requestTokenFormFieldName" value="@requestToken" />
                }

                <MudTextField T="string" @bind-Value="masterKey" 
                             label="Master Key" 
                             name="masterKey"
                             type="password"
                             required="true"
                             requirederror="Master key is required"
                             fullwidth="true" 
                             variant="Variant.Outlined" 
                             margin="Margin.Dense"
                             adornment="Adornment.End" 
                             adornmenticon="@Icons.Material.Filled.Key"/>
                             
                <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-1 mb-4">
                    Enter your master key shown when starting the application with ./start.sh
                </MudText>

                <MudCheckBox T="bool" @bind-Checked="rememberMe" 
                           name="rememberMe" 
                           label="Remember me" 
                           color="Color.Primary" 
                           class="mb-4"/>

                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" 
                          Color="Color.Primary" Size="Size.Large" FullWidth="true">
                    Login
                </MudButton>
            </form>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private string? errorMessage;
    private string? returnUrl;
    private string displayKey = "Loading...";
    private string? masterKey;
    private bool rememberMe;
    private string? requestToken; 
    private string? requestTokenFormFieldName; 

    protected override async Task OnInitializedAsync()
    {
        // Get the return URL from query parameters
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }

        // Get the master key from env var directly
        string? envMasterKey = Environment.GetEnvironmentVariable("CONDUIT_MASTER_KEY");
        displayKey = !string.IsNullOrEmpty(envMasterKey) ? envMasterKey : "(not found)";
        
        // Log diagnostic info
        Logger.LogInformation("Login page loaded, looking for master key");
        Logger.LogInformation($"Environment variable CONDUIT_MASTER_KEY exists: {!string.IsNullOrEmpty(envMasterKey)}");
        if (!string.IsNullOrEmpty(envMasterKey))
        {
            Logger.LogInformation($"Environment variable CONDUIT_MASTER_KEY length: {envMasterKey.Length}");
        }

        // Check for error query parameter from redirect
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("error", out var errorValue))
        {
            if (errorValue == "InvalidKey")
            {
                errorMessage = "Invalid master key provided.";
                Logger.LogWarning("Login page loaded with invalid key error message.");
            }
        }

        // Generate Antiforgery Token
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext != null)
        {
            var tokens = Antiforgery.GetAndStoreTokens(httpContext);
            requestToken = tokens.RequestToken;
            requestTokenFormFieldName = tokens.FormFieldName;
            Logger.LogInformation("Antiforgery token generated. Field name: {FieldName}", requestTokenFormFieldName);
        }
        else
        {
            Logger.LogError("HttpContext is null, cannot generate antiforgery token.");
            errorMessage = "Internal security error. Please try refreshing the page.";
        }
        
        await base.OnInitializedAsync();
    }
}
