@page "/login"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.ComponentModel.DataAnnotations
@using System.Security.Cryptography
@using System.Text
@using Microsoft.AspNetCore.Components.Forms
@using ConduitLLM.WebUI.Interfaces
@inject NavigationManager NavigationManager
@inject ConduitLLM.WebUI.Interfaces.IGlobalSettingService GlobalSettingService
@inject IHttpContextAccessor HttpContextAccessor
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@inject ILogger<Login> Logger
@inject IInsecureModeProvider InsecureModeProvider

<PageTitle>Login - ConduitLLM</PageTitle>

@if (InsecureModeProvider.IsInsecureMode)
{
    <div class="alert alert-info mx-auto mt-5" style="max-width: 500px;">
        <div class="d-flex align-items-center">
            <i class="fa fa-info-circle me-2 fa-lg"></i>
            <div>
                <p class="mb-1">Redirecting to home page...</p>
                <p class="small mb-0">Login is bypassed in insecure mode.</p>
            </div>
        </div>
    </div>
    NavigationManager.NavigateTo("/");
}
else
{
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-12 col-md-6 col-lg-4">
                <div class="card">
                    <div class="card-header bg-primary text-white py-3">
                        <h5 class="mb-0">ConduitLLM Admin Login</h5>
                    </div>
                    <div class="card-body p-4">
                        <form method="post" action="/account/login">
                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger mb-4">
                                    @errorMessage
                                </div>
                            }

                            @* Add hidden field for returnUrl *@
                            <input type="hidden" name="returnUrl" value="@returnUrl" />
                            
                            @* Add hidden field for Antiforgery token *@
                            @if (!string.IsNullOrEmpty(requestToken) && !string.IsNullOrEmpty(requestTokenFormFieldName))
                            {
                                <input type="hidden" name="@requestTokenFormFieldName" value="@requestToken" />
                            }

                            <div class="form-group mb-4">
                                <label for="masterKey">Master Key</label>
                                <div class="input-group">
                                    <input type="password" 
                                           id="masterKey" 
                                           name="masterKey" 
                                           class="form-control" 
                                           required 
                                           autocomplete="off" 
                                           @bind="masterKey" />
                                    <span class="input-group-text">
                                        <i class="fa fa-key"></i>
                                    </span>
                                </div>
                            </div>

                            <div class="form-check mb-4">
                                <input type="checkbox" id="rememberMe" name="rememberMe" class="form-check-input" @bind="rememberMe" />
                                <label for="rememberMe" class="form-check-label">Remember me</label>
                            </div>
                            
                            <div class="d-flex justify-content-end">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fa fa-sign-in-alt me-2"></i>
                                    Login
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string? errorMessage;
    private string? masterKey;
    private bool rememberMe;
    private string? returnUrl = string.Empty;
    
    // Antiforgery token state
    private string? requestToken;
    private string? requestTokenFormFieldName;

    protected override async Task OnInitializedAsync()
    {
        // Get the return URL from query parameters
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }

        // Get the master key from env var directly
        string? envMasterKey = Environment.GetEnvironmentVariable("CONDUIT_MASTER_KEY");
        string displayKey = !string.IsNullOrEmpty(envMasterKey) ? envMasterKey : "(not found)";
        
        // Log diagnostic info
        Logger.LogInformation("Login page loaded, looking for master key");
        Logger.LogInformation($"Environment variable CONDUIT_MASTER_KEY exists: {!string.IsNullOrEmpty(envMasterKey)}");
        if (!string.IsNullOrEmpty(envMasterKey))
        {
            Logger.LogInformation($"Environment variable CONDUIT_MASTER_KEY length: {envMasterKey.Length}");
        }

        // Check for error query parameter from redirect
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("error", out var errorValue))
        {
            if (errorValue == "InvalidKey")
            {
                errorMessage = "Invalid master key provided.";
                Logger.LogWarning("Login page loaded with invalid key error message.");
            }
        }

        // Generate Antiforgery Token
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext != null)
        {
            var tokens = Antiforgery.GetAndStoreTokens(httpContext);
            requestToken = tokens.RequestToken;
            requestTokenFormFieldName = tokens.FormFieldName;
            Logger.LogInformation("Antiforgery token generated. Field name: {FieldName}", requestTokenFormFieldName);
        }
        else
        {
            Logger.LogError("HttpContext is null, cannot generate antiforgery token.");
            errorMessage = "Internal security error. Please try refreshing the page.";
        }
        
        await base.OnInitializedAsync();
    }
}
