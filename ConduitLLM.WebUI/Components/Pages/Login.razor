@page "/login"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.ComponentModel.DataAnnotations
@using System.Security.Cryptography
@using System.Text
@using Microsoft.AspNetCore.Components.Forms
@using ConduitLLM.WebUI.Interfaces
@inject NavigationManager NavigationManager
@inject ConduitLLM.WebUI.Interfaces.IGlobalSettingService GlobalSettingService
@inject IHttpContextAccessor HttpContextAccessor
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@inject ILogger<Login> Logger
@inject IInsecureModeProvider InsecureModeProvider

<PageTitle>Login - ConduitLLM</PageTitle>

@if (InsecureModeProvider.IsInsecureMode)
{
    <MudAlert Severity="Severity.Info" Variant="Variant.Filled" Class="mx-auto mt-8" Style="max-width: 500px;">
        <div class="d-flex align-center">
            <MudIcon Icon="@Icons.Material.Filled.Info" Class="me-2" Size="Size.Medium" />
            <div>
                <MudText>Redirecting to home page...</MudText>
                <MudText Typo="Typo.body2">Login is bypassed in insecure mode.</MudText>
            </div>
        </div>
    </MudAlert>
    NavigationManager.NavigateTo("/");
}
else
{
    <MudContainer MaxWidth="MaxWidth.Small" Class="mt-10">
        <MudCard Elevation="3">
            <MudCardHeader Class="primary darken-1 py-4">
                <CardHeaderContent>
                    <MudText Typo="Typo.h5" Color="Color.Surface">ConduitLLM Admin Login</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="pa-6">
                <form method="post" action="/account/login">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <MudAlert Severity="Severity.Error" Class="mb-4" Variant="Variant.Filled">
                            @errorMessage
                        </MudAlert>
                    }

                    @* Add hidden field for returnUrl *@
                    <input type="hidden" name="returnUrl" value="@returnUrl" />
                    
                    @* Add hidden field for Antiforgery token *@
                    @if (!string.IsNullOrEmpty(requestToken) && !string.IsNullOrEmpty(requestTokenFormFieldName))
                    {
                        <input type="hidden" name="@requestTokenFormFieldName" value="@requestToken" />
                    }

                    <MudTextField T="string" @bind-Value="masterKey" 
                                  label="Master Key" 
                                  name="masterKey"
                                  type="password"
                                  required="true"
                                  requirederror="Master key is required"
                                  fullwidth="true" 
                                  variant="Variant.Outlined" 
                                  margin="Margin.Dense"
                                  adornment="Adornment.End" 
                                  adornmenticon="@Icons.Material.Filled.Key"
                                  autocomplete="off"
                                  class="mb-4" />

                    <div class="mb-4">
                        <input type="checkbox" id="rememberMe" name="rememberMe" @bind="rememberMe" />
                        <label for="rememberMe" class="ms-2">Remember me</label>
                    </div>
                    
                    <div class="d-flex justify-end">
                        <MudButton Variant="Variant.Filled" 
                                 Color="Color.Primary" 
                                 Size="Size.Large"
                                 ButtonType="ButtonType.Submit"
                                 StartIcon="@Icons.Material.Filled.Login">
                            Login
                        </MudButton>
                    </div>
                </form>
            </MudCardContent>
        </MudCard>
    </MudContainer>
}

@code {
    private string? errorMessage;
    private string? masterKey;
    private bool rememberMe;
    private string? returnUrl = string.Empty;
    
    // Antiforgery token state
    private string? requestToken;
    private string? requestTokenFormFieldName;

    protected override async Task OnInitializedAsync()
    {
        // Get the return URL from query parameters
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }

        // Get the master key from env var directly
        string? envMasterKey = Environment.GetEnvironmentVariable("CONDUIT_MASTER_KEY");
        string displayKey = !string.IsNullOrEmpty(envMasterKey) ? envMasterKey : "(not found)";
        
        // Log diagnostic info
        Logger.LogInformation("Login page loaded, looking for master key");
        Logger.LogInformation($"Environment variable CONDUIT_MASTER_KEY exists: {!string.IsNullOrEmpty(envMasterKey)}");
        if (!string.IsNullOrEmpty(envMasterKey))
        {
            Logger.LogInformation($"Environment variable CONDUIT_MASTER_KEY length: {envMasterKey.Length}");
        }

        // Check for error query parameter from redirect
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("error", out var errorValue))
        {
            if (errorValue == "InvalidKey")
            {
                errorMessage = "Invalid master key provided.";
                Logger.LogWarning("Login page loaded with invalid key error message.");
            }
        }

        // Generate Antiforgery Token
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext != null)
        {
            var tokens = Antiforgery.GetAndStoreTokens(httpContext);
            requestToken = tokens.RequestToken;
            requestTokenFormFieldName = tokens.FormFieldName;
            Logger.LogInformation("Antiforgery token generated. Field name: {FieldName}", requestTokenFormFieldName);
        }
        else
        {
            Logger.LogError("HttpContext is null, cannot generate antiforgery token.");
            errorMessage = "Internal security error. Please try refreshing the page.";
        }
        
        await base.OnInitializedAsync();
    }
}
