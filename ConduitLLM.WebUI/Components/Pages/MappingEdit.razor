@page "/configuration/mapping/edit"
@page "/configuration/mapping/edit/{id:int}"
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Caching.Memory
@using System.ComponentModel.DataAnnotations
@using ConduitLLM.Configuration
@using ConduitLLM.Configuration.Entities
@using ConduitLLM.WebUI.Services
@using System.Text.Json
@using System.Net.Http
@using System.Net.Http.Headers
@using Microsoft.Extensions.Logging

@inject IDbContextFactory<ConduitLLM.Configuration.ConfigurationDbContext> DbContextFactory
@inject NavigationManager NavigationManager
@inject ILogger<MappingEdit> _logger
@inject IMemoryCache MemoryCache
@inject ConfigurationChangeNotifier ConfigChangeNotifier
@inject IHttpClientFactory HttpClientFactory
@inject VirtualKeyService VirtualKeyService
@inject ProviderModelsService ProviderModelsService
@rendermode InteractiveServer

<h3 class="mb-4">@(Id.HasValue ? "Edit Mapping" : "Add Mapping")</h3>

@if (isLoadingPage)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (Id.HasValue && dtoMapping == null)
{
    <div class="alert alert-danger">Mapping not found or error loading.</div>
}
else
{
    <EditForm EditContext="editContext" OnValidSubmit="HandleValidSubmit" FormName="MappingForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mb-4">@errorMessage</div>
        }

        <div class="card p-4 mb-4">
            <div class="mb-4">
                <label for="modelAlias" class="form-label">Model Alias</label>
                <input type="text" class="form-control" id="modelAlias" 
                       @bind="dtoMapping.ModelAlias" />
                <ValidationMessage For="@(() => dtoMapping.ModelAlias)" />
            </div>

            @if (availableProviders == null)
            {
                <div class="d-flex align-items-center">
                    <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                    <span>Loading providers...</span>
                </div>
            }
            else
            {
                <div class="mb-4">
                    <label for="providerName" class="form-label">Provider Name</label>
                    <select class="form-select" id="providerName" 
                            value="@dtoMapping.ProviderName"
                            @onchange="@(async (ChangeEventArgs e) => await ProviderSelectedAsync(e.Value?.ToString() ?? ""))">
                        <option value="">-- Select Provider --</option>
                        @foreach (var provider in availableProviders)
                        {
                            <option value="@provider.ProviderName">@provider.ProviderName</option>
                        }
                    </select>
                    <ValidationMessage For="@(() => dtoMapping.ProviderName)" />
                </div>
            }

            <div class="d-flex align-items-center gap-2 mb-4">
                <div class="flex-grow-1">
                    <label for="providerModelId" class="form-label">Provider Model ID</label>
                    @if (isLoadingModels)
                    {
                        <div class="d-flex align-items-center">
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>Loading models...</span>
                        </div>
                    }
                    else if (showModelTextbox || (providerModels == null || !providerModels.Any()))
                    {
                        <div>
                            <input type="text" class="form-control" id="providerModelIdInput"
                                   @bind="dtoMapping.ProviderModelId"
                                   placeholder="Enter model ID"
                                   disabled="@string.IsNullOrEmpty(dtoMapping.ProviderName)" />
                            
                            @if (!string.IsNullOrEmpty(modelLoadErrorMessage))
                            {
                                <small class="text-danger mt-1 d-block">@modelLoadErrorMessage</small>
                            }
                            @if (providerModels == null || !providerModels.Any())
                            {
                                <small class="text-muted mt-1 d-block">
                                    @(string.IsNullOrEmpty(dtoMapping.ProviderName) 
                                        ? "Select provider first" 
                                        : "Could not retrieve model list. Please enter the model ID manually.")
                                </small>
                            }
                            <div class="mt-2">
                                <button type="button" class="btn btn-sm btn-outline-secondary"
                                        @onclick="@(() => RefreshModels(true))"
                                        disabled="@(isLoadingModels || string.IsNullOrEmpty(dtoMapping.ProviderName))">
                                    <i class="fa fa-refresh me-1"></i> Try loading models again
                                </button>
                                @if (showModelTextbox && providerModels != null && providerModels.Any())
                                {
                                    <button type="button" class="btn btn-sm btn-outline-secondary ms-2"
                                            @onclick="ToggleModelInputMode">
                                        <i class="fa fa-list me-1"></i> Show dropdown
                                    </button>
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="input-group">
                            <select class="form-select" id="providerModelId"
                                    value="@dtoMapping.ProviderModelId"
                                    disabled="@(isLoadingModels || string.IsNullOrEmpty(dtoMapping.ProviderName))"
                                    @onchange="@((ChangeEventArgs e) => ProviderModelSelected(e.Value?.ToString() ?? ""))">
                                <option value="">-- Select Model --</option>
                                @foreach (var modelId in providerModels.OrderBy(m => m))
                                {
                                    <option value="@modelId">@modelId</option>
                                }
                            </select>
                            <button class="btn btn-outline-secondary" type="button"
                                    @onclick="@(() => RefreshModels(true))"
                                    disabled="@(isLoadingModels || string.IsNullOrEmpty(dtoMapping.ProviderName))">
                                <i class="fa fa-refresh"></i>
                            </button>
                            <button class="btn btn-outline-secondary" type="button"
                                    @onclick="ToggleModelInputMode"
                                    disabled="@(isLoadingModels || string.IsNullOrEmpty(dtoMapping.ProviderName))">
                                <i class="fa fa-pencil"></i>
                            </button>
                        </div>
                        <small class="form-text text-muted">Select from available models or click <i class="fa fa-pencil"></i> to enter manually</small>
                    }
                    <ValidationMessage For="@(() => dtoMapping.ProviderModelId)" />
                </div>
            </div>
        </div>
            
        <div class="d-flex gap-2 mt-4">
            <button type="submit" 
                    class="btn btn-primary"
                    disabled="@isSaving">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    <span>Saving...</span>
                }
                else
                {
                    <i class="fa fa-save me-2"></i>
                    <span>Save Mapping</span>
                }
            </button>
            
            <button type="button"
                    class="btn btn-outline-secondary"
                    @onclick="Cancel"
                    disabled="@isSaving">
                Cancel
            </button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int? Id { get; set; }
    
    private ConduitLLM.Configuration.ModelProviderMapping dtoMapping = new() 
    { 
        ModelAlias = "",
        ProviderName = "",
        ProviderModelId = ""
    };
    
    private List<ConduitLLM.Configuration.Entities.ProviderCredential> availableProviders = new();
    private List<string> providerModels = new();
    private string? errorMessage; // General errors displayed at the form level
    private string? modelLoadErrorMessage; // Specific error for model loading
    private bool isLoadingModels = false; // Loading provider-specific models
    private bool isLoadingPage = true;
    private bool showModelTextbox = false; // Whether to show textbox instead of dropdown
    private EditContext? editContext;
    private ValidationMessageStore? messageStore;
    private bool isSaving = false; // Saving the mapping

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load available providers (from Config context)
            await using var dbContext = await DbContextFactory.CreateDbContextAsync(); 
            availableProviders = await dbContext.ProviderCredentials.ToListAsync();
            
            if (Id.HasValue) // Editing existing
            {
                var entityMapping = await dbContext.ModelProviderMappings
                    .Include(m => m.ProviderCredential)
                    .FirstOrDefaultAsync(m => m.Id == Id.Value);
                
                if (entityMapping != null)
                {
                    // Convert from entity to DTO
                    dtoMapping = new ConduitLLM.Configuration.ModelProviderMapping
                    {
                        ModelAlias = entityMapping.ModelAlias,
                        ProviderName = entityMapping.ProviderCredential?.ProviderName ?? "",
                        ProviderModelId = entityMapping.ProviderModelName ?? ""
                    };
                    
                    // Load provider models for the selected provider
                    if (!string.IsNullOrEmpty(dtoMapping.ProviderName))
                    {
                        await LoadProviderModelsAsync(dtoMapping.ProviderName);
                    }
                }
                else
                {
                    NavigationManager.NavigateTo("/configuration");
                }
            }
            else
            {
                dtoMapping = new ConduitLLM.Configuration.ModelProviderMapping
                {
                    ModelAlias = "",
                    ProviderName = "",
                    ProviderModelId = ""
                };
            }

            // Initialize EditContext with validation support
            editContext = new EditContext(dtoMapping);
            messageStore = new ValidationMessageStore(editContext);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error initializing mapping editor");
            errorMessage = ex.Message;
        }
        finally
        {
            isLoadingPage = false;
        }
    }

    private async Task LoadProviderModelsAsync(string providerName)
    {
        isLoadingModels = true;
        providerModels.Clear();
        modelLoadErrorMessage = null;
        StateHasChanged();

        try
        {
            // First check if we have a valid credential for this provider
            await using var dbContext = await DbContextFactory.CreateDbContextAsync();
            var provider = await dbContext.ProviderCredentials
                .FirstOrDefaultAsync(p => p.ProviderName == providerName);
                
            if (provider == null)
            {
                modelLoadErrorMessage = $"Provider '{providerName}' not found in the database";
                return;
            }
            
            // Use cache key based on provider name and last updated timestamp to ensure refreshed data
            string cacheKey = $"provider_models_{providerName}_{provider.UpdatedAt:yyyyMMddHHmmss}";
            
            // Check if we already have these models cached and force refresh wasn't requested
            if (!MemoryCache.TryGetValue(cacheKey, out List<string>? cachedModels))
            {
                // No valid cache, load from API
                cachedModels = await LoadModelsFromApi(provider);
                
                if (cachedModels != null && cachedModels.Any())
                {
                    // Cache for 1 hour (adjust as needed)
                    MemoryCache.Set(cacheKey, cachedModels, TimeSpan.FromHours(1));
                }
            }
            
            // Update the model list
            if (cachedModels != null && cachedModels.Any())
            {
                providerModels.AddRange(cachedModels);
                _logger.LogInformation("Loaded {Count} models for provider {ProviderName}", 
                    cachedModels.Count, providerName);
            }
            else
            {
                _logger.LogWarning("No models returned for provider {ProviderName}", providerName);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error loading provider models");
            modelLoadErrorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoadingModels = false;
            StateHasChanged();
        }
    }

    private async Task<List<string>> LoadModelsFromApi(ProviderCredential provider)
    {
        try
        {
            _logger.LogInformation("Loading models for provider {ProviderName}", provider.ProviderName);
            // Use the ProviderModelsService to fetch models from the API
            return await ProviderModelsService.GetModelsAsync(provider.ProviderName);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error loading models for provider {ProviderName}", provider.ProviderName);
            throw; // Rethrow to be handled by caller
        }
    }

    private async Task ProviderSelectedAsync(string selectedProvider)
    {
        if (string.IsNullOrEmpty(selectedProvider))
        {
            // Clear provider models if no provider selected
            providerModels.Clear();
            return;
        }
        
        if (selectedProvider != dtoMapping.ProviderName)
        {
            // Update the DTO and clear the model ID since provider changed
            dtoMapping.ProviderName = selectedProvider;
            dtoMapping.ProviderModelId = ""; // Reset model selection
            
            // Load models for the selected provider
            await LoadProviderModelsAsync(selectedProvider);
        }
    }

    private void ProviderModelSelected(string selectedModel)
    {
        dtoMapping.ProviderModelId = selectedModel ?? "";
    }
    
    private void ToggleModelInputMode()
    {
        // Toggle between dropdown and textbox
        showModelTextbox = !showModelTextbox;
    }

    private async Task RefreshModels(bool forceRefresh)
    {
        if (!string.IsNullOrEmpty(dtoMapping.ProviderName))
        {
            try
            {
                // Show loading state
                isLoadingModels = true;
                modelLoadErrorMessage = null;
                StateHasChanged();
                
                // Directly use the ProviderModelsService to get models with forceRefresh option
                providerModels = await ProviderModelsService.GetModelsAsync(dtoMapping.ProviderName, forceRefresh);
                
                _logger.LogInformation("Refreshed models for provider {ProviderName}, found {Count} models",
                    dtoMapping.ProviderName, providerModels.Count);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error refreshing models for provider {ProviderName}", dtoMapping.ProviderName);
                modelLoadErrorMessage = $"Error: {ex.Message}";
            }
            finally
            {
                isLoadingModels = false;
                StateHasChanged();
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        // Clear previous validation errors
        messageStore?.Clear();
        errorMessage = null;
        isSaving = true;
        StateHasChanged();
        
        try
        {
            // Validate required fields
            if (string.IsNullOrWhiteSpace(dtoMapping.ModelAlias) || 
                string.IsNullOrWhiteSpace(dtoMapping.ProviderName) ||
                string.IsNullOrWhiteSpace(dtoMapping.ProviderModelId))
            {
                errorMessage = "All fields are required";
                return;
            }
            
            // Check if model alias already exists (from Config context) and it's not the current one
            await using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            var provider = await dbContext.ProviderCredentials
                .FirstOrDefaultAsync(p => p.ProviderName == dtoMapping.ProviderName);
                
            if (provider == null)
            {
                errorMessage = $"Provider '{dtoMapping.ProviderName}' not found.";
                return;
            }
            
            // Check if alias exists, excluding the current mapping if editing
            bool aliasExists = await dbContext.ModelProviderMappings
                .AnyAsync(m => m.ModelAlias == dtoMapping.ModelAlias && 
                         (Id == null || m.Id != Id.Value));

            if (aliasExists)
            {
                 // Add validation message specifically for the ModelAlias field
                 messageStore?.Add(() => dtoMapping.ModelAlias, $"Model alias '{dtoMapping.ModelAlias}' already exists.");
                 editContext?.NotifyValidationStateChanged(); // Trigger UI update for validation messages
                 return; // Stop processing
            }

            // --- Database Operations (on Config context) ---
            if (Id.HasValue) // Update
            {
                var existingMapping = await dbContext.ModelProviderMappings.FindAsync(Id.Value);
                if (existingMapping != null)
                {
                    existingMapping.ModelAlias = dtoMapping.ModelAlias;
                    existingMapping.ProviderCredentialId = provider.Id;
                    existingMapping.ProviderModelName = dtoMapping.ProviderModelId;
                    dbContext.ModelProviderMappings.Update(existingMapping);
                }
                else
                {
                    errorMessage = "Error: Mapping not found during update.";
                    StateHasChanged();
                    return;
                }
            }
            else // Add
            {
                var newMapping = new ConduitLLM.Configuration.Entities.ModelProviderMapping
                {
                    ModelAlias = dtoMapping.ModelAlias,
                    ProviderCredentialId = provider.Id,
                    ProviderModelName = dtoMapping.ProviderModelId,
                    IsEnabled = true,
                    CreatedAt = DateTime.UtcNow,
                    UpdatedAt = DateTime.UtcNow
                };
                dbContext.ModelProviderMappings.Add(newMapping);
            }

            await dbContext.SaveChangesAsync();
            
            // Notify the Conduit HTTP proxy about configuration changes
            try
            {
                // Get the proxy base URL from global settings (from Config context)
                var proxyUrlSetting = await dbContext.GlobalSettings
                    .FirstOrDefaultAsync(s => s.Key == "ConduitSettings:ProxyBaseUrl");
                
                string proxyUrl = proxyUrlSetting?.Value ?? "http://localhost:5000";
                
                bool notificationSuccess = await ConfigChangeNotifier.NotifyConfigurationChangedAsync(proxyUrl);
                if (!notificationSuccess)
                {
                    _logger.LogWarning("Failed to notify proxy server about configuration changes. The server may need to be restarted.");
                    // We still proceed with navigation even if notification fails
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error notifying proxy server about configuration changes");
                // We still proceed with navigation even if notification fails
            }
            
            NavigationManager.NavigateTo("/configuration"); // Redirect back to the list
        }
        catch (DbUpdateException dbEx)
        {
            errorMessage = $"Database error saving mapping: {dbEx.InnerException?.Message ?? dbEx.Message}";
            // StateHasChanged(); // EditContext changes trigger state update
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving mapping: {ex.Message}";
        }
        finally
        {
            isSaving = false; // Reset saving flag
            StateHasChanged(); // Let framework handle UI update
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/configuration");
    }
}