@page "/configuration/mapping/edit/{Id:int?}"
@using ConduitLLM.WebUI.Data
@using Microsoft.EntityFrameworkCore 
@using Microsoft.Extensions.Caching.Memory 
@using System.Net.Http.Headers 
@using Microsoft.Extensions.Logging 
@using ConduitLLM.WebUI.Services 
@inject IDbContextFactory<ConduitLLM.Configuration.ConfigurationDbContext> ConfigDbContextFactory // Inject correct factory
@inject IDbContextFactory<ConduitLLM.WebUI.Data.ConfigurationDbContext> WebUIDbContextFactory // Inject WebUI factory for non-global settings
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory 
@inject IMemoryCache MemoryCache 
@inject ILogger<MappingEdit> _logger 
@inject ConfigurationChangeNotifier ConfigNotifier
@rendermode InteractiveServer

<PageTitle>@(Id.HasValue ? "Edit Mapping" : "Add Mapping")</PageTitle>

<h1>@(Id.HasValue ? "Edit Mapping" : "Add Mapping")</h1>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else if (mapping == null)
{
     <p class="text-danger">Mapping not found or error loading.</p>
}
else
{
    <EditForm EditContext="editContext" OnValidSubmit="HandleValidSubmit" FormName="MappingForm"> @* Capture EditContext *@
        <DataAnnotationsValidator />
        @* Keep ValidationSummary for other potential errors *@
        <ValidationSummary />

        @* Display general errors above the form *@
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

         <div class="mb-3">
            <label for="modelAlias" class="form-label">Model Alias:</label>
            <InputText id="modelAlias" @bind-Value="mapping.ModelAlias" class="form-control" />
            <ValidationMessage For="@(() => mapping.ModelAlias)" />
        </div>

        <div class="mb-3">
            <label for="providerName" class="form-label">Provider Name:</label>
            @if (availableProviders == null)
            {
                 <p><em>Loading providers...</em></p>
            }
            else
            {
                <InputSelect id="providerName" @bind-Value="mapping.ProviderName" class="form-select" @oninput="ProviderSelected"> @* Added oninput handler *@
                    <option value="">-- Select Provider --</option>
                    @foreach (var provider in availableProviders)
                    {
                        <option value="@provider.ProviderName">@provider.ProviderName</option> @* Display only ProviderName *@
                    }
                </InputSelect>
                <ValidationMessage For="@(() => mapping.ProviderName)" />
            }
        </div>

        <div class="mb-3">
            <label for="providerModelId" class="form-label">Provider Model ID:</label>
            <div class="input-group">
                <InputSelect id="providerModelId" @bind-Value="mapping.ProviderModelId" class="form-select" 
                             disabled="@(isLoadingModels || string.IsNullOrEmpty(mapping.ProviderName))"
                             @oninput="ProviderModelSelected">
                    @if (isLoadingModels)
                    {
                        <option value="">Loading models...</option>
                    }
                    else if (availableModels == null || !availableModels.Any())
                    {
                         <option value="">@(string.IsNullOrEmpty(mapping.ProviderName) ? "Select provider first" : "No models found or error")</option>
                    }
                    else
                    {
                        <option value="">-- Select Model --</option>
                        @foreach (var modelId in availableModels.OrderBy(m => m))
                        {
                            <option value="@modelId">@modelId</option>
                        }
                    }
                </InputSelect>
                <button class="btn btn-primary refresh-button" type="button" @onclick="() => RefreshModels(true)" disabled="@(isLoadingModels || string.IsNullOrEmpty(mapping.ProviderName))" title="Refresh Model List">
                    @if (isLoadingModels)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-1 d-none d-sm-inline">Loading...</span>
                    }
                    else
                    {
                        <span class="oi oi-reload" aria-hidden="true"></span>
                        <span class="ms-1 d-none d-sm-inline">Refresh Models</span>
                    }
                </button>
            </div>
             @if (!string.IsNullOrEmpty(modelLoadErrorMessage))
            {
                <div class="text-danger small mt-1">@modelLoadErrorMessage</div>
            }
            <ValidationMessage For="@(() => mapping.ProviderModelId)" />
        </div>


        <button type="submit" class="btn btn-primary" disabled="@isSaving">
             @if (isSaving)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span> Saving...</span>
            }
            else
            {
                <span>Save Mapping</span>
            }
        </button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel" disabled="@isSaving">Cancel</button>

        @* General error message moved above the form *@
    </EditForm>
}


@code {
    [Parameter]
    public int? Id { get; set; }

    private DbModelProviderMapping? mapping;
    private List<ConduitLLM.Configuration.Entities.ProviderCredential>? availableProviders; // Use correct entity type
    private bool isLoading = true; // Initial page load
    private bool isSaving = false; // Saving the mapping
    private bool isLoadingModels = false; // Loading models for selected provider
    private string? errorMessage; // For general/save errors
    private string? modelLoadErrorMessage; // For model loading errors
    private EditContext? editContext; // To manage validation messages
    private ValidationMessageStore? messageStore; // To add custom messages
    private List<string>? availableModels; // Fetched models for the selected provider

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            // Load available providers (from Config context)
            await using var configContext = await ConfigDbContextFactory.CreateDbContextAsync(); 
            availableProviders = await configContext.ProviderCredentials.OrderBy(p => p.ProviderName).ToListAsync();

            if (Id.HasValue)
            {
                // Load mapping from WebUI context
                await using var webUiContext = await WebUIDbContextFactory.CreateDbContextAsync(); 
                mapping = await webUiContext.ModelMappings.FindAsync(Id.Value); 
                 if (mapping != null)
                 {
                    editContext = new EditContext(mapping);
                    messageStore = new ValidationMessageStore(editContext);
                    // If editing, load models for the existing provider
                    if (!string.IsNullOrEmpty(mapping.ProviderName))
                    {
                        await RefreshModels(false); // Fetch models without forcing refresh initially
                    }
                 }
                 else
                 {
                     errorMessage = "Mapping not found.";
                     mapping = null; // Prevent form rendering
                     editContext = null;
                     messageStore = null;
                 }
            }
            else
            {
                mapping = new DbModelProviderMapping { ModelAlias = "", ProviderName = "", ProviderModelId = "" }; // Initialize for Add
                editContext = new EditContext(mapping); // Initialize EditContext for new mapping
                messageStore = new ValidationMessageStore(editContext);
            }
        }
        catch (Exception ex)
        {
             errorMessage = $"Error loading data: {ex.Message}";
             mapping = null; // Ensure form doesn't render if load fails
        }
        finally
        {
            isLoading = false;
        }
    }

     private async Task ProviderSelected(ChangeEventArgs e)
    {
        var providerName = e.Value?.ToString();
        mapping!.ProviderName = providerName ?? ""; // Update the bound value
        mapping!.ProviderModelId = ""; // Reset selected model when provider changes
        availableModels?.Clear(); // Clear previous models
        modelLoadErrorMessage = null; // Clear errors
        editContext?.NotifyFieldChanged(FieldIdentifier.Create(() => mapping.ProviderModelId)); // Notify Blazor the model changed

        if (!string.IsNullOrEmpty(providerName))
        {
            await RefreshModels(false); // Fetch models for the new provider (don't force refresh)
        }
        else
        {
            StateHasChanged(); // Update UI if provider is cleared
        }
    }

     private async Task RefreshModels(bool forceRefresh)
    {
        if (mapping == null || string.IsNullOrEmpty(mapping.ProviderName)) return;

        string providerName = mapping.ProviderName;
        string cacheKey = $"models_{providerName}";
        
        // Store the current selection before refreshing
        string previouslySelectedModel = mapping.ProviderModelId;
        
        isLoadingModels = true;
        modelLoadErrorMessage = null;
        availableModels?.Clear(); // Clear existing list while loading
        StateHasChanged();

        if (!forceRefresh && MemoryCache.TryGetValue(cacheKey, out List<string>? cachedModels))
        {
            availableModels = cachedModels;
            _logger.LogInformation("Loaded models for provider '{ProviderName}' from cache.", providerName);
        }
        else
        {
            _logger.LogInformation("Fetching models for provider '{ProviderName}' from API.", providerName);
            try
            {
                // Need API key for the selected provider (from Config context)
                string? apiKey = null;
                await using var configContext = await ConfigDbContextFactory.CreateDbContextAsync(); 
                var providerCreds = await configContext.ProviderCredentials
                                            .FirstOrDefaultAsync(p => p.ProviderName == providerName);
                apiKey = providerCreds?.ApiKey; // Use configured key

                if (string.IsNullOrWhiteSpace(apiKey))
                {
                     // Some providers might allow listing without a key, but unlikely for paid ones.
                     // Log a warning, the proxy endpoint might handle this.
                     _logger.LogWarning("API Key not found for provider '{ProviderName}'. Model listing might fail.", providerName);
                }

                var httpClient = HttpClientFactory.CreateClient();
                // Get Proxy URL from DB setting (using the existing configContext)
                // Removed duplicate: await using var configContext = await ConfigDbContextFactory.CreateDbContextAsync(); 
                var proxyUrlSetting = await configContext.GlobalSettings.FirstOrDefaultAsync(s => s.Key == "ConduitProxyBaseUrl"); 
                var proxyBaseUrl = proxyUrlSetting?.Value ?? "http://localhost:5000"; // Use configured or default

                var requestUri = $"{proxyBaseUrl}/api/providers/{Uri.EscapeDataString(providerName)}/models";
                using var requestMessage = new HttpRequestMessage(HttpMethod.Get, requestUri);
                if (!string.IsNullOrWhiteSpace(apiKey))
                {
                    // Send API key in header for the proxy endpoint to use if needed
                    requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", apiKey);
                }

                var response = await httpClient.SendAsync(requestMessage);

                if (response.IsSuccessStatusCode)
                {
                    availableModels = await response.Content.ReadFromJsonAsync<List<string>>();
                    if (availableModels != null)
                    {
                        MemoryCache.Set(cacheKey, availableModels, TimeSpan.FromHours(1)); // Cache for 1 hour
                        _logger.LogInformation("Successfully fetched and cached {Count} models for {ProviderName}.", availableModels.Count, providerName);
                    }
                    else
                    {
                         modelLoadErrorMessage = "Received empty model list from server.";
                         _logger.LogWarning("Received empty or invalid model list for {ProviderName}.", providerName);
                    }
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    modelLoadErrorMessage = $"Error loading models: {response.ReasonPhrase} ({response.StatusCode}). {errorContent}";
                    _logger.LogError("Error loading models for {ProviderName}. Status: {StatusCode}, Reason: {Reason}, Content: {Content}",
                        providerName, response.StatusCode, response.ReasonPhrase, errorContent);
                }
            }
            catch (Exception ex)
            {
                modelLoadErrorMessage = $"An error occurred while fetching models: {ex.Message}";
                _logger.LogError(ex, "Exception fetching models for {ProviderName}.", providerName);
            }
        }

        isLoadingModels = false;
        
        // Restore the previously selected model if it exists in the new model list
        if (!string.IsNullOrEmpty(previouslySelectedModel) && 
            availableModels != null && 
            availableModels.Contains(previouslySelectedModel))
        {
            // First clear the current selection to ensure the binding updates correctly
            mapping.ProviderModelId = "";
            
            // Force UI update
            StateHasChanged();
            
            // Now restore the previous selection
            mapping.ProviderModelId = previouslySelectedModel;
            
            // Notify EditContext about the field change to ensure proper validation and binding
            if (editContext != null)
            {
                editContext.NotifyFieldChanged(editContext.Field(nameof(mapping.ProviderModelId)));
            }
            
            _logger.LogInformation("Restored previously selected model '{ModelId}' after refresh.", previouslySelectedModel);
        }
        
        StateHasChanged();
    }

    private async Task ProviderModelSelected(ChangeEventArgs e)
    {
        if (e.Value is string providerModelId && !string.IsNullOrEmpty(providerModelId) && string.IsNullOrWhiteSpace(mapping?.ModelAlias))
        {
            if (mapping != null)
            {
                mapping.ModelAlias = providerModelId;
                editContext?.NotifyFieldChanged(editContext.Field(nameof(mapping.ModelAlias)));
            }
        }
        await Task.CompletedTask; // Make the method truly async
    }

    private async Task HandleValidSubmit()
    {
        if (mapping == null || editContext == null || messageStore == null || isSaving) return; // Prevent multiple submits

        isSaving = true; // Set saving flag
        messageStore.Clear(); // Clear previous custom messages
        errorMessage = null; // Clear general error
        // StateHasChanged(); // Implicitly called

        // Auto-populate Model Alias with Provider Model ID if Model Alias is empty
        if (string.IsNullOrWhiteSpace(mapping.ModelAlias) && !string.IsNullOrWhiteSpace(mapping.ProviderModelId))
        {
            mapping.ModelAlias = mapping.ProviderModelId;
            editContext.NotifyFieldChanged(editContext.Field(nameof(mapping.ModelAlias)));
        }

        // Manually trigger validation (includes checking if ProviderName is selected)
        if (!editContext.Validate())
        {
            // Check specifically if ProviderName is the issue after validation fails
            if (string.IsNullOrEmpty(mapping.ProviderName))
            {
                 messageStore.Add(() => mapping.ProviderName, "Please select a provider.");
                 editContext.NotifyValidationStateChanged();
            }
            return; // Stop if basic validation fails
        }


        try
        {
             // Use WebUI context for ModelMappings
             await using var webUiContext = await WebUIDbContextFactory.CreateDbContextAsync(); 

             // Check for duplicate ModelAlias before saving
            bool aliasExists = false;
            if (Id.HasValue) // Editing existing
            {
                 aliasExists = await webUiContext.ModelMappings
                                        .AnyAsync(m => m.ModelAlias == mapping.ModelAlias && m.Id != Id.Value);
            }
            else // Adding new
            {
                 aliasExists = await webUiContext.ModelMappings
                                        .AnyAsync(m => m.ModelAlias == mapping.ModelAlias);
            }

            if (aliasExists)
            {
                 // Add validation message specifically for the ModelAlias field
                 messageStore.Add(() => mapping.ModelAlias, $"Model alias '{mapping.ModelAlias}' already exists.");
                 editContext.NotifyValidationStateChanged(); // Trigger UI update for validation messages
                 return; // Stop processing
            }

            // --- Database Operations (on WebUI context) ---
            if (Id.HasValue) // Update
            {
                var existingMapping = await webUiContext.ModelMappings.FindAsync(Id.Value);
                if (existingMapping != null)
                {
                    existingMapping.ModelAlias = mapping.ModelAlias;
                    existingMapping.ProviderName = mapping.ProviderName;
                    existingMapping.ProviderModelId = mapping.ProviderModelId;
                    webUiContext.ModelMappings.Update(existingMapping);
                }
                 else
                {
                     errorMessage = "Error: Mapping not found during update.";
                     StateHasChanged();
                     return;
                }
            }
            else // Add
            {
                webUiContext.ModelMappings.Add(mapping);
            }

            await webUiContext.SaveChangesAsync();
            
            // Notify the Conduit HTTP proxy about configuration changes
            try
            {
                // Get the proxy base URL from global settings (from Config context)
                await using var configContext = await ConfigDbContextFactory.CreateDbContextAsync(); 
                var proxyUrlSetting = await configContext.GlobalSettings
                    .FirstOrDefaultAsync(s => s.Key == "ProxyBaseUrl");
                
                string proxyUrl = proxyUrlSetting?.Value ?? "http://localhost:5000";
                
                bool notificationSuccess = await ConfigNotifier.NotifyConfigurationChangedAsync(proxyUrl);
                if (!notificationSuccess)
                {
                    _logger.LogWarning("Failed to notify proxy server about configuration changes. The server may need to be restarted.");
                    // We still proceed with navigation even if notification fails
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error notifying proxy server about configuration changes");
                // We still proceed with navigation even if notification fails
            }
            
            NavigationManager.NavigateTo("/configuration"); // Redirect back to the list
        }
        catch (DbUpdateException dbEx)
        {
             errorMessage = $"Database error saving mapping: {dbEx.InnerException?.Message ?? dbEx.Message}";
             // StateHasChanged(); // EditContext changes trigger state update
        }
         catch (Exception ex)
        {
             errorMessage = $"Error saving mapping: {ex.Message}";
        }
        finally
        {
            isSaving = false; // Reset saving flag
            // StateHasChanged(); // Let framework handle UI update
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/configuration");
    }
}

<style>
    .refresh-button .oi-reload {
        color: var(--bs-primary);
    }
</style>
