@page "/configuration/mapping/edit"
@page "/configuration/mapping/edit/{id}"
@attribute [Authorize(Policy = "MasterKeyPolicy")]
@using Microsoft.Extensions.Caching.Memory
@using System.ComponentModel.DataAnnotations
@using ConduitLLM.Configuration
@using ConfigDTO = ConduitLLM.Configuration.DTOs
@using ConduitLLM.WebUI.Services
@using ConduitLLM.WebUI.Interfaces
@using System.Text.Json
@using System.Net.Http
@using System.Net.Http.Headers
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Components.Forms

@inject Interfaces.IProviderCredentialService ProviderCredentialService
@inject IToastService ToastService
@inject Interfaces.IAdminApiClient AdminApiClient
@inject IGlobalSettingService GlobalSettingService
@inject NavigationManager NavigationManager
@inject ILogger<MappingEdit> _logger
@inject IMemoryCache MemoryCache
@inject ConfigurationChangeNotifier ConfigChangeNotifier
@inject ConduitLLM.WebUI.Interfaces.IVirtualKeyService VirtualKeyService
@inject ProviderModelsService ProviderModelsService
@inject IModelCostService ModelCostService
@rendermode InteractiveServer

<h3 class="mb-4">@(!string.IsNullOrEmpty(Id) ? "Edit Mapping" : "Add Mapping")</h3>

@if (isLoadingPage)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(Id) && dtoMapping == null)
{
    <div class="alert alert-danger">Mapping not found or error loading.</div>
}
else
{
    <EditForm Model="dtoMapping" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="card p-4 mb-4">
            <div class="mb-4">
                <label for="modelAlias" class="form-label">Model Alias</label>
                <input type="text" class="form-control" id="modelAlias" 
                       @bind="dtoMapping.ModelId" />
                <ValidationMessage For="@(() => dtoMapping.ModelId)" />
            </div>

            @if (availableProviders == null)
            {
                <div class="d-flex align-items-center">
                    <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                    <span>Loading providers...</span>
                </div>
            }
            else
            {
                <div class="mb-4">
                    <label for="providerName" class="form-label">Provider Name</label>
                    <select class="form-select" id="providerName" 
                            @bind="@SelectedProviderId"
                            @bind:after="@(async () => await ProviderSelectedByIdAsync(SelectedProviderId))">
                        <option value="">-- Select Provider --</option>
                        @foreach (var provider in availableProviders)
                        {
                            <option value="@provider.Id">@provider.ProviderName</option>
                        }
                    </select>
                    <ValidationMessage For="@(() => dtoMapping.ProviderId)" />
                </div>
            }

            <div class="mb-4" style="position: relative; z-index: 1000;">
                <label for="providerModelId" class="form-label">Provider Model ID</label>
                @if (isLoadingModels)
                {
                    <div class="d-flex align-items-center">
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        <span>Loading models...</span>
                    </div>
                }
                else if (showModelTextbox || (providerModels == null || !providerModels.Any()))
                {
                    <div>
                        <input type="text" class="form-control" id="providerModelIdInput"
                               @bind="dtoMapping.ProviderModelId"
                               @bind:after="@OnModelSelected"
                               placeholder="Enter model ID"
                               disabled="@string.IsNullOrEmpty(dtoMapping.ProviderId)" />
                        
                        @if (!string.IsNullOrEmpty(modelLoadErrorMessage))
                        {
                            <small class="text-danger mt-1 d-block">@modelLoadErrorMessage</small>
                        }
                        @if (providerModels == null || !providerModels.Any())
                        {
                            <small class="text-muted mt-1 d-block">
                                @(string.IsNullOrEmpty(dtoMapping.ProviderId) 
                                    ? "Select provider first" 
                                    : "Could not retrieve model list. Please enter the model ID manually.")
                            </small>
                        }
                        <div class="mt-2">
                            <button type="button" class="btn btn-sm btn-outline-secondary"
                                    @onclick="@(() => RefreshModels(true))"
                                    disabled="@(isLoadingModels || string.IsNullOrEmpty(dtoMapping.ProviderId))">
                                <i class="fa fa-refresh me-1"></i> Try loading models again
                            </button>
                            @if (showModelTextbox && providerModels != null && providerModels.Any())
                            {
                                <button type="button" class="btn btn-sm btn-outline-secondary ms-2"
                                        @onclick="ToggleModelInputMode">
                                    <i class="fa fa-list me-1"></i> Show searchable dropdown
                                </button>
                            }
                        </div>
                    </div>
                }
                else
                {
                    <div class="d-flex gap-2">
                        <div class="flex-grow-1">
                            <InputModelSearchableDropdown 
                                Models="@providerModels"
                                @bind-Value="@dtoMapping.ProviderModelId"
                                @bind-Value:after="@OnModelSelected"
                                ProviderName="@providerName"
                                ModelCosts="@modelCosts"
                                Disabled="@(isLoadingModels || string.IsNullOrEmpty(dtoMapping.ProviderId))" />
                        </div>
                        <button class="btn btn-outline-secondary" type="button"
                                @onclick="@(() => RefreshModels(true))"
                                disabled="@(isLoadingModels || string.IsNullOrEmpty(dtoMapping.ProviderId))"
                                title="Refresh model list">
                            <i class="fa fa-refresh"></i>
                        </button>
                        <button class="btn btn-outline-secondary" type="button"
                                @onclick="ToggleModelInputMode"
                                disabled="@(isLoadingModels || string.IsNullOrEmpty(dtoMapping.ProviderId))"
                                title="Enter model ID manually">
                            <i class="fa fa-pencil"></i>
                        </button>
                    </div>
                    <small class="form-text text-muted">Search by model name, provider, or cost. Click <i class="fa fa-pencil"></i> to enter manually</small>
                }
                <ValidationMessage For="@(() => dtoMapping.ProviderModelId)" />
                
                @* Debug: Show current value *@
                <div class="mt-2">
                    <small class="text-muted">Current ProviderModelId value: "@dtoMapping.ProviderModelId"</small>
                </div>
            </div>

            <!-- Capability Configuration Section -->
            <div class="mb-4">
                <h5 class="mb-3">
                    <i class="fa fa-cogs me-2 text-primary"></i>Model Capabilities
                    @if (!string.IsNullOrWhiteSpace(dtoMapping.ProviderModelId) && !string.IsNullOrWhiteSpace(providerName))
                    {
                        <button type="button" class="btn btn-sm btn-outline-primary ms-2" 
                                @onclick="@(async () => await DiscoverCapabilitiesAsync())"
                                disabled="@isDiscovering">
                            @if (isDiscovering)
                            {
                                <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                                <span>Discovering...</span>
                            }
                            else
                            {
                                <i class="fa fa-magic me-1"></i><span>Auto-detect</span>
                            }
                        </button>
                    }
                </h5>
                <div class="alert alert-info mb-3">
                    <i class="fa fa-info-circle me-2"></i>
                    <strong>Configure Capabilities:</strong> Select the capabilities this model supports. 
                    This helps Conduit determine which features are available and route requests appropriately.
                    @if (!string.IsNullOrWhiteSpace(dtoMapping.ProviderModelId))
                    {
                        <span class="d-block mt-1">
                            <i class="fa fa-lightbulb-o me-1"></i>You can use <strong>Auto-detect</strong> to automatically discover capabilities for the selected model.
                        </span>
                    }
                </div>
                
                @if (!string.IsNullOrWhiteSpace(discoveryStatus))
                {
                    <div class="alert @(discoverySuccessful ? "alert-success" : "alert-warning") alert-dismissible fade show mb-3">
                        <i class="fa @(discoverySuccessful ? "fa-check-circle" : "fa-exclamation-triangle") me-2"></i>
                        @discoveryStatus
                        <button type="button" class="btn-close" @onclick="@(() => discoveryStatus = "")" aria-label="Close"></button>
                    </div>
                }
                
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <div class="card capability-section">
                            <div class="card-header bg-light">
                                <h6 class="mb-0"><i class="fa fa-image me-2"></i>Media Generation</h6>
                            </div>
                            <div class="card-body">
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" id="supportsImageGeneration" 
                                           @bind="dtoMapping.SupportsImageGeneration">
                                    <label class="form-check-label" for="supportsImageGeneration">
                                        <i class="fa fa-image me-1 text-purple"></i>Image Generation
                                        <small class="text-muted d-block">Generate images from text prompts</small>
                                    </label>
                                </div>
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" id="supportsVideoGeneration" 
                                           @bind="dtoMapping.SupportsVideoGeneration">
                                    <label class="form-check-label" for="supportsVideoGeneration">
                                        <i class="fa fa-video-camera me-1 text-danger"></i>Video Generation
                                        <small class="text-muted d-block">Generate videos from text prompts</small>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-6 mb-3">
                        <div class="card capability-section">
                            <div class="card-header bg-light">
                                <h6 class="mb-0"><i class="fa fa-eye me-2"></i>Vision</h6>
                            </div>
                            <div class="card-body">
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" id="supportsVision" 
                                           @bind="dtoMapping.SupportsVision">
                                    <label class="form-check-label" for="supportsVision">
                                        <i class="fa fa-eye me-1 text-info"></i>Vision
                                        <small class="text-muted d-block">Analyze and understand images</small>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <div class="card capability-section">
                            <div class="card-header bg-light">
                                <h6 class="mb-0"><i class="fa fa-microphone me-2"></i>Audio Processing</h6>
                            </div>
                            <div class="card-body">
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" id="supportsAudioTranscription" 
                                           @bind="dtoMapping.SupportsAudioTranscription">
                                    <label class="form-check-label" for="supportsAudioTranscription">
                                        <i class="fa fa-microphone me-1 text-primary"></i>Audio Transcription
                                        <small class="text-muted d-block">Convert speech to text</small>
                                    </label>
                                </div>
                                
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" id="supportsTextToSpeech" 
                                           @bind="dtoMapping.SupportsTextToSpeech">
                                    <label class="form-check-label" for="supportsTextToSpeech">
                                        <i class="fa fa-volume-up me-1 text-success"></i>Text-to-Speech
                                        <small class="text-muted d-block">Convert text to speech</small>
                                    </label>
                                </div>
                                
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" id="supportsRealtimeAudio" 
                                           @bind="dtoMapping.SupportsRealtimeAudio">
                                    <label class="form-check-label" for="supportsRealtimeAudio">
                                        <i class="fa fa-bolt me-1 text-warning"></i>Realtime Audio
                                        <small class="text-muted d-block">Real-time audio processing</small>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-6 mb-3">
                        <div class="card capability-section">
                            <div class="card-header bg-light">
                                <h6 class="mb-0"><i class="fa fa-cogs me-2"></i>Advanced</h6>
                            </div>
                            <div class="card-body">
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" id="isDefault" 
                                           @bind="dtoMapping.IsDefault">
                                    <label class="form-check-label" for="isDefault">
                                        <i class="fa fa-star me-1 text-warning"></i>Default Model
                                        <small class="text-muted d-block">Use as default for this capability type</small>
                                    </label>
                                </div>
                                
                                @if (dtoMapping.IsDefault)
                                {
                                    <div class="mb-2">
                                        <label for="defaultCapabilityType" class="form-label small">Default for capability:</label>
                                        <input type="text" class="form-control form-control-sm" id="defaultCapabilityType" 
                                               @bind="dtoMapping.DefaultCapabilityType" 
                                               placeholder="e.g., chat, image-generation, transcription" />
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
            
        <div class="d-flex gap-2 mt-4">
            <button type="submit" 
                    class="btn btn-primary"
                    disabled="@isSaving">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    <span>Saving...</span>
                }
                else
                {
                    <i class="fa fa-save me-2"></i>
                    <span>Save Mapping</span>
                }
            </button>
            
            <button type="button"
                    class="btn btn-outline-secondary"
                    @onclick="Cancel"
                    disabled="@isSaving">
                Cancel
            </button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public string? Id { get; set; }
    
    private ConfigDTO.ModelProviderMappingDto dtoMapping = new() 
    { 
        ModelId = "",
        ProviderId = "",
        ProviderModelId = ""
    };
    
    private string providerName = "";
    private List<ConfigDTO.ProviderCredentialDto> availableProviders = new();
    private List<string> providerModels = new();
    private string? modelLoadErrorMessage; // Specific error for model loading
    private bool isLoadingModels = false; // Loading provider-specific models
    private bool isLoadingPage = true;
    private bool showModelTextbox = false; // Whether to show textbox instead of dropdown
    private bool isSaving = false;
    private List<ConfigDTO.ModelCostDto> modelCosts = new();
    private bool isDiscovering = false;
    private string discoveryStatus = "";
    private bool discoverySuccessful = false;

    private string SelectedProviderId
    {
        get => dtoMapping.ProviderId;
        set
        {
            if (dtoMapping.ProviderId != value)
            {
                dtoMapping.ProviderId = value;
                // Don't trigger async work in property setter, let the onchange event handle it
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load available providers
            var providers = await ProviderCredentialService.GetAllAsync();
            availableProviders = providers.ToList();
            
            // Load model costs
            try
            {
                modelCosts = (await ModelCostService.GetAllModelCostsAsync()).ToList();
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Failed to load model costs");
                // Continue without costs - not critical for functionality
            }
            
            if (!string.IsNullOrEmpty(Id) && int.TryParse(Id, out var mappingId)) // Editing existing
            {
                var entityMapping = await AdminApiClient.GetModelProviderMappingByIdAsync(mappingId);
                
                if (entityMapping != null)
                {
                    dtoMapping = entityMapping;
                    
                    // Set the provider name for the UI
                    var provider = await ProviderCredentialService.GetByIdAsync(
                        int.TryParse(dtoMapping.ProviderId, out int id) ? id : 0);
                    
                    if (provider != null)
                    {
                        providerName = provider.ProviderName;
                        
                        // Load provider models for the selected provider
                        await LoadProviderModelsAsync(providerName);
                    }
                }
                else
                {
                    NavigationManager.NavigateTo("/configuration");
                }
            }
            else
            {
                dtoMapping = new ConfigDTO.ModelProviderMappingDto
                {
                    ModelId = "",
                    ProviderId = "",
                    ProviderModelId = ""
                };
            }

            // Form validation will be handled by Blazor's built-in validation
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error initializing mapping editor");
            ToastService.ShowError($"Error initializing mapping editor: {ex.Message}");
        }
        finally
        {
            isLoadingPage = false;
        }
    }

    private async Task LoadProviderModelsAsync(string providerName)
    {
        isLoadingModels = true;
        providerModels.Clear();
        modelLoadErrorMessage = null;
        StateHasChanged();

        try
        {
            // First check if we have a valid credential for this provider
            var provider = await ProviderCredentialService.GetByProviderNameAsync(providerName);
                
            if (provider == null)
            {
                modelLoadErrorMessage = $"Provider '{providerName}' not found in the database";
                return;
            }
            
            // Use cache key based on provider name and last updated timestamp to ensure refreshed data
            string cacheKey = $"provider_models_{providerName}_{provider.UpdatedAt:yyyyMMddHHmmss}";
            
            // Check if we already have these models cached and force refresh wasn't requested
            if (!MemoryCache.TryGetValue(cacheKey, out List<string>? cachedModels))
            {
                // No valid cache, load from API
                cachedModels = await LoadModelsFromApi(provider);
                
                if (cachedModels != null && cachedModels.Any())
                {
                    // Cache for 1 hour (adjust as needed)
                    MemoryCache.Set(cacheKey, cachedModels, TimeSpan.FromHours(1));
                }
            }
            
            // Update the model list
            if (cachedModels != null && cachedModels.Any())
            {
                providerModels.AddRange(cachedModels);
                _logger.LogInformation("Loaded {Count} models for provider {ProviderName}", 
                    cachedModels.Count, providerName);
            }
            else
            {
                _logger.LogWarning("No models returned for provider {ProviderName}", providerName);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error loading provider models");
            modelLoadErrorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoadingModels = false;
            StateHasChanged();
        }
    }

    private async Task<List<string>> LoadModelsFromApi(ConfigDTO.ProviderCredentialDto provider)
    {
        try
        {
            _logger.LogInformation("Loading models for provider {ProviderName}", provider.ProviderName);
            // Use the ProviderModelsService to fetch models from the API
            return await ProviderModelsService.GetModelsAsync(provider.ProviderName);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error loading models for provider {ProviderName}", provider.ProviderName);
            throw; // Rethrow to be handled by caller
        }
    }

    private async Task ProviderSelectedByIdAsync(string selectedProviderId)
    {
        if (string.IsNullOrEmpty(selectedProviderId))
        {
            // Clear provider models if no provider selected
            providerModels.Clear();
            providerName = "";
            dtoMapping.ProviderId = "";
            dtoMapping.ProviderModelId = ""; // Also clear the model selection
            StateHasChanged();
            return;
        }
        
        // Find the provider by ID
        var selectedProviderObj = availableProviders.FirstOrDefault(p => p.Id.ToString() == selectedProviderId);
        if (selectedProviderObj != null)
        {
            // Update the provider ID and name
            dtoMapping.ProviderId = selectedProviderId;
            providerName = selectedProviderObj.ProviderName;
            dtoMapping.ProviderModelId = ""; // Reset model selection when provider changes
            
            // Load models for the selected provider
            await LoadProviderModelsAsync(providerName);
            StateHasChanged();
        }
    }


    private void ProviderModelSelected(string selectedModel)
    {
        dtoMapping.ProviderModelId = selectedModel ?? "";
    }
    
    private void ToggleModelInputMode()
    {
        // Toggle between dropdown and textbox
        showModelTextbox = !showModelTextbox;
    }

    private async Task RefreshModels(bool forceRefresh)
    {
        if (!string.IsNullOrEmpty(providerName))
        {
            try
            {
                // Show loading state
                isLoadingModels = true;
                modelLoadErrorMessage = null;
                StateHasChanged();
                
                // Directly use the ProviderModelsService to get models with forceRefresh option
                providerModels = await ProviderModelsService.GetModelsAsync(providerName, forceRefresh);
                
                _logger.LogInformation("Refreshed models for provider {ProviderName}, found {Count} models",
                    providerName, providerModels.Count);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error refreshing models for provider {ProviderName}", providerName);
                modelLoadErrorMessage = $"Error: {ex.Message}";
            }
            finally
            {
                isLoadingModels = false;
                StateHasChanged();
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        _logger.LogInformation("HandleValidSubmit called");
        
        isSaving = true;
        StateHasChanged();
        
        try
        {
            
            // Check if provider exists
            var provider = await ProviderCredentialService.GetByIdAsync(
                int.TryParse(dtoMapping.ProviderId, out int providerId) ? providerId : 0);
                
            if (provider == null)
            {
                ToastService.ShowError($"Provider with ID '{dtoMapping.ProviderId}' not found.");
                return;
            }
            
            // Check if alias exists, excluding the current mapping if editing
            var allMappings = await AdminApiClient.GetAllModelProviderMappingsAsync();
            bool aliasExists = allMappings.Any(m => m.ModelId == dtoMapping.ModelId && 
                         (string.IsNullOrEmpty(Id) || (int.TryParse(Id, out var existingId) && m.Id != existingId)));

            if (aliasExists)
            {
                 ToastService.ShowError($"Model alias '{dtoMapping.ModelId}' already exists.");
                 return; // Stop processing
            }

            // Save the mapping
            bool result;
            
            if (!string.IsNullOrEmpty(Id) && int.TryParse(Id, out var updateId)) // Update
            {
                dtoMapping.Id = updateId;
                // Convert DTO to entity for update
                var mappingEntity = new ConduitLLM.Configuration.Entities.ModelProviderMapping
                {
                    Id = dtoMapping.Id,
                    ModelAlias = dtoMapping.ModelId,
                    ProviderModelName = dtoMapping.ProviderModelId,
                    ProviderCredentialId = int.Parse(dtoMapping.ProviderId),
                    IsEnabled = true,
                    UpdatedAt = DateTime.UtcNow,
                    // Map capability fields from DTO to entity
                    SupportsImageGeneration = dtoMapping.SupportsImageGeneration,
                    SupportsVision = dtoMapping.SupportsVision,
                    SupportsVideoGeneration = dtoMapping.SupportsVideoGeneration,
                    SupportsAudioTranscription = dtoMapping.SupportsAudioTranscription,
                    SupportsTextToSpeech = dtoMapping.SupportsTextToSpeech,
                    SupportsRealtimeAudio = dtoMapping.SupportsRealtimeAudio,
                    // Map advanced fields
                    IsDefault = dtoMapping.IsDefault,
                    DefaultCapabilityType = dtoMapping.DefaultCapabilityType
                };
                result = await AdminApiClient.UpdateModelProviderMappingAsync(dtoMapping.Id, mappingEntity);
                
                if (!result)
                {
                    ToastService.ShowError("Error: Mapping not found during update.");
                    return;
                }
            }
            else // Add
            {
                // Convert DTO to entity for creation
                var mappingEntity = new ConduitLLM.Configuration.Entities.ModelProviderMapping
                {
                    ModelAlias = dtoMapping.ModelId,
                    ProviderModelName = dtoMapping.ProviderModelId,
                    ProviderCredentialId = int.Parse(dtoMapping.ProviderId),
                    IsEnabled = true,
                    CreatedAt = DateTime.UtcNow,
                    UpdatedAt = DateTime.UtcNow,
                    // Map capability fields from DTO to entity
                    SupportsImageGeneration = dtoMapping.SupportsImageGeneration,
                    SupportsVision = dtoMapping.SupportsVision,
                    SupportsVideoGeneration = dtoMapping.SupportsVideoGeneration,
                    SupportsAudioTranscription = dtoMapping.SupportsAudioTranscription,
                    SupportsTextToSpeech = dtoMapping.SupportsTextToSpeech,
                    SupportsRealtimeAudio = dtoMapping.SupportsRealtimeAudio,
                    // Map advanced fields
                    IsDefault = dtoMapping.IsDefault,
                    DefaultCapabilityType = dtoMapping.DefaultCapabilityType
                };
                result = await AdminApiClient.CreateModelProviderMappingAsync(mappingEntity);
                
                if (!result)
                {
                    ToastService.ShowError("Error: Failed to create mapping.");
                    return;
                }
            }
            
            // Notify the Conduit HTTP proxy about configuration changes
            try
            {
                // Get the proxy base URL from global settings service
                var proxyUrl = await GlobalSettingService.GetSettingAsync("ConduitSettings:ProxyBaseUrl") ?? "http://localhost:5000";
                
                bool notificationSuccess = await ConfigChangeNotifier.NotifyConfigurationChangedAsync(proxyUrl);
                if (!notificationSuccess)
                {
                    _logger.LogWarning("Failed to notify proxy server about configuration changes. The server may need to be restarted.");
                    // We still proceed with navigation even if notification fails
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error notifying proxy server about configuration changes");
                // We still proceed with navigation even if notification fails
            }
            
            ToastService.ShowSuccess($"Mapping {(!string.IsNullOrEmpty(Id) ? "updated" : "created")} successfully!");
            NavigationManager.NavigateTo("/configuration"); // Redirect back to the list
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error saving mapping: {ex.Message}");
        }
        finally
        {
            isSaving = false; // Reset saving flag
            StateHasChanged(); // Let framework handle UI update
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/configuration");
    }

    private void OnModelSelected()
    {
        // Clear previous discovery status when model changes
        discoveryStatus = "";
        discoverySuccessful = false;
        
        // Optionally auto-discover capabilities when model is selected
        // For now, we'll let the user click the Auto-detect button
    }

    private async Task DiscoverCapabilitiesAsync()
    {
        if (string.IsNullOrWhiteSpace(dtoMapping.ProviderModelId) || string.IsNullOrWhiteSpace(providerName))
        {
            return;
        }

        isDiscovering = true;
        discoveryStatus = "";
        StateHasChanged();

        try
        {
            _logger.LogInformation("Discovering capabilities for model {ModelId} from provider {Provider}", 
                dtoMapping.ProviderModelId, providerName);

            // Call the Admin API to discover model capabilities
            var discoveredModel = await AdminApiClient.DiscoverModelCapabilitiesAsync(providerName, dtoMapping.ProviderModelId);

            if (discoveredModel != null && discoveredModel.Capabilities != null)
                {
                    // Update the mapping with discovered capabilities
                    var caps = discoveredModel.Capabilities;
                    
                    // Map capabilities to DTO fields
                    dtoMapping.SupportsImageGeneration = caps.ImageGeneration;
                    dtoMapping.SupportsVision = caps.Vision;
                    dtoMapping.SupportsVideoGeneration = caps.VideoGeneration;
                    // Note: Audio capabilities would need to be inferred or mapped differently
                    // as the discovery model doesn't have direct audio transcription/TTS fields
                    
                    discoveryStatus = $"Successfully discovered capabilities for {discoveredModel.DisplayName ?? dtoMapping.ProviderModelId}";
                    discoverySuccessful = true;
                    
                    _logger.LogInformation("Discovered capabilities: ImageGen={ImageGen}, Vision={Vision}, VideoGen={VideoGen}", 
                        caps.ImageGeneration, caps.Vision, caps.VideoGeneration);
                }
            else
            {
                discoveryStatus = $"Model '{dtoMapping.ProviderModelId}' not found for provider '{providerName}'";
                discoverySuccessful = false;
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error discovering model capabilities");
            discoveryStatus = $"Error discovering capabilities: {ex.Message}";
            discoverySuccessful = false;
        }
        finally
        {
            isDiscovering = false;
            StateHasChanged();
        }
    }

}

<style>
    .capability-section {
        border: 1px solid #e9ecef;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }
    
    .capability-section .card-header {
        border-bottom: 1px solid #e9ecef;
        background-color: #f8f9fa !important;
    }
    
    .capability-section .card-body {
        padding: 1rem;
    }
    
    .form-check-label {
        cursor: pointer;
        font-weight: 500;
    }
    
    .form-check-label small {
        font-weight: 400;
        font-size: 0.8rem;
    }
    
    .text-purple {
        color: #6f42c1 !important;
    }
</style>