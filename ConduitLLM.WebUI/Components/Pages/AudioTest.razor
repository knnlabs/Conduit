@page "/audio-test"
@using System.Text
@using ConduitLLM.Configuration.DTOs
@using AudioDTOs = ConduitLLM.Configuration.DTOs.Audio
@using ConduitLLM.WebUI.Services
@using ConduitLLM.WebUI.Interfaces
@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Forms
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject ILogger<AudioTest> Logger
@inject IAdminApiClient AdminApiClient
@inject IJSRuntime JSRuntime
@inject IToastService ToastService

<PageTitle>Audio Test - ConduitLLM</PageTitle>

<div class="container container-xxl">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="audio-header bg-gradient-info text-white rounded-3 p-4 mb-4">
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <h1 class="h3 mb-2">
                            <i class="fa fa-headphones me-3"></i>Audio API Testing
                        </h1>
                        <p class="mb-0 opacity-90">
                            Test transcription, text-to-speech, and real-time audio capabilities
                        </p>
                    </div>
                    <div class="col-md-4 text-md-end">
                        <button class="btn btn-light shadow-sm" @onclick="NavigateToConfiguration">
                            <i class="fa fa-cog me-2"></i>Configure Providers
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <!-- Provider Selection -->
    <div class="card shadow-sm border-0 mb-4">
        <div class="card-header bg-light border-0">
            <h5 class="mb-0">
                <i class="fa fa-server me-2 text-primary"></i>Select Audio Provider
            </h5>
        </div>
        <div class="card-body">
            @if (audioProviders == null)
            {
                <div class="d-flex justify-content-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!audioProviders.Any())
            {
                <div class="text-center py-4">
                    <p class="text-muted">No audio providers configured. Please configure providers first.</p>
                </div>
            }
            else
            {
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="providerSelect">Audio Provider</label>
                            <select class="form-select" id="providerSelect" 
                                    @bind="selectedProviderId">
                                <option value="0">-- Select Provider --</option>
                                @foreach (var provider in audioProviders)
                                {
                                    <option value="@provider.Id">@provider.ProviderName</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Tab Navigation -->
    <ul class="nav nav-tabs mb-4" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "transcription" ? "active" : "")" 
                    @onclick="@(() => activeTab = "transcription")">
                <i class="fa fa-microphone me-2"></i>Transcription
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "tts" ? "active" : "")" 
                    @onclick="@(() => activeTab = "tts")">
                <i class="fa fa-volume-up me-2"></i>Text-to-Speech
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "realtime" ? "active" : "")"
                    @onclick="@(() => activeTab = "realtime")">
                <i class="fa fa-podcast me-2"></i>Real-time Audio
            </button>
        </li>
    </ul>

    <!-- Tab Content -->
    <div class="tab-content">
        @if (activeTab == "transcription")
        {
            <!-- Transcription Tab -->
            <div class="card shadow-sm border-0">
                <div class="card-header bg-light border-0">
                    <h5 class="mb-0">
                        <i class="fa fa-microphone me-2 text-primary"></i>Speech-to-Text Transcription
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6 class="mb-3">Upload Audio File</h6>
                            <div class="mb-3">
                                <InputFile class="form-control" id="audioFileInput" 
                                       accept="audio/*"
                                       OnChange="HandleFileUpload" />
                                <small class="form-text text-muted">
                                    Supported formats: MP3, WAV, M4A, OGG, WebM (max 25MB)
                                </small>
                            </div>
                            
                            @if (uploadedFileName != null)
                            {
                                <div class="alert alert-info border-0 shadow-sm">
                                    <i class="fa fa-file-audio-o me-2"></i>
                                    Selected: @uploadedFileName
                                </div>
                            }
                        </div>
                        
                        <div class="col-md-6">
                            <h6 class="mb-3">Or Record Audio</h6>
                            <div class="d-flex gap-2 mb-3">
                                @if (!isRecording)
                                {
                                    <button class="btn btn-danger" @onclick="StartRecording" 
                                            disabled="@(selectedProviderId == 0)">
                                        <i class="fa fa-circle me-2"></i>Start Recording
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-secondary" @onclick="StopRecording">
                                        <i class="fa fa-stop me-2"></i>Stop Recording
                                    </button>
                                    <div class="d-flex align-items-center">
                                        <div class="recording-indicator"></div>
                                        <span class="ms-2">Recording...</span>
                                    </div>
                                }
                            </div>
                            
                            @if (recordedAudioUrl != null)
                            {
                                <div class="mb-3">
                                    <audio controls src="@recordedAudioUrl" class="w-100"></audio>
                                </div>
                            }
                        </div>
                    </div>
                    
                    <div class="row mt-4">
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                <label for="transcriptionModel">Model (optional)</label>
                                <input type="text" class="form-control" id="transcriptionModel" 
                                       @bind="transcriptionModel"
                                       placeholder="Default: provider's default model" />
                            </div>
                            <div class="form-group mb-3">
                                <label for="transcriptionLanguage">Language (optional)</label>
                                <input type="text" class="form-control" id="transcriptionLanguage" 
                                       @bind="transcriptionLanguage"
                                       placeholder="e.g., en, es, fr (auto-detect if empty)" />
                            </div>
                        </div>
                    </div>
                    
                    <button class="btn btn-primary mt-3" 
                            @onclick="TestTranscription" 
                            disabled="@(selectedProviderId == 0 || (uploadedFileContent == null && recordedAudioData == null) || isTestingTranscription)">
                        @if (isTestingTranscription)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>Transcribing...</span>
                        }
                        else
                        {
                            <i class="fa fa-play me-2"></i>
                            <span>Test Transcription</span>
                        }
                    </button>
                    
                    @if (transcriptionResult != null)
                    {
                        <div class="mt-4">
                            <h6>Transcription Result:</h6>
                            <div class="bg-light p-3 rounded">
                                <pre class="mb-0">@transcriptionResult.Text</pre>
                            </div>
                            <div class="mt-2">
                                <small class="text-muted">
                                    Duration: @transcriptionResult.DurationMs ms | 
                                    Provider: @transcriptionResult.Provider
                                </small>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        else if (activeTab == "tts")
        {
            <!-- Text-to-Speech Tab -->
            <div class="card shadow-sm border-0">
                <div class="card-header bg-light border-0">
                    <h5 class="mb-0">
                        <i class="fa fa-volume-up me-2 text-success"></i>Text-to-Speech
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="form-group mb-3">
                                <label for="ttsText">Text to Convert</label>
                                <textarea class="form-control" id="ttsText" rows="4" 
                                          @bind="ttsText"
                                          placeholder="Enter text to convert to speech..."></textarea>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group mb-3">
                                <label for="ttsModel">Model (optional)</label>
                                <input type="text" class="form-control" id="ttsModel" 
                                       @bind="ttsModel"
                                       placeholder="Default model" />
                            </div>
                            <div class="form-group mb-3">
                                <label for="ttsVoice">Voice (optional)</label>
                                <input type="text" class="form-control" id="ttsVoice" 
                                       @bind="ttsVoice"
                                       placeholder="Default voice" />
                            </div>
                            <div class="form-group mb-3">
                                <label for="ttsFormat">Audio Format</label>
                                <select class="form-select" id="ttsFormat" @bind="ttsFormat">
                                    <option value="mp3">MP3</option>
                                    <option value="opus">Opus</option>
                                    <option value="aac">AAC</option>
                                    <option value="flac">FLAC</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <button class="btn btn-primary" 
                            @onclick="TestTextToSpeech" 
                            disabled="@(selectedProviderId == 0 || string.IsNullOrWhiteSpace(ttsText) || isTestingTTS)">
                        @if (isTestingTTS)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>Generating...</span>
                        }
                        else
                        {
                            <i class="fa fa-play me-2"></i>
                            <span>Generate Speech</span>
                        }
                    </button>
                    
                    @if (ttsAudioUrl != null)
                    {
                        <div class="mt-4">
                            <h6>Generated Audio:</h6>
                            <audio controls src="@ttsAudioUrl" class="w-100"></audio>
                            <div class="mt-2">
                                <small class="text-muted">
                                    Duration: @ttsDurationMs ms | 
                                    Provider: @ttsProvider |
                                    Characters: @ttsText?.Length
                                </small>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        else if (activeTab == "realtime")
        {
            <!-- Real-time Audio Tab -->
            <div class="card shadow-sm border-0">
                <div class="card-header bg-light border-0">
                    <h5 class="mb-0">
                        <i class="fa fa-podcast me-2 text-warning"></i>Real-time Audio (Beta)
                    </h5>
                </div>
                <div class="card-body">
                    <div class="alert alert-warning border-0 shadow-sm mb-4">
                        <i class="fa fa-info-circle me-2"></i>
                        Real-time audio requires WebSocket support and may not be available for all providers.
                    </div>
                    
                    @if (selectedProvider != null && !selectedProvider.RealtimeEnabled)
                    {
                        <div class="text-center py-5">
                            <i class="fa fa-podcast fa-4x text-muted mb-4"></i>
                            <h4 class="text-muted">Real-time Audio Not Enabled</h4>
                            <p class="text-muted">This provider does not have real-time audio configured.</p>
                            <button class="btn btn-primary" @onclick="NavigateToConfiguration">
                                Configure Provider
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label for="realtimeModel">Model (optional)</label>
                                    <input type="text" class="form-control" id="realtimeModel" 
                                           @bind="realtimeModel"
                                           placeholder="Default model" />
                                </div>
                                <div class="form-group mb-3">
                                    <label for="realtimeInstructions">System Instructions</label>
                                    <textarea class="form-control" id="realtimeInstructions" rows="3" 
                                              @bind="realtimeInstructions"
                                              placeholder="Optional system instructions..."></textarea>
                                </div>
                            </div>
                        </div>
                        
                        <div class="d-flex gap-2">
                            @if (!isRealtimeConnected)
                            {
                                <button class="btn btn-success" 
                                        @onclick="StartRealtimeSession" 
                                        disabled="@(selectedProviderId == 0 || isConnectingRealtime)">
                                    @if (isConnectingRealtime)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        <span>Connecting...</span>
                                    }
                                    else
                                    {
                                        <i class="fa fa-plug me-2"></i>
                                        <span>Start Session</span>
                                    }
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-danger" @onclick="StopRealtimeSession">
                                    <i class="fa fa-power-off me-2"></i>Stop Session
                                </button>
                                <button class="btn btn-primary" @onclick="ToggleRealtimeAudio">
                                    <i class="fa fa-microphone me-2"></i>
                                    @(isRealtimeAudioActive ? "Mute" : "Unmute")
                                </button>
                            }
                        </div>
                        
                        @if (isRealtimeConnected)
                        {
                            <div class="mt-4">
                                <div class="alert alert-success border-0 shadow-sm">
                                    <i class="fa fa-check-circle me-2"></i>
                                    Connected to real-time session
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <h6>Session Info:</h6>
                                        <ul class="list-unstyled">
                                            <li><strong>Session ID:</strong> @realtimeSessionId</li>
                                            <li><strong>Duration:</strong> <span id="sessionDuration">00:00</span></li>
                                            <li><strong>Status:</strong> <span class="badge bg-success">Active</span></li>
                                        </ul>
                                    </div>
                                    <div class="col-md-6">
                                        <h6>Conversation Log:</h6>
                                        <div class="conversation-log bg-light p-3 rounded" style="height: 200px; overflow-y: auto;">
                                            @foreach (var message in realtimeMessages)
                                            {
                                                <div class="mb-2">
                                                    <strong>@message.Role:</strong> @message.Content
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    // Provider selection
    private List<AudioDTOs.AudioProviderConfigDto> audioProviders = new();
    private int selectedProviderId = 0;
    private AudioDTOs.AudioProviderConfigDto? selectedProvider => 
        audioProviders.FirstOrDefault(p => p.Id == selectedProviderId);
    
    // UI state
    private string activeTab = "transcription";
    
    // Transcription state
    private byte[]? uploadedFileContent;
    private string? uploadedFileName;
    private byte[]? recordedAudioData;
    private string? recordedAudioUrl;
    private bool isRecording = false;
    private bool isTestingTranscription = false;
    private string? transcriptionModel;
    private string? transcriptionLanguage;
    private TranscriptionResult? transcriptionResult;
    
    // TTS state
    private string? ttsText;
    private string? ttsModel;
    private string? ttsVoice;
    private string ttsFormat = "mp3";
    private bool isTestingTTS = false;
    private string? ttsAudioUrl;
    private long ttsDurationMs;
    private string? ttsProvider;
    
    // Real-time state
    private bool isRealtimeConnected = false;
    private bool isConnectingRealtime = false;
    private bool isRealtimeAudioActive = false;
    private string? realtimeSessionId;
    private string? realtimeModel;
    private string? realtimeInstructions;
    private List<RealtimeMessage> realtimeMessages = new();
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadAudioProviders();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing audio test page");
            ToastService.ShowError("Failed to load audio providers");
        }
    }
    
    private async Task LoadAudioProviders()
    {
        try
        {
            audioProviders = await AdminApiClient.GetAudioProvidersAsync();
            if (audioProviders.Count == 1)
            {
                selectedProviderId = audioProviders[0].Id;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading audio providers");
            audioProviders = new();
        }
    }
    
    private void NavigateToConfiguration()
    {
        NavigationManager.NavigateTo("/configuration");
    }
    
    // File upload handling
    private async Task HandleFileUpload(Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            
            if (file.Size > 25 * 1024 * 1024) // 25MB limit
            {
                ToastService.ShowError("File size must be less than 25MB");
                return;
            }
            
            uploadedFileName = file.Name;
            using var stream = new MemoryStream();
            await file.OpenReadStream(25 * 1024 * 1024).CopyToAsync(stream);
            uploadedFileContent = stream.ToArray();
            
            // Clear recorded audio if file uploaded
            recordedAudioData = null;
            recordedAudioUrl = null;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling file upload");
            ToastService.ShowError("Failed to upload file");
        }
    }
    
    // Recording methods (stub - will be implemented with JS interop)
    private async Task StartRecording()
    {
        try
        {
            isRecording = true;
            // This will call JS interop to start recording
            await JSRuntime.InvokeVoidAsync("audioSupport.startRecording");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error starting recording");
            ToastService.ShowError("Failed to start recording. Please check microphone permissions.");
            isRecording = false;
        }
    }
    
    private async Task StopRecording()
    {
        try
        {
            isRecording = false;
            // This will call JS interop to stop recording and get the audio data
            var audioData = await JSRuntime.InvokeAsync<byte[]>("audioSupport.stopRecording");
            recordedAudioData = audioData;
            
            // Create a data URL for playback
            var base64 = Convert.ToBase64String(audioData);
            recordedAudioUrl = $"data:audio/webm;base64,{base64}";
            
            // Clear uploaded file if recording
            uploadedFileContent = null;
            uploadedFileName = null;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error stopping recording");
            ToastService.ShowError("Failed to stop recording");
        }
    }
    
    // Test methods
    private async Task TestTranscription()
    {
        try
        {
            isTestingTranscription = true;
            
            var audioData = uploadedFileContent ?? recordedAudioData;
            if (audioData == null)
            {
                ToastService.ShowError("No audio data to transcribe");
                return;
            }
            
            // TODO: Call actual transcription API via AdminApiClient
            // For now, simulate the result
            await Task.Delay(2000); // Simulate API call
            
            transcriptionResult = new TranscriptionResult
            {
                Text = "This is a simulated transcription result. The actual implementation will call the audio API.",
                DurationMs = 2150,
                Provider = selectedProvider?.ProviderName ?? "Unknown"
            };
            
            ToastService.ShowSuccess("Transcription completed successfully!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error testing transcription");
            ToastService.ShowError($"Transcription failed: {ex.Message}");
        }
        finally
        {
            isTestingTranscription = false;
        }
    }
    
    private async Task TestTextToSpeech()
    {
        try
        {
            isTestingTTS = true;
            
            if (string.IsNullOrWhiteSpace(ttsText))
            {
                ToastService.ShowError("Please enter text to convert");
                return;
            }
            
            // TODO: Call actual TTS API via AdminApiClient
            // For now, simulate the result
            await Task.Delay(1500); // Simulate API call
            
            // In real implementation, this would be the actual audio data
            var dummyAudio = new byte[] { 0x00, 0x01, 0x02, 0x03 };
            var base64 = Convert.ToBase64String(dummyAudio);
            ttsAudioUrl = $"data:audio/{ttsFormat};base64,{base64}";
            ttsDurationMs = 1500;
            ttsProvider = selectedProvider?.ProviderName ?? "Unknown";
            
            ToastService.ShowSuccess("Speech generated successfully!");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error testing text-to-speech");
            ToastService.ShowError($"TTS failed: {ex.Message}");
        }
        finally
        {
            isTestingTTS = false;
        }
    }
    
    private async Task StartRealtimeSession()
    {
        try
        {
            isConnectingRealtime = true;
            
            // TODO: Implement actual WebSocket connection
            await Task.Delay(1000); // Simulate connection
            
            isRealtimeConnected = true;
            realtimeSessionId = Guid.NewGuid().ToString();
            realtimeMessages.Clear();
            realtimeMessages.Add(new RealtimeMessage 
            { 
                Role = "System", 
                Content = "Real-time session started"
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error starting real-time session");
            ToastService.ShowError($"Failed to start session: {ex.Message}");
        }
        finally
        {
            isConnectingRealtime = false;
        }
    }
    
    private void StopRealtimeSession()
    {
        isRealtimeConnected = false;
        isRealtimeAudioActive = false;
        realtimeSessionId = null;
        realtimeMessages.Add(new RealtimeMessage 
        { 
            Role = "System", 
            Content = "Real-time session ended"
        });
    }
    
    private void ToggleRealtimeAudio()
    {
        isRealtimeAudioActive = !isRealtimeAudioActive;
        realtimeMessages.Add(new RealtimeMessage 
        { 
            Role = "System", 
            Content = $"Audio {(isRealtimeAudioActive ? "unmuted" : "muted")}"
        });
    }
    
    // Helper classes
    private class TranscriptionResult
    {
        public string Text { get; set; } = "";
        public long DurationMs { get; set; }
        public string Provider { get; set; } = "";
    }
    
    private class RealtimeMessage
    {
        public string Role { get; set; } = "";
        public string Content { get; set; } = "";
    }
}

<style>
    .audio-header {
        background: linear-gradient(135deg, #17a2b8 0%, #138496 100%);
        border: none;
    }
    
    .bg-gradient-info {
        background: linear-gradient(135deg, #17a2b8 0%, #138496 100%) !important;
    }
    
    .nav-tabs .nav-link {
        color: #666;
        border: none;
        border-bottom: 2px solid transparent;
        transition: all 0.3s ease;
    }
    
    .nav-tabs .nav-link:hover {
        color: #333;
        border-bottom-color: #ddd;
    }
    
    .nav-tabs .nav-link.active {
        color: #17a2b8;
        border-bottom-color: #17a2b8;
        font-weight: 600;
    }
    
    .recording-indicator {
        width: 12px;
        height: 12px;
        background-color: #dc3545;
        border-radius: 50%;
        animation: pulse 1.5s infinite;
    }
    
    @@keyframes pulse {
        0% {
            opacity: 1;
            transform: scale(1);
        }
        50% {
            opacity: 0.7;
            transform: scale(1.1);
        }
        100% {
            opacity: 1;
            transform: scale(1);
        }
    }
    
    .conversation-log {
        font-family: 'Courier New', monospace;
        font-size: 0.9rem;
    }
    
    audio {
        max-width: 100%;
    }
</style>