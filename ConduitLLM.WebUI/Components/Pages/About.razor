@page "/about"
@using System.Reflection
@using ConduitLLM.Core
@using Microsoft.EntityFrameworkCore
@using ConduitLLM.Configuration
@inject IDbContextFactory<ConduitLLM.Configuration.ConfigurationDbContext> DbContextFactory

<PageTitle>About ConduitLLM</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h3" Class="mb-2">About ConduitLLM</MudText>
    <MudText Typo="Typo.h6" Class="mb-4">A unified .NET client library for interacting with various LLM providers</MudText>

    <MudGrid>
        <MudItem xs="12" md="7">
            <MudCard Elevation="3" Class="mb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">Project Overview</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>
                        ConduitLLM provides a unified interface to interact with multiple LLM providers, simplifying integration 
                        and management of AI capabilities in your applications.
                    </MudText>
                    <MudText Class="mt-3">Key features include:</MudText>
                    <MudList T="string" Dense="true">
                        <MudListItem T="string" Icon="@Icons.Material.Filled.Settings">
                            <MudText><strong>Provider Management:</strong> Configure and manage multiple LLM providers (OpenAI, Anthropic, Cohere, Gemini, Fireworks, OpenRouter)</MudText>
                        </MudListItem>
                        <MudListItem T="string" Icon="@Icons.Material.Filled.Link">
                            <MudText><strong>Model Mapping:</strong> Map generic model names to provider-specific models</MudText>
                        </MudListItem>
                        <MudListItem T="string" Icon="@Icons.Material.Filled.Route">
                            <MudText><strong>Advanced Routing:</strong> Intelligent request distribution with strategies like round-robin, random, or simple direct routing</MudText>
                        </MudListItem>
                        <MudListItem T="string" Icon="@Icons.Material.Filled.Storage">
                            <MudText><strong>Caching:</strong> Response caching for improved performance and reduced costs</MudText>
                        </MudListItem>
                        <MudListItem T="string" Icon="@Icons.Material.Filled.VpnKey">
                            <MudText><strong>Virtual Keys:</strong> Comprehensive virtual key management system with budget tracking</MudText>
                        </MudListItem>
                    </MudList>
                    <MudText Class="mt-3">
                        <strong>Repository:</strong> 
                        <MudLink Href="https://github.com/knnlabs/Conduit" Target="_blank">https://github.com/knnlabs/Conduit</MudLink>
                    </MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" md="5">
            <MudCard Elevation="3" Class="mb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">Project Components</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudTable Items="@ProjectVersions" Dense="true" Hover="true" Elevation="0">
                        <HeaderContent>
                            <MudTh>Component</MudTh>
                            <MudTh>Version</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Component">@context.Key</MudTd>
                            <MudTd DataLabel="Version"><MudText Typo="Typo.body2"><code>@context.Value</code></MudText></MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <MudCard Elevation="3" Class="mb-6">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5">Architecture</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudText Typo="Typo.h6" Class="mb-2">Core Components</MudText>
                    <MudList T="string" Dense="true">
                        <MudListItem T="string" Icon="@Icons.Material.Filled.Settings">
                            <MudText><strong>Configuration:</strong> Manages provider credentials and model mappings</MudText>
                        </MudListItem>
                        <MudListItem T="string" Icon="@Icons.Material.Filled.Code">
                            <MudText><strong>Core:</strong> Contains main abstractions and interfaces</MudText>
                        </MudListItem>
                        <MudListItem T="string" Icon="@Icons.Material.Filled.Extension">
                            <MudText><strong>Providers:</strong> Implements provider-specific integrations</MudText>
                        </MudListItem>
                        <MudListItem T="string" Icon="@Icons.Material.Filled.Http">
                            <MudText><strong>Http:</strong> Handles HTTP communications</MudText>
                        </MudListItem>
                        <MudListItem T="string" Icon="@Icons.Material.Filled.Dashboard">
                            <MudText><strong>WebUI:</strong> Administration dashboard for configuration</MudText>
                        </MudListItem>
                    </MudList>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudText Typo="Typo.h6" Class="mb-2">Advanced Features</MudText>
                    <MudList T="string" Dense="true">
                        <MudListItem T="string" Icon="@Icons.Material.Filled.Route">
                            <MudText><strong>Router:</strong> Intelligent request distribution with multiple strategies</MudText>
                        </MudListItem>
                        <MudListItem T="string" Icon="@Icons.Material.Filled.Storage">
                            <MudText><strong>Caching:</strong> Optimizes performance through response caching</MudText>
                        </MudListItem>
                        <MudListItem T="string" Icon="@Icons.Material.Filled.VpnKey">
                            <MudText><strong>Virtual Keys:</strong> Manages API usage with budget tracking</MudText>
                        </MudListItem>
                        <MudListItem T="string" Icon="@Icons.Material.Filled.Analytics">
                            <MudText><strong>Request Tracking:</strong> Monitors API usage and performance</MudText>
                        </MudListItem>
                    </MudList>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private Dictionary<string, string> ProjectVersions { get; set; } = new Dictionary<string, string>();

    protected override void OnInitialized()
    {
        LoadProjectVersions();
    }

    private void LoadProjectVersions()
    {
        // Get WebUI version
        var webUiVersion = GetAssemblyVersion(Assembly.GetExecutingAssembly());
        ProjectVersions["ConduitLLM.WebUI"] = webUiVersion;

        // Try to load other assemblies in the project
        TryLoadAssembly("ConduitLLM.Core");
        TryLoadAssembly("ConduitLLM.Configuration");
        TryLoadAssembly("ConduitLLM.Providers");
        TryLoadAssembly("ConduitLLM.Http");
    }

    private void TryLoadAssembly(string assemblyName)
    {
        try
        {
            var assembly = Assembly.Load(assemblyName);
            var version = GetAssemblyVersion(assembly);
            ProjectVersions[assemblyName] = version;
        }
        catch (Exception)
        {
            // Assembly couldn't be loaded, use unknown version
            ProjectVersions[assemblyName] = "Not loaded";
        }
    }

    private string GetAssemblyVersion(Assembly assembly)
    {
        try
        {
            var version = assembly.GetName().Version;
            if (version != null)
            {
                return version.ToString();
            }

            // Try to get informational version
            var infoVersionAttr = assembly.GetCustomAttribute<AssemblyInformationalVersionAttribute>();
            if (infoVersionAttr != null)
            {
                return infoVersionAttr.InformationalVersion;
            }

            return "Unknown";
        }
        catch (Exception)
        {
            return "Error fetching version";
        }
    }
}