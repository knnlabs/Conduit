@page "/about"
@using System.Reflection
@using ConduitLLM.WebUI.Data
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ConfigurationDbContext> DbContextFactory
@rendermode InteractiveServer

<PageTitle>About ConduitLLM</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <h1>About ConduitLLM</h1>
            <p class="lead">A unified .NET client library for interacting with various LLM providers</p>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-7">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-primary text-white">
                    <h2 class="h5 mb-0">Project Overview</h2>
                </div>
                <div class="card-body">
                    <p>
                        ConduitLLM provides a unified interface to interact with multiple LLM providers, simplifying integration 
                        and management of AI capabilities in your applications.
                    </p>
                    <p>Key features include:</p>
                    <ul>
                        <li><strong>Provider Management:</strong> Configure and manage multiple LLM providers (OpenAI, Anthropic, Cohere, Gemini, Fireworks, OpenRouter)</li>
                        <li><strong>Model Mapping:</strong> Map generic model names to provider-specific models</li>
                        <li><strong>Advanced Routing:</strong> Intelligent request distribution with strategies like round-robin, random, or simple direct routing</li>
                        <li><strong>Caching:</strong> Response caching for improved performance and reduced costs</li>
                        <li><strong>Virtual Keys:</strong> Comprehensive virtual key management system with budget tracking</li>
                    </ul>
                    <p>
                        <strong>Repository:</strong> <a href="https://github.com/knnlabs/Conduit" target="_blank">https://github.com/knnlabs/Conduit</a>
                    </p>
                </div>
            </div>
        </div>

        <div class="col-md-5">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-secondary text-white">
                    <h2 class="h5 mb-0">Project Components</h2>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Component</th>
                                    <th>Version</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var component in ProjectVersions)
                                {
                                    <tr>
                                        <td>@component.Key</td>
                                        <td><code>@component.Value</code></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-success text-white">
                    <h2 class="h5 mb-0">Architecture</h2>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h4>Core Components</h4>
                            <ul>
                                <li><strong>Configuration:</strong> Manages provider credentials and model mappings</li>
                                <li><strong>Core:</strong> Contains main abstractions and interfaces</li>
                                <li><strong>Providers:</strong> Implements provider-specific integrations</li>
                                <li><strong>Http:</strong> Handles HTTP communications</li>
                                <li><strong>WebUI:</strong> Administration dashboard for configuration</li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <h4>Advanced Features</h4>
                            <ul>
                                <li><strong>Router:</strong> Intelligent request distribution with multiple strategies</li>
                                <li><strong>Caching:</strong> Optimizes performance through response caching</li>
                                <li><strong>Virtual Keys:</strong> Manages API usage with budget tracking</li>
                                <li><strong>Request Tracking:</strong> Monitors API usage and performance</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Dictionary<string, string> ProjectVersions { get; set; } = new Dictionary<string, string>();

    protected override void OnInitialized()
    {
        LoadProjectVersions();
    }

    private void LoadProjectVersions()
    {
        // Get WebUI version
        var webUiVersion = GetAssemblyVersion(Assembly.GetExecutingAssembly());
        ProjectVersions["ConduitLLM.WebUI"] = webUiVersion;

        // Try to load other assemblies in the project
        TryLoadAssembly("ConduitLLM.Core");
        TryLoadAssembly("ConduitLLM.Configuration");
        TryLoadAssembly("ConduitLLM.Providers");
        TryLoadAssembly("ConduitLLM.Http");
    }

    private void TryLoadAssembly(string assemblyName)
    {
        try
        {
            var assembly = Assembly.Load(assemblyName);
            var version = GetAssemblyVersion(assembly);
            ProjectVersions[assemblyName] = version;
        }
        catch (Exception)
        {
            // Assembly couldn't be loaded, use unknown version
            ProjectVersions[assemblyName] = "Not loaded";
        }
    }

    private string GetAssemblyVersion(Assembly assembly)
    {
        try
        {
            var version = assembly.GetName().Version;
            if (version != null)
            {
                return version.ToString();
            }

            // Try to get informational version
            var infoVersionAttr = assembly.GetCustomAttribute<AssemblyInformationalVersionAttribute>();
            if (infoVersionAttr != null)
            {
                return infoVersionAttr.InformationalVersion;
            }

            return "Unknown";
        }
        catch (Exception)
        {
            return "Error fetching version";
        }
    }
}
