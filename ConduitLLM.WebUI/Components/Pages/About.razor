@page "/about"
@using System.Reflection
@using ConduitLLM.Core
@using Microsoft.EntityFrameworkCore
@using ConduitLLM.Configuration
@inject IDbContextFactory<ConduitLLM.Configuration.ConfigurationDbContext> DbContextFactory

<PageTitle>About ConduitLLM</PageTitle>

<div class="container container-xxl mt-4">
    <h3 class="mb-2">About ConduitLLM</h3>
    <h6 class="mb-4">A unified .NET client library for interacting with various LLM providers</h6>

    <div class="row">
        <div class="col-12 col-md-7">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="m-0">Project Overview</h5>
                </div>
                <div class="card-body">
                    <p>
                        ConduitLLM provides a unified interface to interact with multiple LLM providers, simplifying integration 
                        and management of AI capabilities in your applications.
                    </p>
                    <p class="mt-3">Key features include:</p>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">
                            <i class="fa fa-cog me-2"></i>
                            <strong>Provider Management:</strong> Configure and manage multiple LLM providers (OpenAI, Anthropic, Cohere, Gemini, Fireworks, OpenRouter)
                        </li>
                        <li class="list-group-item">
                            <i class="fa fa-link me-2"></i>
                            <strong>Model Mapping:</strong> Map generic model names to provider-specific models
                        </li>
                        <li class="list-group-item">
                            <i class="fa fa-route me-2"></i>
                            <strong>Advanced Routing:</strong> Intelligent request distribution with strategies like round-robin, random, or simple direct routing
                        </li>
                        <li class="list-group-item">
                            <i class="fa fa-database me-2"></i>
                            <strong>Caching:</strong> Response caching for improved performance and reduced costs
                        </li>
                        <li class="list-group-item">
                            <i class="fa fa-key me-2"></i>
                            <strong>Virtual Keys:</strong> Comprehensive virtual key management system with budget tracking
                        </li>
                    </ul>
                    <p class="mt-3">
                        <strong>Repository:</strong> 
                        <a href="https://github.com/knnlabs/Conduit" target="_blank">https://github.com/knnlabs/Conduit</a>
                    </p>
                </div>
            </div>
        </div>

        <div class="col-12 col-md-5">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="m-0">Project Components</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-sm table-hover">
                            <thead>
                                <tr>
                                    <th>Component</th>
                                    <th>Version</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var component in ProjectVersions)
                                {
                                    <tr>
                                        <td>@component.Key</td>
                                        <td><code>@component.Value</code></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card mb-6">
        <div class="card-header">
            <h5 class="m-0">Architecture</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-12 col-md-6">
                    <h6 class="mb-2">Core Components</h6>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">
                            <i class="fa fa-cog me-2"></i>
                            <strong>Configuration:</strong> Manages provider credentials and model mappings
                        </li>
                        <li class="list-group-item">
                            <i class="fa fa-code me-2"></i>
                            <strong>Core:</strong> Contains main abstractions and interfaces
                        </li>
                        <li class="list-group-item">
                            <i class="fa fa-puzzle-piece me-2"></i>
                            <strong>Providers:</strong> Implements provider-specific integrations
                        </li>
                        <li class="list-group-item">
                            <i class="fa fa-globe me-2"></i>
                            <strong>Http:</strong> Handles HTTP communications
                        </li>
                        <li class="list-group-item">
                            <i class="fa fa-tachometer-alt me-2"></i>
                            <strong>WebUI:</strong> Administration dashboard for configuration
                        </li>
                    </ul>
                </div>
                <div class="col-12 col-md-6">
                    <h6 class="mb-2">Advanced Features</h6>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">
                            <i class="fa fa-route me-2"></i>
                            <strong>Router:</strong> Intelligent request distribution with multiple strategies
                        </li>
                        <li class="list-group-item">
                            <i class="fa fa-database me-2"></i>
                            <strong>Caching:</strong> Optimizes performance through response caching
                        </li>
                        <li class="list-group-item">
                            <i class="fa fa-key me-2"></i>
                            <strong>Virtual Keys:</strong> Manages API usage with budget tracking
                        </li>
                        <li class="list-group-item">
                            <i class="fa fa-chart-line me-2"></i>
                            <strong>Request Tracking:</strong> Monitors API usage and performance
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Dictionary<string, string> ProjectVersions { get; set; } = new Dictionary<string, string>();

    protected override void OnInitialized()
    {
        LoadProjectVersions();
    }

    private void LoadProjectVersions()
    {
        // Get WebUI version
        var webUiVersion = GetAssemblyVersion(Assembly.GetExecutingAssembly());
        ProjectVersions["ConduitLLM.WebUI"] = webUiVersion;

        // Try to load other assemblies in the project
        TryLoadAssembly("ConduitLLM.Core");
        TryLoadAssembly("ConduitLLM.Configuration");
        TryLoadAssembly("ConduitLLM.Providers");
        TryLoadAssembly("ConduitLLM.Http");
    }

    private void TryLoadAssembly(string assemblyName)
    {
        try
        {
            var assembly = Assembly.Load(assemblyName);
            var version = GetAssemblyVersion(assembly);
            ProjectVersions[assemblyName] = version;
        }
        catch (Exception)
        {
            // Assembly couldn't be loaded, use unknown version
            ProjectVersions[assemblyName] = "Not loaded";
        }
    }

    private string GetAssemblyVersion(Assembly assembly)
    {
        try
        {
            var version = assembly.GetName().Version;
            if (version != null)
            {
                return version.ToString();
            }

            // Try to get informational version
            var infoVersionAttr = assembly.GetCustomAttribute<AssemblyInformationalVersionAttribute>();
            if (infoVersionAttr != null)
            {
                return infoVersionAttr.InformationalVersion;
            }

            return "Unknown";
        }
        catch (Exception)
        {
            return "Error fetching version";
        }
    }
}