@page "/model-mappings"
@using System.Text.Json
@using ConduitLLM.Configuration
@using ConfigDTOs = ConduitLLM.Configuration.DTOs
@using WebUIDTOs = ConduitLLM.WebUI.DTOs
@using ConduitLLM.Providers.Configuration
@using ConduitLLM.WebUI.Services
@using ConduitLLM.WebUI.Interfaces
@using Microsoft.Extensions.Logging
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using Microsoft.JSInterop
@using ConduitLLM.WebUI.Components.Shared

@inject NavigationManager NavigationManager
@inject ILogger<ModelMappings> Logger
@inject Interfaces.IAdminApiClient AdminApiClient
@inject ConfigurationChangeNotifier ConfigChangeNotifier
@inject IJSRuntime JSRuntime
@inject ProviderModelsService ProviderModelsService
@inject IToastService ToastService
@rendermode InteractiveServer

<PageTitle>Model Mappings - ConduitLLM</PageTitle>

<div class="container container-xxl">
    <!-- Header Section -->
    <PageHeader Title="Model Mappings" 
                Description="Create user-friendly aliases for your LLM models and manage model routing"
                Icon="fa-sitemap">
        <Statistics>
            <div class="stat-item">
                <i class="fa fa-sitemap me-2"></i>
                <span class="small">@(modelMappings?.Count ?? 0) Mappings</span>
            </div>
            <div class="stat-item mt-2">
                <i class="fa fa-cloud me-2"></i>
                <span class="small">@(providerCredentials?.Count ?? 0) Providers</span>
            </div>
        </Statistics>
    </PageHeader>

    <!-- Model Mappings Section -->
    <div class="card shadow-sm border-0 mb-5">
        <div class="card-header bg-light border-0">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="fa fa-sitemap me-2 text-success"></i>Model Mappings
                </h5>
                <button class="btn btn-primary shadow-sm" 
                        @onclick="AddMapping"
                        disabled="@(!providerCredentials?.Any() ?? true)">
                    <i class="fa fa-plus me-1"></i> Add Model Mapping
                </button>
            </div>
        </div>
        
        <div class="card-body">
            <div class="alert alert-info border-0 shadow-sm mb-4">
                <i class="fa fa-info-circle me-2"></i>
                <strong>Model Mappings:</strong> Create user-friendly aliases for your LLM models. 
                For example, map "gpt4" to OpenAI's "gpt-4-turbo-preview" model.
            </div>
            
            @if (modelMappings == null)
            {
                <LoadingSpinner Message="Loading model mappings..." />
            }
            else if (!modelMappings.Any())
            {
                <EmptyState Title="No Model Mappings"
                            Description="Create your first model mapping to get started"
                            Icon="fa-sitemap"
                            IconOpacity="opacity-50" />
                
                @if (!providerCredentials?.Any() ?? true)
                {
                    <div class="alert alert-warning border-0 shadow-sm mt-4">
                        <i class="fa fa-exclamation-triangle me-2"></i>
                        <strong>No Providers Configured:</strong> You need to configure at least one LLM provider before creating model mappings.
                        <a href="/llm-providers" class="alert-link ms-2">Configure Providers <i class="fa fa-arrow-right ms-1"></i></a>
                    </div>
                }
            }
            else
            {
                <div class="table-responsive mb-4">
                    <table class="table table-hover align-middle">
                        <thead class="table-light">
                            <tr>
                                <th class="border-0 fw-semibold">
                                    <i class="fa fa-tag me-2"></i>Model Alias
                                </th>
                                <th class="border-0 fw-semibold">
                                    <i class="fa fa-cloud me-2"></i>Provider
                                </th>
                                <th class="border-0 fw-semibold">
                                    <i class="fa fa-robot me-2"></i>Provider Model
                                </th>
                                <th class="border-0 fw-semibold text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var mapping in modelMappings.OrderBy(m => m.ModelId))
                            {
                                <tr class="border-light">
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="model-icon bg-success-light rounded-circle p-2 me-3">
                                                <i class="fa fa-tag text-success"></i>
                                            </div>
                                            <span class="fw-semibold">@mapping.ModelId</span>
                                        </div>
                                    </td>
                                    <td>
                                        <span class="badge bg-secondary">@GetProviderNameById(mapping.ProviderId)</span>
                                    </td>
                                    <td>
                                        <code class="text-muted">@mapping.ProviderModelId</code>
                                    </td>
                                    <td class="text-center">
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-outline-primary btn-sm" @onclick="() => EditMapping(mapping.Id)">
                                                <i class="fa fa-edit me-1"></i>Edit
                                            </button>
                                            <button type="button" class="btn btn-outline-danger btn-sm" @onclick="() => DeleteMapping(mapping.Id)">
                                                <i class="fa fa-trash me-1"></i>Delete
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            
            @if (providerCredentials?.Any() ?? false)
            {
                <button class="btn btn-primary shadow-sm" 
                        @onclick="AddMapping">
                    <i class="fa fa-plus me-1"></i> Add Model Mapping
                </button>
            }
        </div>
    </div>

    <!-- Common Model Mappings Suggestions -->
    @if (modelMappings?.Any() != true && providerCredentials?.Any() == true)
    {
        <div class="card shadow-sm border-0">
            <div class="card-header bg-light border-0">
                <h5 class="mb-0">
                    <i class="fa fa-lightbulb me-2 text-warning"></i>Common Model Mapping Examples
                </h5>
            </div>
            <div class="card-body">
                <p class="text-muted mb-4">Here are some common model mapping patterns you might want to use:</p>
                
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <div class="example-mapping border rounded p-3">
                            <h6 class="mb-2"><i class="fa fa-robot me-2"></i>Generic Names</h6>
                            <ul class="list-unstyled mb-0">
                                <li><code>gpt4</code> → <code>gpt-4-turbo-preview</code></li>
                                <li><code>gpt3</code> → <code>gpt-3.5-turbo</code></li>
                                <li><code>claude</code> → <code>claude-3-opus-20240229</code></li>
                                <li><code>gemini</code> → <code>gemini-pro</code></li>
                            </ul>
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <div class="example-mapping border rounded p-3">
                            <h6 class="mb-2"><i class="fa fa-layer-group me-2"></i>Use Case Aliases</h6>
                            <ul class="list-unstyled mb-0">
                                <li><code>fast</code> → <code>gpt-3.5-turbo</code></li>
                                <li><code>smart</code> → <code>gpt-4-turbo-preview</code></li>
                                <li><code>code</code> → <code>claude-3-opus-20240229</code></li>
                                <li><code>vision</code> → <code>gpt-4-vision-preview</code></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    // --- State ---
    private List<ConfigDTOs.ProviderCredentialDto> providerCredentials = new();
    private List<ConfigDTOs.ModelProviderMappingDto> modelMappings = new();
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadProvidersAsync();
            await LoadModelMappingsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing Model Mappings page");
            ToastService.ShowError("Failed to load model mappings");
        }
    }
    
    // --- Data Loading Methods ---
    
    private async Task LoadProvidersAsync()
    {
        try
        {
            var providers = await AdminApiClient.GetAllProviderCredentialsAsync();
            providerCredentials = providers.ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading provider credentials");
            providerCredentials = new List<ConfigDTOs.ProviderCredentialDto>(); 
        }
    }
    
    private async Task LoadModelMappingsAsync()
    {
        try
        {
            var mappings = await AdminApiClient.GetAllModelProviderMappingsAsync();
            modelMappings = mappings.OrderBy(m => m.ModelId).ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading model mappings");
            modelMappings = new List<ConfigDTOs.ModelProviderMappingDto>();
        }
    }
    
    // --- CRUD Methods ---
    
    private void AddMapping()
    {
        NavigationManager.NavigateTo("/configuration/mapping/edit");
    }

    private void EditMapping(int id)
    {
        NavigationManager.NavigateTo($"/configuration/mapping/edit/{id}");
    }

    private async Task DeleteMapping(int id)
    {
        try
        {
            var mapping = modelMappings.FirstOrDefault(m => m.Id == id);
            if (mapping == null)
            {
                Logger.LogError("No mapping found with ID {Id}", id);
                return;
            }

            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
                $"Are you sure you want to delete the mapping '{mapping.ModelId}'? This cannot be undone.");

            if (!confirmed) return;

            var success = await AdminApiClient.DeleteModelProviderMappingAsync(id);
            
            if (success)
            {
                await LoadModelMappingsAsync();
                ToastService.ShowSuccess($"Model mapping '{mapping.ModelId}' deleted successfully");
            }
            else
            {
                Logger.LogError("Failed to delete mapping with ID {Id}", id);
                ToastService.ShowError("Failed to delete mapping");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting mapping");
            ToastService.ShowError($"Error deleting mapping: {ex.Message}");
        }
    }
    
    // --- Helper Methods ---
    
    private string GetProviderNameById(string providerId)
    {
        if (string.IsNullOrEmpty(providerId) || !int.TryParse(providerId, out int id))
        {
            return "Unknown";
        }
        
        var provider = providerCredentials.FirstOrDefault(p => p.Id == id);
        return provider?.ProviderName ?? "Unknown";
    }
}

<style>
    .model-icon {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .bg-success-light {
        background-color: rgba(25, 135, 84, 0.1);
    }
    
    .example-mapping {
        background-color: #f8f9fa;
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }
    
    .example-mapping:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
    
    .example-mapping code {
        background-color: #e9ecef;
        padding: 2px 6px;
        border-radius: 3px;
        font-size: 0.875rem;
    }
    
    .table th {
        background-color: #f8f9fa;
    }
    
    .stat-item {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 20px;
        padding: 0.5rem 1rem;
        display: inline-block;
    }
</style>