@page "/configuration-new"
@using System.Text.Json
@using Microsoft.EntityFrameworkCore
@using ConduitLLM.Configuration
@using ConduitLLM.Configuration.Entities
@using ConduitLLM.Providers.Configuration
@using ConduitLLM.WebUI.Services
@using Microsoft.Extensions.Logging
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using Microsoft.JSInterop
@using ConduitLLM.Core.Models.Routing

@inject NavigationManager NavigationManager
@inject ILogger<Configuration> Logger
@inject IDbContextFactory<ConduitLLM.Configuration.ConfigurationDbContext> DbContextFactory
@inject ConfigurationChangeNotifier ConfigChangeNotifier
@inject ConduitLLM.WebUI.Interfaces.IHttpRetryConfigurationService HttpRetryService
@inject ConduitLLM.WebUI.Interfaces.IHttpTimeoutConfigurationService HttpTimeoutService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="container-fluid mt-4">
    <h2 class="mb-4">Configuration Management</h2>

    @if (!string.IsNullOrEmpty(deleteErrorMessage))
    {
        <div class="alert alert-danger mb-4">
            @deleteErrorMessage
        </div>
    }

    <div class="card mb-5 shadow-sm">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">LLM Providers</h5>
            <div class="d-flex">
                <button class="btn btn-primary btn-sm me-2" @onclick="AddProvider">
                    <i class="fa fa-plus me-1"></i> Add Provider
                </button>
                <div class="dropdown">
                    <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" id="quickSetupDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="fa fa-magic me-1"></i> Quick Setup
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="quickSetupDropdown">
                        <li><span class="dropdown-header">Quick Setup</span></li>
                        <li><hr class="dropdown-divider"></li>
                        @foreach (var provider in _supportedProviders)
                        {
                            <li><button class="dropdown-item" @onclick="() => LaunchGuidedSetup(provider)">@provider</button></li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        
        <div class="card-body">
            @if (providerCredentials == null)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!providerCredentials.Any())
            {
                <div class="alert alert-info border mb-4">
                    <i class="fa fa-info-circle me-2"></i>
                    No providers configured yet. Add an LLM provider to get started.
                </div>

                <div class="row">
                    @foreach (var provider in _supportedProviders)
                    {
                        <div class="col-12 col-sm-6 col-md-4 mb-3">
                            <div class="card h-100 shadow-sm">
                                <div class="card-header">
                                    <h6 class="mb-0">@provider</h6>
                                </div>
                                <div class="card-body">
                                    <p class="flex-grow-1 my-4 small">
                                        @GetProviderDescription(provider)
                                    </p>
                                </div>
                                <div class="card-footer text-center">
                                    <button class="btn btn-primary w-100" @onclick="() => LaunchGuidedSetup(provider)">
                                        <i class="fa fa-magic me-1"></i> Setup @provider
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Provider</th>
                                <th>API Key</th>
                                <th>Base URL</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var cred in providerCredentials)
                            {
                                <tr>
                                    <td>@cred.ProviderName</td>
                                    <td class="text-secondary">@(string.IsNullOrEmpty(cred.ApiKey) ? "Not set" : "••••••••")</td>
                                    <td>@(string.IsNullOrEmpty(cred.BaseUrl) ? "Default" : cred.BaseUrl)</td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-primary" title="Edit Provider" @onclick="() => EditProvider(cred)">
                                                <i class="fa fa-edit"></i>
                                            </button>
                                            <button class="btn btn-outline-danger" title="Delete Provider" @onclick="() => DeleteProvider(cred)">
                                                <i class="fa fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>

    <hr class="my-5" />

    <!-- Model Mappings Section -->
    <div class="card mb-5 shadow-sm">
        <div class="card-header">
            <h5 class="mb-0">Model Mappings</h5>
        </div>
        
        <div class="card-body">
            <p class="mb-4">
                Map user-friendly model names to specific provider models. For example, you can map "gpt4" to OpenAI's "gpt-4-turbo-preview" model.
            </p>
            
            @if (modelMappings == null)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!modelMappings.Any())
            {
                <div class="alert alert-info border mb-4">
                    <i class="fa fa-info-circle me-2"></i>
                    No model mappings defined yet. Add one below.
                </div>
            }
            else
            {
                <div class="table-responsive mb-4">
                    <table class="table table-hover table-striped">
                        <thead>
                            <tr>
                                <th>Model Alias</th>
                                <th>Provider</th>
                                <th>Provider Model</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var mapping in modelMappings)
                            {
                                <tr>
                                    <td>@mapping.ModelAlias</td>
                                    <td>@mapping.ProviderCredential.ProviderName</td>
                                    <td>@mapping.ProviderModelName</td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-primary" title="Edit Mapping" @onclick="@(() => EditMapping(mapping))">
                                                <i class="fa fa-edit"></i>
                                            </button>
                                            <button class="btn btn-outline-danger" title="Delete Mapping" @onclick="@(() => DeleteMapping(mapping))">
                                                <i class="fa fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            
            <button class="btn btn-primary" 
                 @onclick="() => { currentMapping = new ConduitLLM.Configuration.Entities.ModelProviderMapping { ModelAlias = string.Empty, ProviderModelName = string.Empty }; mappingErrorMessage = null; }">
                <i class="fa fa-plus me-1"></i> Add Model Mapping
            </button>
        </div>
    </div>

    <!-- Global Settings Section Template -->
    <div class="card mb-5 shadow-sm">
        <div class="card-header">
            <h5 class="mb-0">Global Settings</h5>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <label for="proxyUrl" class="form-label">Proxy Base URL</label>
                <input type="text" class="form-control" id="proxyUrl" @bind="proxyUrl" 
                       placeholder="http://localhost:5000" />
                <div class="form-text">Base URL for the proxy service (e.g., http://localhost:5000)</div>
            </div>
            
            <button class="btn btn-primary mb-3" @onclick="SaveProxyUrl">
                Save Proxy URL
            </button>
        </div>
    </div>

    <!-- HTTP Settings Section Template -->
    <div class="row">
        <div class="col-12 col-md-6">
            <div class="card shadow-sm mb-5">
                <div class="card-header">
                    <h6 class="mb-0">HTTP Retry Settings</h6>
                </div>
                <div class="card-body">
                    <div class="mb-4">
                        <label for="maxRetries" class="form-label">Maximum Retry Attempts</label>
                        <input type="number" class="form-control" id="maxRetries" @bind="httpRetryOptions.MaxRetries" 
                               min="0" max="10" />
                        <div class="form-text">Number of times to retry failed requests</div>
                    </div>
                    
                    <div class="mb-4">
                        <label for="initialDelay" class="form-label">Initial Delay (seconds)</label>
                        <input type="number" class="form-control" id="initialDelay" @bind="httpRetryOptions.InitialDelaySeconds" 
                               min="1" max="60" />
                        <div class="form-text">Initial delay before first retry attempt</div>
                    </div>
                    
                    <div class="mb-4">
                        <label for="maxDelay" class="form-label">Maximum Delay (seconds)</label>
                        <input type="number" class="form-control" id="maxDelay" @bind="httpRetryOptions.MaxDelaySeconds" 
                               min="1" max="300" />
                        <div class="form-text">Maximum delay cap for any retry attempt</div>
                    </div>
                    
                    <div class="form-check mb-4">
                        <input class="form-check-input" type="checkbox" id="enableRetryLogging" 
                               @bind="httpRetryOptions.EnableRetryLogging" />
                        <label class="form-check-label" for="enableRetryLogging">
                            Enable Retry Logging
                        </label>
                    </div>
                    
                    <button class="btn btn-primary mb-2" @onclick="SaveHttpRetryOptionsAsync">
                        <i class="fa fa-save me-1"></i> Save Retry Settings
                    </button>
                    
                    @if (!string.IsNullOrEmpty(httpRetryOptionsSaveMessage))
                    {
                        <div class="alert alert-success mt-3">
                            @httpRetryOptionsSaveMessage
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <div class="col-12 col-md-6">
            <div class="card shadow-sm mb-5">
                <div class="card-header">
                    <h6 class="mb-0">HTTP Timeout Settings</h6>
                </div>
                <div class="card-body">
                    <div class="mb-4">
                        <label for="timeoutSeconds" class="form-label">Timeout Duration (seconds)</label>
                        <input type="number" class="form-control" id="timeoutSeconds" @bind="httpTimeoutOptions.TimeoutSeconds" 
                               min="1" max="600" />
                        <div class="form-text">Maximum time to wait for responses from LLM providers</div>
                    </div>
                    
                    <div class="form-check mb-4">
                        <input class="form-check-input" type="checkbox" id="enableTimeoutLogging" 
                               @bind="httpTimeoutOptions.EnableTimeoutLogging" />
                        <label class="form-check-label" for="enableTimeoutLogging">
                            Enable Timeout Logging
                        </label>
                        <div class="form-text">Log timeout events to the console</div>
                    </div>
                    
                    <button class="btn btn-primary mb-2" @onclick="SaveHttpTimeoutOptionsAsync">
                        <i class="fa fa-save me-1"></i> Save Timeout Settings
                    </button>
                    
                    @if (!string.IsNullOrEmpty(httpTimeoutOptionsSaveMessage))
                    {
                        <div class="alert alert-success mt-3">
                            @httpTimeoutOptionsSaveMessage
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Help and Information Cards -->
    <div class="row">
        <div class="col-12 col-md-6">
            <div class="card shadow-sm mb-5">
                <div class="card-header">
                    <h6 class="mb-0">About HTTP Client Settings</h6>
                </div>
                <div class="card-body">
                    <p class="small mb-3">
                        These settings control how ConduitLLM handles retry logic when communicating with LLM provider APIs.
                    </p>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item d-flex align-items-center">
                            <i class="fa fa-clock-o me-2"></i> Initial Delay
                        </li>
                        <li class="list-group-item d-flex align-items-center">
                            <i class="fa fa-repeat me-2"></i> Maximum Retry Attempts
                        </li>
                        <li class="list-group-item d-flex align-items-center">
                            <i class="fa fa-clock me-2"></i> Maximum Delay
                        </li>
                        <li class="list-group-item d-flex align-items-center">
                            <i class="fa fa-exclamation-circle me-2"></i> Retry Logging
                        </li>
                    </ul>
                    <div class="alert alert-info border mt-3">
                        These settings apply to all provider clients and provide resilience against temporary API outages and rate limiting.
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-12 col-md-6">
            <div class="card shadow-sm mb-5">
                <div class="card-header">
                    <h6 class="mb-0">About HTTP Timeout Settings</h6>
                </div>
                <div class="card-body">
                    <p class="small mb-3">
                        Configure how ConduitLLM handles timeouts when communicating with LLM provider APIs.
                    </p>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item d-flex align-items-center">
                            <i class="fa fa-clock-o me-2"></i> Timeout Duration
                        </li>
                        <li class="list-group-item d-flex align-items-center">
                            <i class="fa fa-exclamation-circle me-2"></i> Timeout Logging
                        </li>
                    </ul>
                    <div class="alert alert-info border mt-3">
                        These settings apply to all provider clients and provide resilience against slow or unresponsive APIs.
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // State management
    private ConduitLLM.Configuration.Entities.ModelProviderMapping? currentMapping;
    private string? mappingErrorMessage;

    // Provider management
    private List<ProviderCredential> providerCredentials = new();
    private List<ConduitLLM.Configuration.Entities.ModelProviderMapping> modelMappings = new();
    private string deleteErrorMessage = "";
    private string[] _supportedProviders = new[] { 
        "OpenAI", "Azure OpenAI", "Anthropic", "Gemini", "Mistral", "HuggingFace", "Ollama", "Bedrock" 
    };

    // HTTP Retry settings
    private ConduitLLM.Providers.Configuration.RetryOptions httpRetryOptions = new();
    private string httpRetryOptionsSaveMessage = "";

    // HTTP Timeout settings
    private ConduitLLM.Providers.Configuration.TimeoutOptions httpTimeoutOptions = new();
    private string httpTimeoutOptionsSaveMessage = "";

    // Proxy URL
    private string proxyUrl = "";

    // Required methods for model mapping
    private void AddProvider()
    {
        Logger.LogInformation("Adding new provider");
    }

    private void EditProvider(ProviderCredential provider)
    {
        Logger.LogInformation($"Editing provider: {provider.ProviderName}");
    }

    private void DeleteProvider(ProviderCredential provider)
    {
        Logger.LogInformation($"Deleting provider: {provider.ProviderName}");
    }

    private void LaunchGuidedSetup(string provider)
    {
        Logger.LogInformation($"Launching guided setup for provider: {provider}");
    }

    private void EditMapping(ConduitLLM.Configuration.Entities.ModelProviderMapping mapping)
    {
        currentMapping = mapping;
        Logger.LogInformation($"Editing model mapping: {mapping.ModelAlias}");
    }

    private async Task DeleteMapping(ConduitLLM.Configuration.Entities.ModelProviderMapping mapping)
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            dbContext.ModelProviderMappings.Remove(mapping);
            await dbContext.SaveChangesAsync();
            
            await LoadDataAsync();
            
            Logger.LogInformation($"Model mapping deleted: {mapping.ModelAlias}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting model mapping");
            mappingErrorMessage = $"Error deleting mapping: {ex.Message}";
        }
    }

    private string GetProviderDescription(string providerName)
    {
        return providerName switch
        {
            "OpenAI" => "OpenAI's GPT models",
            "Anthropic" => "Anthropic's Claude models",
            "Google" => "Google's Gemini models",
            _ => $"{providerName} provider"
        };
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
        await LoadHttpConfigurationsAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            providerCredentials = await dbContext.ProviderCredentials.ToListAsync();
            modelMappings = await dbContext.ModelProviderMappings
                .Include(m => m.ProviderCredential)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading configuration data");
        }
    }

    private async Task LoadHttpConfigurationsAsync()
    {
        try
        {
            await Task.Run(() => {
                httpRetryOptions = HttpRetryService.GetRetryConfiguration() ?? new ConduitLLM.Providers.Configuration.RetryOptions();
                httpTimeoutOptions = HttpTimeoutService.GetTimeoutConfiguration() ?? new ConduitLLM.Providers.Configuration.TimeoutOptions();
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading HTTP configurations");
        }
    }

    private async Task SaveHttpRetryOptionsAsync()
    {
        try
        {
            await HttpRetryService.UpdateRetryConfigurationAsync(httpRetryOptions);
            httpRetryOptionsSaveMessage = "HTTP retry options saved successfully!";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving HTTP retry options");
            httpRetryOptionsSaveMessage = $"Error: {ex.Message}";
        }
    }

    private async Task SaveHttpTimeoutOptionsAsync()
    {
        try
        {
            await HttpTimeoutService.UpdateTimeoutConfigurationAsync(httpTimeoutOptions);
            httpTimeoutOptionsSaveMessage = "HTTP timeout options saved successfully!";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving HTTP timeout options");
            httpTimeoutOptionsSaveMessage = $"Error: {ex.Message}";
        }
    }

    private void SaveProxyUrl()
    {
        try 
        {
            Logger.LogInformation($"Proxy URL saved: {proxyUrl}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving proxy URL");
        }
    }
}
