@page "/admin/notification-test"
@attribute [Authorize(Policy = "MasterKeyPolicy")]
@using ConduitLLM.WebUI.Services
@using ConduitLLM.WebUI.Models
@inject NotificationService NotificationService
@inject IToastService ToastService
@rendermode InteractiveServer

<PageTitle>Notification Test - ConduitLLM</PageTitle>

<div class="container">
    <PageHeader Title="Notification Test" 
                Description="Test the real-time notification system"
                Icon="fa-bell">
    </PageHeader>

    <div class="row">
        <div class="col-12">
            <div class="card modern-card">
                <div class="card-body modern-card-body">
                    <h5 class="card-title">Generate Test Notifications</h5>
                    <p class="text-muted">Click the buttons below to generate different types of notifications.</p>
                    
                    <div class="d-flex flex-wrap gap-2 mt-4">
                        <button class="btn btn-primary" @onclick="() => GenerateNotification(NotificationType.ProviderHealth)">
                            <i class="fa fa-heartbeat me-2"></i>Provider Health
                        </button>
                        <button class="btn btn-success" @onclick="() => GenerateNotification(NotificationType.ModelDiscovery)">
                            <i class="fa fa-search me-2"></i>Model Discovery
                        </button>
                        <button class="btn btn-info" @onclick="() => GenerateNotification(NotificationType.ConfigurationChange)">
                            <i class="fa fa-cog me-2"></i>Configuration Change
                        </button>
                        <button class="btn btn-warning" @onclick="() => GenerateNotification(NotificationType.SystemMaintenance)">
                            <i class="fa fa-tools me-2"></i>System Maintenance
                        </button>
                        <button class="btn btn-danger" @onclick="() => GenerateNotification(NotificationType.Error)">
                            <i class="fa fa-exclamation-circle me-2"></i>Error
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card modern-card">
                <div class="card-body modern-card-body">
                    <h5 class="card-title">Notification Settings</h5>
                    <p class="text-muted">Configure notification preferences and behavior.</p>
                    
                    <div class="form-check form-switch mt-3">
                        <input class="form-check-input" type="checkbox" id="soundEnabled" @bind="SoundEnabled">
                        <label class="form-check-label" for="soundEnabled">
                            Enable notification sounds
                        </label>
                    </div>
                    
                    <div class="form-check form-switch mt-2">
                        <input class="form-check-input" type="checkbox" id="toastEnabled" @bind="ToastEnabled">
                        <label class="form-check-label" for="toastEnabled">
                            Show toast notifications
                        </label>
                    </div>
                    
                    <div class="form-check form-switch mt-2">
                        <input class="form-check-input" type="checkbox" id="autoMarkRead" @bind="AutoMarkRead">
                        <label class="form-check-label" for="autoMarkRead">
                            Auto-mark notifications as read after 5 seconds
                        </label>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool SoundEnabled = true;
    private bool ToastEnabled = true;
    private bool AutoMarkRead = false;
    
    private void GenerateNotification(NotificationType type)
    {
        switch (type)
        {
            case NotificationType.ProviderHealth:
                NotificationService.AddNotification(
                    NotificationType.ProviderHealth,
                    $"Provider OpenAI is now {(Random.Shared.Next(2) == 0 ? "Healthy" : "Degraded")}",
                    "Provider Health Monitor",
                    $"Response time: {Random.Shared.Next(50, 500)}ms"
                );
                break;
                
            case NotificationType.ModelDiscovery:
                NotificationService.AddNotification(
                    NotificationType.ModelDiscovery,
                    $"Discovered {Random.Shared.Next(3, 10)} new models for provider Anthropic",
                    "Model Discovery",
                    "Models: claude-3-opus, claude-3-sonnet, claude-3-haiku"
                );
                break;
                
            case NotificationType.ConfigurationChange:
                NotificationService.AddNotification(
                    NotificationType.ConfigurationChange,
                    "Virtual Key 'Production API' was updated",
                    "Configuration Change",
                    "Changes: Budget limit increased to $500"
                );
                break;
                
            case NotificationType.SystemMaintenance:
                NotificationService.AddNotification(
                    NotificationType.SystemMaintenance,
                    "Scheduled maintenance in 30 minutes",
                    "System Alert",
                    "The system will be unavailable from 2:00 PM to 2:30 PM UTC"
                );
                break;
                
            case NotificationType.Error:
                NotificationService.AddNotification(
                    NotificationType.Error,
                    "Failed to connect to Redis cache",
                    "System Error",
                    "Connection timeout after 5000ms. Falling back to in-memory cache."
                );
                break;
        }
        
        if (ToastEnabled)
        {
            var message = $"New {type} notification created";
            switch (type)
            {
                case NotificationType.Error:
                    ToastService.ShowError(message);
                    break;
                case NotificationType.SystemMaintenance:
                    ToastService.ShowWarning(message);
                    break;
                case NotificationType.ModelDiscovery:
                    ToastService.ShowSuccess(message);
                    break;
                default:
                    ToastService.ShowInfo(message);
                    break;
            }
        }
    }
}