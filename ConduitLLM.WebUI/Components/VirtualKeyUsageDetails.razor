@using ConduitLLM.Configuration.DTOs.VirtualKey
@using ConduitLLM.WebUI.Data
@using ConduitLLM.WebUI.Services
@using Microsoft.EntityFrameworkCore
@using System.Globalization
@inject IDbContextFactory<ConduitLLM.Configuration.ConfigurationDbContext> ConfigDbContextFactory
@inject ILogger<VirtualKeyUsageDetails> Logger

<div class="card shadow-sm mb-4">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h6 class="mb-0">Key Usage Details</h6>
        <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="RefreshData" aria-label="Refresh">
            <i class="fa fa-refresh"></i>
        </button>
    </div>
    <div class="card-body">
        @if (isLoading)
        {
            <div class="d-flex justify-content-center my-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (errorMessage != null)
        {
            <div class="alert alert-danger mb-3" role="alert">@errorMessage</div>
        }
        else if (keyId == 0)
        {
            <div class="alert alert-info mb-3" role="alert">Please select a key to view usage details.</div>
        }
        else if (usageData == null || !usageData.Any())
        {
            <div class="alert alert-info mb-3" role="alert">
                <i class="fa fa-info-circle me-2"></i>
                No usage data available for this key.
            </div>
        }
        else
        {
            <h6 class="mb-3">Usage Over Time</h6>
            <div style="position: relative; height:200px; width:100%" class="mb-4">
                <canvas id="usageChart"></canvas>
            </div>

            <div class="row g-2 mb-4">
                <div class="col-12 col-md-4">
                    <div class="bg-light p-4 d-flex flex-column align-items-center">
                        <h5>@totalRequests</h5>
                        <small class="text-muted">Total Requests</small>
                    </div>
                </div>
                <div class="col-12 col-md-4">
                    <div class="bg-light p-4 d-flex flex-column align-items-center">
                        <h5>$@totalCost.ToString("F2")</h5>
                        <small class="text-muted">Total Cost</small>
                    </div>
                </div>
                <div class="col-12 col-md-4">
                    <div class="bg-light p-4 d-flex flex-column align-items-center">
                        <h5>@avgResponseTime.ToString("F0")ms</h5>
                        <small class="text-muted">Avg. Response Time</small>
                    </div>
                </div>
            </div>

            <h6 class="mb-3">Recent Activity</h6>
            <div class="table-responsive">
                <table class="table table-hover table-sm mb-2">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Model</th>
                            <th>Type</th>
                            <th>Tokens</th>
                            <th>Cost</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in usageData.Take(10))
                        {
                            <tr>
                                <td data-label="Date">@item.Timestamp.ToLocalTime().ToString("g")</td>
                                <td data-label="Model">@item.ModelName</td>
                                <td data-label="Type">@item.RequestType</td>
                                <td data-label="Tokens">@(item.InputTokens + item.OutputTokens)</td>
                                <td data-label="Cost">$@item.Cost.ToString("F4")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            
            @if (usageData.Count > 10)
            {
                <div class="d-flex justify-content-center mt-3">
                    <button type="button" class="btn btn-sm btn-outline-primary" @onclick="ShowAllActivity">
                        <i class="fa fa-list me-1"></i>
                        View All (@usageData.Count) Requests
                    </button>
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public int KeyId { get; set; }
    
    private bool isLoading = false;
    private string? errorMessage;
    private List<RequestLogViewModel>? usageData;
    private int totalRequests = 0;
    private decimal totalCost = 0;
    private double avgResponseTime = 0;
    
    private int keyId = 0;
    
    protected override async Task OnParametersSetAsync()
    {
        if (KeyId != keyId)
        {
            keyId = KeyId;
            if (keyId > 0)
            {
                await LoadDataAsync();
            }
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (usageData != null && usageData.Any())
        {
            await RenderChartAsync();
        }
    }
    
    private async Task LoadDataAsync()
    {
        isLoading = true;
        errorMessage = null;
        
        try
        {
            using var context = await ConfigDbContextFactory.CreateDbContextAsync(); 
            
            var logs = await context.RequestLogs
                .Where(r => r.VirtualKeyId == keyId)
                .OrderByDescending(r => r.Timestamp)
                .Take(100) // Limit to recent requests
                .ToListAsync();
                
            usageData = logs.Select(log => new RequestLogViewModel
            {
                Id = log.Id,
                VirtualKeyId = log.VirtualKeyId,
                ModelName = log.ModelName,
                RequestType = log.RequestType,
                InputTokens = log.InputTokens,
                OutputTokens = log.OutputTokens,
                Cost = log.Cost,
                ResponseTimeMs = log.ResponseTimeMs,
                Timestamp = log.Timestamp,
                UserId = log.UserId
            }).ToList();
            
            totalRequests = usageData.Count;
            totalCost = usageData.Sum(d => d.Cost);
            avgResponseTime = usageData.Any() ? usageData.Average(d => d.ResponseTimeMs) : 0;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading usage data: {ex.Message}";
            Logger.LogError(ex, "Error loading usage data for key {KeyId}", keyId);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task RefreshData()
    {
        if (keyId > 0)
        {
            await LoadDataAsync();
        }
    }
    
    private async Task RenderChartAsync()
    {
        try
        {
            // Group data by day
            var dailyData = usageData!
                .GroupBy(d => d.Timestamp.Date)
                .OrderBy(g => g.Key)
                .Select(g => new 
                {
                    Date = g.Key.ToString("MM/dd"),
                    Cost = g.Sum(r => r.Cost),
                    Requests = g.Count()
                })
                .ToList();
                
            var dates = dailyData.Select(d => d.Date).ToArray();
            var costs = dailyData.Select(d => (double)d.Cost).ToArray();
            var requests = dailyData.Select(d => d.Requests).ToArray();
            
            // Call the chart initialization method
            await Task.Run(() => InitChart(dates, costs, requests));
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error rendering chart");
        }
    }
    
    private void InitChart(string[] labels, double[] costData, int[] requestData)
    {
        // This is a placeholder - you'd need to implement this with JSInterop
        // to actually render a Chart.js chart
    }
    
    private void ShowAllActivity()
    {
        // Navigate to a detailed view with all activity
        // You could implement this as a separate page or modal
    }
    
    // View model for request logs
    private class RequestLogViewModel
    {
        public int Id { get; set; }
        public int VirtualKeyId { get; set; }
        public string ModelName { get; set; } = string.Empty;
        public string RequestType { get; set; } = string.Empty;
        public int InputTokens { get; set; }
        public int OutputTokens { get; set; }
        public decimal Cost { get; set; }
        public double ResponseTimeMs { get; set; }
        public DateTime Timestamp { get; set; }
        public string? UserId { get; set; }
    }
}