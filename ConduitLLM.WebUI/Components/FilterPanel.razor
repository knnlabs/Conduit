<Card Title="@Title" ShowHeader="@(!string.IsNullOrEmpty(Title))" CssClass="@CssClass">
    <BodyContent>
        <div class="p-@Padding">
            <div class="row g-3">
                @FilterContent
            </div>
            
            @if (ShowActionButtons)
            {
                <div class="d-flex @(AlignButtonsRight ? "justify-content-end" : "justify-content-start") mt-4 gap-2">
                    @if (ShowClearButton)
                    {
                        <button type="button" class="btn btn-outline-secondary" @onclick="OnClear" disabled="@IsClearDisabled">
                            <i class="fa fa-times me-1"></i>
                            @ClearButtonText
                        </button>
                    }
                    @if (ShowApplyButton)
                    {
                        <button type="button" class="btn btn-primary" @onclick="OnApply" disabled="@IsApplyDisabled">
                            <i class="fa fa-check me-1"></i>
                            @ApplyButtonText
                        </button>
                    }
                    @AdditionalButtons
                </div>
            }
        </div>
    </BodyContent>
</Card>

@code {
    /// <summary>
    /// Gets or sets the panel title.
    /// </summary>
    [Parameter] public string? Title { get; set; }
    
    /// <summary>
    /// Gets or sets the filter content to display.
    /// </summary>
    [Parameter] public RenderFragment? FilterContent { get; set; }
    
    /// <summary>
    /// Gets or sets additional buttons to display after the standard buttons.
    /// </summary>
    [Parameter] public RenderFragment? AdditionalButtons { get; set; }
    
    /// <summary>
    /// Gets or sets whether to show action buttons.
    /// </summary>
    [Parameter] public bool ShowActionButtons { get; set; } = true;
    
    /// <summary>
    /// Gets or sets whether to show the apply button.
    /// </summary>
    [Parameter] public bool ShowApplyButton { get; set; } = true;
    
    /// <summary>
    /// Gets or sets whether to show the clear button.
    /// </summary>
    [Parameter] public bool ShowClearButton { get; set; } = true;
    
    /// <summary>
    /// Gets or sets the apply button text.
    /// </summary>
    [Parameter] public string ApplyButtonText { get; set; } = "Apply Filters";
    
    /// <summary>
    /// Gets or sets the clear button text.
    /// </summary>
    [Parameter] public string ClearButtonText { get; set; } = "Clear Filters";
    
    /// <summary>
    /// Gets or sets whether the apply button is disabled.
    /// </summary>
    [Parameter] public bool IsApplyDisabled { get; set; }
    
    /// <summary>
    /// Gets or sets whether the clear button is disabled.
    /// </summary>
    [Parameter] public bool IsClearDisabled { get; set; }
    
    /// <summary>
    /// Gets or sets whether to align buttons to the right.
    /// </summary>
    [Parameter] public bool AlignButtonsRight { get; set; } = true;
    
    /// <summary>
    /// Gets or sets the padding size (Bootstrap units 1-5).
    /// </summary>
    [Parameter] public int Padding { get; set; } = 4;
    
    /// <summary>
    /// Gets or sets additional CSS classes.
    /// </summary>
    [Parameter] public string? CssClass { get; set; }
    
    /// <summary>
    /// Gets or sets the callback invoked when the apply button is clicked.
    /// </summary>
    [Parameter] public EventCallback OnApply { get; set; }
    
    /// <summary>
    /// Gets or sets the callback invoked when the clear button is clicked.
    /// </summary>
    [Parameter] public EventCallback OnClear { get; set; }

    /// <summary>
    /// Helper method to create a filter column div.
    /// </summary>
    public static RenderFragment CreateFilterColumn(string label, RenderFragment content, string columnClass = "col-12 col-lg-3")
    {
        return builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", columnClass);
            
            builder.OpenElement(2, "label");
            builder.AddAttribute(3, "class", "form-label");
            builder.AddContent(4, label);
            builder.CloseElement();
            
            builder.AddContent(5, content);
            
            builder.CloseElement();
        };
    }
}