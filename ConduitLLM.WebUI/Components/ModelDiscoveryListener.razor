@using ConduitLLM.Configuration.DTOs.SignalR
@using ConduitLLM.WebUI.Services
@using System.Text.Json
@inject ServerSideSignalRService SignalRService
@inject ILogger<ModelDiscoveryListener> Logger
@inject NavigationManager Navigation
@implements IServerSideSignalRListener
@implements IDisposable

@if (ShowNotifications)
{
    <div class="model-discovery-notifications">
        <div class="notification-header">
            <h4><i class="fas fa-robot"></i> Model Discovery Updates</h4>
            <button class="btn btn-sm btn-outline-secondary" @onclick="ToggleExpanded">
                <i class="fas @(IsExpanded ? "fa-chevron-up" : "fa-chevron-down")"></i>
            </button>
        </div>
        
        @if (IsExpanded)
        {
            <div class="notification-list">
                @if (!Notifications.Any())
                {
                    <div class="text-muted p-3">
                        <i class="fas fa-info-circle"></i> No model updates yet. Monitoring for changes...
                    </div>
                }
                else
                {
                    @foreach (var notification in Notifications.OrderByDescending(n => n.Timestamp).Take(10))
                    {
                        <div class="notification-item @notification.Type.ToLower()">
                            <div class="notification-icon">
                                <i class="@GetNotificationIcon(notification.Type)"></i>
                            </div>
                            <div class="notification-content">
                                <div class="notification-title">@notification.Title</div>
                                <div class="notification-message">@notification.Message</div>
                                <div class="notification-time">@notification.Timestamp.ToString("HH:mm:ss")</div>
                            </div>
                            @if (notification.ActionUrl != null)
                            {
                                <button class="btn btn-sm btn-link" @onclick="() => NavigateToAction(notification.ActionUrl)">
                                    <i class="fas fa-arrow-right"></i>
                                </button>
                            }
                        </div>
                    }
                }
            </div>
            
            @if (Notifications.Any())
            {
                <div class="notification-footer">
                    <button class="btn btn-sm btn-outline-secondary" @onclick="ClearNotifications">
                        <i class="fas fa-trash"></i> Clear All
                    </button>
                    <span class="text-muted">@Notifications.Count total updates</span>
                </div>
            }
        }
    </div>
}

@code {
    [Parameter] public string? Provider { get; set; }
    [Parameter] public bool ShowNotifications { get; set; } = true;
    [Parameter] public string VirtualKey { get; set; } = string.Empty;
    
    private List<ModelDiscoveryNotification> Notifications = new();
    private bool IsExpanded = true;
    private bool _isInitialized = false;
    
    protected override void OnInitialized()
    {
        // Register as a SignalR listener
        SignalRService.RegisterListener(this);
        _isInitialized = true;
        
        Logger.LogInformation("ModelDiscoveryListener initialized");
    }
    
    // IServerSideSignalRListener implementation
    public async Task OnConnectionStateChanged(string hubName, ConnectionState state)
    {
        if (hubName == "notifications")
        {
            Logger.LogInformation("Model discovery connection state changed to {State}", state);
            await InvokeAsync(StateHasChanged);
        }
    }
    
    public async Task OnNewModelsDiscovered(JsonElement notification)
    {
        try
        {
            Logger.LogInformation("Received new models discovered notification");
            
            var newModels = JsonSerializer.Deserialize<NewModelsDiscoveredNotification>(notification.GetRawText());
            if (newModels != null && (string.IsNullOrEmpty(Provider) || newModels.Provider == Provider))
            {
                AddNotification(new ModelDiscoveryNotification
                {
                    Type = "NewModels",
                    Title = $"New Models Discovered",
                    Message = $"{newModels.NewModels.Count} new models found for {newModels.Provider}",
                    Timestamp = DateTime.Now,
                    ActionUrl = $"/model-mappings/{newModels.Provider}"
                });
                
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing new models discovered notification");
        }
    }
    
    public async Task OnModelCapabilitiesChanged(JsonElement notification)
    {
        try
        {
            Logger.LogInformation("Received model capabilities changed notification");
            
            var capabilitiesChanged = JsonSerializer.Deserialize<ModelCapabilitiesChangedNotification>(notification.GetRawText());
            if (capabilitiesChanged != null && (string.IsNullOrEmpty(Provider) || capabilitiesChanged.Provider == Provider))
            {
                AddNotification(new ModelDiscoveryNotification
                {
                    Type = "Capabilities",
                    Title = "Model Capabilities Updated",
                    Message = $"{capabilitiesChanged.ModelId} capabilities have been updated",
                    Timestamp = DateTime.Now
                });
                
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing model capabilities changed notification");
        }
    }
    
    public async Task OnModelPricingUpdated(JsonElement notification)
    {
        try
        {
            Logger.LogInformation("Received model pricing updated notification");
            
            var pricingUpdated = JsonSerializer.Deserialize<ModelPricingUpdatedNotification>(notification.GetRawText());
            if (pricingUpdated != null && (string.IsNullOrEmpty(Provider) || pricingUpdated.Provider == Provider))
            {
                var changeType = pricingUpdated.PercentageChange.HasValue && pricingUpdated.PercentageChange.Value > 0 ? "increased" : "decreased";
                var percentChange = pricingUpdated.PercentageChange ?? 0;
                
                AddNotification(new ModelDiscoveryNotification
                {
                    Type = "Pricing",
                    Title = "Model Pricing Updated",
                    Message = $"{pricingUpdated.ModelId} pricing {changeType} by {Math.Abs(percentChange):F1}%",
                    Timestamp = DateTime.Now
                });
                
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing model pricing updated notification");
        }
    }
    
    public async Task OnModelDeprecated(JsonElement notification)
    {
        try
        {
            Logger.LogInformation("Received model deprecated notification");
            
            var modelDeprecated = JsonSerializer.Deserialize<ModelDeprecatedNotification>(notification.GetRawText());
            if (modelDeprecated != null && (string.IsNullOrEmpty(Provider) || modelDeprecated.Provider == Provider))
            {
                var replacementText = modelDeprecated.ReplacementModel != null 
                    ? $"Replacement: {modelDeprecated.ReplacementModel}" 
                    : "No replacement specified.";
                
                AddNotification(new ModelDiscoveryNotification
                {
                    Type = "Deprecated",
                    Title = "Model Deprecated",
                    Message = $"{modelDeprecated.ModelId} has been deprecated. {replacementText}",
                    Timestamp = DateTime.Now
                });
                
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing model deprecated notification");
        }
    }
    
    // Default implementations for other SignalR events
    public Task OnSystemNotificationReceived(JsonElement notification) => Task.CompletedTask;
    public Task OnModelMappingChanged(JsonElement data) => Task.CompletedTask;
    public Task OnProviderHealthChanged(JsonElement data) => Task.CompletedTask;
    public Task OnNavigationStateChanged(JsonElement data) => Task.CompletedTask;
    public Task OnVideoGenerationProgress(string taskId, JsonElement progress) => Task.CompletedTask;
    public Task OnVideoGenerationCompleted(string taskId, JsonElement result) => Task.CompletedTask;
    public Task OnVideoGenerationFailed(string taskId, string error) => Task.CompletedTask;
    public Task OnImageGenerationProgress(string taskId, JsonElement progress) => Task.CompletedTask;
    public Task OnImageGenerationCompleted(string taskId, JsonElement result) => Task.CompletedTask;
    public Task OnImageGenerationFailed(string taskId, string error) => Task.CompletedTask;
    public Task OnSpendUpdate(JsonElement notification) => Task.CompletedTask;
    public Task OnBudgetAlert(JsonElement notification) => Task.CompletedTask;
    public Task OnSpendSummary(JsonElement notification) => Task.CompletedTask;
    public Task OnUnusualSpending(JsonElement notification) => Task.CompletedTask;
    public Task OnBatchOperationProgress(string operationId, JsonElement progress) => Task.CompletedTask;
    public Task OnBatchOperationCompleted(string operationId, JsonElement result) => Task.CompletedTask;
    public Task OnBatchOperationFailed(string operationId, string error) => Task.CompletedTask;
    public Task OnAdminNotificationReceived(JsonElement notification) => Task.CompletedTask;
    
    private void AddNotification(ModelDiscoveryNotification notification)
    {
        Notifications.Insert(0, notification);
        
        // Keep only the last 50 notifications
        if (Notifications.Count > 50)
        {
            Notifications.RemoveRange(50, Notifications.Count - 50);
        }
    }
    
    private void ToggleExpanded()
    {
        IsExpanded = !IsExpanded;
    }
    
    private void ClearNotifications()
    {
        Notifications.Clear();
    }
    
    private void NavigateToAction(string url)
    {
        Navigation.NavigateTo(url);
    }
    
    private string GetNotificationIcon(string type) => type switch
    {
        "NewModels" => "fas fa-plus-circle text-success",
        "Capabilities" => "fas fa-cog text-info",
        "Pricing" => "fas fa-dollar-sign text-warning",
        "Deprecated" => "fas fa-exclamation-triangle text-danger",
        _ => "fas fa-info-circle"
    };
    
    public void Dispose()
    {
        if (_isInitialized)
        {
            SignalRService.UnregisterListener(this);
        }
    }
    
    private class ModelDiscoveryNotification
    {
        public string Type { get; set; } = "";
        public string Title { get; set; } = "";
        public string Message { get; set; } = "";
        public DateTime Timestamp { get; set; }
        public string? ActionUrl { get; set; }
    }
}

<style>
    .model-discovery-notifications {
        background: white;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        margin-bottom: 1rem;
    }
    
    .notification-header {
        padding: 1rem;
        border-bottom: 1px solid #e0e0e0;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .notification-header h4 {
        margin: 0;
        font-size: 1.1rem;
        color: #333;
    }
    
    .notification-list {
        max-height: 400px;
        overflow-y: auto;
    }
    
    .notification-item {
        padding: 1rem;
        border-bottom: 1px solid #f0f0f0;
        display: flex;
        align-items: flex-start;
        gap: 1rem;
        transition: background-color 0.2s;
    }
    
    .notification-item:hover {
        background-color: #f9f9f9;
    }
    
    .notification-item:last-child {
        border-bottom: none;
    }
    
    .notification-icon {
        flex-shrink: 0;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .notification-content {
        flex-grow: 1;
    }
    
    .notification-title {
        font-weight: 600;
        color: #333;
        margin-bottom: 0.25rem;
    }
    
    .notification-message {
        color: #666;
        font-size: 0.9rem;
        margin-bottom: 0.25rem;
    }
    
    .notification-time {
        color: #999;
        font-size: 0.8rem;
    }
    
    .notification-footer {
        padding: 1rem;
        border-top: 1px solid #e0e0e0;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: #f9f9f9;
    }
</style>