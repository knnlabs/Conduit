@using ConduitLLM.WebUI.Data
@using ConduitLLM.WebUI.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Logging 
@using System.Text.Json
@inject IDbContextFactory<ConduitLLM.Configuration.ConfigurationDbContext> ConfigDbContextFactory
@inject ProviderStatusService ProviderStatusService
@inject NavigationManager NavigationManager
@inject ILogger<GuidedSetupWizard> Logger

@if (IsOpen)
{
    <div style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background-color: rgba(0,0,0,0.5); z-index: 1000; display: flex; align-items: center; justify-content: center;">
        <MudPaper Elevation="4" Style="width: 600px; max-width: 90vw; max-height: 90vh; overflow-y: auto;">
            <MudAppBar Color="Color.Primary" Dense="true" Style="height: 56px;">
                <MudText Typo="Typo.h6">@GetWizardTitle()</MudText>
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Inherit" OnClick="CloseWizard" aria-label="Close" />
            </MudAppBar>
            
            <MudContainer Class="pa-4">
                @if (currentStep == 0)
                {
                    <MudText Typo="Typo.h5" Class="mb-2">Welcome to @(providerModel?.ProviderName ?? "Provider") Setup</MudText>
                    <MudText Typo="Typo.body1" Class="mb-4">This wizard will guide you through configuring @(providerModel?.ProviderName ?? "the provider") for use with ConduitLLM.</MudText>
                    
                    <MudText Typo="Typo.subtitle1" Class="mt-4 mb-2">You'll need:</MudText>
                    <MudList T="string">
                        <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" IconColor="Color.Success" Text=@($"An active {providerModel?.ProviderName ?? "provider"} account") />
                        <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" IconColor="Color.Success" Text=@($"An API key from {providerModel?.ProviderName ?? "the provider"}") />
                        @if (providerModel?.ProviderName == "OpenAI" || providerModel?.ProviderName == "Anthropic")
                        {
                            <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" IconColor="Color.Success" Text=@($"Payment method set up with {providerModel?.ProviderName}") />
                        }
                    </MudList>

                    @if (!string.IsNullOrEmpty(providerModel?.ProviderName) && ProviderApiInfo.GetApiKeyUrl(providerModel.ProviderName) != null)
                    {
                        <div class="mt-4">
                            <MudButton 
                                Variant="Variant.Outlined" 
                                Color="Color.Primary" 
                                StartIcon="@Icons.Material.Filled.Key"
                                Href="@ProviderApiInfo.GetApiKeyUrl(providerModel.ProviderName)"
                                Target="_blank">
                                Get @(providerModel.ProviderName) API Key
                            </MudButton>
                            <MudText Typo="Typo.caption" Class="mt-1">
                                Opens the @(providerModel.ProviderName) website where you can create an API key
                            </MudText>
                        </div>
                    }
                }
                else if (currentStep == 1)
                {
                    <MudText Typo="Typo.h5" Class="mb-2">Enter API Key and Settings</MudText>
                    <MudText Typo="Typo.body1" Class="mb-4">Provide your @(providerModel?.ProviderName ?? "provider") API key and any other required settings:</MudText>
                    
                    <MudTextField 
                        @bind-Value="providerModel!.ApiKey" 
                        Label="API Key" 
                        Variant="Variant.Outlined" 
                        InputType="InputType.Password"
                        FullWidth="true"
                        Margin="Margin.Dense"
                        Immediate="true"
                        Error="@(string.IsNullOrWhiteSpace(providerModel?.ApiKey) && attemptedNext)"
                        ErrorText="@(string.IsNullOrWhiteSpace(providerModel?.ApiKey) && attemptedNext ? "API key is required" : null)" />
                    
                    @if (providerModel?.ProviderName == "OpenRouter" || providerModel?.ProviderName == "Fireworks")
                    {
                        <MudTextField 
                            @bind-Value="providerModel!.BaseUrl" 
                            Label="API Base URL (Optional)" 
                            Variant="Variant.Outlined" 
                            FullWidth="true"
                            Margin="Margin.Dense"
                            Immediate="true"
                            HelperText="Usually you can leave this empty to use the default." />
                    }
                }
                else if (currentStep == 2)
                {
                    <MudText Typo="Typo.h5" Class="mb-2">Test Connection</MudText>
                    <MudText Typo="Typo.body1" Class="mb-4">Let's verify your @(providerModel?.ProviderName ?? "provider") API key works correctly:</MudText>
                    
                    @if (isTesting)
                    {
                        <div class="d-flex flex-column align-center my-4">
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                            <MudText Class="mt-3">Testing connection to @(providerModel?.ProviderName ?? "the provider")...</MudText>
                        </div>
                    }
                    else if (testStatus != null)
                    {
                        <div class="my-4">
                            @if (testStatus.IsOnline)
                            {
                                <MudAlert Severity="Severity.Success" Variant="Variant.Filled">
                                    <MudText><strong>Connection Successful!</strong></MudText>
                                    <MudText>Your @(providerModel?.ProviderName ?? "provider") API key is valid and working.</MudText>
                                </MudAlert>
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Error" Variant="Variant.Filled">
                                    <MudText><strong>Connection Failed</strong></MudText>
                                    <MudText>Error: @testStatus.StatusMessage</MudText>
                                </MudAlert>
                                
                                <div class="mt-4">
                                    <MudButton 
                                        Variant="Variant.Filled" 
                                        Color="Color.Primary" 
                                        StartIcon="@Icons.Material.Filled.Refresh"
                                        OnClick="TestConnection">
                                        Try Again
                                    </MudButton>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="d-flex justify-center my-4">
                            <MudButton 
                                Variant="Variant.Filled" 
                                Color="Color.Primary" 
                                StartIcon="@Icons.Material.Filled.Bolt"
                                OnClick="TestConnection">
                                Test Connection
                            </MudButton>
                        </div>
                    }
                }
            </MudContainer>
            
            <MudDivider />
            
            <MudContainer Class="pa-4">
                <div class="d-flex justify-space-between align-center">
                    <MudButton 
                        Variant="Variant.Outlined" 
                        Color="Color.Default" 
                        StartIcon="@Icons.Material.Filled.ArrowBack"
                        OnClick="PreviousStep" 
                        Disabled="@(currentStep == 0)">
                        Back
                    </MudButton>
                    
                    <div>
                        @for (int i = 0; i < totalSteps; i++)
                        {
                            int stepIndex = i;
                            <MudIconButton 
                                Icon="@(currentStep == stepIndex ? Icons.Material.Filled.Circle : Icons.Material.Filled.RadioButtonUnchecked)"
                                Color="@(currentStep == stepIndex ? Color.Primary : Color.Default)" 
                                Size="Size.Small"
                                OnClick="() => GoToStep(stepIndex)"
                                Style="margin: 0 2px;" />
                        }
                    </div>
                    
                    @if (currentStep < totalSteps - 1)
                    {
                        <MudButton 
                            Variant="Variant.Filled" 
                            Color="Color.Primary" 
                            EndIcon="@Icons.Material.Filled.ArrowForward"
                            OnClick="NextStep">
                            Next
                        </MudButton>
                    }
                    else
                    {
                        <MudButton 
                            Variant="Variant.Filled" 
                            Color="Color.Success" 
                            EndIcon="@Icons.Material.Filled.Check"
                            OnClick="FinishSetup">
                            Finish
                        </MudButton>
                    }
                </div>
            </MudContainer>
        </MudPaper>
    </div>
}

@code {
    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter]
    public EventCallback<ConduitLLM.Configuration.Entities.ProviderCredential> OnSetupComplete { get; set; } 

    private int currentStep = 0;
    private int totalSteps = 3; // Welcome, Configure, Test
    private ConduitLLM.Configuration.Entities.ProviderCredential providerModel = new ConduitLLM.Configuration.Entities.ProviderCredential { ProviderName = string.Empty }; 
    private bool attemptedNext = false;
    private bool isTesting = false;
    private ProviderStatus? testStatus = null;

    public async Task OpenForProvider(string providerName)
    {
        Logger.LogDebug("GuidedSetupWizard.OpenForProvider - Called with providerName: '{ProviderName}'", providerName);
        providerModel = new ConduitLLM.Configuration.Entities.ProviderCredential { ProviderName = providerName }; 
        currentStep = 0;
        testStatus = null;
        attemptedNext = false;
        isTesting = false;
        IsOpen = true;
        await IsOpenChanged.InvokeAsync(true);
        Logger.LogDebug("GuidedSetupWizard.OpenForProvider - Initialized providerModel.ProviderName to: '{ModelProviderName}'", providerModel.ProviderName);
        StateHasChanged();
    }

    private string GetWizardTitle()
    {
        return $"Configure {providerModel?.ProviderName ?? "Provider"} - Step {currentStep + 1} of {totalSteps}";
    }

    private async Task NextStep()
    {
        attemptedNext = true;

        if (currentStep == 1 && string.IsNullOrWhiteSpace(providerModel?.ApiKey))
        {
            return;
        }

        if (currentStep < totalSteps - 1)
        {
            currentStep++;

            // Auto-test connection when reaching test step
            if (currentStep == 2 && testStatus == null)
            {
                await TestConnection();
            }
        }
    }

    private void PreviousStep()
    {
        if (currentStep > 0)
        {
            currentStep--;
        }
    }

    private void GoToStep(int step)
    {
        if (step >= 0 && step < totalSteps)
        {
            currentStep = step;
        }
    }

    private async Task TestConnection()
    {
        if (providerModel == null)
            return;
        isTesting = true;
        StateHasChanged();
        try
        {
            var testCredentials = new ConduitLLM.Configuration.Entities.ProviderCredential 
            {
                ProviderName = providerModel.ProviderName,
                ApiKey = providerModel.ApiKey,
                BaseUrl = providerModel.BaseUrl,
                ApiVersion = providerModel.ApiVersion
            };
            testStatus = await ProviderConnectionTester.TestConnectionAsync(ProviderStatusService, testCredentials); 
        }
        finally
        {
            isTesting = false;
            StateHasChanged();
        }
    }

    private async Task FinishSetup()
    {
        // First check if we need to test the connection
        if (testStatus == null)
        {
            await TestConnection();
            // If test failed or is still running, don't proceed
            if (testStatus == null || !testStatus.IsOnline) return;
        }
        else if (!testStatus.IsOnline)
        {
             // If test already ran and failed, don't proceed
             return;
        }

        // Check if this provider already exists before invoking the callback
        using var dbContext = await ConfigDbContextFactory.CreateDbContextAsync(); 
        var existingProvider = await dbContext.ProviderCredentials
            .FirstOrDefaultAsync(p => p.ProviderName == providerModel!.ProviderName);

        if (existingProvider != null)
        {
            testStatus = new ProviderStatus
            {
                IsOnline = false,
                StatusMessage = $"A provider named '{providerModel?.ProviderName}' already exists",
                LastCheckedUtc = DateTime.UtcNow
            };
            StateHasChanged();
            return;
        }

        // Create a new instance to pass to the callback
        if (providerModel != null)
        {
            var newProvider = new ConduitLLM.Configuration.Entities.ProviderCredential 
            {
                ProviderName = providerModel.ProviderName,
                ApiKey = providerModel.ApiKey,
                BaseUrl = providerModel.BaseUrl,
                ApiVersion = providerModel.ApiVersion,
                IsEnabled = true, 
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            };

            await OnSetupComplete.InvokeAsync(newProvider);
        }

        await CloseWizard();
    }

    private async Task CloseWizard()
    {
        IsOpen = false;
        // Reset state for next time
        currentStep = 0;
        testStatus = null;
        attemptedNext = false;
        providerModel = new ConduitLLM.Configuration.Entities.ProviderCredential { ProviderName = string.Empty }; 
        await IsOpenChanged.InvokeAsync(false);
    }
}