@using ConduitLLM.WebUI.Data
@using ConduitLLM.WebUI.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Logging 
@using System.Text.Json
@inject IDbContextFactory<ConduitLLM.Configuration.ConfigurationDbContext> ConfigDbContextFactory
@inject ProviderStatusService ProviderStatusService
@inject NavigationManager NavigationManager
@inject ILogger<GuidedSetupWizard> Logger

@if (IsOpen)
{
    <div style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background-color: rgba(0,0,0,0.5); z-index: 1000; display: flex; align-items: center; justify-content: center;">
        <div class="card" style="width: 600px; max-width: 90vw; max-height: 90vh; overflow-y: auto;">
            <div class="bg-primary text-white d-flex justify-content-between align-items-center p-3" style="height: 56px;">
                <h6 class="m-0">@GetWizardTitle()</h6>
                <button type="button" class="btn-close btn-close-white" @onclick="CloseWizard" aria-label="Close"></button>
            </div>
            
            <div class="container p-4">
                @if (currentStep == 0)
                {
                    <h5 class="mb-2">Welcome to @(providerModel?.ProviderName ?? "Provider") Setup</h5>
                    <p class="mb-4">This wizard will guide you through configuring @(providerModel?.ProviderName ?? "the provider") for use with ConduitLLM.</p>
                    
                    <h6 class="mt-4 mb-2">You'll need:</h6>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">
                            <i class="fa fa-check-circle text-success me-2"></i>
                            An active @(providerModel?.ProviderName ?? "provider") account
                        </li>
                        <li class="list-group-item">
                            <i class="fa fa-check-circle text-success me-2"></i>
                            An API key from @(providerModel?.ProviderName ?? "the provider")
                        </li>
                        @if (providerModel?.ProviderName == "OpenAI" || providerModel?.ProviderName == "Anthropic")
                        {
                            <li class="list-group-item">
                                <i class="fa fa-check-circle text-success me-2"></i>
                                Payment method set up with @(providerModel?.ProviderName)
                            </li>
                        }
                    </ul>

                    @if (!string.IsNullOrEmpty(providerModel?.ProviderName) && ProviderApiInfo.GetApiKeyUrl(providerModel.ProviderName) != null)
                    {
                        <div class="mt-4">
                            <a href="@ProviderApiInfo.GetApiKeyUrl(providerModel.ProviderName)" 
                               target="_blank" 
                               class="btn btn-outline-primary">
                                <i class="fa fa-key me-2"></i>
                                Get @(providerModel.ProviderName) API Key
                            </a>
                            <p class="small text-muted mt-1">
                                Opens the @(providerModel.ProviderName) website where you can create an API key
                            </p>
                        </div>
                    }
                }
                else if (currentStep == 1)
                {
                    <h5 class="mb-2">Enter API Key and Settings</h5>
                    <p class="mb-4">Provide your @(providerModel?.ProviderName ?? "provider") API key and any other required settings:</p>
                    
                    <div class="form-group mb-3">
                        <label for="apiKey">API Key</label>
                        <input type="password" 
                               id="apiKey" 
                               class="form-control @(string.IsNullOrWhiteSpace(providerModel?.ApiKey) && attemptedNext ? "is-invalid" : "")" 
                               @bind="providerModel!.ApiKey" />
                        @if (string.IsNullOrWhiteSpace(providerModel?.ApiKey) && attemptedNext)
                        {
                            <div class="invalid-feedback">API key is required</div>
                        }
                    </div>
                    
                    @if (providerModel?.ProviderName == "OpenRouter" || providerModel?.ProviderName == "Fireworks")
                    {
                        <div class="form-group mb-3">
                            <label for="baseUrl">API Base URL (Optional)</label>
                            <input type="text" 
                                   id="baseUrl" 
                                   class="form-control" 
                                   @bind="providerModel!.BaseUrl" />
                            <div class="form-text">Usually you can leave this empty to use the default.</div>
                        </div>
                    }
                }
                else if (currentStep == 2)
                {
                    <h5 class="mb-2">Test Connection</h5>
                    <p class="mb-4">Let's verify your @(providerModel?.ProviderName ?? "provider") API key works correctly:</p>
                    
                    @if (isTesting)
                    {
                        <div class="d-flex flex-column align-items-center my-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-3">Testing connection to @(providerModel?.ProviderName ?? "the provider")...</p>
                        </div>
                    }
                    else if (testStatus != null)
                    {
                        <div class="my-4">
                            @if (testStatus.IsOnline)
                            {
                                <div class="alert alert-success">
                                    <p class="fw-bold mb-1">Connection Successful!</p>
                                    <p class="mb-0">Your @(providerModel?.ProviderName ?? "provider") API key is valid and working.</p>
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-danger">
                                    <p class="fw-bold mb-1">Connection Failed</p>
                                    <p class="mb-0">Error: @testStatus.StatusMessage</p>
                                </div>
                                
                                <div class="mt-4">
                                    <button type="button" 
                                            class="btn btn-primary" 
                                            @onclick="TestConnection">
                                        <i class="fa fa-refresh me-2"></i>
                                        Try Again
                                    </button>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="d-flex justify-content-center my-4">
                            <button type="button" 
                                    class="btn btn-primary" 
                                    @onclick="TestConnection">
                                <i class="fa fa-bolt me-2"></i>
                                Test Connection
                            </button>
                        </div>
                    }
                }
            </div>
            
            <hr class="my-0" />
            
            <div class="container p-4">
                <div class="d-flex justify-content-between align-items-center">
                    <button type="button" 
                            class="btn btn-outline-secondary" 
                            @onclick="PreviousStep" 
                            disabled="@(currentStep == 0)">
                        <i class="fa fa-arrow-left me-2"></i>
                        Back
                    </button>
                    
                    <div>
                        @for (int i = 0; i < totalSteps; i++)
                        {
                            int stepIndex = i;
                            <button type="button" 
                                    class="btn btn-sm @(currentStep == stepIndex ? "btn-primary" : "btn-outline-secondary")" 
                                    style="width: 30px; height: 30px; padding: 0; border-radius: 50%; margin: 0 2px;"
                                    @onclick="() => GoToStep(stepIndex)">
                                @(i + 1)
                            </button>
                        }
                    </div>
                    
                    @if (currentStep < totalSteps - 1)
                    {
                        <button type="button" 
                                class="btn btn-primary" 
                                @onclick="NextStep">
                            Next
                            <i class="fa fa-arrow-right ms-2"></i>
                        </button>
                    }
                    else
                    {
                        <button type="button" 
                                class="btn btn-success" 
                                @onclick="FinishSetup">
                            Finish
                            <i class="fa fa-check ms-2"></i>
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter]
    public EventCallback<ConduitLLM.Configuration.Entities.ProviderCredential> OnSetupComplete { get; set; } 

    private int currentStep = 0;
    private int totalSteps = 3; // Welcome, Configure, Test
    private ConduitLLM.Configuration.Entities.ProviderCredential providerModel = new ConduitLLM.Configuration.Entities.ProviderCredential { ProviderName = string.Empty }; 
    private bool attemptedNext = false;
    private bool isTesting = false;
    private ProviderStatus? testStatus = null;

    public async Task OpenForProvider(string providerName)
    {
        Logger.LogDebug("GuidedSetupWizard.OpenForProvider - Called with providerName: '{ProviderName}'", providerName);
        providerModel = new ConduitLLM.Configuration.Entities.ProviderCredential { ProviderName = providerName }; 
        currentStep = 0;
        testStatus = null;
        attemptedNext = false;
        isTesting = false;
        IsOpen = true;
        await IsOpenChanged.InvokeAsync(true);
        Logger.LogDebug("GuidedSetupWizard.OpenForProvider - Initialized providerModel.ProviderName to: '{ModelProviderName}'", providerModel.ProviderName);
        StateHasChanged();
    }

    private string GetWizardTitle()
    {
        return $"Configure {providerModel?.ProviderName ?? "Provider"} - Step {currentStep + 1} of {totalSteps}";
    }

    private async Task NextStep()
    {
        attemptedNext = true;

        if (currentStep == 1 && string.IsNullOrWhiteSpace(providerModel?.ApiKey))
        {
            return;
        }

        if (currentStep < totalSteps - 1)
        {
            currentStep++;

            // Auto-test connection when reaching test step
            if (currentStep == 2 && testStatus == null)
            {
                await TestConnection();
            }
        }
    }

    private void PreviousStep()
    {
        if (currentStep > 0)
        {
            currentStep--;
        }
    }

    private void GoToStep(int step)
    {
        if (step >= 0 && step < totalSteps)
        {
            currentStep = step;
        }
    }

    private async Task TestConnection()
    {
        if (providerModel == null)
            return;
        isTesting = true;
        StateHasChanged();
        try
        {
            var testCredentials = new ConduitLLM.Configuration.Entities.ProviderCredential 
            {
                ProviderName = providerModel.ProviderName,
                ApiKey = providerModel.ApiKey,
                BaseUrl = providerModel.BaseUrl,
                ApiVersion = providerModel.ApiVersion
            };
            testStatus = await ProviderConnectionTester.TestConnectionAsync(ProviderStatusService, testCredentials); 
        }
        finally
        {
            isTesting = false;
            StateHasChanged();
        }
    }

    private async Task FinishSetup()
    {
        // First check if we need to test the connection
        if (testStatus == null)
        {
            await TestConnection();
            // If test failed or is still running, don't proceed
            if (testStatus == null || !testStatus.IsOnline) return;
        }
        else if (!testStatus.IsOnline)
        {
             // If test already ran and failed, don't proceed
             return;
        }

        // Check if this provider already exists before invoking the callback
        using var dbContext = await ConfigDbContextFactory.CreateDbContextAsync(); 
        var existingProvider = await dbContext.ProviderCredentials
            .FirstOrDefaultAsync(p => p.ProviderName == providerModel!.ProviderName);

        if (existingProvider != null)
        {
            testStatus = new ProviderStatus
            {
                IsOnline = false,
                StatusMessage = $"A provider named '{providerModel?.ProviderName}' already exists",
                LastCheckedUtc = DateTime.UtcNow
            };
            StateHasChanged();
            return;
        }

        // Create a new instance to pass to the callback
        if (providerModel != null)
        {
            var newProvider = new ConduitLLM.Configuration.Entities.ProviderCredential 
            {
                ProviderName = providerModel.ProviderName,
                ApiKey = providerModel.ApiKey,
                BaseUrl = providerModel.BaseUrl,
                ApiVersion = providerModel.ApiVersion,
                IsEnabled = true, 
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            };

            await OnSetupComplete.InvokeAsync(newProvider);
        }

        await CloseWizard();
    }

    private async Task CloseWizard()
    {
        IsOpen = false;
        // Reset state for next time
        currentStep = 0;
        testStatus = null;
        attemptedNext = false;
        providerModel = new ConduitLLM.Configuration.Entities.ProviderCredential { ProviderName = string.Empty }; 
        await IsOpenChanged.InvokeAsync(false);
    }
}