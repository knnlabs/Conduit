@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<div class="card shadow-sm border-0">
    <div class="card-header bg-light border-0 d-flex justify-content-between align-items-center">
        <h6 class="mb-0">
            <i class="fa fa-history me-2"></i>Recent Prompts
        </h6>
        @if (recentPrompts.Any(p => !p.IsSample))
        {
            <button class="btn btn-sm btn-link text-danger p-0" @onclick="ClearHistory" title="Clear history">
                <i class="fa fa-times"></i>
            </button>
        }
    </div>
    <div class="card-body">
        @if (recentPrompts.Any())
        {
            @if (recentPrompts.All(p => p.IsSample))
            {
                <div class="alert alert-info small py-2 px-3 mb-3">
                    <i class="fa fa-info-circle me-1"></i>
                    These are sample prompts. Your actual prompts will appear here after generating content.
                </div>
            }
            
            <div class="list-group list-group-flush">
                @foreach (var prompt in recentPrompts.Take(5))
                {
                    <button class="list-group-item list-group-item-action border-0 px-2 py-2 @(prompt.IsSample ? "sample-prompt" : "")"
                            @onclick="() => OnPromptSelected(prompt.Prompt)">
                        <div class="d-flex w-100 justify-content-between align-items-start">
                            <p class="mb-0 text-start small text-break flex-grow-1">
                                @if (prompt.IsSample)
                                {
                                    <span class="badge bg-primary me-1 small">Sample</span>
                                }
                                @prompt.Prompt
                            </p>
                            @if (!prompt.IsSample)
                            {
                                <small class="text-muted ms-2 text-nowrap">@GetRelativeTime(prompt.Timestamp)</small>
                            }
                        </div>
                    </button>
                }
            </div>
        }
        else
        {
            <p class="text-muted small mb-0">No recent prompts</p>
        }
    </div>
</div>

<style>
    .sample-prompt {
        background-color: rgba(13, 110, 253, 0.05);
        border-left: 3px solid #0d6efd;
    }

    .sample-prompt:hover {
        background-color: rgba(13, 110, 253, 0.1);
    }

    .list-group-item {
        transition: background-color 0.15s ease;
    }

    .list-group-item:hover {
        background-color: #f8f9fa;
    }

    .list-group-item:active {
        background-color: #e9ecef;
    }
</style>

@code {
    [Parameter] public required string LocalStorageKey { get; set; }
    [Parameter] public required List<string> DefaultSamplePrompts { get; set; }
    [Parameter] public EventCallback<string> OnPromptClick { get; set; }

    private List<PromptHistoryItem> recentPrompts = new();
    private IJSObjectReference? jsModule;

    protected override async Task OnInitializedAsync()
    {
        await LoadRecentPrompts();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/site.js");
        }
    }

    public async Task AddPromptToHistory(string prompt)
    {
        if (string.IsNullOrWhiteSpace(prompt))
            return;

        // If we have sample prompts and this is the first real prompt, clear samples
        if (recentPrompts.All(p => p.IsSample))
        {
            recentPrompts.Clear();
        }

        // Remove any existing instance of this prompt
        recentPrompts.RemoveAll(p => p.Prompt.Equals(prompt, StringComparison.OrdinalIgnoreCase));

        // Add the new prompt at the beginning
        recentPrompts.Insert(0, new PromptHistoryItem
        {
            Prompt = prompt,
            Timestamp = DateTime.UtcNow,
            IsSample = false
        });

        // Keep only the most recent 20 prompts
        if (recentPrompts.Count > 20)
        {
            recentPrompts = recentPrompts.Take(20).ToList();
        }

        await SaveRecentPrompts();
        StateHasChanged();
    }

    private async Task LoadRecentPrompts()
    {
        try
        {
            if (jsModule != null)
            {
                var promptsJson = await jsModule.InvokeAsync<string?>("localStorage.getItem", LocalStorageKey);
                if (!string.IsNullOrEmpty(promptsJson))
                {
                    var loadedPrompts = System.Text.Json.JsonSerializer.Deserialize<List<PromptHistoryItem>>(promptsJson);
                    if (loadedPrompts != null && loadedPrompts.Any())
                    {
                        // Filter out prompts older than 30 days
                        var cutoffDate = DateTime.UtcNow.AddDays(-30);
                        recentPrompts = loadedPrompts.Where(p => p.Timestamp > cutoffDate).ToList();
                        return;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading prompt history: {ex.Message}");
        }

        // Load default sample prompts if no history exists
        LoadSamplePrompts();
    }

    private void LoadSamplePrompts()
    {
        recentPrompts = DefaultSamplePrompts.Select(prompt => new PromptHistoryItem
        {
            Prompt = prompt,
            Timestamp = DateTime.UtcNow,
            IsSample = true
        }).ToList();
    }

    private async Task SaveRecentPrompts()
    {
        try
        {
            if (jsModule != null)
            {
                var promptsJson = System.Text.Json.JsonSerializer.Serialize(recentPrompts);
                await jsModule.InvokeVoidAsync("localStorage.setItem", LocalStorageKey, promptsJson);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving prompt history: {ex.Message}");
        }
    }

    private async Task ClearHistory()
    {
        recentPrompts.Clear();
        LoadSamplePrompts();
        
        try
        {
            if (jsModule != null)
            {
                await jsModule.InvokeVoidAsync("localStorage.removeItem", LocalStorageKey);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error clearing prompt history: {ex.Message}");
        }

        StateHasChanged();
    }

    private async Task OnPromptSelected(string prompt)
    {
        await OnPromptClick.InvokeAsync(prompt);
    }

    private string GetRelativeTime(DateTime timestamp)
    {
        var timeSpan = DateTime.UtcNow - timestamp;
        
        if (timeSpan.TotalMinutes < 1)
            return "just now";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes}m ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours}h ago";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays}d ago";
        
        return timestamp.ToString("MMM d");
    }

    public async ValueTask DisposeAsync()
    {
        if (jsModule != null)
        {
            await jsModule.DisposeAsync();
        }
    }

    private class PromptHistoryItem
    {
        public required string Prompt { get; set; }
        public DateTime Timestamp { get; set; }
        public bool IsSample { get; set; }
    }
}