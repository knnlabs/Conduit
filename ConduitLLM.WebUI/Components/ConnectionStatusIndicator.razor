@using ConduitLLM.WebUI.Services
@using System.Text.Json
@implements IServerSideSignalRListener
@implements IDisposable
@inject ServerSideSignalRService SignalRService
@inject ILogger<ConnectionStatusIndicator> Logger

<div class="connection-status-indicator">
    <div class="status-badge @GetStatusClass()" @onclick="ToggleDetails">
        <i class="@GetStatusIcon()"></i>
        <span class="status-text">@GetStatusText()</span>
    </div>
    
    @if (ShowDetails)
    {
        <div class="status-details">
            <div class="details-header">
                <h6>Connection Status</h6>
                <button class="close-btn" @onclick="() => ShowDetails = false">
                    <i class="fa fa-times"></i>
                </button>
            </div>
            
            <div class="details-content">
                @foreach (var hub in HubStates)
                {
                    <div class="hub-status">
                        <h6>@hub.Key Hub</h6>
                        <div class="status-item">
                            <i class="@GetHubStatusIcon(hub.Value)"></i>
                            <span>@hub.Value</span>
                        </div>
                    </div>
                }
                
                @if (OverallState == ConnectionState.Connected)
                {
                    <div class="connected-features">
                        <h6>Active Features:</h6>
                        <ul>
                            <li><i class="fa fa-check-circle"></i> Real-time notifications</li>
                            <li><i class="fa fa-check-circle"></i> Live spend tracking</li>
                            <li><i class="fa fa-check-circle"></i> Provider health updates</li>
                            <li><i class="fa fa-check-circle"></i> Task progress tracking</li>
                        </ul>
                    </div>
                }
                else if (OverallState == ConnectionState.Disconnected)
                {
                    <div class="disconnected-warning">
                        <p><i class="fa fa-exclamation-triangle"></i> Real-time features unavailable</p>
                        <p class="fallback-info">Using polling mode (30s intervals)</p>
                    </div>
                }
            </div>
        </div>
    }
</div>

<style>
    .connection-status-indicator {
        position: relative;
    }
    
    .status-badge {
        display: flex;
        align-items: center;
        gap: 6px;
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.875rem;
        cursor: pointer;
        transition: all 0.3s ease;
        user-select: none;
    }
    
    .status-badge:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }
    
    .status-badge i {
        font-size: 0.75rem;
    }
    
    .status-badge.connected {
        background: #e8f5e9;
        color: #2e7d32;
    }
    
    .status-badge.connecting {
        background: #e3f2fd;
        color: #1976d2;
    }
    
    .status-badge.disconnected {
        background: #ffebee;
        color: #c62828;
    }
    
    .status-badge.reconnecting {
        background: #fff3e0;
        color: #f57c00;
    }
    
    .status-details {
        position: absolute;
        top: 100%;
        right: 0;
        margin-top: 8px;
        background: white;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        width: 320px;
        z-index: 1000;
        overflow: hidden;
    }
    
    .details-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px 16px;
        background: #f5f5f5;
        border-bottom: 1px solid #e0e0e0;
    }
    
    .details-header h6 {
        margin: 0;
        font-size: 0.875rem;
        font-weight: 600;
    }
    
    .close-btn {
        background: none;
        border: none;
        padding: 4px;
        cursor: pointer;
        color: #666;
        transition: color 0.3s ease;
    }
    
    .close-btn:hover {
        color: #333;
    }
    
    .details-content {
        padding: 16px;
    }
    
    .hub-status {
        margin-bottom: 12px;
        padding-bottom: 12px;
        border-bottom: 1px solid #f0f0f0;
    }
    
    .hub-status:last-child {
        border-bottom: none;
        margin-bottom: 0;
        padding-bottom: 0;
    }
    
    .hub-status h6 {
        font-size: 0.8125rem;
        font-weight: 600;
        margin-bottom: 4px;
        text-transform: capitalize;
    }
    
    .status-item {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 0.8125rem;
    }
    
    .connected-features,
    .disconnected-warning {
        margin-top: 12px;
        padding-top: 12px;
        border-top: 1px solid #e0e0e0;
    }
    
    .connected-features h6,
    .disconnected-warning h6 {
        font-size: 0.8125rem;
        font-weight: 600;
        margin-bottom: 8px;
    }
    
    .connected-features ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }
    
    .connected-features li {
        display: flex;
        align-items: center;
        gap: 6px;
        margin-bottom: 4px;
        font-size: 0.8125rem;
        color: #2e7d32;
    }
    
    .disconnected-warning p {
        margin: 0 0 8px 0;
        font-size: 0.8125rem;
        color: #c62828;
    }
    
    .disconnected-warning .fallback-info {
        color: #666;
        font-style: italic;
    }
    
    @@keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.5; }
        100% { opacity: 1; }
    }
    
    .status-badge.connecting i,
    .status-badge.reconnecting i {
        animation: pulse 1.5s ease-in-out infinite;
    }
</style>

@code {
    private bool ShowDetails = false;
    private Dictionary<string, ConnectionState> HubStates = new();
    private ConnectionState OverallState => CalculateOverallState();

    protected override void OnInitialized()
    {
        // Register this component as a listener
        SignalRService.RegisterListener(this);
        
        // Get initial states
        UpdateHubStates();
    }

    private void UpdateHubStates()
    {
        HubStates["notifications"] = SignalRService.GetConnectionState("notifications");
        HubStates["video-generation"] = SignalRService.GetConnectionState("video-generation");
        HubStates["image-generation"] = SignalRService.GetConnectionState("image-generation");
    }

    private ConnectionState CalculateOverallState()
    {
        if (!HubStates.Any())
            return ConnectionState.Disconnected;

        // If any hub is reconnecting, overall state is reconnecting
        if (HubStates.Values.Any(s => s == ConnectionState.Reconnecting))
            return ConnectionState.Reconnecting;

        // If any hub is connecting, overall state is connecting
        if (HubStates.Values.Any(s => s == ConnectionState.Connecting))
            return ConnectionState.Connecting;

        // If all hubs are connected, overall state is connected
        if (HubStates.Values.All(s => s == ConnectionState.Connected))
            return ConnectionState.Connected;

        // Otherwise, disconnected
        return ConnectionState.Disconnected;
    }

    private void ToggleDetails()
    {
        ShowDetails = !ShowDetails;
    }

    private string GetStatusClass() => OverallState switch
    {
        ConnectionState.Connected => "connected",
        ConnectionState.Connecting => "connecting",
        ConnectionState.Reconnecting => "reconnecting",
        _ => "disconnected"
    };

    private string GetStatusIcon() => OverallState switch
    {
        ConnectionState.Connected => "fa fa-circle",
        ConnectionState.Connecting => "fa fa-circle-notch fa-spin",
        ConnectionState.Reconnecting => "fa fa-sync fa-spin",
        _ => "fa fa-circle"
    };

    private string GetStatusText() => OverallState switch
    {
        ConnectionState.Connected => "Connected",
        ConnectionState.Connecting => "Connecting...",
        ConnectionState.Reconnecting => "Reconnecting...",
        _ => "Disconnected"
    };

    private string GetHubStatusIcon(ConnectionState state) => state switch
    {
        ConnectionState.Connected => "fa fa-check-circle text-success",
        ConnectionState.Connecting => "fa fa-circle-notch fa-spin text-info",
        ConnectionState.Reconnecting => "fa fa-sync fa-spin text-warning",
        _ => "fa fa-times-circle text-danger"
    };

    // IServerSideSignalRListener implementation
    public async Task OnConnectionStateChanged(string hubName, ConnectionState state)
    {
        Logger.LogDebug("Hub {HubName} state changed to {State}", hubName, state);
        
        HubStates[hubName] = state;
        
        // Update UI on the Blazor render thread
        await InvokeAsync(StateHasChanged);
    }

    // We don't need to handle other events in this component
    public Task OnSystemNotificationReceived(JsonElement notification) => Task.CompletedTask;
    public Task OnModelMappingChanged(JsonElement data) => Task.CompletedTask;
    public Task OnProviderHealthChanged(JsonElement data) => Task.CompletedTask;
    public Task OnNavigationStateChanged(JsonElement data) => Task.CompletedTask;
    public Task OnVideoGenerationProgress(string taskId, JsonElement progress) => Task.CompletedTask;
    public Task OnVideoGenerationCompleted(string taskId, JsonElement result) => Task.CompletedTask;
    public Task OnVideoGenerationFailed(string taskId, string error) => Task.CompletedTask;
    public Task OnImageGenerationProgress(string taskId, JsonElement progress) => Task.CompletedTask;
    public Task OnImageGenerationCompleted(string taskId, JsonElement result) => Task.CompletedTask;
    public Task OnImageGenerationFailed(string taskId, string error) => Task.CompletedTask;
    
    // Spend notification events
    public Task OnSpendUpdate(JsonElement notification) => Task.CompletedTask;
    public Task OnBudgetAlert(JsonElement notification) => Task.CompletedTask;
    public Task OnSpendSummary(JsonElement notification) => Task.CompletedTask;
    public Task OnUnusualSpending(JsonElement notification) => Task.CompletedTask;
    
    // Model discovery events
    public Task OnNewModelsDiscovered(JsonElement notification) => Task.CompletedTask;
    public Task OnModelCapabilitiesChanged(JsonElement notification) => Task.CompletedTask;
    public Task OnModelPricingUpdated(JsonElement notification) => Task.CompletedTask;
    public Task OnModelDeprecated(JsonElement notification) => Task.CompletedTask;
    
    // Batch operation events
    public Task OnBatchOperationProgress(string operationId, JsonElement progress) => Task.CompletedTask;
    public Task OnBatchOperationCompleted(string operationId, JsonElement result) => Task.CompletedTask;
    public Task OnBatchOperationFailed(string operationId, string error) => Task.CompletedTask;
    
    // Admin notification events
    public Task OnAdminNotificationReceived(JsonElement notification) => Task.CompletedTask;

    public void Dispose()
    {
        SignalRService.UnregisterListener(this);
    }
}