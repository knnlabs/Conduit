import { notifications } from '@mantine/notifications';\nimport { withAdminClient } from '@/lib/client/adminClient';\nimport { safeLog } from '@/lib/utils/logging';\nimport type { DateRange } from './types';\n\nexport function useCostDashboardHandlers(timeRange: string, getDateRange: () => DateRange, refetch: () => Promise<void>) {\n  const handleRefresh = async () => {\n    try {\n      await refetch();\n      notifications.show({\n        title: 'Data Refreshed',\n        message: 'Cost data has been updated',\n        color: 'green',\n      });\n    } catch (err) {\n      safeLog('error', 'Failed to refresh cost data', err);\n      notifications.show({\n        title: 'Refresh Failed',\n        message: 'Failed to refresh cost data',\n        color: 'red',\n      });\n    }\n  };\n\n  const handleExport = async (setIsExporting: (value: boolean) => void) => {\n    setIsExporting(true);\n    try {\n      const { startDate, endDate } = getDateRange();\n      \n      // Get export data from Admin SDK (returns Uint8Array)\n      const exportData = await withAdminClient(client =>\n        client.analytics.exportAnalyticsAsync('csv', startDate, endDate)\n      );\n      \n      // Create a blob from the Uint8Array and download\n      // Cast to unknown then to BlobPart to avoid TypeScript ArrayBufferLike vs ArrayBuffer issue\n      const blob = new Blob([exportData as BlobPart], { type: 'text/csv; charset=utf-8' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `cost-report-${timeRange}-${new Date().toISOString().split('T')[0]}.csv`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n      \n      notifications.show({\n        title: 'Export Successful',\n        message: 'Cost report has been downloaded',\n        color: 'green',\n      });\n    } catch (err) {\n      safeLog('error', 'Failed to export cost data', err);\n      notifications.show({\n        title: 'Export Failed',\n        message: 'Failed to export cost data',\n        color: 'red',\n      });\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  return {\n    handleRefresh,\n    handleExport,\n  };\n}"