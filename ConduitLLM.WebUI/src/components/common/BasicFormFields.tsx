'use client';\n\nimport {\n  TextInput,\n  NumberInput,\n  Switch,\n  Stack,\n  Group,\n  Text,\n} from '@mantine/core';\nimport { FieldGroupProps, BaseFieldProps } from './FormFieldTypes';\n\n// Base field group component for consistent layout\nexport function FieldGroup({\n  label,\n  description,\n  required = false,\n  children,\n  gap = 'xs',\n  className,\n}: FieldGroupProps) {\n  return (\n    <Stack gap={gap} className={className}>\n      {label && (\n        <Text size=\"sm\" fw={500}>\n          {label}\n          {required && <Text span c=\"red\"> *</Text>}\n        </Text>\n      )}\n      {children}\n      {description && (\n        <Text size=\"xs\" c=\"dimmed\">\n          {description}\n        </Text>\n      )}\n    </Stack>\n  );\n}\n\n// Name field component with standard validation\nexport interface NameFieldProps extends BaseFieldProps {\n  placeholder?: string;\n  minLength?: number;\n  maxLength?: number;\n}\n\nexport function NameField({\n  form,\n  fieldName,\n  label = 'Name',\n  placeholder,\n  description,\n  required = true,\n  disabled = false,\n}: NameFieldProps) {\n  return (\n    <FieldGroup\n      label={label}\n      description={description}\n      required={required}\n    >\n      <TextInput\n        placeholder={placeholder ?? `Enter ${label.toLowerCase()}`}\n        disabled={disabled}\n        {...form.getInputProps(fieldName)}\n      />\n    </FieldGroup>\n  );\n}\n\n// Budget field component with proper number formatting\nexport interface BudgetFieldProps extends BaseFieldProps {\n  min?: number;\n  max?: number;\n  precision?: number;\n  currency?: string;\n}\n\nexport function BudgetField({\n  form,\n  fieldName,\n  label = 'Budget',\n  description,\n  required = false,\n  min = 0,\n  max = 10000,\n  precision = 2,\n  disabled = false,\n  currency = '$',\n}: BudgetFieldProps) {\n  return (\n    <FieldGroup\n      label={label}\n      description={description}\n      required={required}\n    >\n      <NumberInput\n        placeholder=\"0.00\"\n        min={min}\n        max={max}\n        decimalScale={precision}\n        prefix={currency}\n        disabled={disabled}\n        {...form.getInputProps(fieldName)}\n      />\n    </FieldGroup>\n  );\n}\n\n// Enable/disable switch field\nexport interface EnableFieldProps extends BaseFieldProps {\n  enabledLabel?: string;\n  disabledLabel?: string;\n}\n\nexport function EnableField({\n  form,\n  fieldName,\n  label = 'Status',\n  description,\n  enabledLabel = 'Enabled',\n  disabledLabel = 'Disabled',\n  disabled = false,\n}: EnableFieldProps) {\n  const isEnabled = form.values[fieldName];\n  \n  return (\n    <FieldGroup\n      label={label}\n      description={description}\n    >\n      <Group>\n        <Switch\n          size=\"md\"\n          disabled={disabled}\n          {...form.getInputProps(fieldName, { type: 'checkbox' })}\n        />\n        <Text size=\"sm\" c={isEnabled ? 'green' : 'dimmed'}>\n          {isEnabled ? enabledLabel : disabledLabel}\n        </Text>\n      </Group>\n    </FieldGroup>\n  );\n}\n\n// Priority field component with standard range\nexport interface PriorityFieldProps extends BaseFieldProps {\n  min?: number;\n  max?: number;\n}\n\nexport function PriorityField({\n  form,\n  fieldName,\n  label = 'Priority',\n  description = 'Higher values have higher priority (0-1000)',\n  required = false,\n  min = 0,\n  max = 1000,\n  disabled = false,\n}: PriorityFieldProps) {\n  return (\n    <FieldGroup\n      label={label}\n      description={description}\n      required={required}\n    >\n      <NumberInput\n        placeholder=\"0\"\n        min={min}\n        max={max}\n        disabled={disabled}\n        {...form.getInputProps(fieldName)}\n      />\n    </FieldGroup>\n  );\n}"