"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2113],{5119:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"features/correlation-tracing","title":"Correlation ID Tracking and Distributed Tracing","description":"ConduitLLM implements comprehensive distributed tracing through correlation IDs, enabling you to track requests across all services and components for debugging, monitoring, and auditing purposes.","source":"@site/docs/features/correlation-tracing.md","sourceDirName":"features","slug":"/features/correlation-tracing","permalink":"/Conduit/docs/features/correlation-tracing","draft":false,"unlisted":false,"editUrl":"https://github.com/knnlabs/Conduit/tree/main/website/docs/features/correlation-tracing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Audio Provider Configuration","permalink":"/Conduit/docs/features/audio-providers"},"next":{"title":"Environment Variables","permalink":"/Conduit/docs/guides/environment-variables"}}');var s=r(4848),t=r(8453);const o={},a="Correlation ID Tracking and Distributed Tracing",l={},c=[{value:"Overview",id:"overview",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Correlation ID Flow",id:"correlation-id-flow",level:3},{value:"Automatic ID Generation",id:"automatic-id-generation",level:3},{value:"Using Correlation IDs",id:"using-correlation-ids",level:2},{value:"Client-Side Implementation",id:"client-side-implementation",level:3},{value:"Providing Correlation ID",id:"providing-correlation-id",level:4},{value:"Python Client",id:"python-client",level:4},{value:"JavaScript/TypeScript Client",id:"javascripttypescript-client",level:4},{value:"Server-Side Access",id:"server-side-access",level:3},{value:"Accessing in Controllers",id:"accessing-in-controllers",level:4},{value:"Propagating to Services",id:"propagating-to-services",level:4},{value:"Structured Logging",id:"structured-logging",level:2},{value:"Log Format",id:"log-format",level:3},{value:"Querying Logs",id:"querying-logs",level:3},{value:"Using Elasticsearch",id:"using-elasticsearch",level:4},{value:"Using CloudWatch Insights",id:"using-cloudwatch-insights",level:4},{value:"Using Grafana Loki",id:"using-grafana-loki",level:4},{value:"Distributed Tracing",id:"distributed-tracing",level:2},{value:"OpenTelemetry Integration",id:"opentelemetry-integration",level:3},{value:"Creating Custom Spans",id:"creating-custom-spans",level:3},{value:"Trace Visualization",id:"trace-visualization",level:3},{value:"Database Tracking",id:"database-tracking",level:2},{value:"Storing Correlation IDs",id:"storing-correlation-ids",level:3},{value:"Querying Related Requests",id:"querying-related-requests",level:3},{value:"Monitoring and Alerting",id:"monitoring-and-alerting",level:2},{value:"Prometheus Metrics",id:"prometheus-metrics",level:3},{value:"Alert Examples",id:"alert-examples",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Correlation ID Format",id:"correlation-id-format",level:3},{value:"ID Propagation",id:"id-propagation",level:3},{value:"Security Considerations",id:"security-considerations",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Missing Correlation IDs",id:"missing-correlation-ids",level:3},{value:"Performance Impact",id:"performance-impact",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"correlation-id-tracking-and-distributed-tracing",children:"Correlation ID Tracking and Distributed Tracing"})}),"\n",(0,s.jsx)(n.p,{children:"ConduitLLM implements comprehensive distributed tracing through correlation IDs, enabling you to track requests across all services and components for debugging, monitoring, and auditing purposes."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Correlation ID tracking provides:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"End-to-end request tracing"}),": Follow a request through all components"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cross-service correlation"}),": Track requests across microservices"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Enhanced debugging"}),": Quickly find related logs and events"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance analysis"}),": Identify bottlenecks in request flow"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Audit compliance"}),": Complete request history for regulatory needs"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,s.jsx)(n.h3,{id:"correlation-id-flow",children:"Correlation ID Flow"}),"\n",(0,s.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant Client\n    participant API Gateway\n    participant Router\n    participant Provider\n    participant Monitoring\n    \n    Client->>API Gateway: Request (X-Correlation-Id: abc123)\n    API Gateway->>Router: Route request (abc123)\n    Router->>Provider: Forward to LLM (abc123)\n    Provider->>Router: Response (abc123)\n    Router->>Monitoring: Log metrics (abc123)\n    Router->>API Gateway: Return response (abc123)\n    API Gateway->>Client: Response (X-Correlation-Id: abc123)"}),"\n",(0,s.jsx)(n.h3,{id:"automatic-id-generation",children:"Automatic ID Generation"}),"\n",(0,s.jsx)(n.p,{children:"If a client doesn't provide a correlation ID, ConduitLLM automatically generates one:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class CorrelationIdMiddleware\n{\n    public async Task InvokeAsync(HttpContext context, RequestDelegate next)\n    {\n        var correlationId = context.Request.Headers["X-Correlation-Id"].FirstOrDefault()\n            ?? context.Request.Headers["X-Request-Id"].FirstOrDefault()\n            ?? Guid.NewGuid().ToString();\n        \n        context.Items["CorrelationId"] = correlationId;\n        context.Response.Headers.Add("X-Correlation-Id", correlationId);\n        \n        using (_logger.BeginScope(new Dictionary<string, object>\n        {\n            ["CorrelationId"] = correlationId\n        }))\n        {\n            await next(context);\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"using-correlation-ids",children:"Using Correlation IDs"}),"\n",(0,s.jsx)(n.h3,{id:"client-side-implementation",children:"Client-Side Implementation"}),"\n",(0,s.jsx)(n.h4,{id:"providing-correlation-id",children:"Providing Correlation ID"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Using curl\ncurl -X POST https://api.conduit.example.com/v1/chat/completions \\\n  -H "X-Virtual-Key: your-key" \\\n  -H "X-Correlation-Id: user-123-session-456-req-789" \\\n  -d \'{"model": "gpt-4", "messages": [{"role": "user", "content": "Hello"}]}\'\n'})}),"\n",(0,s.jsx)(n.h4,{id:"python-client",children:"Python Client"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import requests\nimport uuid\n\ndef make_request_with_correlation(prompt, correlation_id=None):\n    if correlation_id is None:\n        correlation_id = f"py-{uuid.uuid4()}"\n    \n    headers = {\n        "X-Virtual-Key": "your-key",\n        "X-Correlation-Id": correlation_id\n    }\n    \n    response = requests.post(\n        "https://api.conduit.example.com/v1/chat/completions",\n        headers=headers,\n        json={\n            "model": "gpt-4",\n            "messages": [{"role": "user", "content": prompt}]\n        }\n    )\n    \n    # Correlation ID is returned in response headers\n    response_correlation_id = response.headers.get("X-Correlation-Id")\n    print(f"Request tracked with ID: {response_correlation_id}")\n    \n    return response.json()\n'})}),"\n",(0,s.jsx)(n.h4,{id:"javascripttypescript-client",children:"JavaScript/TypeScript Client"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"class ConduitClient {\n    private baseUrl: string;\n    private apiKey: string;\n    \n    async createCompletion(\n        messages: Message[], \n        correlationId?: string\n    ): Promise<CompletionResponse> {\n        const headers = {\n            'Content-Type': 'application/json',\n            'X-Virtual-Key': this.apiKey,\n            'X-Correlation-Id': correlationId || `js-${crypto.randomUUID()}`\n        };\n        \n        const response = await fetch(`${this.baseUrl}/v1/chat/completions`, {\n            method: 'POST',\n            headers,\n            body: JSON.stringify({ model: 'gpt-4', messages })\n        });\n        \n        // Extract correlation ID from response\n        const responseCorrelationId = response.headers.get('X-Correlation-Id');\n        console.log(`Request tracked: ${responseCorrelationId}`);\n        \n        return response.json();\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"server-side-access",children:"Server-Side Access"}),"\n",(0,s.jsx)(n.h4,{id:"accessing-in-controllers",children:"Accessing in Controllers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'[ApiController]\n[Route("v1")]\npublic class ChatController : ControllerBase\n{\n    [HttpPost("chat/completions")]\n    public async Task<IActionResult> CreateCompletion(\n        [FromBody] ChatCompletionRequest request)\n    {\n        var correlationId = HttpContext.Items["CorrelationId"]?.ToString();\n        \n        _logger.LogInformation(\n            "Processing chat completion request. CorrelationId: {CorrelationId}",\n            correlationId);\n        \n        var response = await _chatService.ProcessRequestAsync(request, correlationId);\n        \n        return Ok(response);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"propagating-to-services",children:"Propagating to Services"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class ChatService\n{\n    private readonly ICorrelationContextAccessor _correlationContext;\n    \n    public async Task<ChatCompletionResponse> ProcessRequestAsync(\n        ChatCompletionRequest request,\n        string correlationId)\n    {\n        using (_logger.BeginScope(new { CorrelationId = correlationId }))\n        {\n            _logger.LogInformation("Routing request to provider");\n            \n            // Correlation ID is automatically included in outgoing HTTP requests\n            var response = await _httpClient.PostAsJsonAsync(\n                providerUrl, \n                request);\n            \n            return response;\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"structured-logging",children:"Structured Logging"}),"\n",(0,s.jsx)(n.h3,{id:"log-format",children:"Log Format"}),"\n",(0,s.jsx)(n.p,{children:"All logs include the correlation ID in structured format:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "timestamp": "2024-01-15T10:30:45.123Z",\n  "level": "Information",\n  "correlationId": "user-123-session-456-req-789",\n  "message": "Chat completion request processed",\n  "properties": {\n    "provider": "openai",\n    "model": "gpt-4",\n    "duration": 1234,\n    "inputTokens": 150,\n    "outputTokens": 200,\n    "cost": 0.0105\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"querying-logs",children:"Querying Logs"}),"\n",(0,s.jsx)(n.h4,{id:"using-elasticsearch",children:"Using Elasticsearch"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'GET /conduit-logs/_search\n{\n  "query": {\n    "term": {\n      "correlationId": "user-123-session-456-req-789"\n    }\n  },\n  "sort": [\n    { "timestamp": "asc" }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"using-cloudwatch-insights",children:"Using CloudWatch Insights"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'fields @timestamp, level, message, correlationId, provider, duration\n| filter correlationId = "user-123-session-456-req-789"\n| sort @timestamp asc\n'})}),"\n",(0,s.jsx)(n.h4,{id:"using-grafana-loki",children:"Using Grafana Loki"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-logql",children:'{app="conduit"} |= "user-123-session-456-req-789" | json\n'})}),"\n",(0,s.jsx)(n.h2,{id:"distributed-tracing",children:"Distributed Tracing"}),"\n",(0,s.jsx)(n.h3,{id:"opentelemetry-integration",children:"OpenTelemetry Integration"}),"\n",(0,s.jsx)(n.p,{children:"ConduitLLM supports OpenTelemetry for distributed tracing:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'services.AddOpenTelemetryTracing(builder =>\n{\n    builder\n        .SetResourceBuilder(ResourceBuilder.CreateDefault()\n            .AddService("conduit-api"))\n        .AddAspNetCoreInstrumentation()\n        .AddHttpClientInstrumentation()\n        .AddRedisInstrumentation()\n        .AddNpgsqlInstrumentation()\n        .AddSource("ConduitLLM")\n        .AddJaegerExporter(options =>\n        {\n            options.AgentHost = "jaeger";\n            options.AgentPort = 6831;\n        });\n});\n'})}),"\n",(0,s.jsx)(n.h3,{id:"creating-custom-spans",children:"Creating Custom Spans"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class AudioTranscriptionService\n{\n    private readonly ActivitySource _activitySource = \n        new ActivitySource("ConduitLLM.Audio");\n    \n    public async Task<TranscriptionResult> TranscribeAsync(\n        byte[] audioData,\n        string correlationId)\n    {\n        using var activity = _activitySource.StartActivity(\n            "TranscribeAudio",\n            ActivityKind.Internal);\n        \n        activity?.SetTag("correlation.id", correlationId);\n        activity?.SetTag("audio.size", audioData.Length);\n        activity?.SetTag("audio.format", DetectAudioFormat(audioData));\n        \n        try\n        {\n            var result = await _provider.TranscribeAsync(audioData);\n            \n            activity?.SetTag("transcription.words", result.WordCount);\n            activity?.SetTag("transcription.confidence", result.Confidence);\n            \n            return result;\n        }\n        catch (Exception ex)\n        {\n            activity?.SetStatus(ActivityStatusCode.Error, ex.Message);\n            throw;\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"trace-visualization",children:"Trace Visualization"}),"\n",(0,s.jsxs)(n.p,{children:["Access traces in Jaeger UI at ",(0,s.jsx)(n.code,{children:"http://jaeger.example.com:16686"})]}),"\n",(0,s.jsx)(n.p,{children:"Features available:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Service dependency graph"}),"\n",(0,s.jsx)(n.li,{children:"Request flow visualization"}),"\n",(0,s.jsx)(n.li,{children:"Latency breakdown by component"}),"\n",(0,s.jsx)(n.li,{children:"Error tracking and analysis"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"database-tracking",children:"Database Tracking"}),"\n",(0,s.jsx)(n.h3,{id:"storing-correlation-ids",children:"Storing Correlation IDs"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Request logs table includes correlation ID\nCREATE TABLE request_logs (\n    id BIGSERIAL PRIMARY KEY,\n    correlation_id VARCHAR(128) NOT NULL,\n    timestamp TIMESTAMPTZ NOT NULL,\n    virtual_key_id INTEGER,\n    provider VARCHAR(50),\n    model VARCHAR(100),\n    request_type VARCHAR(50),\n    status_code INTEGER,\n    response_time_ms INTEGER,\n    input_tokens INTEGER,\n    output_tokens INTEGER,\n    cost DECIMAL(10, 6),\n    error_message TEXT,\n    INDEX idx_correlation_id (correlation_id),\n    INDEX idx_timestamp (timestamp)\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"querying-related-requests",children:"Querying Related Requests"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Find all requests for a correlation ID\nSELECT \n    timestamp,\n    provider,\n    model,\n    request_type,\n    status_code,\n    response_time_ms,\n    error_message\nFROM request_logs\nWHERE correlation_id = 'user-123-session-456-req-789'\nORDER BY timestamp;\n\n-- Find slow requests in a session\nSELECT \n    correlation_id,\n    COUNT(*) as request_count,\n    AVG(response_time_ms) as avg_response_time,\n    MAX(response_time_ms) as max_response_time\nFROM request_logs\nWHERE correlation_id LIKE 'user-123-session-456%'\nGROUP BY correlation_id\nHAVING MAX(response_time_ms) > 5000;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"monitoring-and-alerting",children:"Monitoring and Alerting"}),"\n",(0,s.jsx)(n.h3,{id:"prometheus-metrics",children:"Prometheus Metrics"}),"\n",(0,s.jsx)(n.p,{children:"Correlation IDs are included as labels in metrics:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-prometheus",children:'# Request duration by correlation pattern\nhistogram_quantile(0.95,\n  sum(rate(conduit_request_duration_seconds_bucket[5m])) \n  by (correlation_id, le)\n)\n\n# Error rate for specific user session\nrate(conduit_requests_total{\n  correlation_id=~"user-123-.*",\n  status="error"\n}[5m])\n'})}),"\n",(0,s.jsx)(n.h3,{id:"alert-examples",children:"Alert Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'groups:\n  - name: correlation_alerts\n    rules:\n      - alert: HighErrorRateForSession\n        expr: |\n          rate(conduit_requests_total{status="error"}[5m]) \n          by (correlation_id) > 0.1\n        for: 5m\n        annotations:\n          summary: "High error rate for session {{ $labels.correlation_id }}"\n          \n      - alert: SlowRequestChain\n        expr: |\n          histogram_quantile(0.95,\n            rate(conduit_request_duration_seconds_bucket[5m])\n          ) by (correlation_id) > 10\n        annotations:\n          summary: "Slow requests in session {{ $labels.correlation_id }}"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"correlation-id-format",children:"Correlation ID Format"}),"\n",(0,s.jsx)(n.p,{children:"Use meaningful correlation IDs that include:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"User identifier"}),"\n",(0,s.jsx)(n.li,{children:"Session identifier"}),"\n",(0,s.jsx)(n.li,{children:"Request sequence number"}),"\n",(0,s.jsx)(n.li,{children:"Timestamp (optional)"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Example: ",(0,s.jsx)(n.code,{children:"user-123-session-456-req-789-20240115103045"})]}),"\n",(0,s.jsx)(n.h3,{id:"id-propagation",children:"ID Propagation"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Always forward IDs"}),": Pass correlation IDs to all downstream services"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Log at boundaries"}),": Log when receiving and sending requests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Include in errors"}),": Always include correlation ID in error responses"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Store with data"}),": Save correlation IDs with any persisted data"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Don't include PII"}),": Avoid personal information in correlation IDs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use UUIDs for external"}),": Use random UUIDs for external-facing APIs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rotate regularly"}),": Don't reuse correlation IDs across sessions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Access control"}),": Limit who can query by correlation ID"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"missing-correlation-ids",children:"Missing Correlation IDs"}),"\n",(0,s.jsx)(n.p,{children:"If correlation IDs aren't appearing:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Check middleware registration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"app.UseMiddleware<CorrelationIdMiddleware>();\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Verify header names:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl -I https://api.example.com/health\n# Look for X-Correlation-Id header\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Check log configuration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "Serilog": {\n    "Enrich": ["FromLogContext", "WithCorrelationId"]\n  }\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"performance-impact",children:"Performance Impact"}),"\n",(0,s.jsx)(n.p,{children:"Correlation ID tracking has minimal overhead:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"~0.1ms per request for ID generation"}),"\n",(0,s.jsx)(n.li,{children:"No significant memory usage"}),"\n",(0,s.jsx)(n.li,{children:"Indexed database columns for fast queries"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/Conduit/docs/monitoring/metrics-monitoring",children:"Metrics Monitoring"})," - Use correlation IDs in metrics"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/Conduit/docs/monitoring/health-checks",children:"Health Checks"})," - Track health check correlations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/Conduit/docs/troubleshooting/common-issues",children:"Troubleshooting Guide"})," - Debug with correlation IDs"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var i=r(6540);const s={},t=i.createContext(s);function o(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);