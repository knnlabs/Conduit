"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9448],{8340:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>c,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"monitoring/health-checks","title":"Health Checks","description":"ConduitLLM provides comprehensive health monitoring through standardized health check endpoints that monitor system components, external dependencies, and provider availability.","source":"@site/docs/monitoring/health-checks.md","sourceDirName":"monitoring","slug":"/monitoring/health-checks","permalink":"/Conduit/docs/monitoring/health-checks","draft":false,"unlisted":false,"editUrl":"https://github.com/knnlabs/Conduit/tree/main/website/docs/monitoring/health-checks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Repository Pattern","permalink":"/Conduit/docs/architecture/repository-pattern"},"next":{"title":"Metrics and Monitoring","permalink":"/Conduit/docs/monitoring/metrics-monitoring"}}');var s=t(4848),a=t(8453);const c={},r="Health Checks",l={},h=[{value:"Overview",id:"overview",level:2},{value:"Health Check Endpoints",id:"health-check-endpoints",level:2},{value:"Liveness Check",id:"liveness-check",level:3},{value:"Readiness Check",id:"readiness-check",level:3},{value:"Startup Check",id:"startup-check",level:3},{value:"Component Health Checks",id:"component-health-checks",level:2},{value:"Database Health Check",id:"database-health-check",level:3},{value:"Redis Health Check",id:"redis-health-check",level:3},{value:"Provider Health Checks",id:"provider-health-checks",level:3},{value:"Audio Service Health Check",id:"audio-service-health-check",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Basic Configuration",id:"basic-configuration",level:3},{value:"Advanced Configuration",id:"advanced-configuration",level:3},{value:"Kubernetes Integration",id:"kubernetes-integration",level:2},{value:"Deployment Configuration",id:"deployment-configuration",level:3},{value:"Health Check UI",id:"health-check-ui",level:2},{value:"Monitoring Integration",id:"monitoring-integration",level:2},{value:"Prometheus Metrics",id:"prometheus-metrics",level:3},{value:"Custom Health Metrics",id:"custom-health-metrics",level:3},{value:"Health Check Strategies",id:"health-check-strategies",level:2},{value:"Cascading Health Checks",id:"cascading-health-checks",level:3},{value:"Cached Health Checks",id:"cached-health-checks",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debugging Health Checks",id:"debugging-health-checks",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"health-checks",children:"Health Checks"})}),"\n",(0,s.jsx)(n.p,{children:"ConduitLLM provides comprehensive health monitoring through standardized health check endpoints that monitor system components, external dependencies, and provider availability."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Health checks in ConduitLLM:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Monitor all critical system components"}),"\n",(0,s.jsx)(n.li,{children:"Check external service availability"}),"\n",(0,s.jsx)(n.li,{children:"Validate provider API connectivity"}),"\n",(0,s.jsx)(n.li,{children:"Track performance degradation"}),"\n",(0,s.jsx)(n.li,{children:"Support container orchestration platforms"}),"\n",(0,s.jsx)(n.li,{children:"Enable automated recovery actions"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"health-check-endpoints",children:"Health Check Endpoints"}),"\n",(0,s.jsx)(n.h3,{id:"liveness-check",children:"Liveness Check"}),"\n",(0,s.jsx)(n.p,{children:"Indicates if the service is running and able to handle requests."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-http",children:"GET /health/live\n"})}),"\n",(0,s.jsx)(n.p,{children:"Response:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "status": "Healthy"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Use this endpoint for:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Kubernetes liveness probes"}),"\n",(0,s.jsx)(n.li,{children:"Basic uptime monitoring"}),"\n",(0,s.jsx)(n.li,{children:"Service discovery registration"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"readiness-check",children:"Readiness Check"}),"\n",(0,s.jsx)(n.p,{children:"Indicates if the service is ready to handle traffic."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-http",children:"GET /health/ready\n"})}),"\n",(0,s.jsx)(n.p,{children:"Response:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "status": "Healthy",\n  "totalDuration": "00:00:00.0456789",\n  "entries": {\n    "database": {\n      "status": "Healthy",\n      "duration": "00:00:00.0123456",\n      "data": {\n        "connectionString": "Host=postgres:5432",\n        "activeConnections": 5,\n        "maxConnections": 100\n      }\n    },\n    "redis": {\n      "status": "Healthy", \n      "duration": "00:00:00.0023456",\n      "data": {\n        "endpoint": "redis:6379",\n        "connectedClients": 12,\n        "usedMemory": "256MB"\n      }\n    },\n    "providers": {\n      "status": "Degraded",\n      "duration": "00:00:00.0234567",\n      "description": "Some providers are experiencing issues",\n      "data": {\n        "healthy": ["openai", "googlecloud", "aws"],\n        "degraded": ["anthropic"],\n        "unhealthy": ["cohere"]\n      }\n    },\n    "audioServices": {\n      "status": "Healthy",\n      "duration": "00:00:00.0087654",\n      "data": {\n        "transcriptionProviders": 4,\n        "ttsProviders": 5,\n        "realtimeProviders": 2\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"startup-check",children:"Startup Check"}),"\n",(0,s.jsx)(n.p,{children:"Used during application startup to verify initialization."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-http",children:"GET /health/startup\n"})}),"\n",(0,s.jsx)(n.p,{children:"Checks performed:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Database migrations completed"}),"\n",(0,s.jsx)(n.li,{children:"Configuration loaded"}),"\n",(0,s.jsx)(n.li,{children:"Provider credentials validated"}),"\n",(0,s.jsx)(n.li,{children:"Cache connections established"}),"\n",(0,s.jsx)(n.li,{children:"Background services started"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"component-health-checks",children:"Component Health Checks"}),"\n",(0,s.jsx)(n.h3,{id:"database-health-check",children:"Database Health Check"}),"\n",(0,s.jsx)(n.p,{children:"Monitors database connectivity and performance:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class DatabaseHealthCheck : IHealthCheck\n{\n    public async Task<HealthCheckResult> CheckHealthAsync(\n        HealthCheckContext context,\n        CancellationToken cancellationToken)\n    {\n        try\n        {\n            using var connection = new NpgsqlConnection(_connectionString);\n            await connection.OpenAsync(cancellationToken);\n            \n            var command = new NpgsqlCommand("SELECT 1", connection);\n            await command.ExecuteScalarAsync(cancellationToken);\n            \n            return HealthCheckResult.Healthy("Database is accessible");\n        }\n        catch (Exception ex)\n        {\n            return HealthCheckResult.Unhealthy("Database connection failed", ex);\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"redis-health-check",children:"Redis Health Check"}),"\n",(0,s.jsx)(n.p,{children:"Validates Redis connectivity and operations:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class RedisHealthCheck : IHealthCheck\n{\n    public async Task<HealthCheckResult> CheckHealthAsync(\n        HealthCheckContext context,\n        CancellationToken cancellationToken)\n    {\n        try\n        {\n            var database = _redis.GetDatabase();\n            await database.PingAsync();\n            \n            var info = await database.ExecuteAsync("INFO", "server");\n            var data = new Dictionary<string, object>\n            {\n                ["connected"] = true,\n                ["responseTime"] = $"{database.Ping().TotalMilliseconds}ms"\n            };\n            \n            return HealthCheckResult.Healthy("Redis is responsive", data);\n        }\n        catch (Exception ex)\n        {\n            return HealthCheckResult.Unhealthy("Redis connection failed", ex);\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"provider-health-checks",children:"Provider Health Checks"}),"\n",(0,s.jsx)(n.p,{children:"Monitors LLM provider availability:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class ProviderHealthCheck : IHealthCheck\n{\n    public async Task<HealthCheckResult> CheckHealthAsync(\n        HealthCheckContext context,\n        CancellationToken cancellationToken)\n    {\n        var results = new List<ProviderHealthResult>();\n        \n        foreach (var provider in _providers)\n        {\n            try\n            {\n                var response = await provider.CheckHealthAsync(cancellationToken);\n                results.Add(new ProviderHealthResult\n                {\n                    Provider = provider.Name,\n                    Status = response.IsHealthy ? "healthy" : "unhealthy",\n                    ResponseTime = response.ResponseTime,\n                    Services = response.ServiceStatuses\n                });\n            }\n            catch (Exception ex)\n            {\n                results.Add(new ProviderHealthResult\n                {\n                    Provider = provider.Name,\n                    Status = "unhealthy",\n                    Error = ex.Message\n                });\n            }\n        }\n        \n        var unhealthyCount = results.Count(r => r.Status == "unhealthy");\n        \n        if (unhealthyCount == 0)\n            return HealthCheckResult.Healthy("All providers healthy");\n        else if (unhealthyCount < results.Count)\n            return HealthCheckResult.Degraded($"{unhealthyCount} providers unhealthy");\n        else\n            return HealthCheckResult.Unhealthy("All providers unhealthy");\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"audio-service-health-check",children:"Audio Service Health Check"}),"\n",(0,s.jsx)(n.p,{children:"Specialized checks for audio services:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class AudioServiceHealthCheck : IHealthCheck\n{\n    public async Task<HealthCheckResult> CheckHealthAsync(\n        HealthCheckContext context,\n        CancellationToken cancellationToken)\n    {\n        var checks = new Dictionary<string, object>();\n        \n        // Check transcription providers\n        var transcriptionProviders = await _audioRouter\n            .GetHealthyTranscriptionProvidersAsync();\n        checks["transcriptionProviders"] = transcriptionProviders.Count;\n        \n        // Check TTS providers\n        var ttsProviders = await _audioRouter\n            .GetHealthyTtsProvidersAsync();\n        checks["ttsProviders"] = ttsProviders.Count;\n        \n        // Check realtime providers\n        var realtimeProviders = await _audioRouter\n            .GetHealthyRealtimeProvidersAsync();\n        checks["realtimeProviders"] = realtimeProviders.Count;\n        \n        // Check active sessions\n        checks["activeSessions"] = _sessionManager.GetActiveSessionCount();\n        \n        if (transcriptionProviders.Count == 0 || ttsProviders.Count == 0)\n            return HealthCheckResult.Unhealthy("No audio providers available", null, checks);\n        else if (realtimeProviders.Count == 0)\n            return HealthCheckResult.Degraded("Realtime audio unavailable", null, checks);\n        else\n            return HealthCheckResult.Healthy("Audio services operational", checks);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"basic-configuration",children:"Basic Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "HealthChecks": {\n    "Enabled": true,\n    "DetailedErrors": false,\n    "HealthCheckInterval": 30,\n    "Endpoints": {\n      "Live": "/health/live",\n      "Ready": "/health/ready",\n      "Startup": "/health/startup"\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"advanced-configuration",children:"Advanced Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'services.AddHealthChecks()\n    // Database check with timeout\n    .AddNpgSql(\n        connectionString,\n        name: "database",\n        failureStatus: HealthStatus.Unhealthy,\n        timeout: TimeSpan.FromSeconds(5))\n    \n    // Redis check with custom logic\n    .AddRedis(\n        redisConnection,\n        name: "redis",\n        failureStatus: HealthStatus.Degraded)\n    \n    // Custom provider checks\n    .AddTypeActivatedCheck<ProviderHealthCheck>(\n        "providers",\n        failureStatus: HealthStatus.Degraded,\n        args: new object[] { providerFactory })\n    \n    // Audio service checks\n    .AddCheck<AudioServiceHealthCheck>(\n        "audio-services",\n        failureStatus: HealthStatus.Degraded,\n        tags: new[] { "audio" })\n    \n    // Add health check UI\n    .AddHealthChecksUI(setup =>\n    {\n        setup.SetEvaluationTimeInSeconds(30);\n        setup.MaximumHistoryEntriesPerEndpoint(50);\n    });\n'})}),"\n",(0,s.jsx)(n.h2,{id:"kubernetes-integration",children:"Kubernetes Integration"}),"\n",(0,s.jsx)(n.h3,{id:"deployment-configuration",children:"Deployment Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: conduit-api\nspec:\n  template:\n    spec:\n      containers:\n      - name: api\n        image: conduit:latest\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 8080\n          initialDelaySeconds: 10\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        \n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 8080\n          initialDelaySeconds: 20\n          periodSeconds: 10\n          timeoutSeconds: 10\n          failureThreshold: 3\n        \n        startupProbe:\n          httpGet:\n            path: /health/startup\n            port: 8080\n          initialDelaySeconds: 0\n          periodSeconds: 5\n          timeoutSeconds: 10\n          failureThreshold: 30\n"})}),"\n",(0,s.jsx)(n.h2,{id:"health-check-ui",children:"Health Check UI"}),"\n",(0,s.jsx)(n.p,{children:"ConduitLLM includes an optional health check dashboard:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'// Enable in Startup.cs\napp.UseHealthChecksUI(config =>\n{\n    config.UIPath = "/health-ui";\n    config.ApiPath = "/health-api";\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Access at: ",(0,s.jsx)(n.code,{children:"http://your-domain/health-ui"})]}),"\n",(0,s.jsx)(n.p,{children:"Features:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Real-time health status"}),"\n",(0,s.jsx)(n.li,{children:"Historical health data"}),"\n",(0,s.jsx)(n.li,{children:"Webhook notifications"}),"\n",(0,s.jsx)(n.li,{children:"Custom styling options"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"monitoring-integration",children:"Monitoring Integration"}),"\n",(0,s.jsx)(n.h3,{id:"prometheus-metrics",children:"Prometheus Metrics"}),"\n",(0,s.jsx)(n.p,{children:"Health check results are exported as Prometheus metrics:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-prometheus",children:'# Health check status (0=unhealthy, 1=healthy, 2=degraded)\nconduit_health_check_status{check="database"} 1\nconduit_health_check_status{check="redis"} 1\nconduit_health_check_status{check="providers"} 2\n\n# Health check duration\nconduit_health_check_duration_seconds{check="database"} 0.012\nconduit_health_check_duration_seconds{check="providers"} 0.234\n\n# Provider-specific health\nconduit_provider_health_status{provider="openai"} 1\nconduit_provider_health_status{provider="anthropic"} 0\n'})}),"\n",(0,s.jsx)(n.h3,{id:"custom-health-metrics",children:"Custom Health Metrics"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class CustomHealthCheck : IHealthCheck\n{\n    private readonly IMetricsCollector _metrics;\n    \n    public async Task<HealthCheckResult> CheckHealthAsync(\n        HealthCheckContext context,\n        CancellationToken cancellationToken)\n    {\n        var stopwatch = Stopwatch.StartNew();\n        try\n        {\n            // Perform check\n            var result = await PerformHealthCheckAsync();\n            \n            // Record metrics\n            _metrics.RecordHealthCheck(\n                checkName: context.Registration.Name,\n                status: result.Status,\n                duration: stopwatch.Elapsed);\n            \n            return result;\n        }\n        catch (Exception ex)\n        {\n            _metrics.RecordHealthCheckFailure(context.Registration.Name);\n            return HealthCheckResult.Unhealthy("Check failed", ex);\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"health-check-strategies",children:"Health Check Strategies"}),"\n",(0,s.jsx)(n.h3,{id:"cascading-health-checks",children:"Cascading Health Checks"}),"\n",(0,s.jsx)(n.p,{children:"Configure dependencies between health checks:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'services.AddHealthChecks()\n    .AddCheck("database", () => \n    {\n        // Primary check\n        return CheckDatabase();\n    })\n    .AddCheck("cache", () =>\n    {\n        // Only check if database is healthy\n        if (!IsDatabaseHealthy())\n            return HealthCheckResult.Degraded("Skipped due to database issues");\n        \n        return CheckCache();\n    });\n'})}),"\n",(0,s.jsx)(n.h3,{id:"cached-health-checks",children:"Cached Health Checks"}),"\n",(0,s.jsx)(n.p,{children:"Prevent overwhelming services with health checks:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class CachedHealthCheck : IHealthCheck\n{\n    private readonly IMemoryCache _cache;\n    private readonly TimeSpan _cacheDuration = TimeSpan.FromSeconds(30);\n    \n    public async Task<HealthCheckResult> CheckHealthAsync(\n        HealthCheckContext context,\n        CancellationToken cancellationToken)\n    {\n        return await _cache.GetOrCreateAsync(\n            $"health_{context.Registration.Name}",\n            async entry =>\n            {\n                entry.AbsoluteExpirationRelativeToNow = _cacheDuration;\n                return await PerformActualHealthCheckAsync();\n            });\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Health Check Timeouts"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Increase timeout values"}),"\n",(0,s.jsx)(n.li,{children:"Add circuit breakers"}),"\n",(0,s.jsx)(n.li,{children:"Implement caching"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"False Positives"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Adjust failure thresholds"}),"\n",(0,s.jsx)(n.li,{children:"Implement retry logic"}),"\n",(0,s.jsx)(n.li,{children:"Use degraded status appropriately"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Performance Impact"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Cache health check results"}),"\n",(0,s.jsx)(n.li,{children:"Reduce check frequency"}),"\n",(0,s.jsx)(n.li,{children:"Use parallel checks carefully"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"debugging-health-checks",children:"Debugging Health Checks"}),"\n",(0,s.jsx)(n.p,{children:"Enable detailed logging:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "Logging": {\n    "LogLevel": {\n      "Microsoft.Extensions.Diagnostics.HealthChecks": "Debug",\n      "ConduitLLM.HealthChecks": "Debug"\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Appropriate Timeouts"}),": Set realistic timeouts for each check"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Failure Thresholds"}),": Use multiple failures before marking unhealthy"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Graceful Degradation"}),': Use "Degraded" status for partial failures']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Resource Limits"}),": Prevent health checks from consuming excessive resources"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Security"}),": Don't expose sensitive data in health check responses"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Monitoring"}),": Alert on health check failures"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/Conduit/docs/monitoring/metrics-monitoring",children:"Metrics Monitoring"})," - Prometheus metrics setup"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/Conduit/docs/monitoring/production-deployment",children:"Production Deployment"})," - Deploy with health checks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/Conduit/docs/troubleshooting/common-issues",children:"Troubleshooting Guide"})," - Common health check issues"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>r});var i=t(6540);const s={},a=i.createContext(s);function c(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);