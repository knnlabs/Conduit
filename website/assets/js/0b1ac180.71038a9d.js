"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5863],{8453:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>o});var r=n(6540);const t={},s=r.createContext(t);function l(e){const i=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(s.Provider,{value:i},e.children)}},9259:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"architecture/overview","title":"Architecture Overview","description":"High-level overview of Conduit\'s architecture","source":"@site/docs/architecture/overview.md","sourceDirName":"architecture","slug":"/architecture/overview","permalink":"/Conduit/docs/architecture/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/knnlabs/Conduit/tree/main/website/docs/architecture/overview.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Architecture Overview","description":"High-level overview of Conduit\'s architecture"},"sidebar":"docsSidebar","previous":{"title":"Audio API Reference","permalink":"/Conduit/docs/api-reference/audio"},"next":{"title":"Components","permalink":"/Conduit/docs/architecture/components"}}');var t=n(4848),s=n(8453);const l={sidebar_position:1,title:"Architecture Overview",description:"High-level overview of Conduit's architecture"},o="Architecture Overview",c={},d=[{value:"System Architecture",id:"system-architecture",level:2},{value:"Key Components",id:"key-components",level:2},{value:"API Gateway (ConduitLLM.Http)",id:"api-gateway-conduitllmhttp",level:3},{value:"Core Services (ConduitLLM.Core)",id:"core-services-conduitllmcore",level:3},{value:"Provider Clients (ConduitLLM.Providers)",id:"provider-clients-conduitllmproviders",level:3},{value:"Configuration (ConduitLLM.Configuration)",id:"configuration-conduitllmconfiguration",level:3},{value:"Web UI (ConduitLLM.WebUI)",id:"web-ui-conduitllmwebui",level:3},{value:"Cache Service",id:"cache-service",level:3},{value:"Data Flow",id:"data-flow",level:2},{value:"Core Design Principles",id:"core-design-principles",level:2},{value:"Abstraction and Standardization",id:"abstraction-and-standardization",level:3},{value:"Modularity and Extensibility",id:"modularity-and-extensibility",level:3},{value:"Resilience and Reliability",id:"resilience-and-reliability",level:3},{value:"Security",id:"security",level:3},{value:"Technology Stack",id:"technology-stack",level:2},{value:"Deployment Architecture",id:"deployment-architecture",level:2},{value:"Single-Server Deployment",id:"single-server-deployment",level:3},{value:"Microservices Deployment",id:"microservices-deployment",level:3},{value:"Next Steps",id:"next-steps",level:2}];function a(e){const i={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"architecture-overview",children:"Architecture Overview"})}),"\n",(0,t.jsx)(i.p,{children:"Conduit is built with a modern, modular architecture that prioritizes maintainability, extensibility, and performance. This document provides a high-level overview of the system's architecture."}),"\n",(0,t.jsx)(i.h2,{id:"system-architecture",children:"System Architecture"}),"\n",(0,t.jsx)(i.mermaid,{value:'flowchart TB\n    Client["Client Applications"]\n    WebUI["Web UI"]\n    API["API Gateway<br>(ConduitLLM.Http)"]\n    Core["Core Services<br>(ConduitLLM.Core)"]\n    Providers["Provider Clients<br>(ConduitLLM.Providers)"]\n    Config["Configuration<br>(ConduitLLM.Configuration)"]\n    Cache["Cache Service"]\n    DB[(Database)]\n    LLMs["LLM Providers<br>(OpenAI, Anthropic, etc.)"]\n    \n    Client --\x3e API\n    WebUI --\x3e API\n    WebUI --\x3e Config\n    \n    API --\x3e Core\n    API --\x3e Config\n    \n    Core --\x3e Providers\n    Core --\x3e Config\n    Core --\x3e Cache\n    \n    Providers --\x3e LLMs\n    \n    Config --\x3e DB\n    Cache -.-> DB'}),"\n",(0,t.jsx)(i.h2,{id:"key-components",children:"Key Components"}),"\n",(0,t.jsx)(i.h3,{id:"api-gateway-conduitllmhttp",children:"API Gateway (ConduitLLM.Http)"}),"\n",(0,t.jsx)(i.p,{children:"The API Gateway serves as the entry point for all client requests. It handles:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Authentication and authorization"}),"\n",(0,t.jsx)(i.li,{children:"Request validation"}),"\n",(0,t.jsx)(i.li,{children:"Rate limiting"}),"\n",(0,t.jsx)(i.li,{children:"Request logging"}),"\n",(0,t.jsx)(i.li,{children:"Response formatting"}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"core-services-conduitllmcore",children:"Core Services (ConduitLLM.Core)"}),"\n",(0,t.jsx)(i.p,{children:"The Core Services module contains the core business logic, including:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Request routing"}),"\n",(0,t.jsx)(i.li,{children:"Context management"}),"\n",(0,t.jsx)(i.li,{children:"Token counting"}),"\n",(0,t.jsx)(i.li,{children:"Cost calculation"}),"\n",(0,t.jsx)(i.li,{children:"Router configuration"}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"provider-clients-conduitllmproviders",children:"Provider Clients (ConduitLLM.Providers)"}),"\n",(0,t.jsx)(i.p,{children:"The Provider Clients module handles communication with various LLM providers:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Provider-specific API clients"}),"\n",(0,t.jsx)(i.li,{children:"Request/response mapping"}),"\n",(0,t.jsx)(i.li,{children:"Error handling and retries"}),"\n",(0,t.jsx)(i.li,{children:"Model capability detection"}),"\n",(0,t.jsx)(i.li,{children:"Token utilization tracking"}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"configuration-conduitllmconfiguration",children:"Configuration (ConduitLLM.Configuration)"}),"\n",(0,t.jsx)(i.p,{children:"The Configuration module manages all system settings and data storage:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Model mappings"}),"\n",(0,t.jsx)(i.li,{children:"Provider credentials"}),"\n",(0,t.jsx)(i.li,{children:"Router settings"}),"\n",(0,t.jsx)(i.li,{children:"Virtual keys"}),"\n",(0,t.jsx)(i.li,{children:"Request logs"}),"\n",(0,t.jsx)(i.li,{children:"Usage statistics"}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"web-ui-conduitllmwebui",children:"Web UI (ConduitLLM.WebUI)"}),"\n",(0,t.jsx)(i.p,{children:"The Web UI provides a user-friendly interface for:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"System configuration"}),"\n",(0,t.jsx)(i.li,{children:"Virtual key management"}),"\n",(0,t.jsx)(i.li,{children:"Usage monitoring"}),"\n",(0,t.jsx)(i.li,{children:"Cost tracking"}),"\n",(0,t.jsx)(i.li,{children:"Request logging"}),"\n",(0,t.jsx)(i.li,{children:"Testing capabilities"}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"cache-service",children:"Cache Service"}),"\n",(0,t.jsx)(i.p,{children:"The Cache Service improves performance and reduces costs by:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Storing responses for identical requests"}),"\n",(0,t.jsx)(i.li,{children:"Supporting multiple cache providers (in-memory, Redis)"}),"\n",(0,t.jsx)(i.li,{children:"Implementing configurable TTL and cache strategies"}),"\n",(0,t.jsx)(i.li,{children:"Tracking cache performance metrics"}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"data-flow",children:"Data Flow"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Request Flow"}),":"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Client sends a request to the API Gateway"}),"\n",(0,t.jsx)(i.li,{children:"Gateway authenticates the request using a virtual key"}),"\n",(0,t.jsx)(i.li,{children:"Router selects the appropriate provider and model"}),"\n",(0,t.jsx)(i.li,{children:"Provider client communicates with the LLM service"}),"\n",(0,t.jsx)(i.li,{children:"Response is returned to the client"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Configuration Flow"}),":"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Admin updates settings via Web UI"}),"\n",(0,t.jsx)(i.li,{children:"Configuration is stored in the database"}),"\n",(0,t.jsx)(i.li,{children:"Changes are applied immediately through in-memory cache"}),"\n",(0,t.jsx)(i.li,{children:"Components read configuration as needed"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Monitoring Flow"}),":"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"All requests are logged to the database"}),"\n",(0,t.jsx)(i.li,{children:"Usage metrics are calculated and stored"}),"\n",(0,t.jsx)(i.li,{children:"Cost data is aggregated for reporting"}),"\n",(0,t.jsx)(i.li,{children:"Health checks monitor provider availability"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"core-design-principles",children:"Core Design Principles"}),"\n",(0,t.jsx)(i.h3,{id:"abstraction-and-standardization",children:"Abstraction and Standardization"}),"\n",(0,t.jsx)(i.p,{children:"Conduit abstracts the differences between LLM providers, presenting a unified API to client applications. This abstraction allows for:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Provider independence"}),"\n",(0,t.jsx)(i.li,{children:"Consistent interface"}),"\n",(0,t.jsx)(i.li,{children:"Simplified client development"}),"\n",(0,t.jsx)(i.li,{children:"Enhanced flexibility"}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"modularity-and-extensibility",children:"Modularity and Extensibility"}),"\n",(0,t.jsx)(i.p,{children:"The system is designed with a modular architecture that enables:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Easy addition of new providers"}),"\n",(0,t.jsx)(i.li,{children:"Customization of routing strategies"}),"\n",(0,t.jsx)(i.li,{children:"Extensibility through plug-in mechanisms"}),"\n",(0,t.jsx)(i.li,{children:"Clean separation of concerns"}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"resilience-and-reliability",children:"Resilience and Reliability"}),"\n",(0,t.jsx)(i.p,{children:"Reliability features include:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Fallback mechanisms for provider failures"}),"\n",(0,t.jsx)(i.li,{children:"Circuit breakers to prevent cascading failures"}),"\n",(0,t.jsx)(i.li,{children:"Comprehensive error handling"}),"\n",(0,t.jsx)(i.li,{children:"Request retries with exponential backoff"}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"security",children:"Security"}),"\n",(0,t.jsx)(i.p,{children:"Security is a primary concern, implemented through:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Virtual key authentication"}),"\n",(0,t.jsx)(i.li,{children:"Fine-grained permission control"}),"\n",(0,t.jsx)(i.li,{children:"Secure credential storage"}),"\n",(0,t.jsx)(i.li,{children:"Rate limiting and abuse prevention"}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"technology-stack",children:"Technology Stack"}),"\n",(0,t.jsx)(i.p,{children:"Conduit is built using modern .NET technologies:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:".NET 8"}),": Core runtime and framework"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"ASP.NET Core"}),": Web API and UI framework"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Entity Framework Core"}),": Data access and ORM"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Redis"})," (optional): Distributed caching"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"SQLite/PostgreSQL"}),": Data storage"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"deployment-architecture",children:"Deployment Architecture"}),"\n",(0,t.jsx)(i.p,{children:"Conduit can be deployed in various configurations:"}),"\n",(0,t.jsx)(i.h3,{id:"single-server-deployment",children:"Single-Server Deployment"}),"\n",(0,t.jsx)(i.mermaid,{value:'flowchart LR\n    Client["Client Applications"]\n    Conduit["Conduit (All Components)"]\n    DB[(SQLite)]\n    LLMs["LLM Providers"]\n    \n    Client --\x3e Conduit\n    Conduit --\x3e DB\n    Conduit --\x3e LLMs'}),"\n",(0,t.jsx)(i.h3,{id:"microservices-deployment",children:"Microservices Deployment"}),"\n",(0,t.jsx)(i.mermaid,{value:'flowchart LR\n    Client["Client Applications"]\n    API["API Gateway"]\n    WebUI["Web UI"]\n    Core["Core Services"]\n    Providers["Provider Services"]\n    Config["Configuration Service"]\n    Cache["Cache Service"]\n    DB[(Database)]\n    Redis[(Redis)]\n    LLMs["LLM Providers"]\n    \n    Client --\x3e API\n    Client --\x3e WebUI\n    WebUI --\x3e Config\n    API --\x3e Core\n    Core --\x3e Providers\n    Core --\x3e Config\n    Core --\x3e Cache\n    Providers --\x3e LLMs\n    Config --\x3e DB\n    Cache --\x3e Redis'}),"\n",(0,t.jsx)(i.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"components",children:"Components"}),": Detailed information about each component"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"repository-pattern",children:"Repository Pattern"}),": How data access is implemented"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"../features/virtual-keys",children:"Virtual Keys"}),": Authentication and authorization"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"../features/model-routing",children:"Model Routing"}),": Request routing mechanisms"]}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);