# Development docker-compose with volume mounts for hot reloading
# Usage: ./scripts/start-dev.sh
# Features: User ID mapping, Swagger UI enabled, permission-free development

services:
  api:
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      # Batch Cache Invalidation configuration (development settings)
      CacheInvalidation__BatchingEnabled: "true"
      CacheInvalidation__BatchWindow: "00:00:00.050"  # 50ms - Faster for development
      CacheInvalidation__MaxBatchSize: "50"   # Smaller batches for easier debugging
      CacheInvalidation__EnableCoalescing: "true"
      # Health monitoring configuration - API endpoint checks
      HealthMonitoring__ApiEndpoints__0__Name: AdminAPI
      HealthMonitoring__ApiEndpoints__0__Url: http://admin:8080/health
      HealthMonitoring__ApiEndpoints__0__TimeoutMs: 5000
      HealthMonitoring__ApiEndpoints__0__WarningThresholdMs: 1000
      # MinIO S3 configuration (optional - only used when ENABLE_MINIO=true)
      CONDUIT_MEDIA_STORAGE_TYPE: "${CONDUIT_MEDIA_STORAGE_TYPE:-InMemory}"
      CONDUIT_S3_ENDPOINT: "${CONDUIT_S3_ENDPOINT:-http://minio:9000}"
      CONDUIT_S3_ACCESS_KEY: "${CONDUIT_S3_ACCESS_KEY:-minioadmin}"
      CONDUIT_S3_SECRET_KEY: "${CONDUIT_S3_SECRET_KEY:-minioadmin123}"
      CONDUIT_S3_BUCKET_NAME: "${CONDUIT_S3_BUCKET_NAME:-conduit-media}"
      CONDUIT_S3_REGION: "${CONDUIT_S3_REGION:-us-east-1}"

  admin:
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      # Batch Cache Invalidation configuration (development settings)
      CacheInvalidation__BatchingEnabled: "true"
      CacheInvalidation__BatchWindow: "00:00:00.050"  # 50ms - Faster for development
      CacheInvalidation__MaxBatchSize: "50"   # Smaller batches for easier debugging
      CacheInvalidation__EnableCoalescing: "true"
      # MinIO S3 configuration (optional - only used when ENABLE_MINIO=true)
      CONDUIT_MEDIA_STORAGE_TYPE: "${CONDUIT_MEDIA_STORAGE_TYPE:-InMemory}"
      CONDUIT_S3_ENDPOINT: "${CONDUIT_S3_ENDPOINT:-http://minio:9000}"
      CONDUIT_S3_ACCESS_KEY: "${CONDUIT_S3_ACCESS_KEY:-minioadmin}"
      CONDUIT_S3_SECRET_KEY: "${CONDUIT_S3_SECRET_KEY:-minioadmin123}"
      CONDUIT_S3_BUCKET_NAME: "${CONDUIT_S3_BUCKET_NAME:-conduit-media}"
      CONDUIT_S3_REGION: "${CONDUIT_S3_REGION:-us-east-1}"

  webui:
    # Use Node 22 to match host environment
    image: node:22-alpine
    # Start as root to fix volume ownership, then switch to user
    user: root
    volumes:
      # Mount everything - no anonymous volumes so host can access node_modules
      - ./ConduitLLM.WebUI:/app/ConduitLLM.WebUI
      - ./SDKs:/app/SDKs
    environment:
      # Next.js development settings
      NODE_ENV: development
      NEXT_TELEMETRY_DISABLED: 1
      WATCHPACK_POLLING: "true"
      CHOKIDAR_USEPOLLING: "true"
      CHOKIDAR_INTERVAL: 1000
      FAST_REFRESH: "true"
      PORT: 3000
      # Backend service URLs
      CONDUIT_API_TO_API_BACKEND_AUTH_KEY: alpha
      CONDUIT_API_BASE_URL: http://api:8080
      CONDUIT_ADMIN_API_BASE_URL: http://admin:8080
      CONDUIT_API_EXTERNAL_URL: http://localhost:5000
      CONDUIT_ADMIN_API_EXTERNAL_URL: http://localhost:5002
      # Clerk authentication (using the test keys from docker-compose.yml)
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: "pk_test_cHJlY2lzZS1yaW5ndGFpbC0zMy5jbGVyay5hY2NvdW50cy5kZXYk"
      CLERK_SECRET_KEY: "sk_test_oOI6FRt1EhRGaCVUc1zJVyWCNyqf3w1DSJnLZlxEQK"
      # Development authentication bypass
      DISABLE_CLERK_AUTH: "true"
    working_dir: /app/ConduitLLM.WebUI
    # Smarter startup that handles both fresh installs and fast restarts
    command: |
      sh -c "
        echo 'Installing su-exec for user switching...'
        apk add --no-cache su-exec
        
        echo 'Fixing directory ownership...'
        # Fix ownership of all mounted directories
        chown -R ${DOCKER_USER_ID:-1000}:${DOCKER_GROUP_ID:-1000} /app/ConduitLLM.WebUI || true
        chown -R ${DOCKER_USER_ID:-1000}:${DOCKER_GROUP_ID:-1000} /app/SDKs || true
        
        # Check if we should skip dependency installation (fast mode)
        if [ \"\${SKIP_NPM_INSTALL:-false}\" = \"true\" ]; then
          echo 'FAST MODE: Skipping dependency installation'
        else
          # Check if node_modules exists
          if [ ! -d /app/ConduitLLM.WebUI/node_modules ] || [ \"\${FORCE_NPM_INSTALL:-false}\" = \"true\" ]; then
            echo 'Installing dependencies (this will be visible on host)...'
            su-exec ${DOCKER_USER_ID:-1000}:${DOCKER_GROUP_ID:-1000} sh -c '
              cd /app/SDKs/Node/Common && npm install && npm run build
              cd /app/SDKs/Node/Admin && npm install && npm run build
              cd /app/SDKs/Node/Core && npm install && npm run build
              cd /app/ConduitLLM.WebUI && npm install
            '
          else
            echo 'Dependencies already installed, checking for updates...'
            su-exec ${DOCKER_USER_ID:-1000}:${DOCKER_GROUP_ID:-1000} sh -c '
              cd /app/SDKs/Node/Common && npm install
              cd /app/SDKs/Node/Admin && npm install
              cd /app/SDKs/Node/Core && npm install
              cd /app/ConduitLLM.WebUI && npm install
            '
          fi
        fi
        
        echo 'Starting development server...'
        su-exec ${DOCKER_USER_ID:-1000}:${DOCKER_GROUP_ID:-1000} sh -c 'cd /app/ConduitLLM.WebUI && npm run dev'
      "
    ports:
      - "3000:3000"
    depends_on:
      admin:
        condition: service_healthy
      api:
        condition: service_healthy

  minio:
    image: minio/minio:latest
    container_name: conduit-minio-dev
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console port
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    command: server /data --console-address ":9001"
    volumes:
      - minio_dev_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  minio_dev_data: