// <auto-generated />
using System;
using ConduitLLM.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConduitLLM.Configuration.Migrations
{
    [DbContext(typeof(ConduitDbContext))]
    partial class ConduitDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.AsyncTask", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRetryable")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LeaseExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LeasedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("MaxRetries")
                        .HasColumnType("integer");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NextRetryAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.Property<int>("Progress")
                        .HasColumnType("integer");

                    b.Property<string>("ProgressMessage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("integer");

                    b.Property<int>("VirtualKeyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsArchived");

                    b.HasIndex("State");

                    b.HasIndex("Type");

                    b.HasIndex("VirtualKeyId");

                    b.HasIndex("IsArchived", "ArchivedAt")
                        .HasDatabaseName("IX_AsyncTasks_Cleanup");

                    b.HasIndex("VirtualKeyId", "CreatedAt");

                    b.HasIndex("IsArchived", "CompletedAt", "State")
                        .HasDatabaseName("IX_AsyncTasks_Archival");

                    b.ToTable("AsyncTasks");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.AudioCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalFactors")
                        .HasColumnType("text");

                    b.Property<decimal>("CostPerUnit")
                        .HasColumnType("decimal(10, 6)");

                    b.Property<string>("CostUnit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MinimumCharge")
                        .HasColumnType("decimal(10, 6)");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EffectiveFrom", "EffectiveTo");

                    b.HasIndex("ProviderId", "OperationType", "Model", "IsActive");

                    b.ToTable("AudioCosts");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.AudioProviderConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomSettings")
                        .HasColumnType("text");

                    b.Property<string>("DefaultRealtimeModel")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DefaultTTSModel")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DefaultTTSVoice")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DefaultTranscriptionModel")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.Property<bool>("RealtimeEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("RealtimeEndpoint")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("RoutingPriority")
                        .HasColumnType("integer");

                    b.Property<bool>("TextToSpeechEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("TranscriptionEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId")
                        .IsUnique();

                    b.ToTable("AudioProviderConfigs");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.AudioUsageLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("CharacterCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(10, 6)");

                    b.Property<double?>("DurationSeconds")
                        .HasColumnType("double precision");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("InputTokens")
                        .HasColumnType("integer");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("OutputTokens")
                        .HasColumnType("integer");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.Property<string>("RequestId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("VirtualKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Voice")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("VirtualKey");

                    b.HasIndex("ProviderId", "OperationType");

                    b.ToTable("AudioUsageLogs");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.BatchOperationHistory", b =>
                {
                    b.Property<string>("OperationId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("CanResume")
                        .HasColumnType("boolean");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("text");

                    b.Property<string>("CheckpointData")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("DurationSeconds")
                        .HasColumnType("double precision");

                    b.Property<string>("ErrorDetails")
                        .HasColumnType("text");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<int>("FailedCount")
                        .HasColumnType("integer");

                    b.Property<double?>("ItemsPerSecond")
                        .HasColumnType("double precision");

                    b.Property<int?>("LastProcessedIndex")
                        .HasColumnType("integer");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ResultSummary")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("SuccessCount")
                        .HasColumnType("integer");

                    b.Property<int>("TotalItems")
                        .HasColumnType("integer");

                    b.Property<int>("VirtualKeyId")
                        .HasColumnType("integer");

                    b.HasKey("OperationId");

                    b.HasIndex("OperationType");

                    b.HasIndex("StartedAt");

                    b.HasIndex("Status");

                    b.HasIndex("VirtualKeyId");

                    b.HasIndex("VirtualKeyId", "StartedAt");

                    b.HasIndex("OperationType", "Status", "StartedAt");

                    b.ToTable("BatchOperationHistory");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.CacheConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("CompressionThresholdBytes")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("DefaultTtlSeconds")
                        .HasColumnType("integer");

                    b.Property<bool>("EnableCompression")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDetailedStats")
                        .HasColumnType("boolean");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("EvictionPolicy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ExtendedConfig")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<long?>("MaxEntries")
                        .HasColumnType("bigint");

                    b.Property<long?>("MaxMemoryBytes")
                        .HasColumnType("bigint");

                    b.Property<int?>("MaxTtlSeconds")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("UseDistributedCache")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseMemoryCache")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("Region")
                        .IsUnique()
                        .HasFilter("\"IsActive\" = true");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("Region", "IsActive");

                    b.ToTable("CacheConfigurations");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.CacheConfigurationAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ChangeSource")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("NewConfigJson")
                        .HasColumnType("text");

                    b.Property<string>("OldConfigJson")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ChangedAt");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("Region");

                    b.HasIndex("Region", "ChangedAt");

                    b.ToTable("CacheConfigurationAudits");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.FallbackConfigurationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PrimaryModelDeploymentId")
                        .HasColumnType("uuid");

                    b.Property<int>("RouterConfigId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryModelDeploymentId");

                    b.HasIndex("RouterConfigId");

                    b.ToTable("FallbackConfigurations");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.FallbackModelMappingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FallbackConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModelDeploymentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("SourceModelName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FallbackConfigurationId", "ModelDeploymentId")
                        .IsUnique();

                    b.HasIndex("FallbackConfigurationId", "Order")
                        .IsUnique();

                    b.ToTable("FallbackModelMappings");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.GlobalSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("GlobalSettings");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.IpFilterEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FilterType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("IpAddressOrCidr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IsEnabled");

                    b.HasIndex("FilterType", "IpAddressOrCidr");

                    b.ToTable("IpFilters");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.MediaLifecycleRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GeneratedByModel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GenerationPrompt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<string>("StorageKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VirtualKeyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("StorageKey")
                        .IsUnique();

                    b.HasIndex("VirtualKeyId");

                    b.HasIndex("ExpiresAt", "IsDeleted");

                    b.HasIndex("VirtualKeyId", "IsDeleted");

                    b.ToTable("MediaLifecycleRecords");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.MediaRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessCount")
                        .HasColumnType("integer");

                    b.Property<string>("ContentHash")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("ContentType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Prompt")
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PublicUrl")
                        .HasColumnType("text");

                    b.Property<long?>("SizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("StorageKey")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("StorageUrl")
                        .HasColumnType("text");

                    b.Property<int>("VirtualKeyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("StorageKey")
                        .IsUnique();

                    b.HasIndex("VirtualKeyId");

                    b.HasIndex("VirtualKeyId", "CreatedAt");

                    b.ToTable("MediaRecords");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("ModelCapabilitiesId")
                        .HasColumnType("integer");

                    b.Property<string>("ModelCardUrl")
                        .HasColumnType("text");

                    b.Property<string>("ModelParameters")
                        .HasColumnType("text")
                        .HasColumnName("Parameters");

                    b.Property<int>("ModelSeriesId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ModelCapabilitiesId")
                        .HasDatabaseName("IX_Model_ModelCapabilitiesId");

                    b.HasIndex("ModelSeriesId")
                        .HasDatabaseName("IX_Model_ModelSeriesId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.ModelAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_ModelAuthor_Name_Unique");

                    b.ToTable("ModelAuthors");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.ModelCapabilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MaxTokens")
                        .HasColumnType("integer");

                    b.Property<int>("MinTokens")
                        .HasColumnType("integer");

                    b.Property<string>("SupportedFormats")
                        .HasColumnType("text");

                    b.Property<string>("SupportedLanguages")
                        .HasColumnType("text");

                    b.Property<string>("SupportedVoices")
                        .HasColumnType("text");

                    b.Property<bool>("SupportsAudioTranscription")
                        .HasColumnType("boolean");

                    b.Property<bool>("SupportsChat")
                        .HasColumnType("boolean");

                    b.Property<bool>("SupportsEmbeddings")
                        .HasColumnType("boolean");

                    b.Property<bool>("SupportsFunctionCalling")
                        .HasColumnType("boolean");

                    b.Property<bool>("SupportsImageGeneration")
                        .HasColumnType("boolean");

                    b.Property<bool>("SupportsRealtimeAudio")
                        .HasColumnType("boolean");

                    b.Property<bool>("SupportsStreaming")
                        .HasColumnType("boolean");

                    b.Property<bool>("SupportsTextToSpeech")
                        .HasColumnType("boolean");

                    b.Property<bool>("SupportsVideoGeneration")
                        .HasColumnType("boolean");

                    b.Property<bool>("SupportsVision")
                        .HasColumnType("boolean");

                    b.Property<int>("TokenizerType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SupportsChat")
                        .HasDatabaseName("IX_ModelCapabilities_SupportsChat")
                        .HasFilter("\"SupportsChat\" = true");

                    b.HasIndex("SupportsFunctionCalling")
                        .HasDatabaseName("IX_ModelCapabilities_SupportsFunctionCalling")
                        .HasFilter("\"SupportsFunctionCalling\" = true");

                    b.HasIndex("SupportsImageGeneration")
                        .HasDatabaseName("IX_ModelCapabilities_SupportsImageGeneration")
                        .HasFilter("\"SupportsImageGeneration\" = true");

                    b.HasIndex("SupportsVideoGeneration")
                        .HasDatabaseName("IX_ModelCapabilities_SupportsVideoGeneration")
                        .HasFilter("\"SupportsVideoGeneration\" = true");

                    b.HasIndex("SupportsVision")
                        .HasDatabaseName("IX_ModelCapabilities_SupportsVision")
                        .HasFilter("\"SupportsVision\" = true");

                    b.HasIndex("SupportsChat", "SupportsFunctionCalling", "SupportsStreaming")
                        .HasDatabaseName("IX_ModelCapabilities_Chat_Function_Streaming");

                    b.ToTable("ModelCapabilities");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.ModelCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AudioCostPerKCharacters")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("AudioCostPerMinute")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("AudioInputCostPerMinute")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("AudioOutputCostPerMinute")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("BatchProcessingMultiplier")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("CachedInputCostPerMillionTokens")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal?>("CachedInputWriteCostPerMillionTokens")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<string>("CostName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("CostPerInferenceStep")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal?>("CostPerSearchUnit")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DefaultInferenceSteps")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("EmbeddingCostPerMillionTokens")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("ImageCostPerImage")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("ImageQualityMultipliers")
                        .HasColumnType("text");

                    b.Property<string>("ImageResolutionMultipliers")
                        .HasColumnType("text");

                    b.Property<decimal>("InputCostPerMillionTokens")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ModelType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("OutputCostPerMillionTokens")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<string>("PricingConfiguration")
                        .HasColumnType("text");

                    b.Property<int>("PricingModel")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<bool>("SupportsBatchProcessing")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("VideoCostPerSecond")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("VideoResolutionMultipliers")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CostName");

                    b.ToTable("ModelCosts");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.ModelCostMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("ModelCostId")
                        .HasColumnType("integer");

                    b.Property<int>("ModelProviderMappingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ModelProviderMappingId");

                    b.HasIndex("ModelCostId", "ModelProviderMappingId")
                        .IsUnique();

                    b.ToTable("ModelCostMappings");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.ModelDeploymentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeploymentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HealthCheckEnabled")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("InputTokenCostPer1K")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHealthy")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("OutputTokenCostPer1K")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.Property<int?>("RPM")
                        .HasColumnType("integer");

                    b.Property<int>("RouterConfigId")
                        .HasColumnType("integer");

                    b.Property<bool>("SupportsEmbeddings")
                        .HasColumnType("boolean");

                    b.Property<int?>("TPM")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IsEnabled");

                    b.HasIndex("IsHealthy");

                    b.HasIndex("ModelName");

                    b.HasIndex("ProviderId");

                    b.HasIndex("RouterConfigId");

                    b.ToTable("ModelDeployments");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.ModelIdentifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<int>("ModelId")
                        .HasColumnType("integer");

                    b.Property<string>("Provider")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Identifier")
                        .HasDatabaseName("IX_ModelIdentifier_Identifier");

                    b.HasIndex("IsPrimary")
                        .HasDatabaseName("IX_ModelIdentifier_IsPrimary")
                        .HasFilter("\"IsPrimary\" = true");

                    b.HasIndex("ModelId")
                        .HasDatabaseName("IX_ModelIdentifier_ModelId");

                    b.HasIndex("Provider", "Identifier")
                        .IsUnique()
                        .HasDatabaseName("IX_ModelIdentifier_Provider_Identifier_Unique");

                    b.ToTable("ModelIdentifiers");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.ModelProviderMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CapabilityOverrides")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefaultCapabilityType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<int?>("MaxContextTokensOverride")
                        .HasColumnType("integer");

                    b.Property<string>("ModelAlias")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ModelId")
                        .HasColumnType("integer");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.Property<string>("ProviderModelId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ProviderVariation")
                        .HasColumnType("text");

                    b.Property<decimal?>("QualityScore")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CapabilityOverrides")
                        .HasDatabaseName("IX_ModelProviderMapping_CapabilityOverrides")
                        .HasFilter("\"CapabilityOverrides\" IS NOT NULL");

                    b.HasIndex("ModelId")
                        .HasDatabaseName("IX_ModelProviderMapping_ModelId");

                    b.HasIndex("ModelAlias", "ProviderId")
                        .IsUnique();

                    b.HasIndex("ModelId", "QualityScore")
                        .HasDatabaseName("IX_ModelProviderMapping_ModelId_QualityScore")
                        .HasFilter("\"QualityScore\" IS NOT NULL");

                    b.HasIndex("ProviderId", "IsEnabled")
                        .HasDatabaseName("IX_ModelProviderMapping_ProviderId_IsEnabled")
                        .HasFilter("\"IsEnabled\" = true");

                    b.ToTable("ModelProviderMappings");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.ModelSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TokenizerType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("IX_ModelSeries_AuthorId");

                    b.HasIndex("TokenizerType")
                        .HasDatabaseName("IX_ModelSeries_TokenizerType");

                    b.HasIndex("AuthorId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_ModelSeries_AuthorId_Name_Unique");

                    b.ToTable("ModelSeries");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Severity")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int?>("VirtualKeyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VirtualKeyId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BaseUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ProviderType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProviderType");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.ProviderKeyCredential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiKey")
                        .HasColumnType("text");

                    b.Property<string>("BaseUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyName")
                        .HasColumnType("text");

                    b.Property<string>("Organization")
                        .HasColumnType("text");

                    b.Property<short>("ProviderAccountGroup")
                        .HasColumnType("smallint");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId")
                        .HasDatabaseName("IX_ProviderKeyCredential_ProviderId");

                    b.HasIndex("ProviderId", "ApiKey")
                        .IsUnique()
                        .HasDatabaseName("IX_ProviderKeyCredential_UniqueApiKeyPerProvider")
                        .HasFilter("\"ApiKey\" IS NOT NULL");

                    b.HasIndex("ProviderId", "IsPrimary")
                        .IsUnique()
                        .HasDatabaseName("IX_ProviderKeyCredential_OnePrimaryPerProvider")
                        .HasFilter("\"IsPrimary\" = true");

                    b.ToTable("ProviderKeyCredentials", t =>
                        {
                            t.HasCheckConstraint("CK_ProviderKeyCredential_AccountGroupRange", "\"ProviderAccountGroup\" >= 0 AND \"ProviderAccountGroup\" <= 32");

                            t.HasCheckConstraint("CK_ProviderKeyCredential_PrimaryMustBeEnabled", "\"IsPrimary\" = false OR \"IsEnabled\" = true");
                        });
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.RequestLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientIp")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(10, 6)");

                    b.Property<int>("InputTokens")
                        .HasColumnType("integer");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("OutputTokens")
                        .HasColumnType("integer");

                    b.Property<string>("RequestPath")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double>("ResponseTimeMs")
                        .HasColumnType("double precision");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("VirtualKeyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VirtualKeyId");

                    b.ToTable("RequestLogs");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.RouterConfigEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefaultRoutingStrategy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("FallbacksEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxRetries")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RetryBaseDelayMs")
                        .HasColumnType("integer");

                    b.Property<int>("RetryMaxDelayMs")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LastUpdated");

                    b.ToTable("RouterConfigEntity");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.VirtualKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AllowedModels")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<int?>("RateLimitRpd")
                        .HasColumnType("integer");

                    b.Property<int?>("RateLimitRpm")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VirtualKeyGroupId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("KeyHash")
                        .IsUnique();

                    b.HasIndex("VirtualKeyGroupId");

                    b.ToTable("VirtualKeys");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.VirtualKeyGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(19, 8)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalGroupId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("LifetimeCreditsAdded")
                        .HasColumnType("decimal(19, 8)");

                    b.Property<decimal>("LifetimeSpent")
                        .HasColumnType("decimal(19, 8)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExternalGroupId");

                    b.ToTable("VirtualKeyGroups");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.VirtualKeyGroupTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("InitiatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("InitiatedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ReferenceType")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.Property<int>("VirtualKeyGroupId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ReferenceType");

                    b.HasIndex("TransactionType");

                    b.HasIndex("VirtualKeyGroupId");

                    b.HasIndex("IsDeleted", "CreatedAt");

                    b.HasIndex("VirtualKeyGroupId", "CreatedAt");

                    b.ToTable("VirtualKeyGroupTransactions");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.VirtualKeySpendHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VirtualKeyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VirtualKeyId");

                    b.ToTable("VirtualKeySpendHistory");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.AsyncTask", b =>
                {
                    b.HasOne("ConduitLLM.Configuration.Entities.VirtualKey", "VirtualKey")
                        .WithMany()
                        .HasForeignKey("VirtualKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VirtualKey");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.AudioCost", b =>
                {
                    b.HasOne("ConduitLLM.Configuration.Entities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.AudioProviderConfig", b =>
                {
                    b.HasOne("ConduitLLM.Configuration.Entities.Provider", "Provider")
                        .WithOne()
                        .HasForeignKey("ConduitLLM.Configuration.Entities.AudioProviderConfig", "ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.AudioUsageLog", b =>
                {
                    b.HasOne("ConduitLLM.Configuration.Entities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.BatchOperationHistory", b =>
                {
                    b.HasOne("ConduitLLM.Configuration.Entities.VirtualKey", "VirtualKey")
                        .WithMany()
                        .HasForeignKey("VirtualKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VirtualKey");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.FallbackConfigurationEntity", b =>
                {
                    b.HasOne("ConduitLLM.Configuration.Entities.RouterConfigEntity", "RouterConfig")
                        .WithMany("FallbackConfigurations")
                        .HasForeignKey("RouterConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RouterConfig");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.FallbackModelMappingEntity", b =>
                {
                    b.HasOne("ConduitLLM.Configuration.Entities.FallbackConfigurationEntity", "FallbackConfiguration")
                        .WithMany("FallbackMappings")
                        .HasForeignKey("FallbackConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FallbackConfiguration");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.MediaLifecycleRecord", b =>
                {
                    b.HasOne("ConduitLLM.Configuration.Entities.VirtualKey", "VirtualKey")
                        .WithMany()
                        .HasForeignKey("VirtualKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VirtualKey");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.MediaRecord", b =>
                {
                    b.HasOne("ConduitLLM.Configuration.Entities.VirtualKey", "VirtualKey")
                        .WithMany()
                        .HasForeignKey("VirtualKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VirtualKey");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.Model", b =>
                {
                    b.HasOne("ConduitLLM.Configuration.Entities.ModelCapabilities", "Capabilities")
                        .WithMany()
                        .HasForeignKey("ModelCapabilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConduitLLM.Configuration.Entities.ModelSeries", "Series")
                        .WithMany("Models")
                        .HasForeignKey("ModelSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Capabilities");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.ModelCostMapping", b =>
                {
                    b.HasOne("ConduitLLM.Configuration.Entities.ModelCost", "ModelCost")
                        .WithMany("ModelCostMappings")
                        .HasForeignKey("ModelCostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConduitLLM.Configuration.Entities.ModelProviderMapping", "ModelProviderMapping")
                        .WithMany("ModelCostMappings")
                        .HasForeignKey("ModelProviderMappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModelCost");

                    b.Navigation("ModelProviderMapping");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.ModelDeploymentEntity", b =>
                {
                    b.HasOne("ConduitLLM.Configuration.Entities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConduitLLM.Configuration.Entities.RouterConfigEntity", "RouterConfig")
                        .WithMany("ModelDeployments")
                        .HasForeignKey("RouterConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");

                    b.Navigation("RouterConfig");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.ModelIdentifier", b =>
                {
                    b.HasOne("ConduitLLM.Configuration.Entities.Model", "Model")
                        .WithMany("Identifiers")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.ModelProviderMapping", b =>
                {
                    b.HasOne("ConduitLLM.Configuration.Entities.Model", "Model")
                        .WithMany("ProviderMappings")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConduitLLM.Configuration.Entities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.ModelSeries", b =>
                {
                    b.HasOne("ConduitLLM.Configuration.Entities.ModelAuthor", "Author")
                        .WithMany("ModelSeries")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.Notification", b =>
                {
                    b.HasOne("ConduitLLM.Configuration.Entities.VirtualKey", "VirtualKey")
                        .WithMany("Notifications")
                        .HasForeignKey("VirtualKeyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("VirtualKey");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.ProviderKeyCredential", b =>
                {
                    b.HasOne("ConduitLLM.Configuration.Entities.Provider", "Provider")
                        .WithMany("ProviderKeyCredentials")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.RequestLog", b =>
                {
                    b.HasOne("ConduitLLM.Configuration.Entities.VirtualKey", "VirtualKey")
                        .WithMany("RequestLogs")
                        .HasForeignKey("VirtualKeyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VirtualKey");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.VirtualKey", b =>
                {
                    b.HasOne("ConduitLLM.Configuration.Entities.VirtualKeyGroup", "VirtualKeyGroup")
                        .WithMany("VirtualKeys")
                        .HasForeignKey("VirtualKeyGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VirtualKeyGroup");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.VirtualKeyGroupTransaction", b =>
                {
                    b.HasOne("ConduitLLM.Configuration.Entities.VirtualKeyGroup", "VirtualKeyGroup")
                        .WithMany("Transactions")
                        .HasForeignKey("VirtualKeyGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VirtualKeyGroup");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.VirtualKeySpendHistory", b =>
                {
                    b.HasOne("ConduitLLM.Configuration.Entities.VirtualKey", "VirtualKey")
                        .WithMany("SpendHistory")
                        .HasForeignKey("VirtualKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VirtualKey");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.FallbackConfigurationEntity", b =>
                {
                    b.Navigation("FallbackMappings");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.Model", b =>
                {
                    b.Navigation("Identifiers");

                    b.Navigation("ProviderMappings");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.ModelAuthor", b =>
                {
                    b.Navigation("ModelSeries");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.ModelCost", b =>
                {
                    b.Navigation("ModelCostMappings");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.ModelProviderMapping", b =>
                {
                    b.Navigation("ModelCostMappings");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.ModelSeries", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.Provider", b =>
                {
                    b.Navigation("ProviderKeyCredentials");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.RouterConfigEntity", b =>
                {
                    b.Navigation("FallbackConfigurations");

                    b.Navigation("ModelDeployments");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.VirtualKey", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("RequestLogs");

                    b.Navigation("SpendHistory");
                });

            modelBuilder.Entity("ConduitLLM.Configuration.Entities.VirtualKeyGroup", b =>
                {
                    b.Navigation("Transactions");

                    b.Navigation("VirtualKeys");
                });
#pragma warning restore 612, 618
        }
    }
}
