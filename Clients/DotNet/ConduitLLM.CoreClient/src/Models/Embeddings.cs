using System.Text.Json.Serialization;

namespace ConduitLLM.CoreClient.Models;

/// <summary>
/// Request model for creating embeddings.
/// </summary>
public class EmbeddingRequest
{
    /// <summary>
    /// Input text to get embeddings for. Can be a string or an array of strings.
    /// </summary>
    [JsonPropertyName("input")]
    public object Input { get; set; } = null!;

    /// <summary>
    /// ID of the model to use.
    /// </summary>
    [JsonPropertyName("model")]
    public string Model { get; set; } = null!;

    /// <summary>
    /// The format to return the embeddings in. Can be either "float" or "base64".
    /// </summary>
    [JsonPropertyName("encoding_format")]
    public string? EncodingFormat { get; set; }

    /// <summary>
    /// The number of dimensions the resulting output embeddings should have.
    /// Only supported in text-embedding-3 and later models.
    /// </summary>
    [JsonPropertyName("dimensions")]
    public int? Dimensions { get; set; }

    /// <summary>
    /// A unique identifier representing your end-user.
    /// </summary>
    [JsonPropertyName("user")]
    public string? User { get; set; }
}

/// <summary>
/// Response model for embeddings.
/// </summary>
public class EmbeddingResponse
{
    /// <summary>
    /// The object type, which is always "list".
    /// </summary>
    [JsonPropertyName("object")]
    public string Object { get; set; } = "list";

    /// <summary>
    /// The list of embeddings generated by the model.
    /// </summary>
    [JsonPropertyName("data")]
    public List<EmbeddingData> Data { get; set; } = new();

    /// <summary>
    /// The name of the model used to generate the embedding.
    /// </summary>
    [JsonPropertyName("model")]
    public string Model { get; set; } = null!;

    /// <summary>
    /// The usage statistics for the request.
    /// </summary>
    [JsonPropertyName("usage")]
    public EmbeddingUsage Usage { get; set; } = null!;
}

/// <summary>
/// Represents a single embedding.
/// </summary>
public class EmbeddingData
{
    /// <summary>
    /// The object type, which is always "embedding".
    /// </summary>
    [JsonPropertyName("object")]
    public string Object { get; set; } = "embedding";

    /// <summary>
    /// The embedding vector, represented as a list of floats or a base64-encoded string.
    /// </summary>
    [JsonPropertyName("embedding")]
    public object Embedding { get; set; } = null!;

    /// <summary>
    /// The index of the embedding in the list of embeddings.
    /// </summary>
    [JsonPropertyName("index")]
    public int Index { get; set; }
}

/// <summary>
/// Usage statistics for embeddings.
/// </summary>
public class EmbeddingUsage
{
    /// <summary>
    /// The number of tokens used by the prompt.
    /// </summary>
    [JsonPropertyName("prompt_tokens")]
    public int PromptTokens { get; set; }

    /// <summary>
    /// The total number of tokens used by the request.
    /// </summary>
    [JsonPropertyName("total_tokens")]
    public int TotalTokens { get; set; }
}

/// <summary>
/// Common embedding models.
/// </summary>
public static class EmbeddingModels
{
    /// <summary>
    /// OpenAI's text-embedding-ada-002 model.
    /// </summary>
    public const string TextEmbeddingAda002 = "text-embedding-ada-002";

    /// <summary>
    /// OpenAI's text-embedding-3-small model.
    /// </summary>
    public const string TextEmbedding3Small = "text-embedding-3-small";

    /// <summary>
    /// OpenAI's text-embedding-3-large model.
    /// </summary>
    public const string TextEmbedding3Large = "text-embedding-3-large";

    /// <summary>
    /// Default embedding model.
    /// </summary>
    public const string Default = TextEmbedding3Small;
}

/// <summary>
/// Encoding formats for embeddings.
/// </summary>
public static class EmbeddingEncodingFormats
{
    /// <summary>
    /// Return embeddings as an array of floats (default).
    /// </summary>
    public const string Float = "float";

    /// <summary>
    /// Return embeddings as a base64-encoded string.
    /// </summary>
    public const string Base64 = "base64";
}