{"version":3,"sources":["../src/index.ts","../src/types/capabilities.ts","../src/types/providerType.ts","../src/types/models.ts","../src/types/api.ts","../src/constants.ts","../src/errors/index.ts","../src/utils/validation.ts","../src/utils/datetime.ts","../src/utils/formatting.ts","../src/utils/index.ts","../src/http/types.ts","../src/http/parser.ts","../src/http/constants.ts","../src/signalr/types.ts","../src/signalr/BaseSignalRConnection.ts","../src/client/types.ts","../src/client/BaseApiClient.ts"],"sourcesContent":["/**\n * @knn_labs/conduit-common - Shared types for Conduit SDK clients\n */\n\n// Base types\nexport * from './types/base';\n\n// Pagination types\nexport * from './types/pagination';\n\n// Capability types\nexport * from './types/capabilities';\n\n// Provider types\nexport * from './types/providerType';\n\n// Model types\nexport * from './types/models';\n\n// API types\nexport * from './types/api';\n\n// Constants\nexport * from './constants';\n\n// Utilities\nexport * from './utils';\n\n// Error types and utilities\nexport * from './errors';\n\n// HTTP types and utilities\nexport * from './http';\n\n// SignalR types and base classes\nexport * from './signalr';\n\n// Client configuration types\nexport * from './client';\n\n// Explicit exports for types that might get tree-shaken\nexport type { Logger, CacheProvider, RequestConfigInfo, ResponseInfo } from './client/types';\nexport { HttpError } from './client/types';\nexport type { SignalRConfig } from './client/signalr-config';\nexport type { SignalRConnectionOptions } from './signalr/types';","/**\n * Model capability definitions shared across Conduit SDK clients\n */\n\n/**\n * Core model capabilities supported by Conduit\n */\nexport enum ModelCapability {\n  CHAT = 'chat',\n  VISION = 'vision',\n  IMAGE_GENERATION = 'image-generation',\n  IMAGE_EDIT = 'image-edit',\n  IMAGE_VARIATION = 'image-variation',\n  AUDIO_TRANSCRIPTION = 'audio-transcription',\n  TEXT_TO_SPEECH = 'text-to-speech',\n  REALTIME_AUDIO = 'realtime-audio',\n  EMBEDDINGS = 'embeddings',\n  VIDEO_GENERATION = 'video-generation',\n}\n\n/**\n * Model capability metadata\n */\nexport interface ModelCapabilityInfo {\n  id: ModelCapability;\n  displayName: string;\n  description?: string;\n  category: 'text' | 'vision' | 'audio' | 'video';\n}\n\n/**\n * Model capabilities definition for a specific model\n */\nexport interface ModelCapabilities {\n  modelId: string;\n  capabilities: ModelCapability[];\n  constraints?: ModelConstraints;\n}\n\n/**\n * Model-specific constraints\n */\nexport interface ModelConstraints {\n  maxTokens?: number;\n  maxImages?: number;\n  supportedImageSizes?: string[];\n  supportedImageFormats?: string[];\n  supportedAudioFormats?: string[];\n  supportedVideoSizes?: string[];\n  supportedLanguages?: string[];\n  supportedVoices?: string[];\n  maxDuration?: number;\n}\n\n/**\n * Get user-friendly display name for a capability\n */\nexport function getCapabilityDisplayName(capability: ModelCapability): string {\n  switch (capability) {\n    case ModelCapability.CHAT:\n      return 'Chat Completion';\n    case ModelCapability.VISION:\n      return 'Vision (Image Understanding)';\n    case ModelCapability.IMAGE_GENERATION:\n      return 'Image Generation';\n    case ModelCapability.IMAGE_EDIT:\n      return 'Image Editing';\n    case ModelCapability.IMAGE_VARIATION:\n      return 'Image Variation';\n    case ModelCapability.AUDIO_TRANSCRIPTION:\n      return 'Audio Transcription';\n    case ModelCapability.TEXT_TO_SPEECH:\n      return 'Text-to-Speech';\n    case ModelCapability.REALTIME_AUDIO:\n      return 'Realtime Audio';\n    case ModelCapability.EMBEDDINGS:\n      return 'Embeddings';\n    case ModelCapability.VIDEO_GENERATION:\n      return 'Video Generation';\n    default:\n      return capability;\n  }\n}\n\n/**\n * Get capability category\n */\nexport function getCapabilityCategory(capability: ModelCapability): 'text' | 'vision' | 'audio' | 'video' {\n  switch (capability) {\n    case ModelCapability.CHAT:\n    case ModelCapability.EMBEDDINGS:\n      return 'text';\n    case ModelCapability.VISION:\n    case ModelCapability.IMAGE_GENERATION:\n    case ModelCapability.IMAGE_EDIT:\n    case ModelCapability.IMAGE_VARIATION:\n      return 'vision';\n    case ModelCapability.AUDIO_TRANSCRIPTION:\n    case ModelCapability.TEXT_TO_SPEECH:\n    case ModelCapability.REALTIME_AUDIO:\n      return 'audio';\n    case ModelCapability.VIDEO_GENERATION:\n      return 'video';\n    default:\n      return 'text';\n  }\n}","/**\n * Strongly-typed enumeration of supported LLM providers.\n * These numeric values must match the C# ProviderType enum exactly.\n * @see https://github.com/knnlabs/Conduit/blob/main/ConduitLLM.Core/Enums/ProviderType.cs\n */\nexport enum ProviderType {\n  /** OpenAI provider (GPT models) */\n  OpenAI = 1,\n  \n  /** Anthropic provider (Claude models) */\n  Anthropic = 2,\n  \n  /** Azure OpenAI Service */\n  AzureOpenAI = 3,\n  \n  /** Google Gemini */\n  Gemini = 4,\n  \n  /** Google Vertex AI */\n  VertexAI = 5,\n  \n  /** Cohere */\n  Cohere = 6,\n  \n  /** Mistral AI */\n  Mistral = 7,\n  \n  /** Groq */\n  Groq = 8,\n  \n  /** Ollama (local models) */\n  Ollama = 9,\n  \n  /** Replicate */\n  Replicate = 10,\n  \n  /** Fireworks AI */\n  Fireworks = 11,\n  \n  /** AWS Bedrock */\n  Bedrock = 12,\n  \n  /** Hugging Face */\n  HuggingFace = 13,\n  \n  /** AWS SageMaker */\n  SageMaker = 14,\n  \n  /** OpenRouter */\n  OpenRouter = 15,\n  \n  /** OpenAI-compatible generic provider */\n  OpenAICompatible = 16,\n  \n  /** MiniMax */\n  MiniMax = 17,\n  \n  /** Ultravox */\n  Ultravox = 18,\n  \n  /** ElevenLabs (audio) */\n  ElevenLabs = 19,\n  \n  /** Google Cloud (audio) */\n  GoogleCloud = 20,\n  \n  /** Cerebras (high-performance inference) */\n  Cerebras = 21\n}\n\n/**\n * Type guard to check if a value is a valid ProviderType\n */\nexport function isProviderType(value: unknown): value is ProviderType {\n  return typeof value === 'number' && \n         value >= ProviderType.OpenAI && \n         value <= ProviderType.Cerebras;\n}\n\n/**\n * Get the display name for a provider type\n */\nexport function getProviderDisplayName(provider: ProviderType): string {\n  const names: Record<ProviderType, string> = {\n    [ProviderType.OpenAI]: 'OpenAI',\n    [ProviderType.Anthropic]: 'Anthropic',\n    [ProviderType.AzureOpenAI]: 'Azure OpenAI',\n    [ProviderType.Gemini]: 'Google Gemini',\n    [ProviderType.VertexAI]: 'Google Vertex AI',\n    [ProviderType.Cohere]: 'Cohere',\n    [ProviderType.Mistral]: 'Mistral AI',\n    [ProviderType.Groq]: 'Groq',\n    [ProviderType.Ollama]: 'Ollama',\n    [ProviderType.Replicate]: 'Replicate',\n    [ProviderType.Fireworks]: 'Fireworks AI',\n    [ProviderType.Bedrock]: 'AWS Bedrock',\n    [ProviderType.HuggingFace]: 'Hugging Face',\n    [ProviderType.SageMaker]: 'AWS SageMaker',\n    [ProviderType.OpenRouter]: 'OpenRouter',\n    [ProviderType.OpenAICompatible]: 'OpenAI Compatible',\n    [ProviderType.MiniMax]: 'MiniMax',\n    [ProviderType.Ultravox]: 'Ultravox',\n    [ProviderType.ElevenLabs]: 'ElevenLabs',\n    [ProviderType.GoogleCloud]: 'Google Cloud',\n    [ProviderType.Cerebras]: 'Cerebras'\n  };\n  \n  return names[provider] || 'Unknown Provider';\n}","import { ProviderType } from './providerType';\n\n/**\n * Base model interface used by both Core and Admin SDKs\n */\nexport interface BaseModel {\n  /** Unique identifier for the model */\n  id: string;\n  /** Human-readable name of the model */\n  name: string;\n  /** Provider that owns this model */\n  providerId: string;\n  /** Type of provider */\n  providerType: ProviderType;\n}\n\n/**\n * Model feature support interface\n */\nexport interface ModelFeatureSupport {\n  /** Whether the model supports vision/image inputs */\n  supportsVision: boolean;\n  /** Whether the model supports image generation */\n  supportsImageGeneration: boolean;\n  /** Whether the model supports audio transcription */\n  supportsAudioTranscription: boolean;\n  /** Whether the model supports text-to-speech */\n  supportsTextToSpeech: boolean;\n  /** Whether the model supports realtime audio */\n  supportsRealtimeAudio: boolean;\n  /** Whether the model supports function calling */\n  supportsFunctionCalling: boolean;\n  /** Maximum tokens the model supports */\n  maxTokens?: number;\n  /** Context window size */\n  contextWindow?: number;\n}\n\n/**\n * Extended model information with capabilities\n */\nexport interface ModelWithCapabilities extends BaseModel {\n  /** Model capabilities */\n  capabilities: ModelFeatureSupport;\n  /** Whether the model is enabled */\n  isEnabled: boolean;\n  /** Creation timestamp */\n  createdAt: string;\n  /** Last update timestamp */\n  updatedAt?: string;\n}\n\n/**\n * Model usage statistics\n */\nexport interface ModelUsageStats {\n  /** Model ID */\n  modelId: string;\n  /** Total requests made */\n  totalRequests: number;\n  /** Total tokens consumed */\n  totalTokens: number;\n  /** Total cost */\n  totalCost: number;\n  /** Average response time in ms */\n  averageResponseTime: number;\n  /** Success rate (0-1) */\n  successRate: number;\n  /** Time period for these stats */\n  period: {\n    start: string;\n    end: string;\n  };\n}\n\n/**\n * Model pricing information\n */\nexport interface ModelPricing {\n  /** Model ID */\n  modelId: string;\n  /** Provider type */\n  providerType: ProviderType;\n  /** Input token cost (per 1K tokens) */\n  inputCostPer1K: number;\n  /** Output token cost (per 1K tokens) */\n  outputCostPer1K: number;\n  /** Currency (USD, EUR, etc.) */\n  currency: string;\n  /** Effective date for this pricing */\n  effectiveDate: string;\n}\n\n/**\n * Model health/availability status\n */\nexport interface ModelHealthStatus {\n  /** Model ID */\n  modelId: string;\n  /** Whether the model is currently available */\n  isAvailable: boolean;\n  /** Last successful check timestamp */\n  lastChecked: string;\n  /** Average response time in last check */\n  responseTime?: number;\n  /** Error message if not available */\n  errorMessage?: string;\n  /** Number of consecutive failures */\n  consecutiveFailures: number;\n}\n\n/**\n * Type guard to check if object has model capabilities\n */\nexport function hasModelFeatureSupport(obj: unknown): obj is { capabilities: ModelFeatureSupport } {\n  return typeof obj === 'object' && \n         obj !== null && \n         'capabilities' in obj &&\n         typeof (obj as any).capabilities === 'object';\n}\n\n/**\n * Type guard to check if object is a BaseModel\n */\nexport function isBaseModel(obj: unknown): obj is BaseModel {\n  return typeof obj === 'object' && \n         obj !== null && \n         'id' in obj &&\n         'name' in obj &&\n         'providerId' in obj &&\n         'providerType' in obj;\n}\n\n/**\n * Discovered model from provider\n */\nexport interface DiscoveredModel {\n  /** Model ID */\n  id: string;\n  /** Provider type */\n  provider: ProviderType;\n  /** Display name */\n  display_name?: string;\n  /** Model description */\n  description?: string;\n  /** Model capabilities */\n  capabilities?: Record<string, boolean | number | string[]>;\n  /** Additional metadata */\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Model mapping between Conduit and provider models\n */\nexport interface ModelMapping {\n  /** Unique identifier */\n  id: number;\n  /** Conduit model ID */\n  modelId: string;\n  /** Provider ID */\n  providerId: string;\n  /** Provider type */\n  providerType: ProviderType;\n  /** Provider's model ID */\n  providerModelId: string;\n  /** Whether mapping is enabled */\n  isEnabled: boolean;\n  /** Priority for routing */\n  priority: number;\n  /** Feature support */\n  features: ModelFeatureSupport;\n  /** Creation timestamp */\n  createdAt: string;\n  /** Update timestamp */\n  updatedAt?: string;\n  /** Additional metadata */\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Model cost information\n */\nexport interface ModelCostInfo {\n  /** Model pattern (exact match or prefix with *) */\n  modelIdPattern: string;\n  /** Cost per million input tokens */\n  inputCostPerMillionTokens: number;\n  /** Cost per million output tokens */\n  outputCostPerMillionTokens: number;\n  /** Cost per embedding token (if applicable) */\n  embeddingTokenCost?: number;\n  /** Cost per generated image */\n  imageCostPerImage?: number;\n  /** Cost per minute of audio */\n  audioCostPerMinute?: number;\n  /** Cost per thousand characters of audio */\n  audioCostPerKCharacters?: number;\n  /** Cost per minute of audio input */\n  audioInputCostPerMinute?: number;\n  /** Cost per minute of audio output */\n  audioOutputCostPerMinute?: number;\n  /** Cost per second of video */\n  videoCostPerSecond?: number;\n  /** Resolution multipliers for video */\n  videoResolutionMultipliers?: Record<string, number>;\n  /** Description */\n  description?: string;\n  /** Priority for pattern matching */\n  priority?: number;\n}","/**\n * Common API request and response types shared between Core and Admin SDKs\n */\n\n/**\n * Paginated request parameters\n */\nexport interface PaginatedRequest {\n  /** Page number (1-based) */\n  page?: number;\n  /** Number of items per page */\n  pageSize?: number;\n  /** Field to sort by */\n  sortBy?: string;\n  /** Sort direction */\n  sortOrder?: 'asc' | 'desc';\n}\n\n/**\n * Extended paginated response wrapper with navigation helpers\n */\nexport interface ExtendedPaginatedResponse<T> {\n  /** Array of items for current page */\n  items: T[];\n  /** Total number of items */\n  totalCount: number;\n  /** Current page number (1-based) */\n  page: number;\n  /** Number of items per page */\n  pageSize: number;\n  /** Total number of pages */\n  totalPages: number;\n  /** Whether there's a next page */\n  hasNextPage?: boolean;\n  /** Whether there's a previous page */\n  hasPreviousPage?: boolean;\n}\n\n/**\n * Standard API error response\n */\nexport interface ApiError {\n  /** Error code for programmatic handling */\n  code: string;\n  /** Human-readable error message */\n  message: string;\n  /** Additional error details */\n  details?: Record<string, unknown>;\n  /** Field-specific errors for validation */\n  fieldErrors?: Record<string, string[]>;\n  /** Request ID for debugging */\n  requestId?: string;\n  /** Timestamp when error occurred */\n  timestamp?: string;\n}\n\n/**\n * Standard API success response wrapper\n */\nexport interface ApiSuccessResponse<T> {\n  /** Response data */\n  data: T;\n  /** Success status */\n  success: boolean;\n  /** Optional message */\n  message?: string;\n  /** Response metadata */\n  meta?: ResponseMetadata;\n}\n\n/**\n * Response metadata\n */\nexport interface ResponseMetadata {\n  /** Request ID for tracing */\n  requestId: string;\n  /** Response timestamp */\n  timestamp: string;\n  /** API version */\n  version: string;\n  /** Response time in ms */\n  responseTime?: number;\n}\n\n/**\n * Batch operation request\n */\nexport interface BatchRequest<T> {\n  /** Array of items to process */\n  items: T[];\n  /** Whether to continue on error */\n  continueOnError?: boolean;\n  /** Maximum items to process in parallel */\n  parallelism?: number;\n}\n\n/**\n * Batch operation response\n */\nexport interface BatchResponse<T> {\n  /** Successfully processed items */\n  succeeded: BatchResult<T>[];\n  /** Failed items */\n  failed: BatchError[];\n  /** Summary statistics */\n  summary: {\n    total: number;\n    succeeded: number;\n    failed: number;\n    duration: number;\n  };\n}\n\n/**\n * Individual batch result\n */\nexport interface BatchResult<T> {\n  /** Index in original request */\n  index: number;\n  /** Processed result */\n  result: T;\n}\n\n/**\n * Individual batch error\n */\nexport interface BatchError {\n  /** Index in original request */\n  index: number;\n  /** Error details */\n  error: ApiError;\n}\n\n/**\n * Date range filter\n */\nexport interface DateRangeFilter {\n  /** Start date (inclusive) */\n  startDate?: string;\n  /** End date (inclusive) */\n  endDate?: string;\n}\n\n/**\n * Numeric range filter\n */\nexport interface NumericRangeFilter {\n  /** Minimum value (inclusive) */\n  min?: number;\n  /** Maximum value (inclusive) */\n  max?: number;\n}\n\n/**\n * Alternative paginated result interface used in some endpoints\n */\nexport interface PagedResult<T> {\n  /** Array of items in the current page */\n  items: T[];\n  /** Total number of items across all pages */\n  totalCount: number;\n  /** Current page number */\n  page: number;\n  /** Number of items per page */\n  pageSize: number;\n  /** Total number of pages */\n  totalPages: number;\n}\n\n/**\n * Sort configuration\n */\nexport interface SortConfig {\n  /** Field to sort by */\n  field: string;\n  /** Sort direction */\n  direction: 'asc' | 'desc';\n}\n\n/**\n * Filter operators\n */\nexport enum FilterOperator {\n  EQUALS = 'eq',\n  NOT_EQUALS = 'ne',\n  GREATER_THAN = 'gt',\n  GREATER_THAN_OR_EQUAL = 'gte',\n  LESS_THAN = 'lt',\n  LESS_THAN_OR_EQUAL = 'lte',\n  IN = 'in',\n  NOT_IN = 'nin',\n  CONTAINS = 'contains',\n  STARTS_WITH = 'startsWith',\n  ENDS_WITH = 'endsWith'\n}\n\n/**\n * Generic filter\n */\nexport interface Filter {\n  /** Field to filter on */\n  field: string;\n  /** Filter operator */\n  operator: FilterOperator;\n  /** Filter value */\n  value: unknown;\n}\n\n/**\n * Health check response\n */\nexport interface HealthCheckResponse {\n  /** Overall health status */\n  status: 'healthy' | 'degraded' | 'unhealthy';\n  /** Service version */\n  version: string;\n  /** Uptime in seconds */\n  uptime: number;\n  /** Individual component health */\n  components: Record<string, ComponentHealth>;\n}\n\n/**\n * Base interface for create DTOs\n */\nexport interface CreateDto<T> {\n  /** The data to create */\n  data: Partial<T>;\n}\n\n/**\n * Base interface for update DTOs\n */\nexport interface UpdateDto<T> {\n  /** The fields to update */\n  data: Partial<T>;\n  /** Optional version for optimistic concurrency */\n  version?: string;\n}\n\n/**\n * Base interface for delete operations\n */\nexport interface DeleteDto {\n  /** Optional reason for deletion */\n  reason?: string;\n  /** Whether to force delete (bypass soft delete) */\n  force?: boolean;\n}\n\n/**\n * Bulk operation request\n */\nexport interface BulkOperationRequest<T> {\n  /** Items to process */\n  items: T[];\n  /** Whether to continue on error */\n  continueOnError?: boolean;\n  /** Maximum parallel operations */\n  parallelism?: number;\n}\n\n/**\n * Bulk operation response\n */\nexport interface BulkOperationResponse<T> {\n  /** Successfully processed items */\n  succeeded: T[];\n  /** Failed items with errors */\n  failed: Array<{\n    item: T;\n    error: ApiError;\n  }>;\n  /** Summary statistics */\n  summary: {\n    total: number;\n    succeeded: number;\n    failed: number;\n  };\n}\n\n/**\n * Component health status\n */\nexport interface ComponentHealth {\n  /** Component status */\n  status: 'healthy' | 'degraded' | 'unhealthy';\n  /** Optional message */\n  message?: string;\n  /** Last check timestamp */\n  lastCheck: string;\n  /** Response time in ms */\n  responseTime?: number;\n}","/**\n * Common constants shared across all Conduit SDKs\n */\n\n/**\n * API version constants\n */\nexport const API_VERSION = 'v1';\nexport const API_PREFIX = '/api';\n\n/**\n * Default pagination settings\n */\nexport const PAGINATION = {\n  DEFAULT_PAGE_SIZE: 20,\n  MAX_PAGE_SIZE: 100,\n  DEFAULT_PAGE: 1,\n} as const;\n\n/**\n * Cache TTL values in seconds\n */\nexport const CACHE_TTL = {\n  SHORT: 60,         // 1 minute\n  MEDIUM: 300,       // 5 minutes\n  LONG: 3600,        // 1 hour\n  VERY_LONG: 86400,  // 24 hours\n} as const;\n\n/**\n * Task status constants\n */\nexport const TASK_STATUS = {\n  PENDING: 'pending',\n  PROCESSING: 'processing',\n  COMPLETED: 'completed',\n  FAILED: 'failed',\n  CANCELLED: 'cancelled',\n  TIMEOUT: 'timeout',\n} as const;\n\nexport type TaskStatus = typeof TASK_STATUS[keyof typeof TASK_STATUS];\n\n/**\n * Task polling configuration\n */\nexport const POLLING_CONFIG = {\n  DEFAULT_INTERVAL: 1000,    // 1 second\n  MAX_INTERVAL: 30000,       // 30 seconds\n  DEFAULT_TIMEOUT: 300000,   // 5 minutes\n  BACKOFF_FACTOR: 1.5,\n} as const;\n\n/**\n * Budget duration types\n */\nexport const BUDGET_DURATION = {\n  TOTAL: 'Total',\n  DAILY: 'Daily',\n  WEEKLY: 'Weekly',\n  MONTHLY: 'Monthly',\n} as const;\n\nexport type BudgetDuration = typeof BUDGET_DURATION[keyof typeof BUDGET_DURATION];\n\n/**\n * Filter types for IP filtering\n */\nexport const FILTER_TYPE = {\n  ALLOW: 'whitelist',\n  DENY: 'blacklist',\n} as const;\n\nexport type FilterType = typeof FILTER_TYPE[keyof typeof FILTER_TYPE];\n\n/**\n * Filter modes\n */\nexport const FILTER_MODE = {\n  PERMISSIVE: 'permissive',\n  RESTRICTIVE: 'restrictive',\n} as const;\n\nexport type FilterMode = typeof FILTER_MODE[keyof typeof FILTER_MODE];\n\n/**\n * Chat message roles\n */\nexport const CHAT_ROLES = {\n  SYSTEM: 'system',\n  USER: 'user',\n  ASSISTANT: 'assistant',\n  FUNCTION: 'function',\n  TOOL: 'tool',\n} as const;\n\nexport type ChatRole = typeof CHAT_ROLES[keyof typeof CHAT_ROLES];\n\n/**\n * Image response formats\n */\nexport const IMAGE_RESPONSE_FORMATS = {\n  URL: 'url',\n  B64_JSON: 'b64_json',\n} as const;\n\nexport type ImageResponseFormat = typeof IMAGE_RESPONSE_FORMATS[keyof typeof IMAGE_RESPONSE_FORMATS];\n\n/**\n * Video response formats\n */\nexport const VIDEO_RESPONSE_FORMATS = {\n  URL: 'url',\n  B64_JSON: 'b64_json',\n} as const;\n\nexport type VideoResponseFormat = typeof VIDEO_RESPONSE_FORMATS[keyof typeof VIDEO_RESPONSE_FORMATS];\n\n/**\n * Common date formats\n */\nexport const DATE_FORMATS = {\n  API_DATETIME: 'YYYY-MM-DDTHH:mm:ss[Z]',\n  API_DATE: 'YYYY-MM-DD',\n  DISPLAY_DATETIME: 'MMM D, YYYY [at] h:mm A',\n  DISPLAY_DATE: 'MMM D, YYYY',\n} as const;\n\n/**\n * Streaming constants\n */\nexport const STREAM_CONSTANTS = {\n  DEFAULT_BUFFER_SIZE: 64 * 1024, // 64KB\n  DEFAULT_TIMEOUT: 60000,         // 60 seconds\n  CHUNK_DELIMITER: '\\n\\n',\n  DATA_PREFIX: 'data: ',\n  EVENT_PREFIX: 'event: ',\n  DONE_MESSAGE: '[DONE]',\n} as const;\n\n/**\n * Client identification\n */\nexport const CLIENT_INFO = {\n  CORE_NAME: '@conduit/core',\n  ADMIN_NAME: '@conduit/admin',\n  VERSION: '0.2.0',\n} as const;\n\n/**\n * Health status values\n */\nexport const HEALTH_STATUS = {\n  HEALTHY: 'healthy',\n  DEGRADED: 'degraded',\n  UNHEALTHY: 'unhealthy',\n} as const;\n\nexport type HealthStatus = typeof HEALTH_STATUS[keyof typeof HEALTH_STATUS];\n\n/**\n * Common regex patterns\n */\nexport const PATTERNS = {\n  API_KEY: /^sk-[a-zA-Z0-9]{32,}$/,\n  EMAIL: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n  URL: /^https?:\\/\\/.+$/,\n  ISO_DATE: /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z?$/,\n} as const;","/**\n * Common error types for Conduit SDK clients\n * \n * This module provides a unified error hierarchy for both Admin and Core SDKs,\n * consolidating previously duplicated error classes.\n */\n\nexport class ConduitError extends Error {\n  public statusCode: number;\n  public code: string;\n  public context?: Record<string, unknown>;\n  \n  // Admin SDK specific fields\n  public details?: unknown;\n  public endpoint?: string;\n  public method?: string;\n  \n  // Core SDK specific fields\n  public type?: string;\n  public param?: string;\n\n  constructor(\n    message: string,\n    statusCode: number = 500,\n    code: string = 'INTERNAL_ERROR',\n    context?: Record<string, unknown>\n  ) {\n    super(message);\n    this.name = this.constructor.name;\n    this.statusCode = statusCode;\n    this.code = code;\n    this.context = context;\n    \n    // Preserve additional context from the constructor pattern\n    if (context) {\n      // Admin SDK fields\n      this.details = context.details;\n      this.endpoint = context.endpoint as string | undefined;\n      this.method = context.method as string | undefined;\n      \n      // Core SDK fields\n      this.type = context.type as string | undefined;\n      this.param = context.param as string | undefined;\n    }\n    \n    // Ensure proper prototype chain for instanceof checks\n    Object.setPrototypeOf(this, new.target.prototype);\n    \n    // Capture stack trace for better debugging\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      statusCode: this.statusCode,\n      code: this.code,\n      context: this.context,\n      details: this.details,\n      endpoint: this.endpoint,\n      method: this.method,\n      type: this.type,\n      param: this.param,\n      timestamp: new Date().toISOString(),\n    };\n  }\n  \n  // Helper method for Next.js serialization\n  toSerializable() {\n    return {\n      isConduitError: true,\n      ...this.toJSON(),\n    };\n  }\n  \n  // Static method to reconstruct from serialized error\n  static fromSerializable(data: unknown): ConduitError {\n    if (!data || typeof data !== 'object' || !('isConduitError' in data) || !(data as { isConduitError: unknown }).isConduitError) {\n      throw new Error('Invalid serialized ConduitError');\n    }\n    \n    const errorData = data as unknown as {\n      message: string;\n      statusCode: number;\n      code: string;\n      context?: Record<string, unknown>;\n      details?: unknown;\n      endpoint?: string;\n      method?: string;\n      type?: string;\n      param?: string;\n    };\n    \n    const error = new ConduitError(\n      errorData.message,\n      errorData.statusCode,\n      errorData.code,\n      errorData.context\n    );\n    \n    // Restore additional properties\n    if (errorData.details !== undefined) error.details = errorData.details;\n    if (errorData.endpoint !== undefined) error.endpoint = errorData.endpoint;\n    if (errorData.method !== undefined) error.method = errorData.method;\n    if (errorData.type !== undefined) error.type = errorData.type;\n    if (errorData.param !== undefined) error.param = errorData.param;\n    \n    return error;\n  }\n}\n\nexport class AuthError extends ConduitError {\n  constructor(message = 'Authentication failed', context?: Record<string, unknown>) {\n    super(message, 401, 'AUTH_ERROR', context);\n  }\n}\n\n// Alias for backward compatibility\nexport class AuthenticationError extends AuthError {}\n\nexport class AuthorizationError extends ConduitError {\n  constructor(message = 'Access forbidden', context?: Record<string, unknown>) {\n    super(message, 403, 'AUTHORIZATION_ERROR', context);\n  }\n}\n\nexport class ValidationError extends ConduitError {\n  public field?: string;\n  \n  constructor(message = 'Validation failed', context?: Record<string, unknown>) {\n    super(message, 400, 'VALIDATION_ERROR', context);\n    this.field = context?.field as string | undefined;\n  }\n}\n\nexport class NotFoundError extends ConduitError {\n  constructor(message = 'Resource not found', context?: Record<string, unknown>) {\n    super(message, 404, 'NOT_FOUND', context);\n  }\n}\n\nexport class ConflictError extends ConduitError {\n  constructor(message = 'Resource conflict', context?: Record<string, unknown>) {\n    super(message, 409, 'CONFLICT_ERROR', context);\n  }\n}\n\nexport class RateLimitError extends ConduitError {\n  public retryAfter?: number;\n\n  constructor(message = 'Rate limit exceeded', retryAfter?: number, context?: Record<string, unknown>) {\n    super(message, 429, 'RATE_LIMIT_ERROR', { ...context, retryAfter });\n    this.retryAfter = retryAfter;\n  }\n}\n\nexport class ServerError extends ConduitError {\n  constructor(message = 'Internal server error', context?: Record<string, unknown>) {\n    super(message, 500, 'SERVER_ERROR', context);\n  }\n}\n\nexport class NetworkError extends ConduitError {\n  constructor(message = 'Network error', context?: Record<string, unknown>) {\n    super(message, 0, 'NETWORK_ERROR', context);\n  }\n}\n\nexport class TimeoutError extends ConduitError {\n  constructor(message = 'Request timeout', context?: Record<string, unknown>) {\n    super(message, 408, 'TIMEOUT_ERROR', context);\n  }\n}\n\nexport class NotImplementedError extends ConduitError {\n  constructor(message: string, context?: Record<string, unknown>) {\n    super(message, 501, 'NOT_IMPLEMENTED', context);\n  }\n}\n\nexport class StreamError extends ConduitError {\n  constructor(message = 'Stream processing failed', context?: Record<string, unknown>) {\n    super(message, 500, 'STREAM_ERROR', context);\n  }\n}\n\n// Type guards\nexport function isConduitError(error: unknown): error is ConduitError {\n  return error instanceof ConduitError;\n}\n\nexport function isAuthError(error: unknown): error is AuthError {\n  return error instanceof AuthError || error instanceof AuthenticationError;\n}\n\nexport function isAuthorizationError(error: unknown): error is AuthorizationError {\n  return error instanceof AuthorizationError;\n}\n\nexport function isValidationError(error: unknown): error is ValidationError {\n  return error instanceof ValidationError;\n}\n\nexport function isNotFoundError(error: unknown): error is NotFoundError {\n  return error instanceof NotFoundError;\n}\n\nexport function isConflictError(error: unknown): error is ConflictError {\n  return error instanceof ConflictError;\n}\n\nexport function isRateLimitError(error: unknown): error is RateLimitError {\n  return error instanceof RateLimitError;\n}\n\nexport function isNetworkError(error: unknown): error is NetworkError {\n  return error instanceof NetworkError;\n}\n\nexport function isStreamError(error: unknown): error is StreamError {\n  return error instanceof StreamError;\n}\n\nexport function isTimeoutError(error: unknown): error is TimeoutError {\n  return error instanceof TimeoutError;\n}\n\n// Helper to check if an error is serialized ConduitError\nexport function isSerializedConduitError(data: unknown): data is ReturnType<ConduitError['toSerializable']> {\n  return (\n    typeof data === 'object' &&\n    data !== null &&\n    'isConduitError' in data &&\n    (data as { isConduitError: unknown }).isConduitError === true\n  );\n}\n\n// Type guard for HTTP errors\nexport function isHttpError(error: unknown): error is {\n  response: { status: number; data: unknown; headers: Record<string, string> };\n  message: string;\n  request?: unknown;\n  code?: string;\n} {\n  return (\n    typeof error === 'object' &&\n    error !== null &&\n    'response' in error &&\n    typeof (error as { response: unknown }).response === 'object'\n  );\n}\n\n// Type guard for network errors\nexport function isHttpNetworkError(error: unknown): error is {\n  request: unknown;\n  message: string;\n  code?: string;\n} {\n  return (\n    typeof error === 'object' &&\n    error !== null &&\n    'request' in error &&\n    !('response' in error)\n  );\n}\n\n// Type guard for generic errors\nexport function isErrorLike(error: unknown): error is {\n  message: string;\n} {\n  return (\n    typeof error === 'object' &&\n    error !== null &&\n    'message' in error &&\n    typeof (error as { message: unknown }).message === 'string'\n  );\n}\n\n// Next.js-specific utilities for error serialization across server/client boundaries\nexport function serializeError(error: unknown): Record<string, unknown> {\n  if (isConduitError(error)) {\n    return error.toSerializable();\n  }\n  \n  if (error instanceof Error) {\n    return {\n      isError: true,\n      name: error.name,\n      message: error.message,\n      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined,\n    };\n  }\n  \n  return {\n    isError: true,\n    message: String(error),\n  };\n}\n\nexport function deserializeError(data: unknown): Error {\n  if (isSerializedConduitError(data)) {\n    return ConduitError.fromSerializable(data);\n  }\n  \n  if (typeof data === 'object' && data !== null && 'isError' in data) {\n    const errorData = data as {\n      message?: string;\n      name?: string;\n      stack?: string;\n      isError: boolean;\n    };\n    const error = new Error(errorData.message || 'Unknown error');\n    if (errorData.name) error.name = errorData.name;\n    if (errorData.stack) error.stack = errorData.stack;\n    return error;\n  }\n  \n  return new Error('Unknown error');\n}\n\n// Helper for Next.js error boundaries\nexport function getErrorMessage(error: unknown): string {\n  if (isConduitError(error)) {\n    return error.message;\n  }\n  \n  if (error instanceof Error) {\n    return error.message;\n  }\n  \n  return 'An unexpected error occurred';\n}\n\n// Helper for Next.js error pages\nexport function getErrorStatusCode(error: unknown): number {\n  if (isConduitError(error)) {\n    return error.statusCode;\n  }\n  \n  return 500;\n}\n\n/**\n * Handle API errors and convert them to appropriate ConduitError types\n * This function is primarily used by the Admin SDK\n */\nexport function handleApiError(error: unknown, endpoint?: string, method?: string): never {\n  const context: Record<string, unknown> = {\n    endpoint,\n    method,\n  };\n\n  if (isHttpError(error)) {\n    const { status, data } = error.response;\n    const errorData = data as { error?: string; message?: string; details?: unknown } | null;\n    const baseMessage = errorData?.error || errorData?.message || error.message;\n    \n    // Enhanced error messages with endpoint information\n    const endpointInfo = endpoint && method ? ` (${method.toUpperCase()} ${endpoint})` : '';\n    const enhancedMessage = `${baseMessage}${endpointInfo}`;\n    \n    // Add details to context\n    context.details = errorData?.details || data;\n\n    switch (status) {\n      case 400:\n        throw new ValidationError(enhancedMessage, context);\n      case 401:\n        throw new AuthError(enhancedMessage, context);\n      case 403:\n        throw new AuthorizationError(enhancedMessage, context);\n      case 404:\n        throw new NotFoundError(enhancedMessage, context);\n      case 409:\n        throw new ConflictError(enhancedMessage, context);\n      case 429: {\n        const retryAfterHeader = error.response.headers['retry-after'];\n        const retryAfter = typeof retryAfterHeader === 'string' ? parseInt(retryAfterHeader, 10) : undefined;\n        throw new RateLimitError(enhancedMessage, retryAfter, context);\n      }\n      case 500:\n      case 502:\n      case 503:\n      case 504:\n        throw new ServerError(enhancedMessage, context);\n      default:\n        throw new ConduitError(enhancedMessage, status, `HTTP_${status}`, context);\n    }\n  } else if (isHttpNetworkError(error)) {\n    const endpointInfo = endpoint && method ? ` (${method.toUpperCase()} ${endpoint})` : '';\n    context.code = error.code;\n    \n    if (error.code === 'ECONNABORTED') {\n      throw new TimeoutError(`Request timeout${endpointInfo}`, context);\n    }\n    throw new NetworkError(`Network error: No response received${endpointInfo}`, context);\n  } else if (isErrorLike(error)) {\n    context.originalError = error;\n    throw new ConduitError(error.message, 500, 'UNKNOWN_ERROR', context);\n  } else {\n    context.originalError = error;\n    throw new ConduitError('Unknown error', 500, 'UNKNOWN_ERROR', context);\n  }\n}\n\n/**\n * Create an error from an ErrorResponse format\n * This function is primarily used by the Core SDK for legacy compatibility\n */\nexport interface ErrorResponseFormat {\n  error: {\n    message: string;\n    type?: string;\n    code?: string;\n    param?: string;\n  };\n}\n\nexport function createErrorFromResponse(response: ErrorResponseFormat, statusCode?: number): ConduitError {\n  const context: Record<string, unknown> = {\n    type: response.error.type,\n    param: response.error.param,\n  };\n  \n  return new ConduitError(\n    response.error.message,\n    statusCode || 500,\n    response.error.code || 'API_ERROR',\n    context\n  );\n}","/**\n * Common validation utilities shared across Conduit SDKs\n */\n\nimport { ValidationError } from '../errors';\n\n/**\n * Validates email format\n */\nexport function isValidEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\n/**\n * Validates URL format\n */\nexport function isValidUrl(url: string): boolean {\n  try {\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Validates API key format\n */\nexport function isValidApiKey(apiKey: string): boolean {\n  // Standard format: sk-{32+ alphanumeric characters}\n  const apiKeyRegex = /^sk-[a-zA-Z0-9]{32,}$/;\n  return apiKeyRegex.test(apiKey);\n}\n\n/**\n * Validates ISO date string\n */\nexport function isValidIsoDate(date: string): boolean {\n  const isoDateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z?$/;\n  if (!isoDateRegex.test(date)) {\n    return false;\n  }\n  \n  const parsed = new Date(date);\n  return !isNaN(parsed.getTime());\n}\n\n/**\n * Validates UUID format\n */\nexport function isValidUuid(uuid: string): boolean {\n  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n  return uuidRegex.test(uuid);\n}\n\n/**\n * Validates that a value is not null or undefined\n */\nexport function assertDefined<T>(value: T | null | undefined, name: string): T {\n  if (value === null || value === undefined) {\n    throw new ValidationError(`${name} is required`);\n  }\n  return value;\n}\n\n/**\n * Validates that a string is not empty\n */\nexport function assertNotEmpty(value: string | null | undefined, name: string): string {\n  const defined = assertDefined(value, name);\n  if (defined.trim().length === 0) {\n    throw new ValidationError(`${name} cannot be empty`);\n  }\n  return defined;\n}\n\n/**\n * Validates that a number is within a range\n */\nexport function assertInRange(value: number, min: number, max: number, name: string): number {\n  if (value < min || value > max) {\n    throw new ValidationError(`${name} must be between ${min} and ${max}`);\n  }\n  return value;\n}\n\n/**\n * Validates that a value is one of allowed values\n */\nexport function assertOneOf<T>(value: T, allowed: readonly T[], name: string): T {\n  if (!allowed.includes(value)) {\n    throw new ValidationError(`${name} must be one of: ${allowed.join(', ')}`);\n  }\n  return value;\n}\n\n/**\n * Validates array length\n */\nexport function assertArrayLength<T>(\n  array: T[],\n  min: number,\n  max: number,\n  name: string\n): T[] {\n  if (array.length < min || array.length > max) {\n    throw new ValidationError(`${name} must have between ${min} and ${max} items`);\n  }\n  return array;\n}\n\n/**\n * Validates that an object has required properties\n */\nexport function assertHasProperties<T extends Record<string, unknown>>(\n  obj: T,\n  required: (keyof T)[],\n  name: string\n): T {\n  const missing = required.filter(prop => !(prop in obj));\n  if (missing.length > 0) {\n    throw new ValidationError(`${name} is missing required properties: ${missing.join(', ')}`);\n  }\n  return obj;\n}\n\n/**\n * Sanitizes a string by removing potentially dangerous characters\n */\nexport function sanitizeString(str: string, maxLength?: number): string {\n  // Remove control characters and trim\n  let sanitized = str.replace(/[\\x00-\\x1F\\x7F]/g, '').trim();\n  \n  // Limit length if specified\n  if (maxLength && sanitized.length > maxLength) {\n    sanitized = sanitized.substring(0, maxLength);\n  }\n  \n  return sanitized;\n}\n\n/**\n * Type guard to check if value is a non-empty string\n */\nexport function isNonEmptyString(value: unknown): value is string {\n  return typeof value === 'string' && value.trim().length > 0;\n}\n\n/**\n * Type guard to check if value is a positive number\n */\nexport function isPositiveNumber(value: unknown): value is number {\n  return typeof value === 'number' && value > 0 && isFinite(value);\n}\n\n/**\n * Type guard to check if value is a valid enum value\n */\nexport function isEnumValue<T extends Record<string, string | number>>(\n  value: unknown,\n  enumObject: T\n): value is T[keyof T] {\n  return Object.values(enumObject).includes(value as T[keyof T]);\n}\n\n/**\n * Validates JSON string\n */\nexport function isValidJson(str: string): boolean {\n  try {\n    JSON.parse(str);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Validates base64 string\n */\nexport function isValidBase64(str: string): boolean {\n  const base64Regex = /^[A-Za-z0-9+/]*(={0,2})$/;\n  if (!base64Regex.test(str)) {\n    return false;\n  }\n  \n  // Check if length is valid\n  return str.length % 4 === 0;\n}\n\n/**\n * Creates a validation function that checks multiple conditions\n */\nexport function createValidator<T>(\n  validators: Array<(value: T) => boolean | string>\n): (value: T) => void {\n  return (value: T) => {\n    for (const validator of validators) {\n      const result = validator(value);\n      if (typeof result === 'string') {\n        throw new ValidationError(result);\n      }\n      if (!result) {\n        throw new ValidationError('Validation failed');\n      }\n    }\n  };\n}","/**\n * Date and time utility functions shared across Conduit SDKs\n */\n\n/**\n * Formats a date to ISO string with UTC timezone\n */\nexport function toIsoString(date: Date | string | number): string {\n  const dateObj = date instanceof Date ? date : new Date(date);\n  return dateObj.toISOString();\n}\n\n/**\n * Parses an ISO date string to Date object\n */\nexport function parseIsoDate(dateStr: string): Date {\n  const date = new Date(dateStr);\n  if (isNaN(date.getTime())) {\n    throw new Error(`Invalid date string: ${dateStr}`);\n  }\n  return date;\n}\n\n/**\n * Gets current timestamp in ISO format\n */\nexport function getCurrentTimestamp(): string {\n  return new Date().toISOString();\n}\n\n/**\n * Calculates time difference in milliseconds\n */\nexport function getTimeDifference(start: Date | string, end: Date | string = new Date()): number {\n  const startTime = start instanceof Date ? start.getTime() : new Date(start).getTime();\n  const endTime = end instanceof Date ? end.getTime() : new Date(end).getTime();\n  return endTime - startTime;\n}\n\n/**\n * Formats duration in milliseconds to human-readable string\n */\nexport function formatDuration(ms: number): string {\n  if (ms < 1000) {\n    return `${ms}ms`;\n  }\n  \n  const seconds = Math.floor(ms / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n  \n  if (days > 0) {\n    return `${days}d ${hours % 24}h`;\n  }\n  if (hours > 0) {\n    return `${hours}h ${minutes % 60}m`;\n  }\n  if (minutes > 0) {\n    return `${minutes}m ${seconds % 60}s`;\n  }\n  \n  return `${seconds}s`;\n}\n\n/**\n * Adds time to a date\n */\nexport function addTime(\n  date: Date | string,\n  amount: number,\n  unit: 'seconds' | 'minutes' | 'hours' | 'days'\n): Date {\n  const dateObj = date instanceof Date ? new Date(date) : new Date(date);\n  \n  switch (unit) {\n    case 'seconds':\n      dateObj.setSeconds(dateObj.getSeconds() + amount);\n      break;\n    case 'minutes':\n      dateObj.setMinutes(dateObj.getMinutes() + amount);\n      break;\n    case 'hours':\n      dateObj.setHours(dateObj.getHours() + amount);\n      break;\n    case 'days':\n      dateObj.setDate(dateObj.getDate() + amount);\n      break;\n  }\n  \n  return dateObj;\n}\n\n/**\n * Checks if a date is within a range\n */\nexport function isDateInRange(\n  date: Date | string,\n  start: Date | string,\n  end: Date | string\n): boolean {\n  const dateTime = date instanceof Date ? date.getTime() : new Date(date).getTime();\n  const startTime = start instanceof Date ? start.getTime() : new Date(start).getTime();\n  const endTime = end instanceof Date ? end.getTime() : new Date(end).getTime();\n  \n  return dateTime >= startTime && dateTime <= endTime;\n}\n\n/**\n * Gets the start of a time period\n */\nexport function getStartOf(\n  date: Date | string,\n  period: 'day' | 'week' | 'month' | 'year'\n): Date {\n  const dateObj = date instanceof Date ? new Date(date) : new Date(date);\n  \n  switch (period) {\n    case 'day':\n      dateObj.setHours(0, 0, 0, 0);\n      break;\n    case 'week':\n      const day = dateObj.getDay();\n      const diff = dateObj.getDate() - day;\n      dateObj.setDate(diff);\n      dateObj.setHours(0, 0, 0, 0);\n      break;\n    case 'month':\n      dateObj.setDate(1);\n      dateObj.setHours(0, 0, 0, 0);\n      break;\n    case 'year':\n      dateObj.setMonth(0, 1);\n      dateObj.setHours(0, 0, 0, 0);\n      break;\n  }\n  \n  return dateObj;\n}\n\n/**\n * Gets the end of a time period\n */\nexport function getEndOf(\n  date: Date | string,\n  period: 'day' | 'week' | 'month' | 'year'\n): Date {\n  const dateObj = date instanceof Date ? new Date(date) : new Date(date);\n  \n  switch (period) {\n    case 'day':\n      dateObj.setHours(23, 59, 59, 999);\n      break;\n    case 'week':\n      const day = dateObj.getDay();\n      const diff = dateObj.getDate() - day + 6;\n      dateObj.setDate(diff);\n      dateObj.setHours(23, 59, 59, 999);\n      break;\n    case 'month':\n      dateObj.setMonth(dateObj.getMonth() + 1, 0);\n      dateObj.setHours(23, 59, 59, 999);\n      break;\n    case 'year':\n      dateObj.setMonth(11, 31);\n      dateObj.setHours(23, 59, 59, 999);\n      break;\n  }\n  \n  return dateObj;\n}\n\n/**\n * Formats a date for API requests (YYYY-MM-DD)\n */\nexport function formatApiDate(date: Date | string): string {\n  const dateObj = date instanceof Date ? date : new Date(date);\n  const year = dateObj.getFullYear();\n  const month = String(dateObj.getMonth() + 1).padStart(2, '0');\n  const day = String(dateObj.getDate()).padStart(2, '0');\n  \n  return `${year}-${month}-${day}`;\n}\n\n/**\n * Parses a Unix timestamp to Date\n */\nexport function fromUnixTimestamp(timestamp: number): Date {\n  // Check if timestamp is in seconds or milliseconds\n  const isSeconds = timestamp < 10000000000;\n  return new Date(isSeconds ? timestamp * 1000 : timestamp);\n}\n\n/**\n * Converts Date to Unix timestamp (seconds)\n */\nexport function toUnixTimestamp(date: Date | string): number {\n  const dateObj = date instanceof Date ? date : new Date(date);\n  return Math.floor(dateObj.getTime() / 1000);\n}","/**\n * Formatting utilities shared across Conduit SDKs\n */\n\n/**\n * Formats a number as currency\n */\nexport function formatCurrency(\n  amount: number,\n  currency: string = 'USD',\n  locale: string = 'en-US'\n): string {\n  return new Intl.NumberFormat(locale, {\n    style: 'currency',\n    currency,\n  }).format(amount);\n}\n\n/**\n * Formats a number with commas\n */\nexport function formatNumber(\n  value: number,\n  decimals: number = 0,\n  locale: string = 'en-US'\n): string {\n  return new Intl.NumberFormat(locale, {\n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals,\n  }).format(value);\n}\n\n/**\n * Formats bytes to human-readable size\n */\nexport function formatBytes(bytes: number, decimals: number = 2): string {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\n  \n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;\n}\n\n/**\n * Formats a percentage\n */\nexport function formatPercentage(value: number, decimals: number = 2): string {\n  return `${(value * 100).toFixed(decimals)}%`;\n}\n\n/**\n * Truncates a string with ellipsis\n */\nexport function truncateString(str: string, maxLength: number, suffix: string = '...'): string {\n  if (str.length <= maxLength) return str;\n  return str.slice(0, maxLength - suffix.length) + suffix;\n}\n\n/**\n * Capitalizes first letter of a string\n */\nexport function capitalize(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n/**\n * Converts string to title case\n */\nexport function toTitleCase(str: string): string {\n  return str.replace(/\\w\\S*/g, (txt) => {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n}\n\n/**\n * Converts string to kebab-case\n */\nexport function toKebabCase(str: string): string {\n  return str\n    .replace(/([a-z])([A-Z])/g, '$1-$2')\n    .replace(/[\\s_]+/g, '-')\n    .toLowerCase();\n}\n\n/**\n * Converts string to snake_case\n */\nexport function toSnakeCase(str: string): string {\n  return str\n    .replace(/([a-z])([A-Z])/g, '$1_$2')\n    .replace(/[\\s-]+/g, '_')\n    .toLowerCase();\n}\n\n/**\n * Converts string to camelCase\n */\nexport function toCamelCase(str: string): string {\n  return str\n    .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (word, index) => {\n      return index === 0 ? word.toLowerCase() : word.toUpperCase();\n    })\n    .replace(/[\\s-_]+/g, '');\n}\n\n/**\n * Pads a string or number with zeros\n */\nexport function padZero(value: string | number, length: number): string {\n  return String(value).padStart(length, '0');\n}\n\n/**\n * Formats a duration in seconds to HH:MM:SS\n */\nexport function formatDurationHMS(seconds: number): string {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = Math.floor(seconds % 60);\n  \n  const parts = [];\n  if (hours > 0) parts.push(padZero(hours, 2));\n  parts.push(padZero(minutes, 2));\n  parts.push(padZero(secs, 2));\n  \n  return parts.join(':');\n}\n\n/**\n * Pluralizes a word based on count\n */\nexport function pluralize(\n  count: number,\n  singular: string,\n  plural?: string\n): string {\n  if (count === 1) return singular;\n  return plural || `${singular}s`;\n}\n\n/**\n * Formats a list of items with proper grammar\n */\nexport function formatList(\n  items: string[],\n  conjunction: string = 'and'\n): string {\n  if (items.length === 0) return '';\n  if (items.length === 1) return items[0];\n  if (items.length === 2) return `${items[0]} ${conjunction} ${items[1]}`;\n  \n  const lastItem = items[items.length - 1];\n  const otherItems = items.slice(0, -1);\n  return `${otherItems.join(', ')}, ${conjunction} ${lastItem}`;\n}\n\n/**\n * Masks sensitive data\n */\nexport function maskSensitive(\n  value: string,\n  showFirst: number = 4,\n  showLast: number = 4,\n  maskChar: string = '*'\n): string {\n  if (value.length <= showFirst + showLast) {\n    return value;\n  }\n  \n  const first = value.slice(0, showFirst);\n  const last = value.slice(-showLast);\n  const maskLength = Math.max(value.length - showFirst - showLast, 4);\n  const mask = maskChar.repeat(maskLength);\n  \n  return `${first}${mask}${last}`;\n}\n\n/**\n * Formats a file path to be more readable\n */\nexport function formatFilePath(path: string, maxLength: number = 50): string {\n  if (path.length <= maxLength) return path;\n  \n  const parts = path.split('/');\n  if (parts.length <= 2) return truncateString(path, maxLength);\n  \n  const fileName = parts[parts.length - 1];\n  const firstDir = parts[0] || parts[1]; // Handle absolute paths\n  \n  if (fileName.length + firstDir.length + 6 > maxLength) {\n    return truncateString(path, maxLength);\n  }\n  \n  return `${firstDir}/.../${fileName}`;\n}","/**\n * Common utilities for Conduit SDKs\n */\n\nexport * from './validation';\nexport * from './datetime';\nexport * from './formatting';\n\n/**\n * Delays execution for specified milliseconds\n */\nexport function delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Retries a function with exponential backoff\n */\nexport async function retry<T>(\n  fn: () => Promise<T>,\n  options: {\n    maxRetries?: number;\n    initialDelay?: number;\n    maxDelay?: number;\n    backoffFactor?: number;\n    shouldRetry?: (error: Error, attempt: number) => boolean;\n  } = {}\n): Promise<T> {\n  const {\n    maxRetries = 3,\n    initialDelay = 1000,\n    maxDelay = 30000,\n    backoffFactor = 2,\n    shouldRetry = () => true,\n  } = options;\n  \n  let lastError: Error;\n  \n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error as Error;\n      \n      if (attempt === maxRetries || !shouldRetry(lastError, attempt)) {\n        throw lastError;\n      }\n      \n      const delayMs = Math.min(initialDelay * Math.pow(backoffFactor, attempt), maxDelay);\n      await delay(delayMs);\n    }\n  }\n  \n  throw lastError!;\n}\n\n/**\n * Creates a debounced version of a function\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  fn: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout | undefined;\n  \n  return (...args: Parameters<T>) => {\n    if (timeout) clearTimeout(timeout);\n    timeout = setTimeout(() => fn(...args), wait);\n  };\n}\n\n/**\n * Creates a throttled version of a function\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  fn: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle = false;\n  \n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      fn(...args);\n      inThrottle = true;\n      setTimeout(() => (inThrottle = false), limit);\n    }\n  };\n}\n\n/**\n * Deep clones an object\n */\nexport function deepClone<T>(obj: T): T {\n  if (obj === null || typeof obj !== 'object') return obj;\n  if (obj instanceof Date) return new Date(obj.getTime()) as T;\n  if (obj instanceof Array) return obj.map(item => deepClone(item)) as T;\n  if (obj instanceof Set) return new Set([...obj].map(item => deepClone(item))) as T;\n  if (obj instanceof Map) {\n    return new Map([...obj].map(([k, v]) => [deepClone(k), deepClone(v)])) as T;\n  }\n  \n  const clonedObj = Object.create(Object.getPrototypeOf(obj));\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      clonedObj[key] = deepClone(obj[key]);\n    }\n  }\n  \n  return clonedObj;\n}\n\n/**\n * Deep merges objects\n */\nexport function deepMerge<T = any>(target: any, ...sources: any[]): T {\n  if (!sources.length) return target;\n  \n  const source = sources.shift();\n  if (!source) return target;\n  \n  for (const key in source) {\n    if (source.hasOwnProperty(key)) {\n      const sourceValue = source[key];\n      const targetValue = target[key];\n      \n      if (isObject(sourceValue) && isObject(targetValue)) {\n        target[key] = deepMerge(targetValue, sourceValue);\n      } else {\n        target[key] = sourceValue;\n      }\n    }\n  }\n  \n  return deepMerge(target, ...sources);\n}\n\n/**\n * Checks if a value is a plain object\n */\nexport function isObject(value: unknown): value is Record<string, unknown> {\n  return value !== null && typeof value === 'object' && value.constructor === Object;\n}\n\n/**\n * Groups an array by a key function\n */\nexport function groupBy<T, K extends string | number | symbol>(\n  array: T[],\n  keyFn: (item: T) => K\n): Record<K, T[]> {\n  return array.reduce((result, item) => {\n    const key = keyFn(item);\n    if (!result[key]) {\n      result[key] = [];\n    }\n    result[key].push(item);\n    return result;\n  }, {} as Record<K, T[]>);\n}\n\n/**\n * Chunks an array into smaller arrays\n */\nexport function chunk<T>(array: T[], size: number): T[][] {\n  const chunks: T[][] = [];\n  for (let i = 0; i < array.length; i += size) {\n    chunks.push(array.slice(i, i + size));\n  }\n  return chunks;\n}\n\n/**\n * Picks specified properties from an object\n */\nexport function pick<T extends Record<string, any>, K extends keyof T>(\n  obj: T,\n  keys: K[]\n): Pick<T, K> {\n  const result = {} as Pick<T, K>;\n  for (const key of keys) {\n    if (key in obj) {\n      result[key] = obj[key];\n    }\n  }\n  return result;\n}\n\n/**\n * Omits specified properties from an object\n */\nexport function omit<T extends Record<string, any>, K extends keyof T>(\n  obj: T,\n  keys: K[]\n): Omit<T, K> {\n  const result = { ...obj };\n  for (const key of keys) {\n    delete result[key];\n  }\n  return result as Omit<T, K>;\n}\n\n/**\n * Creates a promise that resolves after a timeout\n */\nexport function withTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n  timeoutError?: Error\n): Promise<T> {\n  return Promise.race([\n    promise,\n    new Promise<T>((_, reject) =>\n      setTimeout(\n        () => reject(timeoutError || new Error(`Timeout after ${timeoutMs}ms`)),\n        timeoutMs\n      )\n    ),\n  ]);\n}\n\n/**\n * Memoizes a function\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  fn: T,\n  keyFn?: (...args: Parameters<T>) => string\n): T {\n  const cache = new Map<string, ReturnType<T>>();\n  \n  return ((...args: Parameters<T>) => {\n    const key = keyFn ? keyFn(...args) : JSON.stringify(args);\n    \n    if (cache.has(key)) {\n      return cache.get(key)!;\n    }\n    \n    const result = fn(...args);\n    cache.set(key, result);\n    return result;\n  }) as T;\n}","/**\n * HTTP methods enum for type-safe API requests\n */\nexport enum HttpMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS'\n}\n\n/**\n * Type guard to check if a string is a valid HTTP method\n */\nexport function isHttpMethod(method: string): method is HttpMethod {\n  return Object.values(HttpMethod).includes(method as HttpMethod);\n}\n\n/**\n * Request options with proper typing\n */\nexport interface RequestOptions<TRequest = unknown> {\n  headers?: Record<string, string>;\n  signal?: AbortSignal;\n  timeout?: number;\n  body?: TRequest;\n  params?: Record<string, string | number | boolean>;\n  responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n}\n\n/**\n * Type-safe response interface\n */\nexport interface ApiResponse<T = unknown> {\n  data: T;\n  status: number;\n  statusText: string;\n  headers: Record<string, string>;\n}\n\n/**\n * Extended fetch options that include response type hints\n * This provides a cleaner way to handle different response types\n */\nexport interface ExtendedRequestInit extends RequestInit {\n  /**\n   * Hint for how to parse the response body\n   * This is not a standard fetch option but helps our client handle responses correctly\n   */\n  responseType?: 'json' | 'text' | 'blob' | 'arraybuffer' | 'stream';\n  \n  /**\n   * Custom timeout in milliseconds\n   */\n  timeout?: number;\n  \n  /**\n   * Request metadata for logging/debugging\n   */\n  metadata?: {\n    /** Operation name for debugging */\n    operation?: string;\n    /** Start time for performance tracking */\n    startTime?: number;\n    /** Request ID for tracing */\n    requestId?: string;\n  };\n}","import { ExtendedRequestInit } from './types';\n\n/**\n * Response parser that handles different response types based on content-type and hints\n */\nexport class ResponseParser {\n  /**\n   * Parses a fetch Response based on content type and response type hint\n   */\n  static async parse<T>(\n    response: Response,\n    responseType?: ExtendedRequestInit['responseType']\n  ): Promise<T> {\n    // Handle empty responses\n    const contentLength = response.headers.get('content-length');\n    if (contentLength === '0' || response.status === 204) {\n      return undefined as T;\n    }\n    \n    // Use explicit responseType if provided\n    if (responseType) {\n      switch (responseType) {\n        case 'json':\n          return await response.json() as T;\n        case 'text':\n          return await response.text() as T;\n        case 'blob':\n          return await response.blob() as T;\n        case 'arraybuffer':\n          return await response.arrayBuffer() as T;\n        case 'stream':\n          if (!response.body) {\n            throw new Error('Response body is not a stream');\n          }\n          return response.body as T;\n        default: {\n          // TypeScript exhaustiveness check\n          const _exhaustive: never = responseType;\n          throw new Error(`Unknown response type: ${String(_exhaustive)}`);\n        }\n      }\n    }\n    \n    // Auto-detect based on content-type\n    const contentType = response.headers.get('content-type') || '';\n    \n    if (contentType.includes('application/json')) {\n      return await response.json() as T;\n    }\n    \n    if (contentType.includes('text/') || contentType.includes('application/xml')) {\n      return await response.text() as T;\n    }\n    \n    if (contentType.includes('application/octet-stream') || \n        contentType.includes('image/') ||\n        contentType.includes('audio/') ||\n        contentType.includes('video/')) {\n      return await response.blob() as T;\n    }\n    \n    // Default to text for unknown content types\n    return await response.text() as T;\n  }\n  \n  /**\n   * Creates a clean RequestInit object without custom properties\n   */\n  static cleanRequestInit(init: ExtendedRequestInit): RequestInit {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { responseType, timeout, metadata, ...standardInit } = init;\n    return standardInit;\n  }\n}","/**\n * Common HTTP constants shared across all SDKs\n */\n\n/**\n * HTTP headers used across SDKs\n */\nexport const HTTP_HEADERS = {\n  CONTENT_TYPE: 'Content-Type',\n  AUTHORIZATION: 'Authorization',\n  X_API_KEY: 'X-API-Key',\n  USER_AGENT: 'User-Agent',\n  X_CORRELATION_ID: 'X-Correlation-Id',\n  RETRY_AFTER: 'Retry-After',\n  ACCEPT: 'Accept',\n  CACHE_CONTROL: 'Cache-Control'\n} as const;\n\nexport type HttpHeader = typeof HTTP_HEADERS[keyof typeof HTTP_HEADERS];\n\n/**\n * Content types\n */\nexport const CONTENT_TYPES = {\n  JSON: 'application/json',\n  FORM_DATA: 'multipart/form-data',\n  FORM_URLENCODED: 'application/x-www-form-urlencoded',\n  TEXT_PLAIN: 'text/plain',\n  TEXT_STREAM: 'text/event-stream'\n} as const;\n\nexport type ContentType = typeof CONTENT_TYPES[keyof typeof CONTENT_TYPES];\n\n/**\n * HTTP status codes\n */\nexport const HTTP_STATUS = {\n  // 2xx Success\n  OK: 200,\n  CREATED: 201,\n  NO_CONTENT: 204,\n  \n  // 4xx Client Errors\n  BAD_REQUEST: 400,\n  UNAUTHORIZED: 401,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  CONFLICT: 409,\n  TOO_MANY_REQUESTS: 429,\n  RATE_LIMITED: 429, // Alias for Core SDK compatibility\n  \n  // 5xx Server Errors\n  INTERNAL_SERVER_ERROR: 500,\n  INTERNAL_ERROR: 500, // Alias for Admin SDK compatibility\n  BAD_GATEWAY: 502,\n  SERVICE_UNAVAILABLE: 503,\n  GATEWAY_TIMEOUT: 504\n} as const;\n\nexport type HttpStatusCode = typeof HTTP_STATUS[keyof typeof HTTP_STATUS];\n\n/**\n * Error codes for network errors\n */\nexport const ERROR_CODES = {\n  CONNECTION_ABORTED: 'ECONNABORTED',\n  TIMEOUT: 'ETIMEDOUT',\n  CONNECTION_RESET: 'ECONNRESET',\n  NETWORK_UNREACHABLE: 'ENETUNREACH',\n  CONNECTION_REFUSED: 'ECONNREFUSED',\n  HOST_NOT_FOUND: 'ENOTFOUND'\n} as const;\n\nexport type ErrorCode = typeof ERROR_CODES[keyof typeof ERROR_CODES];\n\n/**\n * Default timeout values in milliseconds\n */\nexport const TIMEOUTS = {\n  DEFAULT_REQUEST: 60000, // 60 seconds\n  SHORT_REQUEST: 10000,   // 10 seconds\n  LONG_REQUEST: 300000,   // 5 minutes\n  STREAMING: 0            // No timeout for streaming\n} as const;\n\nexport type TimeoutValue = typeof TIMEOUTS[keyof typeof TIMEOUTS];\n\n/**\n * Retry configuration defaults\n */\nexport const RETRY_CONFIG = {\n  DEFAULT_MAX_RETRIES: 3,\n  INITIAL_DELAY: 1000,    // 1 second\n  MAX_DELAY: 30000,       // 30 seconds\n  BACKOFF_FACTOR: 2\n} as const;\n\nexport type RetryConfigValue = typeof RETRY_CONFIG[keyof typeof RETRY_CONFIG];","/**\n * SignalR hub connection states\n */\nexport enum HubConnectionState {\n  Disconnected = 'Disconnected',\n  Connecting = 'Connecting',\n  Connected = 'Connected',\n  Disconnecting = 'Disconnecting',\n  Reconnecting = 'Reconnecting',\n}\n\n/**\n * SignalR logging levels\n */\nexport enum SignalRLogLevel {\n  Trace = 0,\n  Debug = 1,\n  Information = 2,\n  Warning = 3,\n  Error = 4,\n  Critical = 5,\n  None = 6,\n}\n\n/**\n * HTTP transport types for SignalR\n */\nexport enum HttpTransportType {\n  None = 0,\n  WebSockets = 1,\n  ServerSentEvents = 2,\n  LongPolling = 4,\n}\n\n/**\n * Default transport configuration\n */\nexport const DefaultTransports = \n  HttpTransportType.WebSockets | \n  HttpTransportType.ServerSentEvents | \n  HttpTransportType.LongPolling;\n\n/**\n * Base SignalR connection options\n */\nexport interface SignalRConnectionOptions {\n  /**\n   * Logging level\n   */\n  logLevel?: SignalRLogLevel;\n  \n  /**\n   * Transport types to use\n   */\n  transport?: HttpTransportType;\n  \n  /**\n   * Headers to include with requests\n   */\n  headers?: Record<string, string>;\n  \n  /**\n   * Access token factory for authentication\n   */\n  accessTokenFactory?: () => string | Promise<string>;\n  \n  /**\n   * Close timeout in milliseconds\n   */\n  closeTimeout?: number;\n  \n  /**\n   * Reconnection delay intervals in milliseconds\n   */\n  reconnectionDelay?: number[];\n  \n  /**\n   * Server timeout in milliseconds\n   */\n  serverTimeout?: number;\n  \n  /**\n   * Keep-alive interval in milliseconds\n   */\n  keepAliveInterval?: number;\n}\n\n/**\n * Authentication configuration for SignalR connections\n */\nexport interface SignalRAuthConfig {\n  /**\n   * Authentication token or key\n   */\n  authToken: string;\n  \n  /**\n   * Authentication type (e.g., 'master', 'virtual')\n   */\n  authType: 'master' | 'virtual';\n  \n  /**\n   * Additional headers for authentication\n   */\n  additionalHeaders?: Record<string, string>;\n}\n\n/**\n * SignalR hub method argument types for type safety\n */\nexport type SignalRPrimitive = string | number | boolean | null | undefined;\nexport type SignalRValue = SignalRPrimitive | SignalRArgs | SignalRPrimitive[];\nexport interface SignalRArgs {\n  [key: string]: SignalRValue;\n}","import * as signalR from '@microsoft/signalr';\nimport { \n  HubConnectionState, \n  HttpTransportType,\n  DefaultTransports,\n  SignalRAuthConfig,\n  SignalRConnectionOptions,\n  SignalRLogLevel\n} from './types';\n\n/**\n * Base configuration for SignalR connections\n */\nexport interface BaseSignalRConfig {\n  /**\n   * Base URL for the SignalR hub\n   */\n  baseUrl: string;\n  \n  /**\n   * Authentication configuration\n   */\n  auth: SignalRAuthConfig;\n  \n  /**\n   * Connection options\n   */\n  options?: SignalRConnectionOptions;\n  \n  /**\n   * User agent string\n   */\n  userAgent?: string;\n}\n\n/**\n * Base class for SignalR hub connections with automatic reconnection and error handling.\n * This abstract class provides common functionality for both Admin and Core SDKs.\n */\nexport abstract class BaseSignalRConnection {\n  protected connection?: signalR.HubConnection;\n  protected readonly config: BaseSignalRConfig;\n  protected connectionReadyPromise: Promise<void>;\n  private connectionReadyResolve?: () => void;\n  private connectionReadyReject?: (error: Error) => void;\n  private disposed = false;\n\n  /**\n   * Gets the hub path for this connection type.\n   */\n  protected abstract get hubPath(): string;\n\n  constructor(config: BaseSignalRConfig) {\n    this.config = {\n      ...config,\n      baseUrl: config.baseUrl.replace(/\\/$/, '')\n    };\n    \n    // Initialize the connection ready promise\n    this.connectionReadyPromise = new Promise((resolve, reject) => {\n      this.connectionReadyResolve = resolve;\n      this.connectionReadyReject = reject;\n    });\n  }\n\n  /**\n   * Gets whether the connection is established and ready for use.\n   */\n  get isConnected(): boolean {\n    return this.connection?.state === signalR.HubConnectionState.Connected;\n  }\n\n  /**\n   * Gets the current connection state.\n   */\n  get state(): HubConnectionState {\n    if (!this.connection) {\n      return HubConnectionState.Disconnected;\n    }\n\n    switch (this.connection.state) {\n      case signalR.HubConnectionState.Connected:\n        return HubConnectionState.Connected;\n      case signalR.HubConnectionState.Connecting:\n        return HubConnectionState.Connecting;\n      case signalR.HubConnectionState.Disconnected:\n        return HubConnectionState.Disconnected;\n      case signalR.HubConnectionState.Disconnecting:\n        return HubConnectionState.Disconnecting;\n      case signalR.HubConnectionState.Reconnecting:\n        return HubConnectionState.Reconnecting;\n      default:\n        return HubConnectionState.Disconnected;\n    }\n  }\n\n  /**\n   * Event handlers\n   */\n  onConnected?: () => Promise<void>;\n  onDisconnected?: (error?: Error) => Promise<void>;\n  onReconnecting?: (error?: Error) => Promise<void>;\n  onReconnected?: (connectionId?: string) => Promise<void>;\n\n  /**\n   * Establishes the SignalR connection.\n   */\n  protected async getConnection(): Promise<signalR.HubConnection> {\n    if (this.connection) {\n      return this.connection;\n    }\n\n    const hubUrl = `${this.config.baseUrl}${this.hubPath}`;\n    \n    // Build connection options\n    const connectionOptions: signalR.IHttpConnectionOptions = {\n      accessTokenFactory: this.config.options?.accessTokenFactory || (() => this.config.auth.authToken),\n      transport: this.mapTransportType(this.config.options?.transport || DefaultTransports),\n      headers: this.buildHeaders(),\n      withCredentials: false\n    };\n    \n    // Build the connection\n    const builder = new signalR.HubConnectionBuilder()\n      .withUrl(hubUrl, connectionOptions)\n      .withAutomaticReconnect(this.config.options?.reconnectionDelay || [0, 2000, 10000, 30000]);\n\n    // Configure server timeout and keep-alive if specified\n    if (this.config.options?.serverTimeout) {\n      builder.withServerTimeout(this.config.options.serverTimeout);\n    }\n    \n    if (this.config.options?.keepAliveInterval) {\n      builder.withKeepAliveInterval(this.config.options.keepAliveInterval);\n    }\n\n    // Configure logging\n    const logLevel = this.mapLogLevel(this.config.options?.logLevel || SignalRLogLevel.Information);\n    builder.configureLogging(logLevel);\n\n    this.connection = builder.build();\n\n    // Set up event handlers\n    this.connection.onclose(async (error) => {\n      if (this.onDisconnected) {\n        await this.onDisconnected(error);\n      }\n    });\n\n    this.connection.onreconnecting(async (error) => {\n      if (this.onReconnecting) {\n        await this.onReconnecting(error);\n      }\n    });\n\n    this.connection.onreconnected(async (connectionId) => {\n      if (this.onReconnected) {\n        await this.onReconnected(connectionId);\n      }\n    });\n\n    // Configure hub-specific handlers\n    this.configureHubHandlers(this.connection);\n\n    try {\n      await this.connection.start();\n      \n      if (this.connectionReadyResolve) {\n        this.connectionReadyResolve();\n      }\n      \n      if (this.onConnected) {\n        await this.onConnected();\n      }\n    } catch (error) {\n      if (this.connectionReadyReject) {\n        this.connectionReadyReject(error as Error);\n      }\n      throw error;\n    }\n\n    return this.connection;\n  }\n\n  /**\n   * Configures hub-specific event handlers. Override in derived classes.\n   */\n  protected abstract configureHubHandlers(connection: signalR.HubConnection): void;\n\n  /**\n   * Maps transport type enum to SignalR transport.\n   */\n  protected mapTransportType(transport: HttpTransportType): signalR.HttpTransportType {\n    let result = signalR.HttpTransportType.None;\n    \n    if (transport & HttpTransportType.WebSockets) {\n      result |= signalR.HttpTransportType.WebSockets;\n    }\n    if (transport & HttpTransportType.ServerSentEvents) {\n      result |= signalR.HttpTransportType.ServerSentEvents;\n    }\n    if (transport & HttpTransportType.LongPolling) {\n      result |= signalR.HttpTransportType.LongPolling;\n    }\n    \n    return result;\n  }\n\n  /**\n   * Maps log level enum to SignalR log level.\n   */\n  protected mapLogLevel(level: SignalRLogLevel): signalR.LogLevel {\n    switch (level) {\n      case SignalRLogLevel.Trace:\n        return signalR.LogLevel.Trace;\n      case SignalRLogLevel.Debug:\n        return signalR.LogLevel.Debug;\n      case SignalRLogLevel.Information:\n        return signalR.LogLevel.Information;\n      case SignalRLogLevel.Warning:\n        return signalR.LogLevel.Warning;\n      case SignalRLogLevel.Error:\n        return signalR.LogLevel.Error;\n      case SignalRLogLevel.Critical:\n        return signalR.LogLevel.Critical;\n      case SignalRLogLevel.None:\n        return signalR.LogLevel.None;\n      default:\n        return signalR.LogLevel.Information;\n    }\n  }\n\n  /**\n   * Builds headers for the connection based on configuration.\n   */\n  private buildHeaders(): Record<string, string> {\n    const headers: Record<string, string> = {\n      'User-Agent': this.config.userAgent || 'Conduit-Node-Client/1.0.0',\n      ...this.config.options?.headers\n    };\n\n    // Add authentication-specific headers\n    if (this.config.auth.authType === 'master' && this.config.auth.additionalHeaders) {\n      Object.assign(headers, this.config.auth.additionalHeaders);\n    }\n\n    return headers;\n  }\n\n  /**\n   * Waits for the connection to be ready.\n   */\n  public async waitForReady(): Promise<void> {\n    return this.connectionReadyPromise;\n  }\n\n  /**\n   * Invokes a method on the hub with proper error handling.\n   */\n  protected async invoke<T = void>(methodName: string, ...args: unknown[]): Promise<T> {\n    if (this.disposed) {\n      throw new Error('Connection has been disposed');\n    }\n\n    const connection = await this.getConnection();\n    \n    try {\n      return await connection.invoke<T>(methodName, ...args);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      throw new Error(`SignalR invoke error for ${methodName}: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Sends a message to the hub without expecting a response.\n   */\n  protected async send(methodName: string, ...args: unknown[]): Promise<void> {\n    if (this.disposed) {\n      throw new Error('Connection has been disposed');\n    }\n\n    const connection = await this.getConnection();\n    \n    try {\n      await connection.send(methodName, ...args);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      throw new Error(`SignalR send error for ${methodName}: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Disconnects the SignalR connection.\n   */\n  public async disconnect(): Promise<void> {\n    if (this.connection && this.connection.state !== signalR.HubConnectionState.Disconnected) {\n      await this.connection.stop();\n      this.connection = undefined;\n      \n      // Reset the connection ready promise\n      this.connectionReadyPromise = new Promise((resolve, reject) => {\n        this.connectionReadyResolve = resolve;\n        this.connectionReadyReject = reject;\n      });\n    }\n  }\n\n  /**\n   * Disposes of the connection and cleans up resources.\n   */\n  public async dispose(): Promise<void> {\n    this.disposed = true;\n    await this.disconnect();\n    this.connectionReadyResolve = undefined;\n    this.connectionReadyReject = undefined;\n  }\n}","/**\n * Logger interface for client logging\n */\nexport interface Logger {\n  debug(message: string, ...args: unknown[]): void;\n  info(message: string, ...args: unknown[]): void;\n  warn(message: string, ...args: unknown[]): void;\n  error(message: string, ...args: unknown[]): void;\n}\n\n/**\n * Cache provider interface for client-side caching\n */\nexport interface CacheProvider {\n  get<T>(key: string): Promise<T | null>;\n  set<T>(key: string, value: T, ttl?: number): Promise<void>;\n  delete(key: string): Promise<void>;\n  clear(): Promise<void>;\n}\n\n/**\n * Base retry configuration interface\n * \n * Note: The Admin and Core SDKs have different retry strategies:\n * - Admin SDK uses simple fixed delay retry\n * - Core SDK uses exponential backoff\n * \n * This base interface supports both patterns.\n */\nexport interface RetryConfig {\n  /**\n   * Maximum number of retry attempts\n   */\n  maxRetries: number;\n  \n  /**\n   * For Admin SDK: Fixed delay between retries in milliseconds\n   * For Core SDK: Initial delay for exponential backoff\n   */\n  retryDelay?: number;\n  \n  /**\n   * For Core SDK: Initial delay for exponential backoff\n   */\n  initialDelay?: number;\n  \n  /**\n   * For Core SDK: Maximum delay between retries\n   */\n  maxDelay?: number;\n  \n  /**\n   * For Core SDK: Backoff multiplication factor\n   */\n  factor?: number;\n  \n  /**\n   * Custom retry condition function\n   */\n  retryCondition?: (error: unknown) => boolean;\n}\n\n/**\n * HTTP error class\n */\nexport class HttpError extends Error {\n  public code?: string;\n  public response?: {\n    status: number;\n    data: unknown;\n    headers: Record<string, string>;\n  };\n  public request?: unknown;\n  public config?: {\n    url?: string;\n    method?: string;\n    _retry?: number;\n  };\n\n  constructor(message: string, code?: string) {\n    super(message);\n    this.name = 'HttpError';\n    this.code = code;\n  }\n}\n\n/**\n * Request configuration information\n */\nexport interface RequestConfigInfo {\n  method: string;\n  url: string;\n  headers: Record<string, string>;\n  data?: unknown;\n  params?: Record<string, unknown>;\n}\n\n/**\n * Response information\n */\nexport interface ResponseInfo {\n  status: number;\n  statusText: string;\n  headers: Record<string, string>;\n  data: unknown;\n  config: RequestConfigInfo;\n}\n\n/**\n * Base client lifecycle callbacks\n */\nexport interface ClientLifecycleCallbacks {\n  /**\n   * Callback invoked on any error\n   */\n  onError?: (error: Error) => void;\n  \n  /**\n   * Callback invoked before each request\n   */\n  onRequest?: (config: RequestConfigInfo) => void | Promise<void>;\n  \n  /**\n   * Callback invoked after each response\n   */\n  onResponse?: (response: ResponseInfo) => void | Promise<void>;\n}\n\n/**\n * Base client configuration options\n */\nexport interface BaseClientOptions extends ClientLifecycleCallbacks {\n  /**\n   * Request timeout in milliseconds\n   */\n  timeout?: number;\n  \n  /**\n   * Retry configuration\n   */\n  retries?: number | RetryConfig;\n  \n  /**\n   * Logger instance for client logging\n   */\n  logger?: Logger;\n  \n  /**\n   * Cache provider for response caching\n   */\n  cache?: CacheProvider;\n  \n  /**\n   * Custom headers to include with all requests\n   */\n  headers?: Record<string, string>;\n  \n  /**\n   * Custom retry delays in milliseconds (overrides retry config)\n   * @default [1000, 2000, 4000, 8000, 16000]\n   */\n  retryDelay?: number[];\n  \n  /**\n   * Custom function to validate response status\n   */\n  validateStatus?: (status: number) => boolean;\n  \n  /**\n   * Enable debug mode\n   */\n  debug?: boolean;\n}","import type { \n  BaseClientOptions,\n  RetryConfig,\n  Logger,\n  CacheProvider,\n  RequestConfigInfo,\n  ResponseInfo\n} from './types';\nimport { HttpMethod } from '../http';\n\nexport interface BaseClientConfig extends BaseClientOptions {\n  baseURL: string;\n}\n\nexport interface BaseRequestOptions {\n  headers?: Record<string, string>;\n  signal?: AbortSignal;\n  timeout?: number;\n  responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n}\n\n/**\n * Abstract base API client for Conduit SDKs\n * Provides common HTTP functionality with authentication handled by subclasses\n */\nexport abstract class BaseApiClient {\n  protected readonly config: Required<Omit<BaseClientConfig, 'logger' | 'cache' | 'onError' | 'onRequest' | 'onResponse'>> & \n    Pick<BaseClientConfig, 'logger' | 'cache' | 'onError' | 'onRequest' | 'onResponse'>;\n  protected readonly retryConfig: RetryConfig;\n  protected readonly logger?: Logger;\n  protected readonly cache?: CacheProvider;\n\n  constructor(config: BaseClientConfig) {\n    this.config = {\n      baseURL: config.baseURL.replace(/\\/$/, ''), // Remove trailing slash\n      timeout: config.timeout ?? 30000,\n      retries: config.retries ?? 3,\n      headers: config.headers ?? {},\n      debug: config.debug ?? false,\n      retryDelay: config.retryDelay ?? [1000, 2000, 4000, 8000, 16000],\n      validateStatus: config.validateStatus ?? ((status) => status >= 200 && status < 300),\n      logger: config.logger,\n      cache: config.cache,\n      onError: config.onError,\n      onRequest: config.onRequest,\n      onResponse: config.onResponse,\n    };\n\n    this.logger = config.logger;\n    this.cache = config.cache;\n    this.retryConfig = this.normalizeRetryConfig(config.retries);\n  }\n\n  /**\n   * Abstract method for SDK-specific authentication headers\n   * Must be implemented by Core and Admin SDK clients\n   */\n  protected abstract getAuthHeaders(): Record<string, string>;\n  \n  /**\n   * Get base URL for services that need direct access\n   */\n  public getBaseURL(): string {\n    return this.config.baseURL;\n  }\n  \n  /**\n   * Get timeout for services that need direct access\n   */\n  public getTimeout(): number {\n    return this.config.timeout;\n  }\n\n  /**\n   * Type-safe request method with proper request/response typing\n   */\n  protected async request<TResponse = unknown, TRequest = unknown>(\n    url: string,\n    options: BaseRequestOptions & { \n      method?: HttpMethod; \n      body?: TRequest;\n    } = {}\n  ): Promise<TResponse> {\n    const fullUrl = this.buildUrl(url);\n    const controller = new AbortController();\n    \n    // Set up timeout\n    const timeoutId = options.timeout ?? this.config.timeout\n      ? setTimeout(() => controller.abort(), options.timeout ?? this.config.timeout)\n      : undefined;\n\n    try {\n      const requestConfig: RequestConfigInfo = {\n        method: options.method ?? HttpMethod.GET,\n        url: fullUrl,\n        headers: this.buildHeaders(options.headers),\n        data: options.body,\n      };\n\n      // Call onRequest callback if provided\n      if (this.config.onRequest) {\n        await this.config.onRequest(requestConfig);\n      }\n\n      if (this.config.debug) {\n        this.log('debug', `[Conduit] ${requestConfig.method} ${requestConfig.url}`);\n      }\n\n      const response = await this.executeWithRetry<TResponse, TRequest>(\n        fullUrl,\n        {\n          method: requestConfig.method,\n          headers: requestConfig.headers,\n          body: options.body ? JSON.stringify(options.body) : undefined,\n          signal: options.signal ?? controller.signal,\n        },\n        options\n      );\n\n      return response;\n    } finally {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    }\n  }\n\n  /**\n   * Type-safe GET request with support for query parameters\n   */\n  protected async get<TResponse = unknown>(\n    url: string,\n    paramsOrOptions?: Record<string, unknown> | BaseRequestOptions,\n    options?: BaseRequestOptions\n  ): Promise<TResponse> {\n    // If third argument is provided, second arg is params\n    if (options) {\n      const urlWithParams = this.buildUrlWithParams(url, paramsOrOptions as Record<string, unknown>);\n      return this.request<TResponse>(urlWithParams, { ...options, method: HttpMethod.GET });\n    }\n    \n    // Check if it's options (has headers/signal/timeout/responseType) or params\n    const isOptions = paramsOrOptions && \n      ('headers' in paramsOrOptions || 'signal' in paramsOrOptions || \n       'timeout' in paramsOrOptions || 'responseType' in paramsOrOptions);\n    \n    if (isOptions) {\n      return this.request<TResponse>(url, { \n        ...(paramsOrOptions as BaseRequestOptions), \n        method: HttpMethod.GET \n      });\n    } else if (paramsOrOptions) {\n      // It's params - add them to the URL\n      const urlWithParams = this.buildUrlWithParams(url, paramsOrOptions as Record<string, unknown>);\n      return this.request<TResponse>(urlWithParams, { method: HttpMethod.GET });\n    } else {\n      // No params or options\n      return this.request<TResponse>(url, { method: HttpMethod.GET });\n    }\n  }\n\n  /**\n   * Type-safe POST request\n   */\n  protected async post<TResponse = unknown, TRequest = unknown>(\n    url: string,\n    data?: TRequest,\n    options?: BaseRequestOptions\n  ): Promise<TResponse> {\n    return this.request<TResponse, TRequest>(url, { \n      ...options, \n      method: HttpMethod.POST, \n      body: data \n    });\n  }\n\n  /**\n   * Type-safe PUT request\n   */\n  protected async put<TResponse = unknown, TRequest = unknown>(\n    url: string,\n    data?: TRequest,\n    options?: BaseRequestOptions\n  ): Promise<TResponse> {\n    return this.request<TResponse, TRequest>(url, { \n      ...options, \n      method: HttpMethod.PUT, \n      body: data \n    });\n  }\n\n  /**\n   * Type-safe PATCH request\n   */\n  protected async patch<TResponse = unknown, TRequest = unknown>(\n    url: string,\n    data?: TRequest,\n    options?: BaseRequestOptions\n  ): Promise<TResponse> {\n    return this.request<TResponse, TRequest>(url, { \n      ...options, \n      method: HttpMethod.PATCH, \n      body: data \n    });\n  }\n\n  /**\n   * Type-safe DELETE request\n   */\n  protected async delete<TResponse = unknown>(\n    url: string,\n    options?: BaseRequestOptions\n  ): Promise<TResponse> {\n    return this.request<TResponse>(url, { ...options, method: HttpMethod.DELETE });\n  }\n\n  /**\n   * Build full URL from path\n   */\n  private buildUrl(path: string): string {\n    // If path is already a full URL, return it\n    if (path.startsWith('http://') || path.startsWith('https://')) {\n      return path;\n    }\n    \n    // Ensure path starts with /\n    const cleanPath = path.startsWith('/') ? path : `/${path}`;\n    \n    return `${this.config.baseURL}${cleanPath}`;\n  }\n\n  /**\n   * Build headers with authentication and defaults\n   */\n  private buildHeaders(additionalHeaders?: Record<string, string>): Record<string, string> {\n    return {\n      'Content-Type': 'application/json',\n      'User-Agent': '@knn_labs/conduit-sdk',\n      ...this.config.headers,\n      ...this.getAuthHeaders(), // SDK-specific auth headers\n      ...additionalHeaders,\n    };\n  }\n\n  /**\n   * Execute request with retry logic\n   */\n  private async executeWithRetry<TResponse, TRequest = unknown>(\n    url: string,\n    init: RequestInit,\n    options: BaseRequestOptions,\n    attempt: number = 1\n  ): Promise<TResponse> {\n    try {\n      const response = await fetch(url, init);\n      \n      // Call onResponse callback if provided\n      if (this.config.onResponse) {\n        const headers: Record<string, string> = {};\n        response.headers.forEach((value, key) => {\n          headers[key] = value;\n        });\n        \n        const responseInfo: ResponseInfo = {\n          status: response.status,\n          statusText: response.statusText,\n          headers,\n          data: undefined, // Will be populated after parsing\n          config: {\n            method: init.method ?? 'GET',\n            url,\n            headers: init.headers as Record<string, string> ?? {},\n            data: undefined,\n          },\n        };\n        await this.config.onResponse(responseInfo);\n      }\n\n      if (this.config.debug) {\n        this.log('debug', `[Conduit] Response: ${response.status} ${response.statusText}`);\n      }\n\n      // Validate response status\n      if (!this.config.validateStatus(response.status)) {\n        const error = await this.handleErrorResponse(response);\n        throw error;\n      }\n\n      // Parse response based on type\n      return await this.parseResponse<TResponse>(response, options.responseType);\n    } catch (error) {\n      // Check if we should retry\n      if (attempt <= this.retryConfig.maxRetries && this.shouldRetry(error)) {\n        const delay = this.calculateDelay(attempt);\n        if (this.config.debug) {\n          this.log('debug', `[Conduit] Retrying request (attempt ${attempt + 1}) after ${delay}ms`);\n        }\n        await this.sleep(delay);\n        return this.executeWithRetry<TResponse, TRequest>(url, init, options, attempt + 1);\n      }\n\n      // Handle error\n      const handledError = this.handleError(error);\n      if (this.config.onError) {\n        this.config.onError(handledError);\n      }\n      throw handledError;\n    }\n  }\n\n  /**\n   * Parse response based on content type\n   */\n  private async parseResponse<T>(response: Response, responseType?: string): Promise<T> {\n    // Handle empty responses\n    const contentLength = response.headers.get('content-length');\n    if (contentLength === '0' || response.status === 204) {\n      return undefined as T;\n    }\n\n    // Parse based on requested type or content-type header\n    const contentType = response.headers.get('content-type') ?? '';\n    \n    if (responseType === 'blob' || contentType.includes('image/') || contentType.includes('application/octet-stream')) {\n      return await response.blob() as T;\n    } else if (responseType === 'arraybuffer') {\n      return await response.arrayBuffer() as T;\n    } else if (responseType === 'text' || contentType.includes('text/')) {\n      return await response.text() as T;\n    } else {\n      // Default to JSON\n      return await response.json() as T;\n    }\n  }\n\n  /**\n   * Handle error responses\n   */\n  protected abstract handleErrorResponse(response: Response): Promise<Error>;\n\n  /**\n   * Determine if error should trigger retry\n   */\n  protected shouldRetry(error: unknown): boolean {\n    // Use custom retry condition if provided\n    if (this.retryConfig.retryCondition) {\n      return this.retryConfig.retryCondition(error);\n    }\n\n    // Default retry logic\n    if (error instanceof Error) {\n      // Network errors are retryable\n      if (error.name === 'AbortError' || \n          error.message.includes('network') ||\n          error.message.includes('fetch')) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Calculate retry delay\n   */\n  private calculateDelay(attempt: number): number {\n    // Use custom delays if provided\n    if (this.config.retryDelay && this.config.retryDelay.length > 0) {\n      const index = Math.min(attempt - 1, this.config.retryDelay.length - 1);\n      return this.config.retryDelay[index];\n    }\n    \n    // Use exponential backoff\n    const initialDelay = this.retryConfig.initialDelay ?? 1000;\n    const maxDelay = this.retryConfig.maxDelay ?? 30000;\n    const factor = this.retryConfig.factor ?? 2;\n    \n    const delay = Math.min(\n      initialDelay * Math.pow(factor, attempt - 1),\n      maxDelay\n    );\n    \n    // Add jitter\n    return delay + Math.random() * 1000;\n  }\n\n  /**\n   * Sleep for specified milliseconds\n   */\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Handle and transform errors\n   */\n  protected handleError(error: unknown): Error {\n    if (error instanceof Error) {\n      return error;\n    }\n    return new Error(String(error));\n  }\n\n  /**\n   * Normalize retry configuration\n   */\n  private normalizeRetryConfig(retries?: number | RetryConfig): RetryConfig {\n    if (typeof retries === 'number') {\n      return {\n        maxRetries: retries,\n        initialDelay: 1000,\n        maxDelay: 30000,\n        factor: 2,\n      };\n    }\n    return retries ?? { maxRetries: 3, initialDelay: 1000, maxDelay: 30000, factor: 2 };\n  }\n\n  /**\n   * Log message using logger if available\n   */\n  protected log(level: 'debug' | 'info' | 'warn' | 'error', message: string, ...args: unknown[]): void {\n    if (this.logger?.[level]) {\n      this.logger[level](message, ...args);\n    } else if (this.config.debug && level === 'debug') {\n      console.warn(message, ...args);\n    }\n  }\n\n  /**\n   * Build URL with query parameters\n   */\n  protected buildUrlWithParams(url: string, params: Record<string, unknown>): string {\n    const searchParams = new URLSearchParams();\n    \n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined && value !== null) {\n        if (Array.isArray(value)) {\n          value.forEach(v => searchParams.append(key, String(v)));\n        } else {\n          searchParams.append(key, String(value));\n        }\n      }\n    });\n    \n    const queryString = searchParams.toString();\n    return queryString ? `${url}?${queryString}` : url;\n  }\n\n  /**\n   * Get cache key for a request\n   */\n  protected getCacheKey(resource: string, id?: unknown, params?: Record<string, unknown>): string {\n    const parts = [resource];\n    if (id !== undefined) {\n      parts.push(JSON.stringify(id));\n    }\n    if (params) {\n      parts.push(JSON.stringify(params));\n    }\n    return parts.join(':');\n  }\n\n  /**\n   * Get from cache\n   */\n  protected async getFromCache<T>(key: string): Promise<T | null> {\n    if (!this.cache) return null;\n    \n    try {\n      const cached = await this.cache.get<T>(key);\n      if (cached) {\n        this.log('debug', `Cache hit for key: ${key}`);\n        return cached;\n      }\n    } catch (error) {\n      this.log('error', 'Cache get error:', error);\n    }\n    \n    return null;\n  }\n\n  /**\n   * Set cache value\n   */\n  protected async setCache(key: string, value: unknown, ttl?: number): Promise<void> {\n    if (!this.cache) return;\n    \n    try {\n      await this.cache.set(key, value, ttl);\n      this.log('debug', `Cache set for key: ${key}`);\n    } catch (error) {\n      this.log('error', 'Cache set error:', error);\n    }\n  }\n\n  /**\n   * Execute function with caching\n   */\n  protected async withCache<T>(\n    cacheKey: string,\n    fn: () => Promise<T>,\n    ttl?: number\n  ): Promise<T> {\n    // Try to get from cache first\n    const cached = await this.getFromCache<T>(cacheKey);\n    if (cached !== null) {\n      return cached;\n    }\n\n    // Execute the function\n    const result = await fn();\n\n    // Cache the result\n    await this.setCache(cacheKey, result, ttl);\n\n    return result;\n  }\n}"],"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","names":["ModelCapability","ProviderType","FilterOperator","HttpMethod","HubConnectionState","SignalRLogLevel","HttpTransportType","delay"]}