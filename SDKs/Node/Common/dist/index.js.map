{"version":3,"sources":["../src/index.ts","../src/types/capabilities.ts","../src/errors/index.ts","../src/http/types.ts","../src/http/parser.ts","../src/http/constants.ts","../src/signalr/types.ts","../src/signalr/BaseSignalRConnection.ts","../src/client/types.ts"],"sourcesContent":["/**\n * @knn_labs/conduit-common - Shared types for Conduit SDK clients\n */\n\n// Base types\nexport * from './types/base';\n\n// Pagination types\nexport * from './types/pagination';\n\n// Capability types\nexport * from './types/capabilities';\n\n// Error types and utilities\nexport * from './errors';\n\n// HTTP types and utilities\nexport * from './http';\n\n// SignalR types and base classes\nexport * from './signalr';\n\n// Client configuration types\nexport * from './client';\n\n// Explicit exports for types that might get tree-shaken\nexport type { Logger, CacheProvider, RequestConfigInfo, ResponseInfo } from './client/types';\nexport { HttpError } from './client/types';\nexport type { SignalRConfig } from './client/signalr-config';\nexport type { SignalRConnectionOptions } from './signalr/types';","/**\n * Model capability definitions shared across Conduit SDK clients\n */\n\n/**\n * Core model capabilities supported by Conduit\n */\nexport enum ModelCapability {\n  CHAT = 'chat',\n  VISION = 'vision',\n  IMAGE_GENERATION = 'image-generation',\n  IMAGE_EDIT = 'image-edit',\n  IMAGE_VARIATION = 'image-variation',\n  AUDIO_TRANSCRIPTION = 'audio-transcription',\n  TEXT_TO_SPEECH = 'text-to-speech',\n  REALTIME_AUDIO = 'realtime-audio',\n  EMBEDDINGS = 'embeddings',\n  VIDEO_GENERATION = 'video-generation',\n}\n\n/**\n * Model capability metadata\n */\nexport interface ModelCapabilityInfo {\n  id: ModelCapability;\n  displayName: string;\n  description?: string;\n  category: 'text' | 'vision' | 'audio' | 'video';\n}\n\n/**\n * Model capabilities definition for a specific model\n */\nexport interface ModelCapabilities {\n  modelId: string;\n  capabilities: ModelCapability[];\n  constraints?: ModelConstraints;\n}\n\n/**\n * Model-specific constraints\n */\nexport interface ModelConstraints {\n  maxTokens?: number;\n  maxImages?: number;\n  supportedImageSizes?: string[];\n  supportedImageFormats?: string[];\n  supportedAudioFormats?: string[];\n  supportedVideoSizes?: string[];\n  supportedLanguages?: string[];\n  supportedVoices?: string[];\n  maxDuration?: number;\n}\n\n/**\n * Get user-friendly display name for a capability\n */\nexport function getCapabilityDisplayName(capability: ModelCapability): string {\n  switch (capability) {\n    case ModelCapability.CHAT:\n      return 'Chat Completion';\n    case ModelCapability.VISION:\n      return 'Vision (Image Understanding)';\n    case ModelCapability.IMAGE_GENERATION:\n      return 'Image Generation';\n    case ModelCapability.IMAGE_EDIT:\n      return 'Image Editing';\n    case ModelCapability.IMAGE_VARIATION:\n      return 'Image Variation';\n    case ModelCapability.AUDIO_TRANSCRIPTION:\n      return 'Audio Transcription';\n    case ModelCapability.TEXT_TO_SPEECH:\n      return 'Text-to-Speech';\n    case ModelCapability.REALTIME_AUDIO:\n      return 'Realtime Audio';\n    case ModelCapability.EMBEDDINGS:\n      return 'Embeddings';\n    case ModelCapability.VIDEO_GENERATION:\n      return 'Video Generation';\n    default:\n      return capability;\n  }\n}\n\n/**\n * Get capability category\n */\nexport function getCapabilityCategory(capability: ModelCapability): 'text' | 'vision' | 'audio' | 'video' {\n  switch (capability) {\n    case ModelCapability.CHAT:\n    case ModelCapability.EMBEDDINGS:\n      return 'text';\n    case ModelCapability.VISION:\n    case ModelCapability.IMAGE_GENERATION:\n    case ModelCapability.IMAGE_EDIT:\n    case ModelCapability.IMAGE_VARIATION:\n      return 'vision';\n    case ModelCapability.AUDIO_TRANSCRIPTION:\n    case ModelCapability.TEXT_TO_SPEECH:\n    case ModelCapability.REALTIME_AUDIO:\n      return 'audio';\n    case ModelCapability.VIDEO_GENERATION:\n      return 'video';\n    default:\n      return 'text';\n  }\n}","/**\n * Common error types for Conduit SDK clients\n * \n * This module provides a unified error hierarchy for both Admin and Core SDKs,\n * consolidating previously duplicated error classes.\n */\n\nexport class ConduitError extends Error {\n  public statusCode: number;\n  public code: string;\n  public context?: Record<string, unknown>;\n  \n  // Admin SDK specific fields\n  public details?: unknown;\n  public endpoint?: string;\n  public method?: string;\n  \n  // Core SDK specific fields\n  public type?: string;\n  public param?: string;\n\n  constructor(\n    message: string,\n    statusCode: number = 500,\n    code: string = 'INTERNAL_ERROR',\n    context?: Record<string, unknown>\n  ) {\n    super(message);\n    this.name = this.constructor.name;\n    this.statusCode = statusCode;\n    this.code = code;\n    this.context = context;\n    \n    // Preserve additional context from the constructor pattern\n    if (context) {\n      // Admin SDK fields\n      this.details = context.details;\n      this.endpoint = context.endpoint as string | undefined;\n      this.method = context.method as string | undefined;\n      \n      // Core SDK fields\n      this.type = context.type as string | undefined;\n      this.param = context.param as string | undefined;\n    }\n    \n    // Ensure proper prototype chain for instanceof checks\n    Object.setPrototypeOf(this, new.target.prototype);\n    \n    // Capture stack trace for better debugging\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      statusCode: this.statusCode,\n      code: this.code,\n      context: this.context,\n      details: this.details,\n      endpoint: this.endpoint,\n      method: this.method,\n      type: this.type,\n      param: this.param,\n      timestamp: new Date().toISOString(),\n    };\n  }\n  \n  // Helper method for Next.js serialization\n  toSerializable() {\n    return {\n      isConduitError: true,\n      ...this.toJSON(),\n    };\n  }\n  \n  // Static method to reconstruct from serialized error\n  static fromSerializable(data: unknown): ConduitError {\n    if (!data || typeof data !== 'object' || !('isConduitError' in data) || !(data as { isConduitError: unknown }).isConduitError) {\n      throw new Error('Invalid serialized ConduitError');\n    }\n    \n    const errorData = data as unknown as {\n      message: string;\n      statusCode: number;\n      code: string;\n      context?: Record<string, unknown>;\n      details?: unknown;\n      endpoint?: string;\n      method?: string;\n      type?: string;\n      param?: string;\n    };\n    \n    const error = new ConduitError(\n      errorData.message,\n      errorData.statusCode,\n      errorData.code,\n      errorData.context\n    );\n    \n    // Restore additional properties\n    if (errorData.details !== undefined) error.details = errorData.details;\n    if (errorData.endpoint !== undefined) error.endpoint = errorData.endpoint;\n    if (errorData.method !== undefined) error.method = errorData.method;\n    if (errorData.type !== undefined) error.type = errorData.type;\n    if (errorData.param !== undefined) error.param = errorData.param;\n    \n    return error;\n  }\n}\n\nexport class AuthError extends ConduitError {\n  constructor(message = 'Authentication failed', context?: Record<string, unknown>) {\n    super(message, 401, 'AUTH_ERROR', context);\n  }\n}\n\n// Alias for backward compatibility\nexport class AuthenticationError extends AuthError {}\n\nexport class AuthorizationError extends ConduitError {\n  constructor(message = 'Access forbidden', context?: Record<string, unknown>) {\n    super(message, 403, 'AUTHORIZATION_ERROR', context);\n  }\n}\n\nexport class ValidationError extends ConduitError {\n  public field?: string;\n  \n  constructor(message = 'Validation failed', context?: Record<string, unknown>) {\n    super(message, 400, 'VALIDATION_ERROR', context);\n    this.field = context?.field as string | undefined;\n  }\n}\n\nexport class NotFoundError extends ConduitError {\n  constructor(message = 'Resource not found', context?: Record<string, unknown>) {\n    super(message, 404, 'NOT_FOUND', context);\n  }\n}\n\nexport class ConflictError extends ConduitError {\n  constructor(message = 'Resource conflict', context?: Record<string, unknown>) {\n    super(message, 409, 'CONFLICT_ERROR', context);\n  }\n}\n\nexport class InsufficientBalanceError extends ConduitError {\n  public balance?: number;\n  public requiredAmount?: number;\n\n  constructor(message = 'Insufficient balance to complete request', context?: Record<string, unknown>) {\n    super(message, 402, 'INSUFFICIENT_BALANCE', context);\n    this.balance = context?.balance as number | undefined;\n    this.requiredAmount = context?.requiredAmount as number | undefined;\n  }\n}\n\nexport class RateLimitError extends ConduitError {\n  public retryAfter?: number;\n\n  constructor(message = 'Rate limit exceeded', retryAfter?: number, context?: Record<string, unknown>) {\n    super(message, 429, 'RATE_LIMIT_ERROR', { ...context, retryAfter });\n    this.retryAfter = retryAfter;\n  }\n}\n\nexport class ServerError extends ConduitError {\n  constructor(message = 'Internal server error', context?: Record<string, unknown>) {\n    super(message, 500, 'SERVER_ERROR', context);\n  }\n}\n\nexport class NetworkError extends ConduitError {\n  constructor(message = 'Network error', context?: Record<string, unknown>) {\n    super(message, 0, 'NETWORK_ERROR', context);\n  }\n}\n\nexport class TimeoutError extends ConduitError {\n  constructor(message = 'Request timeout', context?: Record<string, unknown>) {\n    super(message, 408, 'TIMEOUT_ERROR', context);\n  }\n}\n\nexport class NotImplementedError extends ConduitError {\n  constructor(message: string, context?: Record<string, unknown>) {\n    super(message, 501, 'NOT_IMPLEMENTED', context);\n  }\n}\n\nexport class StreamError extends ConduitError {\n  constructor(message = 'Stream processing failed', context?: Record<string, unknown>) {\n    super(message, 500, 'STREAM_ERROR', context);\n  }\n}\n\n// Type guards\nexport function isConduitError(error: unknown): error is ConduitError {\n  return error instanceof ConduitError;\n}\n\nexport function isAuthError(error: unknown): error is AuthError {\n  return error instanceof AuthError || error instanceof AuthenticationError;\n}\n\nexport function isAuthorizationError(error: unknown): error is AuthorizationError {\n  return error instanceof AuthorizationError;\n}\n\nexport function isValidationError(error: unknown): error is ValidationError {\n  return error instanceof ValidationError;\n}\n\nexport function isNotFoundError(error: unknown): error is NotFoundError {\n  return error instanceof NotFoundError;\n}\n\nexport function isConflictError(error: unknown): error is ConflictError {\n  return error instanceof ConflictError;\n}\n\nexport function isInsufficientBalanceError(error: unknown): error is InsufficientBalanceError {\n  return error instanceof InsufficientBalanceError;\n}\n\nexport function isRateLimitError(error: unknown): error is RateLimitError {\n  return error instanceof RateLimitError;\n}\n\nexport function isNetworkError(error: unknown): error is NetworkError {\n  return error instanceof NetworkError;\n}\n\nexport function isStreamError(error: unknown): error is StreamError {\n  return error instanceof StreamError;\n}\n\nexport function isTimeoutError(error: unknown): error is TimeoutError {\n  return error instanceof TimeoutError;\n}\n\n// Helper to check if an error is serialized ConduitError\nexport function isSerializedConduitError(data: unknown): data is ReturnType<ConduitError['toSerializable']> {\n  return (\n    typeof data === 'object' &&\n    data !== null &&\n    'isConduitError' in data &&\n    (data as { isConduitError: unknown }).isConduitError === true\n  );\n}\n\n// Type guard for HTTP errors\nexport function isHttpError(error: unknown): error is {\n  response: { status: number; data: unknown; headers: Record<string, string> };\n  message: string;\n  request?: unknown;\n  code?: string;\n} {\n  return (\n    typeof error === 'object' &&\n    error !== null &&\n    'response' in error &&\n    typeof (error as { response: unknown }).response === 'object'\n  );\n}\n\n// Type guard for network errors\nexport function isHttpNetworkError(error: unknown): error is {\n  request: unknown;\n  message: string;\n  code?: string;\n} {\n  return (\n    typeof error === 'object' &&\n    error !== null &&\n    'request' in error &&\n    !('response' in error)\n  );\n}\n\n// Type guard for generic errors\nexport function isErrorLike(error: unknown): error is {\n  message: string;\n} {\n  return (\n    typeof error === 'object' &&\n    error !== null &&\n    'message' in error &&\n    typeof (error as { message: unknown }).message === 'string'\n  );\n}\n\n// Next.js-specific utilities for error serialization across server/client boundaries\nexport function serializeError(error: unknown): Record<string, unknown> {\n  if (isConduitError(error)) {\n    return error.toSerializable();\n  }\n  \n  if (error instanceof Error) {\n    return {\n      isError: true,\n      name: error.name,\n      message: error.message,\n      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined,\n    };\n  }\n  \n  return {\n    isError: true,\n    message: String(error),\n  };\n}\n\nexport function deserializeError(data: unknown): Error {\n  if (isSerializedConduitError(data)) {\n    return ConduitError.fromSerializable(data);\n  }\n  \n  if (typeof data === 'object' && data !== null && 'isError' in data) {\n    const errorData = data as {\n      message?: string;\n      name?: string;\n      stack?: string;\n      isError: boolean;\n    };\n    const error = new Error(errorData.message || 'Unknown error');\n    if (errorData.name) error.name = errorData.name;\n    if (errorData.stack) error.stack = errorData.stack;\n    return error;\n  }\n  \n  return new Error('Unknown error');\n}\n\n// Helper for Next.js error boundaries\nexport function getErrorMessage(error: unknown): string {\n  if (isConduitError(error)) {\n    return error.message;\n  }\n  \n  if (error instanceof Error) {\n    return error.message;\n  }\n  \n  return 'An unexpected error occurred';\n}\n\n// Helper for Next.js error pages\nexport function getErrorStatusCode(error: unknown): number {\n  if (isConduitError(error)) {\n    return error.statusCode;\n  }\n  \n  return 500;\n}\n\n/**\n * Handle API errors and convert them to appropriate ConduitError types\n * This function is primarily used by the Admin SDK\n */\nexport function handleApiError(error: unknown, endpoint?: string, method?: string): never {\n  const context: Record<string, unknown> = {\n    endpoint,\n    method,\n  };\n\n  if (isHttpError(error)) {\n    const { status, data } = error.response;\n    const errorData = data as { error?: string; message?: string; details?: unknown } | null;\n    const baseMessage = errorData?.error || errorData?.message || error.message;\n    \n    // Enhanced error messages with endpoint information\n    const endpointInfo = endpoint && method ? ` (${method.toUpperCase()} ${endpoint})` : '';\n    const enhancedMessage = `${baseMessage}${endpointInfo}`;\n    \n    // Add details to context\n    context.details = errorData?.details || data;\n\n    switch (status) {\n      case 400:\n        throw new ValidationError(enhancedMessage, context);\n      case 401:\n        throw new AuthError(enhancedMessage, context);\n      case 402:\n        throw new InsufficientBalanceError(enhancedMessage, context);\n      case 403:\n        throw new AuthorizationError(enhancedMessage, context);\n      case 404:\n        throw new NotFoundError(enhancedMessage, context);\n      case 409:\n        throw new ConflictError(enhancedMessage, context);\n      case 429: {\n        const retryAfterHeader = error.response.headers['retry-after'];\n        const retryAfter = typeof retryAfterHeader === 'string' ? parseInt(retryAfterHeader, 10) : undefined;\n        throw new RateLimitError(enhancedMessage, retryAfter, context);\n      }\n      case 500:\n      case 502:\n      case 503:\n      case 504:\n        throw new ServerError(enhancedMessage, context);\n      default:\n        throw new ConduitError(enhancedMessage, status, `HTTP_${status}`, context);\n    }\n  } else if (isHttpNetworkError(error)) {\n    const endpointInfo = endpoint && method ? ` (${method.toUpperCase()} ${endpoint})` : '';\n    context.code = error.code;\n    \n    if (error.code === 'ECONNABORTED') {\n      throw new TimeoutError(`Request timeout${endpointInfo}`, context);\n    }\n    throw new NetworkError(`Network error: No response received${endpointInfo}`, context);\n  } else if (isErrorLike(error)) {\n    context.originalError = error;\n    throw new ConduitError(error.message, 500, 'UNKNOWN_ERROR', context);\n  } else {\n    context.originalError = error;\n    throw new ConduitError('Unknown error', 500, 'UNKNOWN_ERROR', context);\n  }\n}\n\n/**\n * Create an error from an ErrorResponse format\n * This function is primarily used by the Core SDK for legacy compatibility\n */\nexport interface ErrorResponseFormat {\n  error: {\n    message: string;\n    type?: string;\n    code?: string;\n    param?: string;\n  };\n}\n\nexport function createErrorFromResponse(response: ErrorResponseFormat, statusCode?: number): ConduitError {\n  const context: Record<string, unknown> = {\n    type: response.error.type,\n    param: response.error.param,\n  };\n  \n  return new ConduitError(\n    response.error.message,\n    statusCode || 500,\n    response.error.code || 'API_ERROR',\n    context\n  );\n}","/**\n * HTTP methods enum for type-safe API requests\n */\nexport enum HttpMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  HEAD = 'HEAD',\n  OPTIONS = 'OPTIONS'\n}\n\n/**\n * Type guard to check if a string is a valid HTTP method\n */\nexport function isHttpMethod(method: string): method is HttpMethod {\n  return Object.values(HttpMethod).includes(method as HttpMethod);\n}\n\n/**\n * Request options with proper typing\n */\nexport interface RequestOptions<TRequest = unknown> {\n  headers?: Record<string, string>;\n  signal?: AbortSignal;\n  timeout?: number;\n  body?: TRequest;\n  params?: Record<string, string | number | boolean>;\n  responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n}\n\n/**\n * Type-safe response interface\n */\nexport interface ApiResponse<T = unknown> {\n  data: T;\n  status: number;\n  statusText: string;\n  headers: Record<string, string>;\n}\n\n/**\n * Extended fetch options that include response type hints\n * This provides a cleaner way to handle different response types\n */\nexport interface ExtendedRequestInit extends RequestInit {\n  /**\n   * Hint for how to parse the response body\n   * This is not a standard fetch option but helps our client handle responses correctly\n   */\n  responseType?: 'json' | 'text' | 'blob' | 'arraybuffer' | 'stream';\n  \n  /**\n   * Custom timeout in milliseconds\n   */\n  timeout?: number;\n  \n  /**\n   * Request metadata for logging/debugging\n   */\n  metadata?: {\n    /** Operation name for debugging */\n    operation?: string;\n    /** Start time for performance tracking */\n    startTime?: number;\n    /** Request ID for tracing */\n    requestId?: string;\n  };\n}","import { ExtendedRequestInit } from './types';\n\n/**\n * Response parser that handles different response types based on content-type and hints\n */\nexport class ResponseParser {\n  /**\n   * Parses a fetch Response based on content type and response type hint\n   */\n  static async parse<T>(\n    response: Response,\n    responseType?: ExtendedRequestInit['responseType']\n  ): Promise<T> {\n    // Handle empty responses\n    const contentLength = response.headers.get('content-length');\n    if (contentLength === '0' || response.status === 204) {\n      return undefined as T;\n    }\n    \n    // Use explicit responseType if provided\n    if (responseType) {\n      switch (responseType) {\n        case 'json':\n          return await response.json() as T;\n        case 'text':\n          return await response.text() as T;\n        case 'blob':\n          return await response.blob() as T;\n        case 'arraybuffer':\n          return await response.arrayBuffer() as T;\n        case 'stream':\n          if (!response.body) {\n            throw new Error('Response body is not a stream');\n          }\n          return response.body as T;\n        default: {\n          // TypeScript exhaustiveness check\n          const _exhaustive: never = responseType;\n          throw new Error(`Unknown response type: ${String(_exhaustive)}`);\n        }\n      }\n    }\n    \n    // Auto-detect based on content-type\n    const contentType = response.headers.get('content-type') || '';\n    \n    if (contentType.includes('application/json')) {\n      return await response.json() as T;\n    }\n    \n    if (contentType.includes('text/') || contentType.includes('application/xml')) {\n      return await response.text() as T;\n    }\n    \n    if (contentType.includes('application/octet-stream') || \n        contentType.includes('image/') ||\n        contentType.includes('audio/') ||\n        contentType.includes('video/')) {\n      return await response.blob() as T;\n    }\n    \n    // Default to text for unknown content types\n    return await response.text() as T;\n  }\n  \n  /**\n   * Creates a clean RequestInit object without custom properties\n   */\n  static cleanRequestInit(init: ExtendedRequestInit): RequestInit {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { responseType, timeout, metadata, ...standardInit } = init;\n    return standardInit;\n  }\n}","/**\n * Common HTTP constants shared across all SDKs\n */\n\n/**\n * HTTP headers used across SDKs\n */\nexport const HTTP_HEADERS = {\n  CONTENT_TYPE: 'Content-Type',\n  AUTHORIZATION: 'Authorization',\n  X_API_KEY: 'X-API-Key',\n  USER_AGENT: 'User-Agent',\n  X_CORRELATION_ID: 'X-Correlation-Id',\n  RETRY_AFTER: 'Retry-After',\n  ACCEPT: 'Accept',\n  CACHE_CONTROL: 'Cache-Control'\n} as const;\n\nexport type HttpHeader = typeof HTTP_HEADERS[keyof typeof HTTP_HEADERS];\n\n/**\n * Content types\n */\nexport const CONTENT_TYPES = {\n  JSON: 'application/json',\n  FORM_DATA: 'multipart/form-data',\n  FORM_URLENCODED: 'application/x-www-form-urlencoded',\n  TEXT_PLAIN: 'text/plain',\n  TEXT_STREAM: 'text/event-stream'\n} as const;\n\nexport type ContentType = typeof CONTENT_TYPES[keyof typeof CONTENT_TYPES];\n\n/**\n * HTTP status codes\n */\nexport const HTTP_STATUS = {\n  // 2xx Success\n  OK: 200,\n  CREATED: 201,\n  NO_CONTENT: 204,\n  \n  // 4xx Client Errors\n  BAD_REQUEST: 400,\n  UNAUTHORIZED: 401,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  CONFLICT: 409,\n  TOO_MANY_REQUESTS: 429,\n  RATE_LIMITED: 429, // Alias for Core SDK compatibility\n  \n  // 5xx Server Errors\n  INTERNAL_SERVER_ERROR: 500,\n  INTERNAL_ERROR: 500, // Alias for Admin SDK compatibility\n  BAD_GATEWAY: 502,\n  SERVICE_UNAVAILABLE: 503,\n  GATEWAY_TIMEOUT: 504\n} as const;\n\nexport type HttpStatusCode = typeof HTTP_STATUS[keyof typeof HTTP_STATUS];\n\n/**\n * Error codes for network errors\n */\nexport const ERROR_CODES = {\n  CONNECTION_ABORTED: 'ECONNABORTED',\n  TIMEOUT: 'ETIMEDOUT',\n  CONNECTION_RESET: 'ECONNRESET',\n  NETWORK_UNREACHABLE: 'ENETUNREACH',\n  CONNECTION_REFUSED: 'ECONNREFUSED',\n  HOST_NOT_FOUND: 'ENOTFOUND'\n} as const;\n\nexport type ErrorCode = typeof ERROR_CODES[keyof typeof ERROR_CODES];\n\n/**\n * Default timeout values in milliseconds\n */\nexport const TIMEOUTS = {\n  DEFAULT_REQUEST: 60000, // 60 seconds\n  SHORT_REQUEST: 10000,   // 10 seconds\n  LONG_REQUEST: 300000,   // 5 minutes\n  STREAMING: 0            // No timeout for streaming\n} as const;\n\nexport type TimeoutValue = typeof TIMEOUTS[keyof typeof TIMEOUTS];\n\n/**\n * Retry configuration defaults\n */\nexport const RETRY_CONFIG = {\n  DEFAULT_MAX_RETRIES: 3,\n  INITIAL_DELAY: 1000,    // 1 second\n  MAX_DELAY: 30000,       // 30 seconds\n  BACKOFF_FACTOR: 2\n} as const;\n\nexport type RetryConfigValue = typeof RETRY_CONFIG[keyof typeof RETRY_CONFIG];","/**\n * SignalR hub connection states\n */\nexport enum HubConnectionState {\n  Disconnected = 'Disconnected',\n  Connecting = 'Connecting',\n  Connected = 'Connected',\n  Disconnecting = 'Disconnecting',\n  Reconnecting = 'Reconnecting',\n}\n\n/**\n * SignalR logging levels\n */\nexport enum SignalRLogLevel {\n  Trace = 0,\n  Debug = 1,\n  Information = 2,\n  Warning = 3,\n  Error = 4,\n  Critical = 5,\n  None = 6,\n}\n\n/**\n * HTTP transport types for SignalR\n */\nexport enum HttpTransportType {\n  None = 0,\n  WebSockets = 1,\n  ServerSentEvents = 2,\n  LongPolling = 4,\n}\n\n/**\n * Default transport configuration\n */\nexport const DefaultTransports = \n  HttpTransportType.WebSockets | \n  HttpTransportType.ServerSentEvents | \n  HttpTransportType.LongPolling;\n\n/**\n * Base SignalR connection options\n */\nexport interface SignalRConnectionOptions {\n  /**\n   * Logging level\n   */\n  logLevel?: SignalRLogLevel;\n  \n  /**\n   * Transport types to use\n   */\n  transport?: HttpTransportType;\n  \n  /**\n   * Headers to include with requests\n   */\n  headers?: Record<string, string>;\n  \n  /**\n   * Access token factory for authentication\n   */\n  accessTokenFactory?: () => string | Promise<string>;\n  \n  /**\n   * Close timeout in milliseconds\n   */\n  closeTimeout?: number;\n  \n  /**\n   * Reconnection delay intervals in milliseconds\n   */\n  reconnectionDelay?: number[];\n  \n  /**\n   * Server timeout in milliseconds\n   */\n  serverTimeout?: number;\n  \n  /**\n   * Keep-alive interval in milliseconds\n   */\n  keepAliveInterval?: number;\n}\n\n/**\n * Authentication configuration for SignalR connections\n */\nexport interface SignalRAuthConfig {\n  /**\n   * Authentication token or key\n   */\n  authToken: string;\n  \n  /**\n   * Authentication type (e.g., 'master', 'virtual')\n   */\n  authType: 'master' | 'virtual';\n  \n  /**\n   * Additional headers for authentication\n   */\n  additionalHeaders?: Record<string, string>;\n}\n\n/**\n * SignalR hub method argument types for type safety\n */\nexport type SignalRPrimitive = string | number | boolean | null | undefined;\nexport type SignalRValue = SignalRPrimitive | SignalRArgs | SignalRPrimitive[];\nexport interface SignalRArgs {\n  [key: string]: SignalRValue;\n}","import * as signalR from '@microsoft/signalr';\nimport { \n  HubConnectionState, \n  HttpTransportType,\n  DefaultTransports,\n  SignalRAuthConfig,\n  SignalRConnectionOptions,\n  SignalRLogLevel\n} from './types';\n\n/**\n * Base configuration for SignalR connections\n */\nexport interface BaseSignalRConfig {\n  /**\n   * Base URL for the SignalR hub\n   */\n  baseUrl: string;\n  \n  /**\n   * Authentication configuration\n   */\n  auth: SignalRAuthConfig;\n  \n  /**\n   * Connection options\n   */\n  options?: SignalRConnectionOptions;\n  \n  /**\n   * User agent string\n   */\n  userAgent?: string;\n}\n\n/**\n * Base class for SignalR hub connections with automatic reconnection and error handling.\n * This abstract class provides common functionality for both Admin and Core SDKs.\n */\nexport abstract class BaseSignalRConnection {\n  protected connection?: signalR.HubConnection;\n  protected readonly config: BaseSignalRConfig;\n  protected connectionReadyPromise: Promise<void>;\n  private connectionReadyResolve?: () => void;\n  private connectionReadyReject?: (error: Error) => void;\n  private disposed = false;\n\n  /**\n   * Gets the hub path for this connection type.\n   */\n  protected abstract get hubPath(): string;\n\n  constructor(config: BaseSignalRConfig) {\n    this.config = {\n      ...config,\n      baseUrl: config.baseUrl.replace(/\\/$/, '')\n    };\n    \n    // Initialize the connection ready promise\n    this.connectionReadyPromise = new Promise((resolve, reject) => {\n      this.connectionReadyResolve = resolve;\n      this.connectionReadyReject = reject;\n    });\n  }\n\n  /**\n   * Gets whether the connection is established and ready for use.\n   */\n  get isConnected(): boolean {\n    return this.connection?.state === signalR.HubConnectionState.Connected;\n  }\n\n  /**\n   * Gets the current connection state.\n   */\n  get state(): HubConnectionState {\n    if (!this.connection) {\n      return HubConnectionState.Disconnected;\n    }\n\n    switch (this.connection.state) {\n      case signalR.HubConnectionState.Connected:\n        return HubConnectionState.Connected;\n      case signalR.HubConnectionState.Connecting:\n        return HubConnectionState.Connecting;\n      case signalR.HubConnectionState.Disconnected:\n        return HubConnectionState.Disconnected;\n      case signalR.HubConnectionState.Disconnecting:\n        return HubConnectionState.Disconnecting;\n      case signalR.HubConnectionState.Reconnecting:\n        return HubConnectionState.Reconnecting;\n      default:\n        return HubConnectionState.Disconnected;\n    }\n  }\n\n  /**\n   * Event handlers\n   */\n  onConnected?: () => Promise<void>;\n  onDisconnected?: (error?: Error) => Promise<void>;\n  onReconnecting?: (error?: Error) => Promise<void>;\n  onReconnected?: (connectionId?: string) => Promise<void>;\n\n  /**\n   * Establishes the SignalR connection.\n   */\n  protected async getConnection(): Promise<signalR.HubConnection> {\n    if (this.connection) {\n      return this.connection;\n    }\n\n    const hubUrl = `${this.config.baseUrl}${this.hubPath}`;\n    \n    // Build connection options\n    const connectionOptions: signalR.IHttpConnectionOptions = {\n      accessTokenFactory: this.config.options?.accessTokenFactory || (() => this.config.auth.authToken),\n      transport: this.mapTransportType(this.config.options?.transport || DefaultTransports),\n      headers: this.buildHeaders(),\n      withCredentials: false\n    };\n    \n    // Build the connection\n    const builder = new signalR.HubConnectionBuilder()\n      .withUrl(hubUrl, connectionOptions)\n      .withAutomaticReconnect(this.config.options?.reconnectionDelay || [0, 2000, 10000, 30000]);\n\n    // Configure server timeout and keep-alive if specified\n    if (this.config.options?.serverTimeout) {\n      builder.withServerTimeout(this.config.options.serverTimeout);\n    }\n    \n    if (this.config.options?.keepAliveInterval) {\n      builder.withKeepAliveInterval(this.config.options.keepAliveInterval);\n    }\n\n    // Configure logging\n    const logLevel = this.mapLogLevel(this.config.options?.logLevel || SignalRLogLevel.Information);\n    builder.configureLogging(logLevel);\n\n    this.connection = builder.build();\n\n    // Set up event handlers\n    this.connection.onclose(async (error) => {\n      if (this.onDisconnected) {\n        await this.onDisconnected(error);\n      }\n    });\n\n    this.connection.onreconnecting(async (error) => {\n      if (this.onReconnecting) {\n        await this.onReconnecting(error);\n      }\n    });\n\n    this.connection.onreconnected(async (connectionId) => {\n      if (this.onReconnected) {\n        await this.onReconnected(connectionId);\n      }\n    });\n\n    // Configure hub-specific handlers\n    this.configureHubHandlers(this.connection);\n\n    try {\n      await this.connection.start();\n      \n      if (this.connectionReadyResolve) {\n        this.connectionReadyResolve();\n      }\n      \n      if (this.onConnected) {\n        await this.onConnected();\n      }\n    } catch (error) {\n      if (this.connectionReadyReject) {\n        this.connectionReadyReject(error as Error);\n      }\n      throw error;\n    }\n\n    return this.connection;\n  }\n\n  /**\n   * Configures hub-specific event handlers. Override in derived classes.\n   */\n  protected abstract configureHubHandlers(connection: signalR.HubConnection): void;\n\n  /**\n   * Maps transport type enum to SignalR transport.\n   */\n  protected mapTransportType(transport: HttpTransportType): signalR.HttpTransportType {\n    let result = signalR.HttpTransportType.None;\n    \n    if (transport & HttpTransportType.WebSockets) {\n      result |= signalR.HttpTransportType.WebSockets;\n    }\n    if (transport & HttpTransportType.ServerSentEvents) {\n      result |= signalR.HttpTransportType.ServerSentEvents;\n    }\n    if (transport & HttpTransportType.LongPolling) {\n      result |= signalR.HttpTransportType.LongPolling;\n    }\n    \n    return result;\n  }\n\n  /**\n   * Maps log level enum to SignalR log level.\n   */\n  protected mapLogLevel(level: SignalRLogLevel): signalR.LogLevel {\n    switch (level) {\n      case SignalRLogLevel.Trace:\n        return signalR.LogLevel.Trace;\n      case SignalRLogLevel.Debug:\n        return signalR.LogLevel.Debug;\n      case SignalRLogLevel.Information:\n        return signalR.LogLevel.Information;\n      case SignalRLogLevel.Warning:\n        return signalR.LogLevel.Warning;\n      case SignalRLogLevel.Error:\n        return signalR.LogLevel.Error;\n      case SignalRLogLevel.Critical:\n        return signalR.LogLevel.Critical;\n      case SignalRLogLevel.None:\n        return signalR.LogLevel.None;\n      default:\n        return signalR.LogLevel.Information;\n    }\n  }\n\n  /**\n   * Builds headers for the connection based on configuration.\n   */\n  private buildHeaders(): Record<string, string> {\n    const headers: Record<string, string> = {\n      'User-Agent': this.config.userAgent || 'Conduit-Node-Client/1.0.0',\n      ...this.config.options?.headers\n    };\n\n    // Add authentication-specific headers\n    if (this.config.auth.authType === 'master' && this.config.auth.additionalHeaders) {\n      Object.assign(headers, this.config.auth.additionalHeaders);\n    }\n\n    return headers;\n  }\n\n  /**\n   * Waits for the connection to be ready.\n   */\n  public async waitForReady(): Promise<void> {\n    return this.connectionReadyPromise;\n  }\n\n  /**\n   * Invokes a method on the hub with proper error handling.\n   */\n  protected async invoke<T = void>(methodName: string, ...args: unknown[]): Promise<T> {\n    if (this.disposed) {\n      throw new Error('Connection has been disposed');\n    }\n\n    const connection = await this.getConnection();\n    \n    try {\n      return await connection.invoke<T>(methodName, ...args);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      throw new Error(`SignalR invoke error for ${methodName}: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Sends a message to the hub without expecting a response.\n   */\n  protected async send(methodName: string, ...args: unknown[]): Promise<void> {\n    if (this.disposed) {\n      throw new Error('Connection has been disposed');\n    }\n\n    const connection = await this.getConnection();\n    \n    try {\n      await connection.send(methodName, ...args);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      throw new Error(`SignalR send error for ${methodName}: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Disconnects the SignalR connection.\n   */\n  public async disconnect(): Promise<void> {\n    if (this.connection && this.connection.state !== signalR.HubConnectionState.Disconnected) {\n      await this.connection.stop();\n      this.connection = undefined;\n      \n      // Reset the connection ready promise\n      this.connectionReadyPromise = new Promise((resolve, reject) => {\n        this.connectionReadyResolve = resolve;\n        this.connectionReadyReject = reject;\n      });\n    }\n  }\n\n  /**\n   * Disposes of the connection and cleans up resources.\n   */\n  public async dispose(): Promise<void> {\n    this.disposed = true;\n    await this.disconnect();\n    this.connectionReadyResolve = undefined;\n    this.connectionReadyReject = undefined;\n  }\n}","/**\n * Logger interface for client logging\n */\nexport interface Logger {\n  debug(message: string, ...args: unknown[]): void;\n  info(message: string, ...args: unknown[]): void;\n  warn(message: string, ...args: unknown[]): void;\n  error(message: string, ...args: unknown[]): void;\n}\n\n/**\n * Cache provider interface for client-side caching\n */\nexport interface CacheProvider {\n  get<T>(key: string): Promise<T | null>;\n  set<T>(key: string, value: T, ttl?: number): Promise<void>;\n  delete(key: string): Promise<void>;\n  clear(): Promise<void>;\n}\n\n/**\n * Base retry configuration interface\n * \n * Note: The Admin and Core SDKs have different retry strategies:\n * - Admin SDK uses simple fixed delay retry\n * - Core SDK uses exponential backoff\n * \n * This base interface supports both patterns.\n */\nexport interface RetryConfig {\n  /**\n   * Maximum number of retry attempts\n   */\n  maxRetries: number;\n  \n  /**\n   * For Admin SDK: Fixed delay between retries in milliseconds\n   * For Core SDK: Initial delay for exponential backoff\n   */\n  retryDelay?: number;\n  \n  /**\n   * For Core SDK: Initial delay for exponential backoff\n   */\n  initialDelay?: number;\n  \n  /**\n   * For Core SDK: Maximum delay between retries\n   */\n  maxDelay?: number;\n  \n  /**\n   * For Core SDK: Backoff multiplication factor\n   */\n  factor?: number;\n  \n  /**\n   * Custom retry condition function\n   */\n  retryCondition?: (error: unknown) => boolean;\n}\n\n/**\n * HTTP error class\n */\nexport class HttpError extends Error {\n  public code?: string;\n  public response?: {\n    status: number;\n    data: unknown;\n    headers: Record<string, string>;\n  };\n  public request?: unknown;\n  public config?: {\n    url?: string;\n    method?: string;\n    _retry?: number;\n  };\n\n  constructor(message: string, code?: string) {\n    super(message);\n    this.name = 'HttpError';\n    this.code = code;\n  }\n}\n\n/**\n * Request configuration information\n */\nexport interface RequestConfigInfo {\n  method: string;\n  url: string;\n  headers: Record<string, string>;\n  data?: unknown;\n  params?: Record<string, unknown>;\n}\n\n/**\n * Response information\n */\nexport interface ResponseInfo {\n  status: number;\n  statusText: string;\n  headers: Record<string, string>;\n  data: unknown;\n  config: RequestConfigInfo;\n}\n\n/**\n * Base client lifecycle callbacks\n */\nexport interface ClientLifecycleCallbacks {\n  /**\n   * Callback invoked on any error\n   */\n  onError?: (error: Error) => void;\n  \n  /**\n   * Callback invoked before each request\n   */\n  onRequest?: (config: RequestConfigInfo) => void | Promise<void>;\n  \n  /**\n   * Callback invoked after each response\n   */\n  onResponse?: (response: ResponseInfo) => void | Promise<void>;\n}\n\n/**\n * Base client configuration options\n */\nexport interface BaseClientOptions extends ClientLifecycleCallbacks {\n  /**\n   * Request timeout in milliseconds\n   */\n  timeout?: number;\n  \n  /**\n   * Retry configuration\n   */\n  retries?: number | RetryConfig;\n  \n  /**\n   * Logger instance for client logging\n   */\n  logger?: Logger;\n  \n  /**\n   * Cache provider for response caching\n   */\n  cache?: CacheProvider;\n  \n  /**\n   * Custom headers to include with all requests\n   */\n  headers?: Record<string, string>;\n  \n  /**\n   * Custom retry delays in milliseconds (overrides retry config)\n   * @default [1000, 2000, 4000, 8000, 16000]\n   */\n  retryDelay?: number[];\n  \n  /**\n   * Custom function to validate response status\n   */\n  validateStatus?: (status: number) => boolean;\n  \n  /**\n   * Enable debug mode\n   */\n  debug?: boolean;\n}"],"mappings":"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","names":["ModelCapability","HttpMethod","HubConnectionState","SignalRLogLevel","HttpTransportType"]}