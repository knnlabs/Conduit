services:
  postgres:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: conduit
      POSTGRES_PASSWORD: conduitpass
      POSTGRES_DB: conduitdb
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U conduit -d conduitdb"]
      interval: 5s
      timeout: 5s
      retries: 5
      
  redis:
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      
  rabbitmq:
    build: 
      context: ./docker/rabbitmq
      dockerfile: Dockerfile
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: conduit
      RABBITMQ_DEFAULT_PASS: conduitpass
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: ConduitLLM.Http/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://conduit:conduitpass@postgres:5432/conduitdb
      ASPNETCORE_ENVIRONMENT: Production
      # Using new REDIS_URL format (old variables still work for backward compatibility)
      REDIS_URL: "redis://redis:6379"
      CONDUIT_REDIS_INSTANCE_NAME: "conduit:"
      Conduit__PerformanceTracking__Enabled: "true"
      Conduit__PerformanceTracking__IncludeInResponse: "true"
      Conduit__PerformanceTracking__TrackStreamingMetrics: "true"
      Logging__LogLevel__Default: "Information"
      Logging__LogLevel__ConduitLLM: "Information"
      Logging__LogLevel__ConduitLLM__Providers: "Debug"
      Logging__LogLevel__ConduitLLM__Providers__MiniMaxClient: "Debug"
      # Configure the public base URL for media storage
      CONDUITLLM__MEDIA_BASE_URL: http://localhost:5000
      # S3/R2 configuration (required for production)
      CONDUIT_MEDIA_STORAGE_TYPE: "${CONDUIT_MEDIA_STORAGE_TYPE:-S3}"
      CONDUIT_S3_ENDPOINT: "${CONDUIT_S3_ENDPOINT}"
      CONDUIT_S3_ACCESS_KEY: "${CONDUIT_S3_ACCESS_KEY}"
      CONDUIT_S3_SECRET_KEY: "${CONDUIT_S3_SECRET_KEY}"
      CONDUIT_S3_BUCKET_NAME: "${CONDUIT_S3_BUCKET_NAME:-conduit-media}"
      CONDUIT_S3_REGION: "${CONDUIT_S3_REGION:-us-east-1}"
      # RabbitMQ configuration
      CONDUITLLM__RABBITMQ__HOST: rabbitmq
      CONDUITLLM__RABBITMQ__PORT: 5672
      CONDUITLLM__RABBITMQ__USERNAME: conduit
      CONDUITLLM__RABBITMQ__PASSWORD: conduitpass
      CONDUITLLM__RABBITMQ__VHOST: /
      CONDUITLLM__RABBITMQ__PREFETCHCOUNT: 10
      CONDUITLLM__RABBITMQ__PARTITIONCOUNT: 10
      # Batch Cache Invalidation configuration
      CacheInvalidation__BatchingEnabled: "true"
      CacheInvalidation__BatchWindow: "00:00:00.100"  # 100ms
      CacheInvalidation__MaxBatchSize: "100"
      CacheInvalidation__EnableCoalescing: "true"
      # Batch Spending configuration
      BatchSpending__FlushIntervalSeconds: "30"
      BatchSpending__MinimumIntervalSeconds: "1"
      BatchSpending__MaximumIntervalSeconds: "21600"  # 6 hours
      BatchSpending__RedisTtlHours: "24"
      # Health monitoring configuration - API endpoint checks
      HealthMonitoring__ApiEndpoints__0__Name: AdminAPI
      HealthMonitoring__ApiEndpoints__0__Url: http://admin:8080/health
      HealthMonitoring__ApiEndpoints__0__TimeoutMs: 5000
      HealthMonitoring__ApiEndpoints__0__WarningThresholdMs: 1000
    ports:
      - "5000:8080"
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s

  admin:
    build:
      context: .
      dockerfile: ConduitLLM.Admin/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://conduit:conduitpass@postgres:5432/conduitdb
      ASPNETCORE_ENVIRONMENT: Production
      # API-to-API authentication key for backend services
      CONDUIT_API_TO_API_BACKEND_AUTH_KEY: alpha
      # Redis cache configuration - using new REDIS_URL format
      REDIS_URL: "redis://redis:6379"
      CONDUIT_REDIS_INSTANCE_NAME: "conduit:"
      AdminApi__AllowedOrigins__0: http://localhost:3000
      # RabbitMQ configuration
      CONDUITLLM__RABBITMQ__HOST: rabbitmq
      CONDUITLLM__RABBITMQ__PORT: 5672
      CONDUITLLM__RABBITMQ__USERNAME: conduit
      CONDUITLLM__RABBITMQ__PASSWORD: conduitpass
      CONDUITLLM__RABBITMQ__VHOST: /
      # Batch Cache Invalidation configuration
      CacheInvalidation__BatchingEnabled: "true"
      CacheInvalidation__BatchWindow: "00:00:00.100"  # 100ms
      CacheInvalidation__MaxBatchSize: "100"
      CacheInvalidation__EnableCoalescing: "true"
      # Batch Spending configuration
      BatchSpending__FlushIntervalSeconds: "30"
      BatchSpending__MinimumIntervalSeconds: "1"
      BatchSpending__MaximumIntervalSeconds: "21600"  # 6 hours
      BatchSpending__RedisTtlHours: "24"
      # S3/R2 configuration (required for production)
      CONDUIT_MEDIA_STORAGE_TYPE: "${CONDUIT_MEDIA_STORAGE_TYPE:-S3}"
      CONDUIT_S3_ENDPOINT: "${CONDUIT_S3_ENDPOINT}"
      CONDUIT_S3_ACCESS_KEY: "${CONDUIT_S3_ACCESS_KEY}"
      CONDUIT_S3_SECRET_KEY: "${CONDUIT_S3_SECRET_KEY}"
      CONDUIT_S3_BUCKET_NAME: "${CONDUIT_S3_BUCKET_NAME:-conduit-media}"
      CONDUIT_S3_REGION: "${CONDUIT_S3_REGION:-us-east-1}"
      # Disable IP banning for development
      CONDUIT_ADMIN_IP_BANNING_ENABLED: "false"
    ports:
      - "5002:8080"
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s

  webui:
    build:
      context: .
      dockerfile: ConduitLLM.WebUI/Dockerfile
    depends_on:
      admin:
        condition: service_healthy
      api:
        condition: service_healthy
    environment:
      # Next.js specific environment variables
      NODE_ENV: production
      PORT: 3000
      # Server-side environment variables
      CONDUIT_API_TO_API_BACKEND_AUTH_KEY: alpha
      CONDUIT_API_BASE_URL: http://api:8080
      CONDUIT_ADMIN_API_BASE_URL: http://admin:8080
      # External URLs for SignalR connections from browser
      CONDUIT_API_EXTERNAL_URL: http://localhost:5000
      CONDUIT_ADMIN_API_EXTERNAL_URL: http://localhost:5002
      # Clerk authentication for WebUI access (Required)
      # Get these values from your Clerk dashboard at https://dashboard.clerk.com
      # Users must have siteadmin: true in their public metadata to access the WebUI
      
      # Optional: Configure a redirect URL for users without admin access
      # If set, users without proper permissions will be redirected to this URL
      # instead of seeing the access denied page
      # Example: ACCESS_DENIED_REDIRECT: "https://your-main-site.com"
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: "pk_test_cHJlY2lzZS1yaW5ndGFpbC0zMy5jbGVyay5hY2NvdW50cy5kZXYk"
      CLERK_SECRET_KEY: "sk_test_oOI6FRt1EhRGaCVUc1zJVyWCNyqf3w1DSJnLZlxEQK"
    ports:
      - "3000:3000"
    restart: on-failure
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

volumes:
  pgdata:
  redis-data:
  rabbitmq-data:
