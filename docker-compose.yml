# Docker Compose configuration for Conduit LLM Platform (development)
# --------------------------------------------------------------
# This stack provides all required infrastructure services:
#  - PostgreSQL for persistent relational storage
#  - Redis for caching and message queues (via BullMQ, etc.)
#  - RabbitMQ for event streaming / background tasks
#  - `api` : ASP.NET Core HTTP service (LLM gateway)
#  - `admin`: ASP.NET Core HTTP service (Web Admin API)
# Additional WebUI (Next.js) is run locally with `npm run dev` and talks to `admin`.
#
# ----------------------------
# AUTHENTICATION MODES
# ----------------------------
# WebUI supports two mutually exclusive auth modes controlled by environment:
#   CONDUIT_AUTH_TYPE=password   # (default) prompts for CONDUIT_ADMIN_LOGIN_PASSWORD
#   CONDUIT_AUTH_TYPE=clerk      # use Clerk cloud auth
# When using Clerk auth you must also provide:
#   CLERK_PUBLISHABLE_KEY and CLERK_SECRET_KEY (plus NEXT_PUBLIC_CONDUIT_AUTH_TYPE)
# Those are usually exported in your shell before running `npm run dev` for WebUI,
# not inside this compose file. They’re documented here for reference.
services:
  postgres:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: conduit
      POSTGRES_PASSWORD: conduitpass
      POSTGRES_DB: conduitdb
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U conduit -d conduitdb"]
      interval: 5s
      timeout: 5s
      retries: 5
      
  # --------------------------------------------------------------
  # Redis – used for caching and lightweight pub/sub queues.
  redis:
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      
  # --------------------------------------------------------------
  # RabbitMQ – durable message broker for background jobs & events.
  rabbitmq:
    build: 
      context: ./docker/rabbitmq
      dockerfile: Dockerfile
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: conduit
      RABBITMQ_DEFAULT_PASS: conduitpass
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # --------------------------------------------------------------
  # Conduit LLM API – main gateway that interfaces with model providers
  # and performs inference / media storage.
  api:
    build:
      context: .
      dockerfile: ConduitLLM.Http/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://conduit:conduitpass@postgres:5432/conduitdb
      ASPNETCORE_ENVIRONMENT: Production
      # Using new REDIS_URL format (old variables still work for backward compatibility)
      REDIS_URL: "redis://redis:6379"
      CONDUIT_REDIS_INSTANCE_NAME: "conduit:"
      Conduit__PerformanceTracking__Enabled: "true"
      Conduit__PerformanceTracking__IncludeInResponse: "true"
      Conduit__PerformanceTracking__TrackStreamingMetrics: "true"
      Logging__LogLevel__Default: "Information"
      Logging__LogLevel__ConduitLLM: "Information"
      Logging__LogLevel__ConduitLLM__Providers: "Debug"
      Logging__LogLevel__ConduitLLM__Providers__MiniMaxClient: "Debug"
      # Configure the public base URL for media storage
      CONDUITLLM__MEDIA_BASE_URL: http://localhost:5000
      # RabbitMQ configuration
      CONDUITLLM__RABBITMQ__HOST: rabbitmq
      CONDUITLLM__RABBITMQ__PORT: 5672
      CONDUITLLM__RABBITMQ__USERNAME: conduit
      CONDUITLLM__RABBITMQ__PASSWORD: conduitpass
      CONDUITLLM__RABBITMQ__VHOST: /
      CONDUITLLM__RABBITMQ__PREFETCHCOUNT: 10
      CONDUITLLM__RABBITMQ__PARTITIONCOUNT: 10
    ports:
      - "5000:8080"
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s

  # --------------------------------------------------------------
  # Admin API – management endpoints consumed by WebUI & automation.
  admin:
    build:
      context: .
      dockerfile: ConduitLLM.Admin/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://conduit:conduitpass@postgres:5432/conduitdb
      ASPNETCORE_ENVIRONMENT: Production
      # API-to-API authentication key for backend services
      CONDUIT_API_TO_API_BACKEND_AUTH_KEY: alpha  # Shared secret used by WebUI → Admin API
      # ----------------------------
      # Optional WebUI authentication mode overrides (choose ONE)
      # --- Password auth (default) ---
      # CONDUIT_AUTH_TYPE: password
      # CONDUIT_ADMIN_LOGIN_PASSWORD: "change-me"
      # --- Clerk auth ---
      # CONDUIT_AUTH_TYPE: clerk
      # CLERK_PUBLISHABLE_KEY: "pk_test_xxx"
      # CLERK_SECRET_KEY: "sk_test_xxx"
      # Redis cache configuration - using new REDIS_URL format
      REDIS_URL: "redis://redis:6379"
      CONDUIT_REDIS_INSTANCE_NAME: "conduit:"
      AdminApi__AllowedOrigins__0: http://localhost:3000
      AdminApi__AllowedOrigins__1: http://localhost:3001
      AdminApi__AllowedOrigins__2: http://localhost:5001
      # RabbitMQ configuration
      CONDUITLLM__RABBITMQ__HOST: rabbitmq
      CONDUITLLM__RABBITMQ__PORT: 5672
      CONDUITLLM__RABBITMQ__USERNAME: conduit
      CONDUITLLM__RABBITMQ__PASSWORD: conduitpass
      CONDUITLLM__RABBITMQ__VHOST: /
      # Disable IP banning for development
      CONDUIT_ADMIN_IP_BANNING_ENABLED: "false"
    ports:
      - "5002:8080"
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s

  webui:
    build:
      context: .
      dockerfile: ConduitLLM.WebUI/Dockerfile
    depends_on:
      admin:
        condition: service_healthy
      api:
        condition: service_healthy
    environment:
      # Next.js specific environment variables
      NODE_ENV: production
      PORT: 3000
      # Public environment variables (accessible in browser)
      NEXT_PUBLIC_CONDUIT_CORE_API_URL: http://localhost:5000
      # Admin API is accessed through proxy routes, not directly
      # Server-side environment variables
      CONDUIT_API_TO_API_BACKEND_AUTH_KEY: alpha
      CONDUIT_API_BASE_URL: http://api:8080
      CONDUIT_ADMIN_API_BASE_URL: http://admin:8080
      # External URLs for SignalR connections from browser
      CONDUIT_API_EXTERNAL_URL: http://localhost:5000
      CONDUIT_ADMIN_API_EXTERNAL_URL: http://localhost:5002
      # Session encryption key
      SESSION_SECRET: your-session-secret-key-change-in-production
      # Redis configuration for session storage
      REDIS_URL: "redis://redis:6379"
      REDIS_SESSION_PREFIX: "conduit:session:"
      # Admin login password for human users to access WebUI dashboard
      CONDUIT_ADMIN_LOGIN_PASSWORD: alpha
    ports:
      - "3000:3000"
    restart: on-failure
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

volumes:
  pgdata:
  redis-data:
  rabbitmq-data:
